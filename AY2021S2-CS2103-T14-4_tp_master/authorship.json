[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"mrweikiat"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-T14-4/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"mrweikiat"},"content":"* ## **Instructions**"},{"lineNumber":6,"author":{"gitId":"mrweikiat"},"content":"  1. Ensure that you have Java 11 or above installed in your computer"},{"lineNumber":7,"author":{"gitId":"mrweikiat"},"content":"  2. Download the latest [App moduleName] from [hyperlink]"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":"  3. Copy the file download location to the folder that you want to use as the home folder for your [App moduleName]"},{"lineNumber":9,"author":{"gitId":"mrweikiat"},"content":"  4. Double click on the file to start the app"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"  5. Once the app is started, you can begin by typing certain commands in the command box to execute certain actions. E.g: typing help and pressing enter will open the help windows for guidance on some command executions."},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"      * add module : mc/CS2103 mc/Software Engineering tn/iP Level 10 d/ Feb 15 t/ 1800 will add this module to the list"},{"lineNumber":12,"author":{"gitId":"mrweikiat"},"content":"      * delete module [num list] : delete 3 will delete 3rd task from the listlist : will shown all module tasks"},{"lineNumber":13,"author":{"gitId":"mrweikiat"},"content":"      * mark as done [num list] : mark as done 3 will mark 3rd task from the list as done"},{"lineNumber":14,"author":{"gitId":"mrweikiat"},"content":"      * sort : sort d/ march will sort and show all march tasks on the top of the list and then Jan, Feb … Dec"},{"lineNumber":15,"author":{"gitId":"mrweikiat"},"content":"      * edit task [num list] : edit 3 will allow user to edit the 3rd module task from the list"},{"lineNumber":16,"author":{"gitId":"mrweikiat"},"content":"      * add notes [num list] : add notes 3 will add notes to the 3rd module task from the list"},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"      * Priority tag HIGH/MEDIUM/LOW : pt/HIGH 3 will assign a high priority to the 3rd task on the list. "},{"lineNumber":18,"author":{"gitId":"mrweikiat"},"content":"      * Time-based alert : alert will show a list of immediate tasks that will be due next week"},{"lineNumber":19,"author":{"gitId":"mrweikiat"},"content":"      * clear : will delete all module tasks on the list"},{"lineNumber":20,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":21,"author":{"gitId":"mrweikiat"},"content":"6. Refer to the features for each individual commands for more details "},{"lineNumber":22,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":23,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":24,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":25,"author":{"gitId":"mrweikiat"},"content":"## **Commands**"},{"lineNumber":26,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":27,"author":{"gitId":"mrweikiat"},"content":"1. ### Delete Task : *delete*"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"  * Format delete[index]"},{"lineNumber":29,"author":{"gitId":"mrweikiat"},"content":"    1. eg: delete 3 will delete the 3rd task on the list"},{"lineNumber":30,"author":{"gitId":"mrweikiat"},"content":"    2. Index to be inserted must be positive, and"},{"lineNumber":31,"author":{"gitId":"mrweikiat"},"content":"    3. Index must be available on the list else an error will be thrown"},{"lineNumber":32,"author":{"gitId":"mrweikiat"},"content":"    4. Example: Using the command list to show all tasks, the user wants to delete the 2nd task. User use command delete 2 to delete the 2nd task from the list "},{"lineNumber":33,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":35,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"2. ### Priority tag: *pt/Priority*"},{"lineNumber":37,"author":{"gitId":"mrweikiat"},"content":"  * Format: pt/HIGH 3"},{"lineNumber":38,"author":{"gitId":"mrweikiat"},"content":"    1. Will assignment a priority of HIGH to the 3rd task on the list"},{"lineNumber":39,"author":{"gitId":"mrweikiat"},"content":"    2. Priority levels LOW -\u003e MEDIUM -\u003e HIGH"},{"lineNumber":40,"author":{"gitId":"mrweikiat"},"content":"    3. Index inserted must be positive, and "},{"lineNumber":41,"author":{"gitId":"mrweikiat"},"content":"    4. Index must be available on the list else an error will be thrown"},{"lineNumber":42,"author":{"gitId":"mrweikiat"},"content":"    5. Priority tag must be either HIGH, MEDIUM or LOW."},{"lineNumber":43,"author":{"gitId":"mrweikiat"},"content":"    6. Example: list to show all tasks on the list followed by pt/LOW 2 to assign a priority tag of LOW to the 2nd task on the list followed by sort LOW/low to view the list according to priority level "},{"lineNumber":44,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":45,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":46,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":47,"author":{"gitId":"mrweikiat"},"content":"3. ### Module moduleName: *mn/*"},{"lineNumber":48,"author":{"gitId":"mrweikiat"},"content":"  * Format: mn/ {module moduleName}"},{"lineNumber":49,"author":{"gitId":"mrweikiat"},"content":"    1. Sets the module moduleName of a task"},{"lineNumber":50,"author":{"gitId":"mrweikiat"},"content":"    2. Example: mn/Software Engineering. Sets the module moduleName of the task to “Software Engineering”"},{"lineNumber":51,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":52,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":53,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":54,"author":{"gitId":"mrweikiat"},"content":"4. ### Module code: *mc/*"},{"lineNumber":55,"author":{"gitId":"mrweikiat"},"content":"  * Format: mc/ {module code}"},{"lineNumber":56,"author":{"gitId":"mrweikiat"},"content":"    1. Sets the module code of a task"},{"lineNumber":57,"author":{"gitId":"mrweikiat"},"content":"    2. Module code must be a CS module code "},{"lineNumber":58,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":59,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":60,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":61,"author":{"gitId":"mrweikiat"},"content":"5. ### Edit Task: *edit*"},{"lineNumber":62,"author":{"gitId":"mrweikiat"},"content":"  * Format: edit INDEX [tn/TASK NAME] [mn/MODULE NAME] [mc/MODULE CODE] [d/ DEADLINE DATE] [t/DEADLINE TIME] [n/NOTES] [pt/PRIORITY]"},{"lineNumber":63,"author":{"gitId":"mrweikiat"},"content":"    1. Edits the task at the specified index."},{"lineNumber":64,"author":{"gitId":"mrweikiat"},"content":"    2. The index must be a positive integer"},{"lineNumber":65,"author":{"gitId":"mrweikiat"},"content":"    3. The index must be on the list else an error will be thrown"},{"lineNumber":66,"author":{"gitId":"mrweikiat"},"content":"    4. At least one of the optional fields must be provided"},{"lineNumber":67,"author":{"gitId":"mrweikiat"},"content":"    5. Existing values will be updated to the input values"},{"lineNumber":68,"author":{"gitId":"mrweikiat"},"content":"    6. Example: edit 1 mn/Software Engineering mc/CS2103. Edits the module moduleName and module code of the task at index 1 to be “Software Engineering” and “CS2103” respectively."},{"lineNumber":69,"author":{"gitId":"mrweikiat"},"content":"    7. Example: edit 2 tn/Finals n/Open Book. Edits the task moduleName and notes of the task at index 2 to be “Finals” and “Open Book” respectively."},{"lineNumber":70,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":71,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":72,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":73,"author":{"gitId":"mrweikiat"},"content":"6. ### Clear Application: *clear* "},{"lineNumber":74,"author":{"gitId":"mrweikiat"},"content":"  * Clears all tasks from the application"},{"lineNumber":75,"author":{"gitId":"mrweikiat"},"content":"  * Format: clear"},{"lineNumber":76,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":77,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":78,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":79,"author":{"gitId":"mrweikiat"},"content":"7. ### Locating tasks by moduleName: *find*"},{"lineNumber":80,"author":{"gitId":"mrweikiat"},"content":"  * Find tasks whose task moduleName contains any of the given words"},{"lineNumber":81,"author":{"gitId":"mrweikiat"},"content":"  * Format: find KEYWORD[MORE_KEYWORDS]"},{"lineNumber":82,"author":{"gitId":"mrweikiat"},"content":"    1. The search is case-insensitive. e.g Assignment will match assignment"},{"lineNumber":83,"author":{"gitId":"mrweikiat"},"content":"    2. The order of the keywords does not matter. e.g. programming modular will match modular programming"},{"lineNumber":84,"author":{"gitId":"mrweikiat"},"content":"    3. Only the task moduleName is searched."},{"lineNumber":85,"author":{"gitId":"mrweikiat"},"content":"    4. Only full words will be matched e.g. Java will not match Javascript"},{"lineNumber":86,"author":{"gitId":"mrweikiat"},"content":"    5. Persons matching at least one keyword will be returned (i.e. OR search). e.g. SQL Python will return SQL Quiz, Python Assignment"},{"lineNumber":87,"author":{"gitId":"mrweikiat"},"content":"    6. Example: find C++ will return C++ project and C++ graded quiz"},{"lineNumber":88,"author":{"gitId":"mrweikiat"},"content":"    7. find assignment exam will return Final Assignment, Midterm exam"},{"lineNumber":89,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":90,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":91,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":92,"author":{"gitId":"mrweikiat"},"content":"8. ### Sort tasks: *sort*"},{"lineNumber":93,"author":{"gitId":"mrweikiat"},"content":"  * Sort tasks according to the specified parameter"},{"lineNumber":94,"author":{"gitId":"mrweikiat"},"content":"  * Format: sort dt/ OR mc/ OR pt/"},{"lineNumber":95,"author":{"gitId":"mrweikiat"},"content":"    1. Task can be sorted according to these three parameters: date \u0026 time (/dt), module code (mc/) or priority tag (pt/)."},{"lineNumber":96,"author":{"gitId":"mrweikiat"},"content":"    2. For date \u0026 time, the tasks will be sorted in ascending order, with the earliest deadline placed first."},{"lineNumber":97,"author":{"gitId":"mrweikiat"},"content":"    3. For module code, the tasks will be sorted according to the lexicographical ordering of the module codes."},{"lineNumber":98,"author":{"gitId":"mrweikiat"},"content":"    4. For priority tag, the tasks will be sorted according to this order: HIGH \u003e MEDIUM \u003e LOW. Tasks with high priority will then be shown at the top of the list."},{"lineNumber":99,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":100,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":101,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":102,"author":{"gitId":"mrweikiat"},"content":"9. ### Add notes to tasks: *notes*"},{"lineNumber":103,"author":{"gitId":"mrweikiat"},"content":"  * Adds any additional notes or remarks to an exisiting task"},{"lineNumber":104,"author":{"gitId":"mrweikiat"},"content":"  * Format: notes INDEX [n/NOTES]"},{"lineNumber":105,"author":{"gitId":"mrweikiat"},"content":"    1. Adds user input NOTES to the task at the specified INDEX. The index refers to the index number shown in the displayed task list. The index must be a positive integer 1, 2, 3, …"},{"lineNumber":106,"author":{"gitId":"mrweikiat"},"content":"    2. Adding notes to a task that already has existing notes will overwrite the previous notes."},{"lineNumber":107,"author":{"gitId":"mrweikiat"},"content":"    3. Example: list followed by notes 2 n/Hello World! adds the note “Hello World!” to the 2nd task in the task list."},{"lineNumber":108,"author":{"gitId":"mrweikiat"},"content":"    4. Example: find assignment followed by notes 1 n/fooBar adds the note “fooBar” to the 1st task in the results of the find command."},{"lineNumber":109,"author":{"gitId":"mrweikiat"},"content":" "},{"lineNumber":110,"author":{"gitId":"mrweikiat"},"content":"10. ### Shows alert(s) for incoming deadlines based on the time range (if give)"},{"lineNumber":111,"author":{"gitId":"mrweikiat"},"content":"  * Format: alert start/START_DATE end/END_DATE"},{"lineNumber":112,"author":{"gitId":"mrweikiat"},"content":"    1. If no time range is given, alert(s) shown will be deadlines next week."},{"lineNumber":113,"author":{"gitId":"mrweikiat"},"content":"    2. If only START_DATE is given, alert(s) shown will be from the START_DATE until the latest deadline. "},{"lineNumber":114,"author":{"gitId":"mrweikiat"},"content":"    3. If only END_DATE is given, alert(s) shown will be from today’s date until the END_DATE."},{"lineNumber":115,"author":{"gitId":"mrweikiat"},"content":"    4. alert start/10-10-2020 will show deadlines starting from 10 October 2020 onwards."},{"lineNumber":116,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":117,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":118,"author":{"gitId":"mrweikiat"},"content":"## Acknowledgements "},{"lineNumber":119,"author":{"gitId":"mrweikiat"},"content":"1. This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"}],"authorContributionMap":{"mrweikiat":116,"-":3}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC"},{"lineNumber":3,"author":{"gitId":"-"},"content":"        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for a modified version of the module\u0027s code standard at"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there are no tab characters in the file. --\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"LineLength\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a line is too long. --\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"TreeWalker\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c!-- Required to allow exceptions in code style --\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    IMPORT CHECKS"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."},{"lineNumber":52,"author":{"gitId":"-"},"content":"    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      1. STATIC: static imports"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      3. SPECIAL_IMPORTS: defined as org imports"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      4. THIRD_PARTY_PACKAGE: defined as com imports"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"},{"lineNumber":59,"author":{"gitId":"mrweikiat"},"content":"      \u003cproperty name\u003d\"customImportOrderRules\""},{"lineNumber":60,"author":{"gitId":"-"},"content":"                value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"},{"lineNumber":61,"author":{"gitId":"mrweikiat"},"content":"      \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"},{"lineNumber":62,"author":{"gitId":"mrweikiat"},"content":"      \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"},{"lineNumber":63,"author":{"gitId":"mrweikiat"},"content":"      \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for redundant import statements."},{"lineNumber":67,"author":{"gitId":"-"},"content":"    An import statement is redundant if:"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      * It is a duplicate of another import. This is, when a class is imported more than once."},{"lineNumber":69,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."},{"lineNumber":70,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the same package as the current package."},{"lineNumber":71,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RedundantImport\"/\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for unused import statements."},{"lineNumber":75,"author":{"gitId":"-"},"content":"    An import statement is unused if:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      It\u0027s not referenced in the file."},{"lineNumber":77,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UnusedImports\"/\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    NAMING CHECKS"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"PackageName\"\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TypeName\"\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ConstantName\"\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      \u003cmessage key\u003d\"name.invalidPattern\""},{"lineNumber":109,"author":{"gitId":"-"},"content":"               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"StaticVariableName\"\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MemberName\"\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-static members against the supplied expression. --\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodName\"\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParameterName\"\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalVariableName\"\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    LENGTH and CODING CHECKS"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that array type declarations follow Java Style"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      Java style: public static void main(String[] args) // Allowed"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      C style:    public static void main(String args[]) // Not allowed"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LeftCurly\"\u003e"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RightCurly\"\u003e"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      the same line. e.g., the following example is fine:"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      \u003cpre\u003e"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          ..."},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } else"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      \u003c!-- This next example is not fine:"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      \u003cpre\u003e"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"          ..."},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        else"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for braces around loop blocks --\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NeedBraces\"\u003e"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      \u003c!--"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      if (true) return 1; // Not allowed"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"      if (true) { return 1; } // Not allowed"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"      else if {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return 1; // else if should always be multi line"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"      if (true)"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return 1; // Not allowed"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UpperEll\" /\u003e"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FallThrough\"\u003e"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      \u003c!-- Warn about falling through to the next case statement.  Similar to"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      some other variants which we don\u0027t publicized to promote consistency)."},{"lineNumber":217,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"reliefPattern\""},{"lineNumber":219,"author":{"gitId":"-"},"content":"                value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that Class variables should never be declared public. --\u003e"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    ORDER CHECKS"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."},{"lineNumber":236,"author":{"gitId":"-"},"content":"         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if the Class and Interface declarations is organized in this order"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."},{"lineNumber":242,"author":{"gitId":"-"},"content":"      2. Instance variables. Order: public, protected, package level (no access modifier), private."},{"lineNumber":243,"author":{"gitId":"-"},"content":"      3. Constructors"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      4. Methods"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ModifierOrder\"\u003e"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"},{"lineNumber":250,"author":{"gitId":"-"},"content":"           8.4.3.  The prescribed order is:"},{"lineNumber":251,"author":{"gitId":"-"},"content":"           public, protected, private, abstract, static, final, transient, volatile,"},{"lineNumber":252,"author":{"gitId":"-"},"content":"           synchronized, native, strictfp"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        --\u003e"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    WHITESPACE CHECKS"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that various tokens are surrounded by whitespace."},{"lineNumber":267,"author":{"gitId":"-"},"content":"           This includes most binary operators and keywords followed"},{"lineNumber":268,"author":{"gitId":"-"},"content":"           by regular or curly braces."},{"lineNumber":269,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"},{"lineNumber":278,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"},{"lineNumber":286,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        UNARY_PLUS\"/\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"    \u003c!-- No trailing whitespace --\u003e"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Regexp\"\u003e"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"},{"lineNumber":304,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"},{"lineNumber":305,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."},{"lineNumber":310,"author":{"gitId":"-"},"content":"           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","},{"lineNumber":311,"author":{"gitId":"-"},"content":"           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","},{"lineNumber":312,"author":{"gitId":"-"},"content":"           \"\u0026\" when used in a generic upper or lower bounds constraints,"},{"lineNumber":313,"author":{"gitId":"-"},"content":"             e.g. \u003cT extends Foo \u0026 Bar\u003e"},{"lineNumber":314,"author":{"gitId":"-"},"content":"           \"::\" when used as a reference to a method or constructor without arguments."},{"lineNumber":315,"author":{"gitId":"-"},"content":"             e.g. String::compareToIgnoreCase"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."},{"lineNumber":323,"author":{"gitId":"-"},"content":"           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."},{"lineNumber":324,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"},{"lineNumber":332,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"},{"lineNumber":336,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"},{"lineNumber":338,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Indentation\"\u003e"},{"lineNumber":342,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"},{"lineNumber":346,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"},{"lineNumber":348,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParenPad\"\u003e"},{"lineNumber":352,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"},{"lineNumber":353,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."},{"lineNumber":357,"author":{"gitId":"-"},"content":"         a \u003d 1; // Allowed"},{"lineNumber":358,"author":{"gitId":"-"},"content":"         a  \u003d 1; // Not allowed (more than one space before \u003d)"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      \u003c!-- Validate whitespace surrounding comments as well."},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"           a \u003d 1; // Allowed (single space before start of comment)"},{"lineNumber":364,"author":{"gitId":"-"},"content":"           a \u003d 1; /* Allowed (single space before start of comment) */"},{"lineNumber":365,"author":{"gitId":"-"},"content":"           /* Allowed (single space after end of comment) */ a \u003d 1;"},{"lineNumber":366,"author":{"gitId":"-"},"content":"           a \u003d 1;  // Not allowed (more than one space before start of comment)"},{"lineNumber":367,"author":{"gitId":"-"},"content":"           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"},{"lineNumber":368,"author":{"gitId":"-"},"content":"           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."},{"lineNumber":371,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":372,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    JAVADOC CHECKS"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocType\"\u003e"},{"lineNumber":381,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMethod\"\u003e"},{"lineNumber":386,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e"},{"lineNumber":387,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e"},{"lineNumber":389,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"},{"lineNumber":390,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"},{"lineNumber":391,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e"},{"lineNumber":397,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"},{"lineNumber":398,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"},{"lineNumber":399,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":403,"author":{"gitId":"-"},"content":"\u003c/module\u003e"}],"authorContributionMap":{"mrweikiat":4,"-":399}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"## AY2021S2-CS2103-T14-4"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"austenjs"},"content":"### Austen Jeremy Sugiarto"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"austenjs"},"content":"\u003cimg src\u003d\"images/austenjs.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"austenjs"},"content":"[[github](https://github.com/austenjs)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"austenjs"},"content":"* Role: Member"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"austenjs"},"content":"### Daniel Ong Ee Shaeon"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"austenjs"},"content":"\u003cimg src\u003d\"images/danielonges.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"austenjs"},"content":"[[github](http://github.com/danielonges)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"austenjs"},"content":"* Role: Member"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"austenjs"},"content":"### Fan Horng Wei, Gerald"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/geraldfan.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[[github](http://github.com/geraldfan)] "},{"lineNumber":35,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"austenjs"},"content":"* Role: Member"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"mrweikiat"},"content":"### Goh Wei Kiat"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"mrweikiat"},"content":"\u003cimg src\u003d\"images/mrweikiat.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"mrweikiat"},"content":"[[github](http://github.com/mrweikiat)]"},{"lineNumber":44,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"austenjs"},"content":"* Role: Member"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"austenjs"},"content":"### Kong Jun Yin"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"austenjs"},"content":"\u003cimg src\u003d\"images/oheyesee.png\" width\u003d\"200px\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"austenjs"},"content":"[[github](http://github.com/oheyesee)]"},{"lineNumber":53,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"austenjs"},"content":"* Role: Member"}],"authorContributionMap":{"mrweikiat":3,"danielonges":1,"-":36,"austenjs":15}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"mrweikiat"},"content":"* defines its *API* in an `interface` with the same moduleName as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"1. `Logic` uses the `TaskTrackerParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `TaskTracker`, which `Person` references. This allows `TaskTracker` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"geraldfan"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedTaskTracker`. It extends `TaskTracker` with an undo/redo history, stored internally as an `taskTrackerStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"geraldfan"},"content":"* `VersionedTaskTracker#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"geraldfan"},"content":"* `VersionedTaskTracker#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"geraldfan"},"content":"* `VersionedTaskTracker#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"geraldfan"},"content":"These operations are exposed in the `Model` interface as `Model#commitTaskTracker()`, `Model#undoTaskTracker()` and `Model#redoTaskTracker()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"geraldfan"},"content":"Step 1. The user launches the application for the first time. The `VersionedTaskTracker` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"geraldfan"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitTaskTracker()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `taskTrackerStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"geraldfan"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitTaskTracker()`, causing another modified address book state to be saved into the `taskTrackerStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"geraldfan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitTaskTracker()`, so the address book state will not be saved into the `taskTrackerStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"geraldfan"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTaskTracker()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"geraldfan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial TaskTracker state, then there are no previous TaskTracker states to restore. The `undo` command uses `Model#canUndoTaskTracker()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"geraldfan"},"content":"The `redo` command does the opposite — it calls `Model#redoTaskTracker()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"geraldfan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `taskTrackerStateList.size() - 1`, pointing to the latest address book state, then there are no undone TaskTracker states to restore. The `redo` command uses `Model#canRedoTaskTracker()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"geraldfan"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitTaskTracker()`, `Model#undoTaskTracker()` or `Model#redoTaskTracker()`. Thus, the `taskTrackerStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"geraldfan"},"content":"Step 6. The user executes `clear`, which calls `Model#commitTaskTracker()`. Since the `currentStatePointer` is not pointing at the end of the `taskTrackerStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"danielonges"},"content":"* is a CS student in NUS"},{"lineNumber":240,"author":{"gitId":"danielonges"},"content":"* has a need to consolidate and manage deadlines for CS-coded module tasks"},{"lineNumber":241,"author":{"gitId":"danielonges"},"content":"* prefer desktop apps over other types of apps"},{"lineNumber":242,"author":{"gitId":"danielonges"},"content":"* prefers to use CLI over a GUI"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":244,"author":{"gitId":"danielonges"},"content":"* prefers an all-keyboard workflow without needing to use a mouse"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"danielonges"},"content":"**Value proposition**: "},{"lineNumber":247,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":248,"author":{"gitId":"danielonges"},"content":"- manage upcoming CS assignment deadlines faster than a typical mouse/GUI driven app"},{"lineNumber":249,"author":{"gitId":"danielonges"},"content":"- consolidates all CS-coded module tasks into a single place for a CS student to manage and view easily"},{"lineNumber":250,"author":{"gitId":"danielonges"},"content":"- allows a CS student to prioritise his/her time by seeing which task deadlines are more pressing"},{"lineNumber":251,"author":{"gitId":"danielonges"},"content":"- the app can also remind a CS student about his/her upcoming deadlines so that he/she does not need to remember everything all at once"},{"lineNumber":252,"author":{"gitId":"danielonges"},"content":"- easy CLI operation would entice a CS student to use the app, as he/she probably interacts with CLI on a daily basis while coding/doing CS-coded module tasks"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":261,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"},{"lineNumber":262,"author":{"gitId":"danielonges"},"content":"| `* * *`  | user                                       | add a new CS-coded module task                               | refer to the task in the App |"},{"lineNumber":263,"author":{"gitId":"danielonges"},"content":"| `* * *`  | user                                       | delete a task                                                | remove entries that I no longer need                         |"},{"lineNumber":264,"author":{"gitId":"mrweikiat"},"content":"| `* * *`  | user                                       | find a task by its moduleName                                      | locate a particular task in order to view its deadline and relevant details |"},{"lineNumber":265,"author":{"gitId":"danielonges"},"content":"| `* * *`  | user                                       | add priority tags (low, medium, high)                        | categorise my tasks and know which ones I should work on first |"},{"lineNumber":266,"author":{"gitId":"danielonges"},"content":"| `* * *`  | user who has just finished a task | mark a task as done                                          | know which tasks I have completed                            |"},{"lineNumber":267,"author":{"gitId":"danielonges"},"content":"| `* *` | user | add notes to a particular task | jot down quick ideas or notes that I have for a particular task |"},{"lineNumber":268,"author":{"gitId":"danielonges"},"content":"| `* *` | user with many tasks in the App | sort tasks either by deadlines, module codes, or their priority tags | have different views of the App when I require them |"},{"lineNumber":269,"author":{"gitId":"danielonges"},"content":"| `* *` | user | edit task attributes | change the details of a task if the task requirements or details have changed |"},{"lineNumber":270,"author":{"gitId":"danielonges"},"content":"| `*` | user with many upcoming deadlines | be reminded of deadlines that are approaching | remember when my tasks are due and work on them |"},{"lineNumber":271,"author":{"gitId":"danielonges"},"content":"| `*` | user who just finished their semester | clear the application of all tasks | prepare for the next upcoming semester |"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"geraldfan"},"content":"(For all use cases below, the **System** is the `TaskTracker` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"geraldfan"},"content":"**Use case: Delete a deadline**"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"geraldfan"},"content":"1.  User requests to list deadlines"},{"lineNumber":284,"author":{"gitId":"geraldfan"},"content":"2.  TaskTracker shows a list of deadlines"},{"lineNumber":285,"author":{"gitId":"geraldfan"},"content":"3.  User requests to delete a specific deadline in the list"},{"lineNumber":286,"author":{"gitId":"geraldfan"},"content":"4.  TaskTracker deletes the deadline"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"geraldfan"},"content":"    * 3a1. TaskTracker shows an error message."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"geraldfan"},"content":"**Use case: Edit a deadline**"},{"lineNumber":303,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":304,"author":{"gitId":"geraldfan"},"content":"1. User requests to list deadlines"},{"lineNumber":305,"author":{"gitId":"geraldfan"},"content":"2. TaskTracker shows a list of deadlines"},{"lineNumber":306,"author":{"gitId":"geraldfan"},"content":"3. User requests to edit a specific deadline in the list"},{"lineNumber":307,"author":{"gitId":"geraldfan"},"content":"4. TaskTracker updates the specific deadline in the list"},{"lineNumber":308,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":309,"author":{"gitId":"geraldfan"},"content":"    Use case ends."},{"lineNumber":310,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":311,"author":{"gitId":"geraldfan"},"content":"**Extensions**"},{"lineNumber":312,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":313,"author":{"gitId":"geraldfan"},"content":"* 2a. The list is empty."},{"lineNumber":314,"author":{"gitId":"geraldfan"},"content":"  "},{"lineNumber":315,"author":{"gitId":"geraldfan"},"content":"    Use case ends."},{"lineNumber":316,"author":{"gitId":"geraldfan"},"content":"* 3a. The given index is invalid"},{"lineNumber":317,"author":{"gitId":"geraldfan"},"content":"    * 3a1. TaskTracker shows an error message."},{"lineNumber":318,"author":{"gitId":"geraldfan"},"content":"      "},{"lineNumber":319,"author":{"gitId":"geraldfan"},"content":"        Use case resumes at step 2. "},{"lineNumber":320,"author":{"gitId":"geraldfan"},"content":"* 3b. Optional fields are not provided"},{"lineNumber":321,"author":{"gitId":"geraldfan"},"content":"    * 3b1. TaskTracker shows an error message"},{"lineNumber":322,"author":{"gitId":"geraldfan"},"content":"      "},{"lineNumber":323,"author":{"gitId":"geraldfan"},"content":"        Use case resumes at step 2."},{"lineNumber":324,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":325,"author":{"gitId":"geraldfan"},"content":"**Use case: Setting a priority tag**"},{"lineNumber":326,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":327,"author":{"gitId":"geraldfan"},"content":"1. User requests to list deadlines"},{"lineNumber":328,"author":{"gitId":"geraldfan"},"content":"2. TaskTracker shows a list of deadlines**"},{"lineNumber":329,"author":{"gitId":"geraldfan"},"content":"3. User requests to set a priority tag on a specific deadline in the list"},{"lineNumber":330,"author":{"gitId":"geraldfan"},"content":"4. TaskTracker sets a priority tag to the specific deadline in the list"},{"lineNumber":331,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":332,"author":{"gitId":"geraldfan"},"content":"**Extensions**"},{"lineNumber":333,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":334,"author":{"gitId":"geraldfan"},"content":"* 2a. The list is empty."},{"lineNumber":335,"author":{"gitId":"geraldfan"},"content":"  "},{"lineNumber":336,"author":{"gitId":"geraldfan"},"content":"    Use case ends."},{"lineNumber":337,"author":{"gitId":"geraldfan"},"content":"* 3a. The given index is invalid"},{"lineNumber":338,"author":{"gitId":"geraldfan"},"content":"    * 3a1. TaskTracker shows an error message"},{"lineNumber":339,"author":{"gitId":"geraldfan"},"content":"    "},{"lineNumber":340,"author":{"gitId":"geraldfan"},"content":"      Use case resumes at step 2"},{"lineNumber":341,"author":{"gitId":"geraldfan"},"content":"* 3b. The given priority tag is invalid"},{"lineNumber":342,"author":{"gitId":"geraldfan"},"content":"    * 3b1. TaskTracker shows an error message"},{"lineNumber":343,"author":{"gitId":"geraldfan"},"content":"    "},{"lineNumber":344,"author":{"gitId":"geraldfan"},"content":"        Use case resumes at step 2"},{"lineNumber":345,"author":{"gitId":"geraldfan"},"content":"    "},{"lineNumber":346,"author":{"gitId":"geraldfan"},"content":"**Use case: Adding notes to a deadline**"},{"lineNumber":347,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":348,"author":{"gitId":"geraldfan"},"content":"1. User requests to list deadlines"},{"lineNumber":349,"author":{"gitId":"geraldfan"},"content":"2. TaskTracker shows a list of deadlines**"},{"lineNumber":350,"author":{"gitId":"geraldfan"},"content":"3. User requests to add a note to a specific deadline in the list"},{"lineNumber":351,"author":{"gitId":"geraldfan"},"content":"4. TaskTracker adds a note to the specific deadline in the list"},{"lineNumber":352,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":353,"author":{"gitId":"geraldfan"},"content":"**Extensions**"},{"lineNumber":354,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":355,"author":{"gitId":"geraldfan"},"content":"* 2a. The list is empty."},{"lineNumber":356,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":357,"author":{"gitId":"geraldfan"},"content":"    Use case ends"},{"lineNumber":358,"author":{"gitId":"geraldfan"},"content":"* 3a. The given index is invalids"},{"lineNumber":359,"author":{"gitId":"geraldfan"},"content":"    * 3a1. TaskTracker shows an error message"},{"lineNumber":360,"author":{"gitId":"geraldfan"},"content":"    "},{"lineNumber":361,"author":{"gitId":"geraldfan"},"content":"        Use case resumes at step 2"},{"lineNumber":362,"author":{"gitId":"geraldfan"},"content":"* 3b. The deadline has existing notes"},{"lineNumber":363,"author":{"gitId":"geraldfan"},"content":"    * 3b1. TaskTracker requests for confirmation to overwrite previous notes"},{"lineNumber":364,"author":{"gitId":"geraldfan"},"content":"    * 3b2. User confirms the request to overwrite previous notes"},{"lineNumber":365,"author":{"gitId":"geraldfan"},"content":"    * 3b3. TaskTracker overwrites the previous notes with a new note"},{"lineNumber":366,"author":{"gitId":"geraldfan"},"content":"    "},{"lineNumber":367,"author":{"gitId":"geraldfan"},"content":"        Use case ends"},{"lineNumber":368,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":369,"author":{"gitId":"geraldfan"},"content":"  "},{"lineNumber":370,"author":{"gitId":"geraldfan"},"content":"  "},{"lineNumber":371,"author":{"gitId":"geraldfan"},"content":"  "},{"lineNumber":372,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":378,"author":{"gitId":"austenjs"},"content":"2.  The software should be portable. So moving from one OS to other OS does not create any problem."},{"lineNumber":379,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":380,"author":{"gitId":"austenjs"},"content":"4.  The response to any use action should become visible within 2 seconds."},{"lineNumber":381,"author":{"gitId":"austenjs"},"content":"5.  The source code should be open source."},{"lineNumber":382,"author":{"gitId":"austenjs"},"content":"6.  An application should be able to have up to 1000 deadlines."},{"lineNumber":383,"author":{"gitId":"austenjs"},"content":"7.  The user interface should be intuitive enough for users who are not IT-savvy."},{"lineNumber":384,"author":{"gitId":"austenjs"},"content":"8.  The product is free."},{"lineNumber":385,"author":{"gitId":"austenjs"},"content":"9.  The system should work on both `32-bit` and `64-bit` environments."},{"lineNumber":386,"author":{"gitId":"austenjs"},"content":"10. The deadline should not contain tasks deemed offensive (terrorism, bombing, etc)."},{"lineNumber":387,"author":{"gitId":"austenjs"},"content":"11. The application can be used **without** internet."},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"danielonges"},"content":"* **CS:** Computer Science"},{"lineNumber":392,"author":{"gitId":"danielonges"},"content":"* **CS-coded module tasks:** Assignments, Quizzes, Projects, and other tasks related to CS-coded modules provided by NUS School of Computing that have deadlines for submission"},{"lineNumber":393,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":394,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":403,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":420,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":431,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":434,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":437,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"geraldfan":95,"mrweikiat":2,"danielonges":23,"-":318,"austenjs":9}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"austenjs"},"content":"# User Guide"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"austenjs"},"content":"`semester.config` is a **desktop app for managing details, optimized for use via a Command Line Interface** (CLI) "},{"lineNumber":8,"author":{"gitId":"austenjs"},"content":"while still having the benefits of a Graphical User Interface (GUI). "},{"lineNumber":9,"author":{"gitId":"austenjs"},"content":"If you can type fast, `semester.config` can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":12,"author":{"gitId":"austenjs"},"content":"1. [Quick start](#quick-start)"},{"lineNumber":13,"author":{"gitId":"austenjs"},"content":"2. [Features](#features)"},{"lineNumber":14,"author":{"gitId":"austenjs"},"content":"3. [FAQ](#faq)"},{"lineNumber":15,"author":{"gitId":"austenjs"},"content":"4. [Command Summary](#command-summary)"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"austenjs"},"content":"1. Download the latest `semesterconfig.jar` from [here](https://github.com/AY2021S2-CS2103-T14-4/tp/releases)."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"austenjs"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your `semester.config`."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"austenjs"},"content":"   * **`list`** : Lists all deadlines."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"austenjs"},"content":"   * **`delete`**`3` : Deletes the 3rd deadline shown in the current list."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"austenjs"},"content":"   * **`clear`** : Deletes all deadlines."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"austenjs"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `instructions`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitId":"austenjs"},"content":"  e.g. if the command specifies `instructions 123`, it will be interpreted as `instructions`."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"austenjs"},"content":"### See the list of instructions: `instructions`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"austenjs"},"content":"List down all possible commands in semester.config."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"austenjs"},"content":"Format: `instructions`"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"austenjs"},"content":"### Add a deadline: `add`"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"austenjs"},"content":"Add a deadline to the list"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"austenjs"},"content":"Format: `add mc/MODULE_CODE mn/MODULE_NAME tn/TASK_NAME d/DATE [t/TIME]`"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"austenjs"},"content":"Example:  "},{"lineNumber":84,"author":{"gitId":"austenjs"},"content":"* `add mc/CS3243 mn/Introduction to Artificial Intelligence tn/Project 1 d/ Feb 15` will add this deadline to the list"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"### Clear Application : `clear`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"Clears all deadlines from the application"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"austenjs"},"content":"### Delete a deadline: `delete` "},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"austenjs"},"content":"Deletes the specified deadline from the list"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"austenjs"},"content":"Format: `delete INDEX`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"austenjs"},"content":"* Index to be inserted must be positive, and"},{"lineNumber":99,"author":{"gitId":"austenjs"},"content":"* Index must be available on the list else an error will be thrown"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"austenjs"},"content":"Example: "},{"lineNumber":102,"author":{"gitId":"austenjs"},"content":"* `delete 3` will delete the 3rd deadline on the list"},{"lineNumber":103,"author":{"gitId":"austenjs"},"content":"* Using `list` to show all deadlines, the user wants to delete the 2nd deadline. User use command `delete 2` to delete the 2nd deadline from the list "},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"### Edit a deadline: `edit`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"Edits an existing deadline in the application"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"Format: `edit INDEX [tn/TASK NAME] [mn/MODULE NAME] [mc/MODULE CODE] [d/DEADLINE DATE]"},{"lineNumber":110,"author":{"gitId":"-"},"content":"[t/DEADLINE TIME] [n/NOTES] [pt/PRIORITY]`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"* Edits the deadline at the specified index"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* The index must be a positive integer 1,2,3,..."},{"lineNumber":114,"author":{"gitId":"-"},"content":"* The index must be on the list else an error will be thrown"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":119,"author":{"gitId":"mrweikiat"},"content":"* `edit 1 mn/Software Engineering mc/CS2103` edits the module moduleName and module code of the deadline at index 1 to be “Software Engineering” and “CS2103” respectively."},{"lineNumber":120,"author":{"gitId":"mrweikiat"},"content":"* `edit 2 tn/Finals n/Open Book` edits the moduleName and notes of the deadline at index 2 to be “Finals” and “Open Book” respectively."},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"mrweikiat"},"content":"### Locating deadlines by moduleName: `find`"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"mrweikiat"},"content":"Find deadlines whose moduleName contains any of the given keywords."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"austenjs"},"content":"Format: `find KEYWORD...`"},{"lineNumber":127,"author":{"gitId":"austenjs"},"content":"* The search is case-insensitive. e.g “Assignment” will match “assignment”"},{"lineNumber":128,"author":{"gitId":"austenjs"},"content":"* The order of the keywords does not matter. e.g. “programming modular” will “match modular programming”"},{"lineNumber":129,"author":{"gitId":"mrweikiat"},"content":"* Only the deadline moduleName is searched."},{"lineNumber":130,"author":{"gitId":"austenjs"},"content":"* Only full words will be matched e.g. “Java” will not match “Javascript”"},{"lineNumber":131,"author":{"gitId":"austenjs"},"content":"* Persons matching at least one keyword will be returned (i.e. OR search). e.g. “SQL Python” will return “SQL Quiz, Python Assignment”"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":134,"author":{"gitId":"austenjs"},"content":"* `find C++` will return `C++ project` and `C++ graded quiz`"},{"lineNumber":135,"author":{"gitId":"austenjs"},"content":"* `find assignment` exam will return `Final Assignment, Midterm exam`"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"austenjs"},"content":"### List all deadlines: `list`"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"austenjs"},"content":"List out all deadlines (might be unsorted)"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"austenjs"},"content":"Format: `list`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"austenjs"},"content":"### Mark a deadline as done: `done`"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"austenjs"},"content":"Marks deadline(s) in the application to be done."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"austenjs"},"content":"Format: `done INDEX…` "},{"lineNumber":148,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":149,"author":{"gitId":"austenjs"},"content":"* The index must be a positive integer 1, 2, 3, …​"},{"lineNumber":150,"author":{"gitId":"austenjs"},"content":"* Index must be available on the list else an error will be thrown"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"austenjs"},"content":"Example:"},{"lineNumber":153,"author":{"gitId":"austenjs"},"content":"* Using `list` to show all deadlines, the user wants to mark the 5th deadline as done. Users use command `done 5` to mark the 5th deadline."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"austenjs"},"content":"### Sort deadlines: `sort`"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"austenjs"},"content":"Sorts deadlines according to the specified parameter."},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"austenjs"},"content":"Format: sort `[/dt] [/mc] [/pt]`"},{"lineNumber":160,"author":{"gitId":"austenjs"},"content":"* Deadlines can be sorted according to these three parameters: date \u0026 time `/dt`, module code `/mc` or priority tag `/pt`. If no arguments are given, assumed to be sorted based on date."},{"lineNumber":161,"author":{"gitId":"austenjs"},"content":"* For `date \u0026 time`, the deadlines will be sorted in ascending order, with the earliest deadline placed first."},{"lineNumber":162,"author":{"gitId":"austenjs"},"content":"* For `module code`, the deadlines will be sorted according to the lexicographical ordering of the module codes."},{"lineNumber":163,"author":{"gitId":"austenjs"},"content":"* For `priority tag`, the deadlines will be sorted according to this order: HIGH \u003e MEDIUM \u003e LOW. Deadlines with a high priority will then be shown at the top of the list."},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"austenjs"},"content":"### Clear Application: `clear`"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"austenjs"},"content":"Clears all deadlines from the application."},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":170,"author":{"gitId":"-"},"content":" "},{"lineNumber":171,"author":{"gitId":"austenjs"},"content":"### Showing time-based alerts: `show`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"austenjs"},"content":"Shows alert(s) for incoming deadlines based on the time range (if given). "},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"austenjs"},"content":"Format: `show [start/START_DATE] [end/END_DATE]`"},{"lineNumber":176,"author":{"gitId":"austenjs"},"content":"* If no time range is given, alert(s) shown will be deadlines next week."},{"lineNumber":177,"author":{"gitId":"austenjs"},"content":"* If only `START_DATE` is given, alert(s) shown will be from **the `START_DATE` until the latest deadline**. "},{"lineNumber":178,"author":{"gitId":"austenjs"},"content":"* If only `END_DATE` is given, alert(s) shown will be from **today’s date until the `END_DATE`**."},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"austenjs"},"content":"Example:"},{"lineNumber":181,"author":{"gitId":"austenjs"},"content":"* `alert start/10-10-2020` will show deadlines starting from 10 October 2020 onwards."},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"austenjs"},"content":"`semester.config` data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"austenjs"},"content":"`semester.config` data are saved as a JSON file `[JAR file location]/data/semesterconfig.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"austenjs"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e\u003cb\u003e:exclamation: Caution\u003c/b\u003e If your changes to the data file makes its format invalid, semester.config will discard all data and start with an empty data file at the next run."},{"lineNumber":192,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":199,"author":{"gitId":"austenjs"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file "},{"lineNumber":200,"author":{"gitId":"austenjs"},"content":"that contains the data of your previous `semester.config` home folder."},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":207,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":208,"author":{"gitId":"austenjs"},"content":"**instructions** | `instructions`"},{"lineNumber":209,"author":{"gitId":"austenjs"},"content":"**add** | `add mc/MODULE_CODE mn/MODULE_NAME tn/TASK_NAME d/DATE [t/TIME]` \u003cbr\u003e e.g, `add mc/CS1010 mn/Programming Methodology tn/Assignment 2 d/ Feb 15`"},{"lineNumber":210,"author":{"gitId":"austenjs"},"content":"**delete** | `delete INDEX ...` \u003cbr\u003e e.g, `delete 3` `delete 1 2`"},{"lineNumber":211,"author":{"gitId":"austenjs"},"content":"**find** | `find KEYWORD ...` \u003cbr\u003e e.g, `find Database` `find Software`"},{"lineNumber":212,"author":{"gitId":"austenjs"},"content":"**list** | `list`"},{"lineNumber":213,"author":{"gitId":"austenjs"},"content":"**done** | `done INDEX ...` \u003cbr\u003e e.g, `done 1` `done 3 5`"},{"lineNumber":214,"author":{"gitId":"austenjs"},"content":"**sort** | `sort [/dt] [/mc] [/pt]` \u003cbr\u003e e.g, `sort /dt` `sort /mc /pt`"},{"lineNumber":215,"author":{"gitId":"austenjs"},"content":"**notes** | `notes INDEX n/NOTES` \u003cbr\u003e e.g, `notes 4 n/Assignment must be handwritten`"},{"lineNumber":216,"author":{"gitId":"austenjs"},"content":"**edit** | `edit INDEX [tn/TASK NAME] [mn/MODULE NAME] [mc/MODULE CODE] [d/ DEADLINE DATE] [t/DEADLINE TIME] [n/NOTES] [pt/PRIORITY]` \u003cbr\u003e e.g, `edit 2 tn/Assignment 7`"},{"lineNumber":217,"author":{"gitId":"austenjs"},"content":"**clear** |`clear`"},{"lineNumber":218,"author":{"gitId":"austenjs"},"content":"**pt** | `pt [/LOW] [/MEDIUM] [/HIGH] INDEX` \u003cbr\u003e e.g, `pt /MEDIUM 3`"},{"lineNumber":219,"author":{"gitId":"austenjs"},"content":"**show** | `show [start/START_DATE] [end/END_DATE]` \u003cbr\u003e e.g, `show`  `show end/10-10-2020` `show start/10-10-2020 end/11-10-2020`"},{"lineNumber":220,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":221,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":222,"author":{"gitId":"austenjs"},"content":""}],"authorContributionMap":{"mrweikiat":5,"-":132,"austenjs":85}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":282,"author":{"gitId":"mrweikiat"},"content":"  * Replaces the top navigation menu with the project moduleName when printing"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    content: \"AB-3\";"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}"},{"lineNumber":295,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"mrweikiat":1,"-":294}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string."},{"lineNumber":155,"author":{"gitId":"-"},"content":" *"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}."},{"lineNumber":171,"author":{"gitId":"-"},"content":" */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"mrweikiat"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s moduleName). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"geraldfan"},"content":"Simply add the following to [`seedu.address.ui.TaskCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`."},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"mrweikiat"},"content":"Following convention, let’s change the moduleName of the generated method to `execute_addRemarkUnfilteredList_success`."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook."}],"authorContributionMap":{"geraldfan":1,"mrweikiat":2,"-":391}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":66,"author":{"gitId":"-"},"content":"..."},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"..."},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":75,"author":{"gitId":"-"},"content":"..."},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"..."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":95,"author":{"gitId":"mrweikiat"},"content":"    \"moduleName\": \"Person with invalid moduleName field: Ha!ns Mu@ster\","},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field."}],"authorContributionMap":{"mrweikiat":1,"-":102}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"mrweikiat"},"content":"![Using the `Search for target by moduleName` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here."},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":155,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"       persons.addAll("},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book"}],"authorContributionMap":{"mrweikiat":1,"-":249}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"import seedu.address.storage.JsonTaskTrackerStorage;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"import seedu.address.storage.TaskTrackerStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaskTracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        TaskTrackerStorage taskTrackerStorage \u003d new JsonTaskTrackerStorage(userPrefs.getTaskTrackerFilePath());"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        storage \u003d new StorageManager(taskTrackerStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"        Optional\u003cReadOnlyTaskTracker\u003e taskTrackerOptional;"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"        ReadOnlyTaskTracker initialData;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"            taskTrackerOptional \u003d storage.readTaskTracker();"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"            if (!taskTrackerOptional.isPresent()) {"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"                logger.info(\"Data file not found. Will be starting with a sample TaskTracker\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"            initialData \u003d taskTrackerOptional.orElseGet(SampleDataUtil::getSampleTaskTracker);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty TaskTracker\");"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"            initialData \u003d new TaskTracker();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskTracker\");"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"            initialData \u003d new TaskTracker();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":125,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":153,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":156,"author":{"gitId":"geraldfan"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskTracker\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":172,"author":{"gitId":"geraldfan"},"content":"        logger.info(\"Starting TaskTracker \" + MainApp.VERSION);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":178,"author":{"gitId":"geraldfan"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Task Tracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":22,"-":163}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":2,"-":11}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"     * Returns the TaskTracker."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"     * @see seedu.address.model.Model#getTaskTracker()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    ReadOnlyTaskTracker getTaskTracker();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"     * Returns an unmodifiable view of the filtered list of tasks"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"    Path getTaskTrackerFilePath();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":11,"mrweikiat":1,"-":43}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"import seedu.address.logic.parser.TaskTrackerParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    private final TaskTrackerParser taskTrackerParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        taskTrackerParser \u003d new TaskTrackerParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"        Command command \u003d taskTrackerParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"            storage.saveTaskTracker(model.getTaskTracker());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"    public ReadOnlyTaskTracker getTaskTracker() {"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        return model.getTaskTracker();"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"    public Path getTaskTrackerFilePath() {"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"        return model.getTaskTrackerFilePath();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":13,"mrweikiat":1,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":" * Adds a task to the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the address book. \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"mrweikiat"},"content":"    private final Task toAdd;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"     * Creates an AddCommand to add the specified {@code Task}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"mrweikiat"},"content":"    public AddCommand(Task task) {"},{"lineNumber":44,"author":{"gitId":"mrweikiat"},"content":"        requireNonNull(task);"},{"lineNumber":45,"author":{"gitId":"mrweikiat"},"content":"        toAdd \u003d task;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        if (model.hasTask(toAdd)) {"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"        model.addTask(toAdd);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":8,"mrweikiat":5,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"        model.setTaskTracker(new TaskTracker());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":2,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":" * Deletes a task identified using it\u0027s displayed index from the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"mrweikiat"},"content":"        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"        model.deleteTask(taskToDelete);"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":7,"mrweikiat":2,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/DoneCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"austenjs"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":3,"author":{"gitId":"austenjs"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":5,"author":{"gitId":"austenjs"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":7,"author":{"gitId":"austenjs"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"austenjs"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"austenjs"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"austenjs"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":12,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":13,"author":{"gitId":"austenjs"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"austenjs"},"content":" * Finishes a task identified using it\u0027s displayed index from the task list."},{"lineNumber":15,"author":{"gitId":"austenjs"},"content":" */"},{"lineNumber":16,"author":{"gitId":"austenjs"},"content":"public class DoneCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":18,"author":{"gitId":"austenjs"},"content":"    public static final String COMMAND_WORD \u003d \"done\";"},{"lineNumber":19,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":20,"author":{"gitId":"austenjs"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"austenjs"},"content":"            + \": Finishes the task identified by the index number used in the displayed task list.\\n\""},{"lineNumber":22,"author":{"gitId":"austenjs"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"austenjs"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":25,"author":{"gitId":"austenjs"},"content":"    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Finished Task: %1$s\";"},{"lineNumber":26,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":27,"author":{"gitId":"austenjs"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":29,"author":{"gitId":"austenjs"},"content":"    public DoneCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"austenjs"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":33,"author":{"gitId":"austenjs"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"austenjs"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"austenjs"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList(); //Change to list of task later"},{"lineNumber":37,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":38,"author":{"gitId":"austenjs"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"austenjs"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":42,"author":{"gitId":"mrweikiat"},"content":"        Task taskToFinish \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"        model.deleteTask(taskToFinish); // change to finishTask later"},{"lineNumber":44,"author":{"gitId":"austenjs"},"content":"        return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, taskToFinish));"},{"lineNumber":45,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":47,"author":{"gitId":"austenjs"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"austenjs"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"austenjs"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"austenjs"},"content":"                || (other instanceof DoneCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"austenjs"},"content":"                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"austenjs"},"content":"}"}],"authorContributionMap":{"geraldfan":3,"mrweikiat":2,"austenjs":48}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":25,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":" * Edits the details of an existing task in the address book."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"            + \"by the index number used in the displayed task list. \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book.\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"    private final EditTaskDescriptor editTaskDescriptor;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"     * @param index of the task in the filtered task list to edit"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"     * @param editTaskDescriptor details to edit the task with"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        requireNonNull(editTaskDescriptor);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"mrweikiat"},"content":"        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"        model.setTask(taskToEdit, editedTask);"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"     * edited with {@code editTaskDescriptor}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":92,"author":{"gitId":"mrweikiat"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"        ModuleName updatedModuleName \u003d editTaskDescriptor.getModuleName().orElse(taskToEdit.getModuleName());"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":"        Phone updatedPhone \u003d editTaskDescriptor.getPhone().orElse(taskToEdit.getPhone());"},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"        Email updatedEmail \u003d editTaskDescriptor.getEmail().orElse(taskToEdit.getEmail());"},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"        Remark updatedRemark \u003d taskToEdit.getRemark(); // edit command does not allow editing remarks"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"        return new Task(updatedModuleName, updatedPhone, updatedEmail, updatedRemark, updatedTags);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"     * Stores the details to edit the task with. Each non-empty field value will replace the"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"     * corresponding field value of the task."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"    public static class EditTaskDescriptor {"},{"lineNumber":126,"author":{"gitId":"danielonges"},"content":"        // descriptors should not be allowed to have a remark field, since editing of remarks is not supported for now"},{"lineNumber":127,"author":{"gitId":"mrweikiat"},"content":"        private ModuleName moduleName;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"geraldfan"},"content":"        public EditTaskDescriptor() {}"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":136,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":137,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":138,"author":{"gitId":"geraldfan"},"content":"        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"},{"lineNumber":139,"author":{"gitId":"mrweikiat"},"content":"            setModuleName(toCopy.moduleName);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":147,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":149,"author":{"gitId":"danielonges"},"content":"            return CollectionUtil.isAnyNonNull(moduleName, phone, email, tags);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"mrweikiat"},"content":"        public void setModuleName(ModuleName moduleName) {"},{"lineNumber":153,"author":{"gitId":"mrweikiat"},"content":"            this.moduleName \u003d moduleName;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"mrweikiat"},"content":"        public Optional\u003cModuleName\u003e getModuleName() {"},{"lineNumber":157,"author":{"gitId":"mrweikiat"},"content":"            return Optional.ofNullable(moduleName);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":178,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":179,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":185,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":186,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":187,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":188,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":201,"author":{"gitId":"geraldfan"},"content":"            if (!(other instanceof EditTaskDescriptor)) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":206,"author":{"gitId":"geraldfan"},"content":"            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"mrweikiat"},"content":"            return getModuleName().equals(e.getModuleName())"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":35,"mrweikiat":11,"danielonges":5,"-":163}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":" * Finds and lists all tasks in address book whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"        model.updateFilteredTaskList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":4,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" * Lists all tasks in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":4,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"            + PREFIX_REMARK + \"[REMARK]\\n\""},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"            + PREFIX_REMARK + \"Likes to swim.\";"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    private final Index index;"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    private final Remark remark;"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"     * @param remark of the person to be updated to"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"        this.index \u003d index;"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        this.remark \u003d remark;"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"        Task editedTask \u003d new Task(taskToEdit.getModuleName(), taskToEdit.getPhone(), taskToEdit.getEmail(),"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"                 remark, taskToEdit.getTags());"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"        model.setTask(taskToEdit, editedTask);"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"        return new CommandResult(generateSuccessMessage(editedTask));"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"     * {@code personToEdit}."},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"    private String generateSuccessMessage(Task taskToEdit) {"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"        return String.format(message, taskToEdit);"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"        // short circuit if same object"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"            return true;"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"        // instanceof handles null"},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"            return false;"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"        // state check"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"        return index.equals(e.index) \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":91}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":18,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"mrweikiat"},"content":"        ModuleName moduleName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        Remark remark \u003d new Remark(\"\"); // add command does not allow adding remarks straightaway"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        Task task \u003d new Task(moduleName, phone, email, remark, tagList);"},{"lineNumber":47,"author":{"gitId":"mrweikiat"},"content":"        return new AddCommand(task);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mrweikiat":4,"danielonges":5,"-":49}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danielonges":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DoneCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"austenjs"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":3,"author":{"gitId":"austenjs"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":5,"author":{"gitId":"austenjs"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"austenjs"},"content":"import seedu.address.logic.commands.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"austenjs"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":9,"author":{"gitId":"austenjs"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"austenjs"},"content":" * Parses input arguments and creates a new DoneComment object"},{"lineNumber":11,"author":{"gitId":"austenjs"},"content":" */"},{"lineNumber":12,"author":{"gitId":"austenjs"},"content":"public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":14,"author":{"gitId":"austenjs"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"austenjs"},"content":"     * Parses the given {@code String} of arguments in the context of the DoneCommand"},{"lineNumber":16,"author":{"gitId":"austenjs"},"content":"     * and returns a DoneCommand object for execution."},{"lineNumber":17,"author":{"gitId":"austenjs"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"austenjs"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"austenjs"},"content":"    public DoneCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"austenjs"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"austenjs"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitId":"austenjs"},"content":"            return new DoneCommand(index);"},{"lineNumber":23,"author":{"gitId":"austenjs"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"austenjs"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"austenjs"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"austenjs"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":29,"author":{"gitId":"austenjs"},"content":"}"}],"authorContributionMap":{"austenjs":29}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"            editTaskDescriptor.setModuleName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"            editTaskDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"            editTaskDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        if (!editTaskDescriptor.isAnyFieldEdited()) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"        return new EditCommand(index, editTaskDescriptor);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":8,"-":71}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"mrweikiat"},"content":"     * Parses a {@code String name} into a {@code ModuleName}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"mrweikiat"},"content":"    public static ModuleName parseName(String name) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":47,"author":{"gitId":"mrweikiat"},"content":"        if (!ModuleName.isValidName(trimmedName)) {"},{"lineNumber":48,"author":{"gitId":"mrweikiat"},"content":"            throw new ParseException(ModuleName.MESSAGE_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"mrweikiat"},"content":"        return new ModuleName(trimmedName);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"     * Parses a {@code String remark} into a {@code Remark}."},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"    public static Remark parseRemark(String remark) {"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"        requireNonNull(remark);"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":120,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mrweikiat":6,"danielonges":13,"-":102}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand} and returns a {@code"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"     * RemarkCommand} object for execution."},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        requireNonNull(args);"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        Index index;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        return new RemarkCommand(index, new Remark(remark));"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":35}},{"path":"src/main/java/seedu/address/logic/parser/TaskTrackerParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"public class TaskTrackerParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"danielonges":4,"-":75}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"     * Returns the user prefs\u0027 task tracker file path."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"    Path getTaskTrackerFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     * Sets the user prefs\u0027 task tracker file path."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    void setTaskTrackerFilePath(Path taskTrackerFilePath);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"     * Replaces task tracker data with the data in {@code taskTracker}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"    void setTaskTracker(ReadOnlyTaskTracker taskTracker);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"     * Returns the TaskTracker"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"    ReadOnlyTaskTracker getTaskTracker();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"     * Returns true if a task with the same identity as {@code task} exists in the task tracker."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"    boolean hasTask(Task task);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"     * Deletes the given task."},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"     * The task must exist in the task tracker."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"    void deleteTask(Task target);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"     * Adds the given task."},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"     * {@code task} must not already exist in the task tracker."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"    void addTask(Task task);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"     * Replaces the given task {@code target} with {@code editedTask}."},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"     * {@code target} must exist in the task tracker."},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"     * The task identity of {@code editedTask} must not be the same as another existing task in the task tracker."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"    void setTask(Task target, Task editedTask);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"     * Returns an unmodifiable view of the filtered task list"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}."},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":33,"mrweikiat":1,"-":61}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"    private final TaskTracker taskTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"mrweikiat"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"     * Initializes a ModelManager with the given taskTracker and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"    public ModelManager(ReadOnlyTaskTracker taskTracker, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        requireAllNonNull(taskTracker, userPrefs);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        logger.fine(\"Initializing with address book: \" + taskTracker + \" and user prefs \" + userPrefs);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        this.taskTracker \u003d new TaskTracker(taskTracker);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.taskTracker.getTaskList());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"        this(new TaskTracker(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"    public Path getTaskTrackerFilePath() {"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        return userPrefs.getTaskTrackerFilePath();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"    public void setTaskTrackerFilePath(Path taskTrackerFilePath) {"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"        requireNonNull(taskTrackerFilePath);"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"        userPrefs.setTaskTrackerFilePath(taskTrackerFilePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskTracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"    public void setTaskTracker(ReadOnlyTaskTracker taskTracker) {"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"        this.taskTracker.resetData(taskTracker);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"    public ReadOnlyTaskTracker getTaskTracker() {"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"        return taskTracker;"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"    public boolean hasTask(Task task) {"},{"lineNumber":95,"author":{"gitId":"mrweikiat"},"content":"        requireNonNull(task);"},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"        return taskTracker.hasTask(task);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"    public void deleteTask(Task target) {"},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":"        taskTracker.removeTask(target);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"    public void addTask(Task task) {"},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"        taskTracker.addTask(task);"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":"    public void setTask(Task target, Task editedTask) {"},{"lineNumber":112,"author":{"gitId":"mrweikiat"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"        taskTracker.setTask(target, editedTask);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":"     * {@code versionedTaskTracker}"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":125,"author":{"gitId":"mrweikiat"},"content":"        return filteredTasks;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":131,"author":{"gitId":"mrweikiat"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":148,"author":{"gitId":"geraldfan"},"content":"        return taskTracker.equals(other.taskTracker)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":150,"author":{"gitId":"mrweikiat"},"content":"                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":35,"mrweikiat":7,"-":111}},{"path":"src/main/java/seedu/address/model/ReadOnlyTaskTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"public interface ReadOnlyTaskTracker {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"     * Returns an unmodifiable view of the tasks list."},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"     * This list will not contain any duplicate tasks."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":4,"mrweikiat":1,"-":12}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    Path getTaskTrackerFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"-":15}},{"path":"src/main/java/seedu/address/model/TaskTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.person.UniqueTaskList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":" * Duplicates are not allowed (by .isSameTask comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"public class TaskTracker implements ReadOnlyTaskTracker {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    {"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    public TaskTracker() {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"     * Creates an TaskTracker using the Tasks in the {@code toBeCopied}"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"    public TaskTracker(ReadOnlyTaskTracker toBeCopied) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"     * Replaces the contents of the task list with {@code tasks}."},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"     * {@code tasks} must not contain duplicate tasks."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"     * Resets the existing data of this {@code TaskTracker} with {@code newData}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"    public void resetData(ReadOnlyTaskTracker newData) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"        setTasks(newData.getTaskList());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"    //// task-level operations"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"     * Returns true if a task with the same identity as {@code task} exists in the address book."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"    public boolean hasTask(Task task) {"},{"lineNumber":70,"author":{"gitId":"mrweikiat"},"content":"        requireNonNull(task);"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        return tasks.contains(task);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"     * Adds a task to the address book."},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"     * The task must not already exist in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"    public void addTask(Task p) {"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"        tasks.add(p);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"     * Replaces the given task {@code target} in the list with {@code editedTask}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"    public void setTask(Task target, Task editedTask) {"},{"lineNumber":88,"author":{"gitId":"mrweikiat"},"content":"        requireNonNull(editedTask);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"        tasks.setTask(target, editedTask);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"     * Removes {@code key} from this {@code TaskTracker}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"    public void removeTask(Task key) {"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"        tasks.remove(key);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":"        return tasks.asUnmodifiableObservableList();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"                || (other instanceof TaskTracker // instanceof handles nulls"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"                \u0026\u0026 tasks.equals(((TaskTracker) other).tasks));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"        return tasks.hashCode();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":42,"mrweikiat":3,"-":80}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    private Path taskTrackerFilePath \u003d Paths.get(\"tasktracker.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"        setTaskTrackerFilePath(newUserPrefs.getTaskTrackerFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    public Path getTaskTrackerFilePath() {"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        return taskTrackerFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"    public void setTaskTrackerFilePath(Path taskTrackerFilePath) {"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"        requireNonNull(taskTrackerFilePath);"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"        this.taskTrackerFilePath \u003d taskTrackerFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"                \u0026\u0026 taskTrackerFilePath.equals(o.taskTrackerFilePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"        return Objects.hash(guiSettings, taskTrackerFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"        sb.append(\"\\nLocal data file location : \" + taskTrackerFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":10,"-":77}},{"path":"src/main/java/seedu/address/model/person/ModuleName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":" * Represents a Task\u0027s name in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"public class ModuleName {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"mrweikiat"},"content":"     * Constructs a {@code ModuleName}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"    public ModuleName(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"mrweikiat"},"content":"                || (other instanceof ModuleName // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"mrweikiat"},"content":"                \u0026\u0026 fullName.equals(((ModuleName) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"mrweikiat":5,"-":53}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" * Tests that a {@code Task}\u0027s {@code ModuleName} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"mrweikiat"},"content":"    public boolean test(Task task) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"mrweikiat"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getModuleName().fullName, keyword));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"mrweikiat":3,"-":27}},{"path":"src/main/java/seedu/address/model/person/Remark.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"public class Remark {"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can take any values, and it should not be blank\";"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"    public final String value;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     * @param remark a remark."},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    public Remark(String remark) {"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"        requireNonNull(remark);"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"        value \u003d remark;"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        return value;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"                \u0026\u0026 value.equals(((Remark) other).value)); // state check"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public int hashCode() {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        return value.hashCode();"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":37}},{"path":"src/main/java/seedu/address/model/person/Status.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"austenjs"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":3,"author":{"gitId":"austenjs"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"austenjs"},"content":" * Represents a Task\u0027s status in the task list."},{"lineNumber":5,"author":{"gitId":"austenjs"},"content":" */"},{"lineNumber":6,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":7,"author":{"gitId":"austenjs"},"content":"public class Status {"},{"lineNumber":8,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":9,"author":{"gitId":"austenjs"},"content":"    private boolean isDone;"},{"lineNumber":10,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":11,"author":{"gitId":"austenjs"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"austenjs"},"content":"     * Constructs a {@code Status}."},{"lineNumber":13,"author":{"gitId":"austenjs"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"austenjs"},"content":"    public Status() {"},{"lineNumber":15,"author":{"gitId":"austenjs"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":18,"author":{"gitId":"austenjs"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"austenjs"},"content":"     * Returns true if isDone is true."},{"lineNumber":20,"author":{"gitId":"austenjs"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"austenjs"},"content":"    public boolean hasFinished() {"},{"lineNumber":22,"author":{"gitId":"austenjs"},"content":"        return this.isDone;"},{"lineNumber":23,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":25,"author":{"gitId":"austenjs"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"austenjs"},"content":"     * Mark the task\u0027s status as finished."},{"lineNumber":27,"author":{"gitId":"austenjs"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"austenjs"},"content":"    public void finishTask() {"},{"lineNumber":29,"author":{"gitId":"austenjs"},"content":"        this.isDone \u003d true;"},{"lineNumber":30,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":32,"author":{"gitId":"austenjs"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"austenjs"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"austenjs"},"content":"        return isDone ? \"Finished\" : \"Unfinished\";"},{"lineNumber":35,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":37,"author":{"gitId":"austenjs"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"austenjs"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"austenjs"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"                || (other instanceof Status // instanceof handles nulls"},{"lineNumber":41,"author":{"gitId":"austenjs"},"content":"                \u0026\u0026 (isDone \u003d\u003d (((Status) other).isDone))); // state check"},{"lineNumber":42,"author":{"gitId":"austenjs"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"austenjs"},"content":""},{"lineNumber":44,"author":{"gitId":"austenjs"},"content":"}"}],"authorContributionMap":{"danielonges":1,"austenjs":43}},{"path":"src/main/java/seedu/address/model/person/Task.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"mrweikiat"},"content":"public class Task {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"mrweikiat"},"content":"    private final ModuleName moduleName;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    private final Remark remark;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    public Task(ModuleName moduleName, Phone phone, Email email, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        requireAllNonNull(moduleName, phone, email, tags);"},{"lineNumber":32,"author":{"gitId":"mrweikiat"},"content":"        this.moduleName \u003d moduleName;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        this.remark \u003d remark;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"mrweikiat"},"content":"    public ModuleName getModuleName() {"},{"lineNumber":40,"author":{"gitId":"mrweikiat"},"content":"        return moduleName;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"    public Remark getRemark() {"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"        return remark;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"mrweikiat"},"content":"     * Returns true if both persons have the same moduleName."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"    public boolean isSameTask(Task otherTask) {"},{"lineNumber":68,"author":{"gitId":"mrweikiat"},"content":"        if (otherTask \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"mrweikiat"},"content":"        return otherTask !\u003d null"},{"lineNumber":73,"author":{"gitId":"mrweikiat"},"content":"                \u0026\u0026 otherTask.getModuleName().equals(getModuleName());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"mrweikiat"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"mrweikiat"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":91,"author":{"gitId":"mrweikiat"},"content":"        return otherTask.getModuleName().equals(getModuleName())"},{"lineNumber":92,"author":{"gitId":"mrweikiat"},"content":"                \u0026\u0026 otherTask.getPhone().equals(getPhone())"},{"lineNumber":93,"author":{"gitId":"mrweikiat"},"content":"                \u0026\u0026 otherTask.getEmail().equals(getEmail())"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"                \u0026\u0026 otherTask.getRemark().equals(getRemark())"},{"lineNumber":95,"author":{"gitId":"mrweikiat"},"content":"                \u0026\u0026 otherTask.getTags().equals(getTags());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":"        return Objects.hash(moduleName, phone, email, remark, tags);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":107,"author":{"gitId":"mrweikiat"},"content":"        builder.append(getModuleName())"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":112,"author":{"gitId":"danielonges"},"content":"                .append(\"; Remark: \")"},{"lineNumber":113,"author":{"gitId":"danielonges"},"content":"                .append(getRemark());"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mrweikiat":16,"danielonges":11,"-":96}},{"path":"src/main/java/seedu/address/model/person/UniqueTaskList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.person.exceptions.DuplicateTaskException;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.person.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":" * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":" * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":" * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":" * as to ensure that the task with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"-"},"content":" *"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"-"},"content":" *"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":" * @see Task#isSameTask(Task)"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"mrweikiat"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"     * Returns true if the list contains an equivalent task as the given argument."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        return internalList.stream().anyMatch(toCheck::isSameTask);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"     * Adds a task to the list."},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"     * The task must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"mrweikiat"},"content":"    public void add(Task toAdd) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"     * The task identity of {@code editedTask} must not be the same as another existing task in the list."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"    public void setTask(Task target, Task editedTask) {"},{"lineNumber":57,"author":{"gitId":"mrweikiat"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"mrweikiat"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"     * The task must exist in the list."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"mrweikiat"},"content":"    public void remove(Task toRemove) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"    public void setTasks(UniqueTaskList replacement) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"     * Replaces the contents of this list with {@code tasks}."},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"     * {@code tasks} must not contain duplicate tasks."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {"},{"lineNumber":92,"author":{"gitId":"mrweikiat"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"        if (!tasksAreUnique(tasks)) {"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"mrweikiat"},"content":"        internalList.setAll(tasks);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"mrweikiat"},"content":"    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"mrweikiat"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"geraldfan"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"geraldfan"},"content":"                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"     * Returns true if {@code tasks} contains only unique tasks."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":"    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"},{"lineNumber":128,"author":{"gitId":"mrweikiat"},"content":"        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"mrweikiat"},"content":"            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"danielonges"},"content":"                if (tasks.get(i).isSameTask(tasks.get(j))) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":30,"mrweikiat":13,"danielonges":4,"-":90}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateTaskException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"public class DuplicateTaskException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"    public DuplicateTaskException() {"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"        super(\"Operation would result in duplicate tasks\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":3,"-":8}},{"path":"src/main/java/seedu/address/model/person/exceptions/TaskNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"public class TaskNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"geraldfan":1,"-":5}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":13,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":" * Contains utility methods for populating {@code TaskTracker} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    public static Task[] getSampleTasks() {"},{"lineNumber":24,"author":{"gitId":"mrweikiat"},"content":"        return new Task[]{"},{"lineNumber":25,"author":{"gitId":"mrweikiat"},"content":"            new Task(new ModuleName(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"                        EMPTY_REMARK,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                        getTagSet(\"friends\")),"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"            new Task(new ModuleName(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"                        EMPTY_REMARK,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                        getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"            new Task(new ModuleName(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example\""},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"                        + \".com\"), EMPTY_REMARK,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                        getTagSet(\"neighbours\")),"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"            new Task(new ModuleName(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"                        EMPTY_REMARK,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                        getTagSet(\"family\")),"},{"lineNumber":37,"author":{"gitId":"mrweikiat"},"content":"            new Task(new ModuleName(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"                        EMPTY_REMARK,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                        getTagSet(\"classmates\")),"},{"lineNumber":40,"author":{"gitId":"mrweikiat"},"content":"            new Task(new ModuleName(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"                        EMPTY_REMARK,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                        getTagSet(\"colleagues\"))"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    public static ReadOnlyTaskTracker getSampleTaskTracker() {"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        TaskTracker sampleAb \u003d new TaskTracker();"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"        for (Task sampleTask : getSampleTasks()) {"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"            sampleAb.addTask(sampleTask);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .map(Tag::new)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .collect(Collectors.toSet());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":10,"mrweikiat":8,"danielonges":11,"-":36}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTask.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"mrweikiat"},"content":" * Jackson-friendly version of {@link Task}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"mrweikiat"},"content":"class JsonAdaptedTask {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    private final String remark;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"     * Constructs a {@code JsonAdaptedTask} with the given person details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"mrweikiat"},"content":"    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"                           @JsonProperty(\"email\") String email,"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"                           @JsonProperty(\"remark\") String remark,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"        this.remark \u003d remark;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"mrweikiat"},"content":"    public JsonAdaptedTask(Task source) {"},{"lineNumber":54,"author":{"gitId":"mrweikiat"},"content":"        name \u003d source.getModuleName().fullName;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"mrweikiat"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitId":"mrweikiat"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":76,"author":{"gitId":"mrweikiat"},"content":"                    ModuleName.class.getSimpleName()));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"mrweikiat"},"content":"        if (!ModuleName.isValidName(name)) {"},{"lineNumber":79,"author":{"gitId":"mrweikiat"},"content":"            throw new IllegalValueException(ModuleName.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"mrweikiat"},"content":"        final ModuleName modelModuleName \u003d new ModuleName(name);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"        if (remark \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"        final Remark modelRemark \u003d new Remark(remark);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":105,"author":{"gitId":"danielonges"},"content":"        return new Task(modelModuleName, modelPhone, modelEmail, modelRemark, modelTags);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mrweikiat":14,"danielonges":10,"-":84}},{"path":"src/main/java/seedu/address/storage/JsonSerializableTaskTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":14,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":" * An Immutable TaskTracker that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"@JsonRootName(value \u003d \"tasktracker\")"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"class JsonSerializableTaskTracker {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"     * Constructs a {@code JsonSerializableTaskTracker} with the given tasks."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"    public JsonSerializableTaskTracker(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"     * Converts a given {@code ReadOnlyTaskTracker} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableTaskTracker}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"    public JsonSerializableTaskTracker(ReadOnlyTaskTracker source) {"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     * Converts this address book into the model\u0027s {@code TaskTracker} object."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    public TaskTracker toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"        TaskTracker taskTracker \u003d new TaskTracker();"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"},{"lineNumber":52,"author":{"gitId":"mrweikiat"},"content":"            Task task \u003d jsonAdaptedTask.toModelType();"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"            if (taskTracker.hasTask(task)) {"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"            taskTracker.addTask(task);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        return taskTracker;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":23,"mrweikiat":2,"-":36}},{"path":"src/main/java/seedu/address/storage/JsonTaskTrackerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":" * A class to access TaskTracker data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"public class JsonTaskTrackerStorage implements TaskTrackerStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskTrackerStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public JsonTaskTrackerStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"    public Path getTaskTrackerFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    public Optional\u003cReadOnlyTaskTracker\u003e readTaskTracker() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        return readTaskTracker(filePath);"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"     * Similar to {@link #readTaskTracker()}."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"    public Optional\u003cReadOnlyTaskTracker\u003e readTaskTracker(Path filePath) throws DataConversionException {"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"        Optional\u003cJsonSerializableTaskTracker\u003e jsonTaskTracker \u003d JsonUtil.readJsonFile("},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"                filePath, JsonSerializableTaskTracker.class);"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        if (!jsonTaskTracker.isPresent()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"            return Optional.of(jsonTaskTracker.get().toModelType());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"    public void saveTaskTracker(ReadOnlyTaskTracker taskTracker) throws IOException {"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"        saveTaskTracker(taskTracker, filePath);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"     * Similar to {@link #saveTaskTracker(ReadOnlyTaskTracker)}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"    public void saveTaskTracker(ReadOnlyTaskTracker taskTracker, Path filePath) throws IOException {"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"        requireNonNull(taskTracker);"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableTaskTracker(taskTracker), filePath);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":23,"-":60}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"public interface Storage extends TaskTrackerStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    Path getTaskTrackerFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"    Optional\u003cReadOnlyTaskTracker\u003e readTaskTracker() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"    void saveTaskTracker(ReadOnlyTaskTracker taskTracker) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":5,"-":28}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":" * Manages storage of TaskTracker data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    private TaskTrackerStorage taskTrackerStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"     * Creates a {@code StorageManager} with the given {@code TaskTrackerStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public StorageManager(TaskTrackerStorage taskTrackerStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        this.taskTrackerStorage \u003d taskTrackerStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"    public Path getTaskTrackerFilePath() {"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"        return taskTrackerStorage.getTaskTrackerFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"    public Optional\u003cReadOnlyTaskTracker\u003e readTaskTracker() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        return readTaskTracker(taskTrackerStorage.getTaskTrackerFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"    public Optional\u003cReadOnlyTaskTracker\u003e readTaskTracker(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"        return taskTrackerStorage.readTaskTracker(filePath);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"    public void saveTaskTracker(ReadOnlyTaskTracker taskTracker) throws IOException {"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        saveTaskTracker(taskTracker, taskTrackerStorage.getTaskTrackerFilePath());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"    public void saveTaskTracker(ReadOnlyTaskTracker taskTracker, Path filePath) throws IOException {"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"        taskTrackerStorage.saveTaskTracker(taskTracker, filePath);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":19,"-":62}},{"path":"src/main/java/seedu/address/storage/TaskTrackerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":" * Represents a storage for {@link TaskTracker}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"public interface TaskTrackerStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    Path getTaskTrackerFilePath();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"     * Returns TaskTracker data as a {@link ReadOnlyTaskTracker}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    Optional\u003cReadOnlyTaskTracker\u003e readTaskTracker() throws DataConversionException, IOException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"     * @see #getTaskTrackerFilePath()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    Optional\u003cReadOnlyTaskTracker\u003e readTaskTracker(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"     * Saves the given {@link ReadOnlyTaskTracker} to the storage."},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"     * @param taskTracker cannot be null."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"    void saveTaskTracker(ReadOnlyTaskTracker taskTracker) throws IOException;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"     * @see #saveTaskTracker(ReadOnlyTaskTracker)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"    void saveTaskTracker(ReadOnlyTaskTracker taskTracker, Path filePath) throws IOException;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":19,"-":32}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"    private StackPane taskListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"geraldfan"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskTrackerFilePath());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"geraldfan"},"content":"    public TaskListPanel getTaskListPanel() {"},{"lineNumber":167,"author":{"gitId":"geraldfan"},"content":"        return taskListPanel;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":7,"-":189}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TaskTracker level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"mrweikiat"},"content":"    public final Task task;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"mrweikiat"},"content":"    private Label moduleName;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"    private Label remark;"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     * Creates a {@code TaskCode} with the given {@code Task} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"mrweikiat"},"content":"        this.task \u003d task;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"mrweikiat"},"content":"        moduleName.setText(task.getModuleName().fullName);"},{"lineNumber":52,"author":{"gitId":"mrweikiat"},"content":"        phone.setText(task.getPhone().value);"},{"lineNumber":53,"author":{"gitId":"mrweikiat"},"content":"        email.setText(task.getEmail().value);"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"        remark.setText(task.getRemark().value);"},{"lineNumber":55,"author":{"gitId":"mrweikiat"},"content":"        task.getTags().stream()"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitId":"mrweikiat"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":7,"mrweikiat":10,"danielonges":3,"-":57}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":" * Panel containing the list of tasks."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    private ListView\u003cTask\u003e taskListView;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        taskListView.setItems(taskList);"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    class TaskListViewCell extends ListCell\u003cTask\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"mrweikiat"},"content":"        protected void updateItem(Task task, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"mrweikiat"},"content":"            super.updateItem(task, empty);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"mrweikiat"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":11,"mrweikiat":5,"-":33}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"        \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"          \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"geraldfan":2,"-":58}},{"path":"src/main/resources/view/TaskListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"        \u003cLabel fx:id\u003d\"moduleName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"mrweikiat":1,"danielonges":1,"-":34}},{"path":"src/main/resources/view/TaskListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"geraldfan":1,"-":7}},{"path":"src/test/data/JsonSerializableTaskTrackerTest/duplicateTaskTaskTracker.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":"  \"tasks\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"She likes aardvarks\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"She likes aardvarks\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"danielonges":2,"-":11}},{"path":"src/test/data/JsonSerializableTaskTrackerTest/invalidTaskTaskTracker.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":"  \"tasks\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"    \"email\": \"invalid@email!3e\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"danielonges":1,"-":5}},{"path":"src/test/data/JsonSerializableTaskTrackerTest/typicalTasksTaskTracker.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":"  \"_comment\": \"TaskTracker save file which contains the same Task values as in TypicalTasks#getTypicalTaskTracker()\","},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"  \"tasks\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"Likes skiing.\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"Favourite pastime: Eating\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"\","},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"    \"remark\" : \"\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":2,"danielonges":7,"-":37}},{"path":"src/test/data/JsonTaskTrackerStorageTest/invalidAndValidTaskTaskTracker.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"    \"email\": \"hans@example.com\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"    \"email\": \"hans@example.com\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danielonges":2,"-":9}},{"path":"src/test/data/JsonTaskTrackerStorageTest/invalidTaskTaskTracker.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"    \"email\": \"hans@example.com\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danielonges":1,"-":6}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"  \"addressBookFilePath\" : \"tasktracker.json\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"  \"addressBookFilePath\" : \"tasktracker.json\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"-":10}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"import seedu.address.storage.JsonTaskTrackerStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":32,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"        JsonTaskTrackerStorage taskTrackerStorage \u003d"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"                new JsonTaskTrackerStorage(temporaryFolder.resolve(\"taskTracker.json\"));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        StorageManager storage \u003d new StorageManager(taskTrackerStorage, userPrefsStorage);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"        // Setup LogicManager with JsonTaskTrackerIoExceptionThrowingStub"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"        JsonTaskTrackerStorage taskTrackerStorage \u003d"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"                new JsonTaskTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTaskTracker.json\"));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"        StorageManager storage \u003d new StorageManager(taskTrackerStorage, userPrefsStorage);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":82,"author":{"gitId":"mrweikiat"},"content":"        Task expectedTask \u003d new TaskBuilder(AMY).withTags().build();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"        expectedModel.addTask(expectedTask);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                                      Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                                      String expectedMessage) {"},{"lineNumber":134,"author":{"gitId":"geraldfan"},"content":"        Model expectedModel \u003d new ModelManager(model.getTaskTracker(), new UserPrefs());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                                      String expectedMessage, Model expectedModel) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"geraldfan"},"content":"    private static class JsonTaskTrackerIoExceptionThrowingStub extends JsonTaskTrackerStorage {"},{"lineNumber":156,"author":{"gitId":"geraldfan"},"content":"        private JsonTaskTrackerIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitId":"geraldfan"},"content":"        public void saveTaskTracker(ReadOnlyTaskTracker taskTracker, Path filePath) throws IOException {"},{"lineNumber":162,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":20,"mrweikiat":4,"danielonges":5,"-":137}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":14,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        model \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    public void execute_newTask_success() {"},{"lineNumber":30,"author":{"gitId":"mrweikiat"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        Model expectedModel \u003d new ModelManager(model.getTaskTracker(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        expectedModel.addTask(validTask);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"mrweikiat"},"content":"        assertCommandSuccess(new AddCommand(validTask), model,"},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"    public void execute_duplicateTask_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        Task taskInList \u003d model.getTaskTracker().getTaskList().get(0);"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"        assertCommandFailure(new AddCommand(taskInList), model, AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":7,"mrweikiat":6,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":23,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":24,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"mrweikiat"},"content":"        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"mrweikiat"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"    public void execute_duplicateTask_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"mrweikiat"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":47,"author":{"gitId":"mrweikiat"},"content":"        AddCommand addCommand \u003d new AddCommand(validTask);"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_TASK, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"mrweikiat"},"content":"        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"},{"lineNumber":56,"author":{"gitId":"mrweikiat"},"content":"        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"        // different task -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitId":"geraldfan"},"content":"        public Path getTaskTrackerFilePath() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"        public void setTaskTrackerFilePath(Path taskTrackerFilePath) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitId":"geraldfan"},"content":"        public void addTask(Task task) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"        public void setTaskTracker(ReadOnlyTaskTracker newData) {"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"        public ReadOnlyTaskTracker getTaskTracker() {"},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"        public boolean hasTask(Task task) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitId":"geraldfan"},"content":"        public void deleteTask(Task target) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitId":"geraldfan"},"content":"        public void setTask(Task target, Task editedTask) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitId":"geraldfan"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitId":"geraldfan"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"geraldfan"},"content":"     * A Model stub that contains a single task."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"geraldfan"},"content":"    private class ModelStubWithTask extends ModelStub {"},{"lineNumber":158,"author":{"gitId":"mrweikiat"},"content":"        private final Task task;"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"geraldfan"},"content":"        ModelStubWithTask(Task task) {"},{"lineNumber":161,"author":{"gitId":"mrweikiat"},"content":"            requireNonNull(task);"},{"lineNumber":162,"author":{"gitId":"mrweikiat"},"content":"            this.task \u003d task;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitId":"geraldfan"},"content":"        public boolean hasTask(Task task) {"},{"lineNumber":167,"author":{"gitId":"mrweikiat"},"content":"            requireNonNull(task);"},{"lineNumber":168,"author":{"gitId":"danielonges"},"content":"            return this.task.isSameTask(task);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"geraldfan"},"content":"     * A Model stub that always accept the task being added."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"geraldfan"},"content":"    private class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":176,"author":{"gitId":"geraldfan"},"content":"        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitId":"geraldfan"},"content":"        public boolean hasTask(Task task) {"},{"lineNumber":180,"author":{"gitId":"mrweikiat"},"content":"            requireNonNull(task);"},{"lineNumber":181,"author":{"gitId":"geraldfan"},"content":"            return tasksAdded.stream().anyMatch(task::isSameTask);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"geraldfan"},"content":"        public void addTask(Task task) {"},{"lineNumber":186,"author":{"gitId":"mrweikiat"},"content":"            requireNonNull(task);"},{"lineNumber":187,"author":{"gitId":"geraldfan"},"content":"            tasksAdded.add(task);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":191,"author":{"gitId":"geraldfan"},"content":"        public ReadOnlyTaskTracker getTaskTracker() {"},{"lineNumber":192,"author":{"gitId":"geraldfan"},"content":"            return new TaskTracker();"},{"lineNumber":193,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":36,"mrweikiat":15,"danielonges":1,"-":145}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"    public void execute_emptyTaskTracker_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    public void execute_nonEmptyTaskTracker_success() {"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        Model model \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"        expectedModel.setTaskTracker(new TaskTracker());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":6,"mrweikiat":1,"-":25}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":23,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    public static final String VALID_REMARK_AMY \u003d \"Likes skiing.\";"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"    public static final EditCommand.EditTaskDescriptor DESC_AMY;"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"    public static final EditCommand.EditTaskDescriptor DESC_BOB;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":66,"author":{"gitId":"mrweikiat"},"content":"        DESC_AMY \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":69,"author":{"gitId":"mrweikiat"},"content":"        DESC_BOB \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"     * - the address book, filtered task list and selected task in {@code actualModel} remain unchanged"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":109,"author":{"gitId":"geraldfan"},"content":"        TaskTracker expectedTaskTracker \u003d new TaskTracker(actualModel.getTaskTracker());"},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"        assertEquals(expectedTaskTracker, actualModel.getTaskTracker());"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"    public static void showTaskAtIndex(Model model, Index targetIndex) {"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"},{"lineNumber":124,"author":{"gitId":"mrweikiat"},"content":"        final String[] splitName \u003d task.getModuleName().fullName.split(\"\\\\s+\");"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":"        assertEquals(1, model.getFilteredTaskList().size());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":14,"mrweikiat":5,"danielonges":7,"-":104}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"    private Model model \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getTaskTracker(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        Model expectedModel \u003d new ModelManager(model.getTaskTracker(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"        showNoTask(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskTracker().getTaskList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"        // different task -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"    private void showNoTask(Model model) {"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"        model.updateFilteredTaskList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"        assertTrue(model.getFilteredTaskList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":29,"mrweikiat":2,"-":78}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":16,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    private Model model \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":40,"author":{"gitId":"mrweikiat"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        Task expectedTask \u003d new TaskBuilder(editedTask).withRemark(VALID_REMARK_AMY).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, expectedTask);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        Model expectedModel \u003d new ModelManager(new TaskTracker(model.getTaskTracker()), new UserPrefs());"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        expectedModel.setTask(model.getFilteredTaskList().get(0), expectedTask);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        Task editedTask \u003d taskInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        Model expectedModel \u003d new ModelManager(new TaskTracker(model.getTaskTracker()), new UserPrefs());"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"        expectedModel.setTask(lastTask, editedTask);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"        Model expectedModel \u003d new ModelManager(new TaskTracker(model.getTaskTracker()), new UserPrefs());"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":92,"author":{"gitId":"mrweikiat"},"content":"        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"},{"lineNumber":94,"author":{"gitId":"mrweikiat"},"content":"                new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"        Model expectedModel \u003d new ModelManager(new TaskTracker(model.getTaskTracker()), new UserPrefs());"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"    public void execute_duplicateTaskUnfilteredList_failure() {"},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"    public void execute_duplicateTaskFilteredList_failure() {"},{"lineNumber":115,"author":{"gitId":"geraldfan"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"        // edit task in filtered list into a duplicate in address book"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"        Task taskInList \u003d model.getTaskTracker().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"},{"lineNumber":119,"author":{"gitId":"geraldfan"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"},{"lineNumber":120,"author":{"gitId":"mrweikiat"},"content":"                new EditTaskDescriptorBuilder(taskInList).build());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"geraldfan"},"content":"    public void execute_invalidTaskIndexUnfilteredList_failure() {"},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":128,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"geraldfan"},"content":"    public void execute_invalidTaskIndexFilteredList_failure() {"},{"lineNumber":140,"author":{"gitId":"geraldfan"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":141,"author":{"gitId":"geraldfan"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":143,"author":{"gitId":"geraldfan"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskTracker().getTaskList().size());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":146,"author":{"gitId":"mrweikiat"},"content":"                new EditTaskDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"geraldfan"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":153,"author":{"gitId":"geraldfan"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":156,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_AMY);"},{"lineNumber":157,"author":{"gitId":"geraldfan"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"geraldfan"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_AMY)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":173,"author":{"gitId":"geraldfan"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_BOB)));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":53,"mrweikiat":9,"danielonges":4,"-":110}},{"path":"src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"},{"lineNumber":15,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"public class EditTaskDescriptorTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_AMY);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"mrweikiat"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"mrweikiat"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"mrweikiat"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":3,"mrweikiat":5,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.CARL;"},{"lineNumber":9,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.ELLE;"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.FIONA;"},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"    private Model model \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"        // different task -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"    public void execute_zeroKeywords_noTaskFound() {"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        expectedModel.updateFilteredTaskList(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"    public void execute_multipleKeywords_multipleTasksFound() {"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"        expectedModel.updateFilteredTaskList(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredTaskList());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":12,"mrweikiat":4,"-":67}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":6,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        model \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"        expectedModel \u003d new ModelManager(model.getTaskTracker(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":5,"mrweikiat":1,"-":33}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"public class RemarkCommandTest {"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    private static final String REMARK_STUB \u003d \"Some remark\";"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    private Model model \u003d new ModelManager(getTypicalTaskTracker(), new UserPrefs());"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_TASK, new Remark(VALID_REMARK_AMY));"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        // same values -\u003e returns true"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_TASK, new Remark(VALID_REMARK_AMY));"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        // different index -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_TASK, new Remark(VALID_REMARK_AMY))));"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"        // different remark -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_TASK, new Remark(VALID_REMARK_BOB))));"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"    public void execute_addRemarkUnfilteredList_success() {"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"        Task editedTask \u003d new TaskBuilder(firstTask).withRemark(REMARK_STUB).build();"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_TASK, new Remark(editedTask.getRemark().value));"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedTask);"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"        Model expectedModel \u003d new ModelManager(new TaskTracker(model.getTaskTracker()), new UserPrefs());"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"        expectedModel.setTask(firstTask, editedTask);"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"    public void execute_deleteRemarkUnfilteredList_success() {"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"        Task editedTask \u003d new TaskBuilder(firstTask).withRemark(\"\").build();"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_TASK,"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"                new Remark(editedTask.getRemark().toString()));"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedTask);"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"        Model expectedModel \u003d new ModelManager(new TaskTracker(model.getTaskTracker()), new UserPrefs());"},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"        expectedModel.setTask(firstTask, editedTask);"},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"        Task editedTask \u003d new TaskBuilder(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()))"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"                .withRemark(REMARK_STUB).build();"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_TASK, new Remark(editedTask.getRemark().value));"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedTask);"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"        Model expectedModel \u003d new ModelManager(new TaskTracker(model.getTaskTracker()), new UserPrefs());"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"        expectedModel.setTask(firstTask, editedTask);"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":105,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"danielonges"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitId":"danielonges"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":108,"author":{"gitId":"danielonges"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"},{"lineNumber":109,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":110,"author":{"gitId":"danielonges"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":111,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":113,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"danielonges"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":115,"author":{"gitId":"danielonges"},"content":"     * but smaller than size of address book"},{"lineNumber":116,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"danielonges"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":119,"author":{"gitId":"danielonges"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":120,"author":{"gitId":"danielonges"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":121,"author":{"gitId":"danielonges"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":122,"author":{"gitId":"danielonges"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskTracker().getTaskList().size());"},{"lineNumber":123,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":124,"author":{"gitId":"danielonges"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"},{"lineNumber":125,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":126,"author":{"gitId":"danielonges"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":127,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":129,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":129}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":27,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.AMY;"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.BOB;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        // remarks are empty by default"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        Task expectedTask \u003d new TaskBuilder(BOB).withRemark(\"\").withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"        // remarks are empty by default"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"        Task expectedTaskMultipleTags \u003d new TaskBuilder(BOB)"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"                .withRemark(\"\")"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedTaskMultipleTags));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"        // remarks are empty by default"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"        Task expectedTask \u003d new TaskBuilder(AMY).withRemark(\"\").withTags().build();"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"                new AddCommand(expectedTask));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":109,"author":{"gitId":"mrweikiat"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, ModuleName.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":112,"author":{"gitId":"danielonges"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":116,"author":{"gitId":"danielonges"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":120,"author":{"gitId":"danielonges"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":124,"author":{"gitId":"danielonges"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"},{"lineNumber":125,"author":{"gitId":"mrweikiat"},"content":"                ModuleName.MESSAGE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":129,"author":{"gitId":"danielonges"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mrweikiat":7,"danielonges":22,"-":103}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":39,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":79,"author":{"gitId":"mrweikiat"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, ModuleName.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"},{"lineNumber":99,"author":{"gitId":"mrweikiat"},"content":"                ModuleName.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"        Index targetIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":106,"author":{"gitId":"danielonges"},"content":"                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":109,"author":{"gitId":"danielonges"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":"        Index targetIndex \u003d INDEX_THIRD_TASK;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":133,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":139,"author":{"gitId":"mrweikiat"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"mrweikiat"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":151,"author":{"gitId":"mrweikiat"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":158,"author":{"gitId":"geraldfan"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":159,"author":{"gitId":"danielonges"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":160,"author":{"gitId":"danielonges"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":164,"author":{"gitId":"danielonges"},"content":"                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":174,"author":{"gitId":"geraldfan"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":176,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":183,"author":{"gitId":"mrweikiat"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":184,"author":{"gitId":"danielonges"},"content":"                .build();"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":191,"author":{"gitId":"geraldfan"},"content":"        Index targetIndex \u003d INDEX_THIRD_TASK;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":17,"mrweikiat":8,"danielonges":7,"-":167}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":70,"author":{"gitId":"mrweikiat"},"content":"        ModuleName expectedModuleName \u003d new ModuleName(VALID_NAME);"},{"lineNumber":71,"author":{"gitId":"mrweikiat"},"content":"        assertEquals(expectedModuleName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":77,"author":{"gitId":"mrweikiat"},"content":"        ModuleName expectedModuleName \u003d new ModuleName(VALID_NAME);"},{"lineNumber":78,"author":{"gitId":"mrweikiat"},"content":"        assertEquals(expectedModuleName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":3,"mrweikiat":5,"-":164}},{"path":"src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"public class RemarkCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    private RemarkCommandParser parser \u003d new RemarkCommandParser();"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    private final String nonEmptyRemark \u003d \"Some remark.\";"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    public void parse_indexSpecified_success() {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        // have remark"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_TASK, new Remark(nonEmptyRemark));"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        // no remark"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_TASK, new Remark(\"\"));"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public void parse_missingCompulsoryField_failure() {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"        // no parameters"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"        // no index"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        assertParseFailure(parser, RemarkCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":43}},{"path":"src/test/java/seedu/address/logic/parser/TaskTrackerParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":30,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":31,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":32,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":33,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskUtil;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"public class TaskTrackerParserTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"    private final TaskTrackerParser parser \u003d new TaskTrackerParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":41,"author":{"gitId":"mrweikiat"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":42,"author":{"gitId":"mrweikiat"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"},{"lineNumber":43,"author":{"gitId":"mrweikiat"},"content":"        assertEquals(new AddCommand(task), command);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":61,"author":{"gitId":"mrweikiat"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":78,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":"        final String remark \u003d \"Some remark.\";"},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"                        + INDEX_FIRST_TASK.getOneBased() + \" \" + PREFIX_REMARK + remark);"},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_TASK, new Remark(remark)), command);"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":9,"mrweikiat":8,"danielonges":11,"-":84}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.ALICE;"},{"lineNumber":9,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"import seedu.address.testutil.TaskTrackerBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        assertEquals(new TaskTracker(), new TaskTracker(modelManager.getTaskTracker()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"        userPrefs.setTaskTrackerFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"        userPrefs.setTaskTrackerFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"    public void setTaskTrackerFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setTaskTrackerFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"    public void setTaskTrackerFilePath_validPath_setsTaskTrackerFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        modelManager.setTaskTrackerFilePath(path);"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"        assertEquals(path, modelManager.getTaskTrackerFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"    public void hasTask_nullTask_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"    public void hasTask_taskNotInTaskTracker_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"        assertFalse(modelManager.hasTask(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"    public void hasTask_taskInTaskTracker_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"        modelManager.addTask(ALICE);"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"        assertTrue(modelManager.hasTask(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"        TaskTracker taskTracker \u003d new TaskTrackerBuilder().withTask(ALICE).withTask(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"        TaskTracker differentTaskTracker \u003d new TaskTracker();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"geraldfan"},"content":"        modelManager \u003d new ModelManager(taskTracker, userPrefs);"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(taskTracker, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"geraldfan"},"content":"        // different taskTracker -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentTaskTracker, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"mrweikiat"},"content":"        String[] keywords \u003d ALICE.getModuleName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":"        modelManager.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"        assertFalse(modelManager.equals(new ModelManager(taskTracker, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"        differentUserPrefs.setTaskTrackerFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"geraldfan"},"content":"        assertFalse(modelManager.equals(new ModelManager(taskTracker, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":30,"mrweikiat":3,"-":99}},{"path":"src/test/java/seedu/address/model/TaskTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.ALICE;"},{"lineNumber":9,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.person.exceptions.DuplicateTaskException;"},{"lineNumber":22,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"public class TaskTrackerTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    private final TaskTracker taskTracker \u003d new TaskTracker();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"        assertEquals(Collections.emptyList(), taskTracker.getTaskList());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskTracker.resetData(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"    public void resetData_withValidReadOnlyTaskTracker_replacesData() {"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"        TaskTracker newData \u003d getTypicalTaskTracker();"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        taskTracker.resetData(newData);"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"        assertEquals(newData, taskTracker);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"        // Two tasks with the same identity fields"},{"lineNumber":48,"author":{"gitId":"mrweikiat"},"content":"        Task editedAlice \u003d new TaskBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":50,"author":{"gitId":"mrweikiat"},"content":"        List\u003cTask\u003e newTasks \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":51,"author":{"gitId":"mrweikiat"},"content":"        TaskTrackerStub newData \u003d new TaskTrackerStub(newTasks);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"        assertThrows(DuplicateTaskException.class, () -\u003e taskTracker.resetData(newData));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"    public void hasTask_nullTask_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskTracker.hasTask(null));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"    public void hasTask_taskNotInTaskTracker_returnsFalse() {"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        assertFalse(taskTracker.hasTask(ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"    public void hasTask_taskInTaskTracker_returnsTrue() {"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"        taskTracker.addTask(ALICE);"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        assertTrue(taskTracker.hasTask(ALICE));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"    public void hasTask_taskWithSameIdentityFieldsInTaskTracker_returnsTrue() {"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"        taskTracker.addTask(ALICE);"},{"lineNumber":75,"author":{"gitId":"mrweikiat"},"content":"        Task editedAlice \u003d new TaskBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"        assertTrue(taskTracker.hasTask(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e taskTracker.getTaskList().remove(0));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"     * A stub ReadOnlyTaskTracker whose tasks list can violate interface constraints."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"    private static class TaskTrackerStub implements ReadOnlyTaskTracker {"},{"lineNumber":89,"author":{"gitId":"mrweikiat"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"mrweikiat"},"content":"        TaskTrackerStub(Collection\u003cTask\u003e tasks) {"},{"lineNumber":92,"author":{"gitId":"mrweikiat"},"content":"            this.tasks.setAll(tasks);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":97,"author":{"gitId":"mrweikiat"},"content":"            return tasks;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":27,"mrweikiat":12,"-":62}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"    public void setTaskTrackerFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaskTrackerFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":2,"-":19}},{"path":"src/test/java/seedu/address/model/person/ModuleNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"mrweikiat"},"content":"public class ModuleNameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        // different task -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"mrweikiat"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"mrweikiat"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitId":"mrweikiat"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"                .withEmail(\"alice@email.com\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"mrweikiat":9,"danielonges":1,"-":64}},{"path":"src/test/java/seedu/address/model/person/ModuleNameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mrweikiat"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":3,"author":{"gitId":"mrweikiat"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"mrweikiat"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":7,"author":{"gitId":"mrweikiat"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":9,"author":{"gitId":"mrweikiat"},"content":"public class ModuleNameTest {"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"mrweikiat"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"mrweikiat"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ModuleName(null));"},{"lineNumber":14,"author":{"gitId":"mrweikiat"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":16,"author":{"gitId":"mrweikiat"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"mrweikiat"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"mrweikiat"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleName(invalidName));"},{"lineNumber":20,"author":{"gitId":"mrweikiat"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":22,"author":{"gitId":"mrweikiat"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"mrweikiat"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"mrweikiat"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"mrweikiat"},"content":"        assertThrows(NullPointerException.class, () -\u003e ModuleName.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":27,"author":{"gitId":"mrweikiat"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"mrweikiat"},"content":"        assertFalse(ModuleName.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"mrweikiat"},"content":"        assertFalse(ModuleName.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"mrweikiat"},"content":"        assertFalse(ModuleName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"mrweikiat"},"content":"        assertFalse(ModuleName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"mrweikiat"},"content":""},{"lineNumber":33,"author":{"gitId":"mrweikiat"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(ModuleName.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(ModuleName.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(ModuleName.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(ModuleName.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"mrweikiat"},"content":"        assertTrue(ModuleName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitId":"mrweikiat"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"mrweikiat"},"content":"}"}],"authorContributionMap":{"mrweikiat":40}},{"path":"src/test/java/seedu/address/model/person/TaskTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.ALICE;"},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"public class TaskTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":21,"author":{"gitId":"mrweikiat"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":22,"author":{"gitId":"mrweikiat"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public void isSameTask() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        assertTrue(ALICE.isSameTask(ALICE));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        assertFalse(ALICE.isSameTask(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"        Task editedAlice \u003d new TaskBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        assertTrue(ALICE.isSameTask(editedAlice));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"mrweikiat"},"content":"        editedAlice \u003d new TaskBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"        assertFalse(ALICE.isSameTask(editedAlice));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"mrweikiat"},"content":"        Task editedBob \u003d new TaskBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"        assertFalse(BOB.isSameTask(editedBob));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":48,"author":{"gitId":"mrweikiat"},"content":"        editedBob \u003d new TaskBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        assertFalse(BOB.isSameTask(editedBob));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitId":"mrweikiat"},"content":"        Task aliceCopy \u003d new TaskBuilder(ALICE).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"        // different task -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"mrweikiat"},"content":"        Task editedAlice \u003d new TaskBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"mrweikiat"},"content":"        editedAlice \u003d new TaskBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":79,"author":{"gitId":"mrweikiat"},"content":"        editedAlice \u003d new TaskBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":83,"author":{"gitId":"mrweikiat"},"content":"        editedAlice \u003d new TaskBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":2,"mrweikiat":15,"danielonges":7,"-":62}},{"path":"src/test/java/seedu/address/model/person/UniqueTaskListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.ALICE;"},{"lineNumber":9,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.person.exceptions.DuplicateTaskException;"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.person.exceptions.TaskNotFoundException;"},{"lineNumber":19,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"mrweikiat"},"content":"public class UniqueTaskListTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public void contains_nullTask_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    public void contains_taskNotInList_returnsFalse() {"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        assertFalse(uniqueTaskList.contains(ALICE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    public void contains_taskInList_returnsTrue() {"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"        assertTrue(uniqueTaskList.contains(ALICE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":44,"author":{"gitId":"mrweikiat"},"content":"        Task editedAlice \u003d new TaskBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"        assertTrue(uniqueTaskList.contains(editedAlice));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    public void add_nullTask_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"    public void add_duplicateTask_throwsDuplicateTaskException() {"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(ALICE));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"    public void setTask_nullTargetTask_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, ALICE));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"    public void setTask_nullEditedTask_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(ALICE, null));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(ALICE, ALICE));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"    public void setTask_editedTaskIsSameTask_success() {"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.setTask(ALICE, ALICE);"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"        expectedUniqueTaskList.add(ALICE);"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"    public void setTask_editedTaskHasSameIdentity_success() {"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":87,"author":{"gitId":"mrweikiat"},"content":"        Task editedAlice \u003d new TaskBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.setTask(ALICE, editedAlice);"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"        expectedUniqueTaskList.add(editedAlice);"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"    public void setTask_editedTaskHasDifferentIdentity_success() {"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.setTask(ALICE, BOB);"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"        expectedUniqueTaskList.add(BOB);"},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(BOB);"},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(ALICE, BOB));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"geraldfan"},"content":"    public void remove_nullTask_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(ALICE));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"    public void remove_existingTask_removesTask() {"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.remove(ALICE);"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":126,"author":{"gitId":"geraldfan"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"geraldfan"},"content":"    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"geraldfan"},"content":"    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"},{"lineNumber":136,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":137,"author":{"gitId":"geraldfan"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":138,"author":{"gitId":"geraldfan"},"content":"        expectedUniqueTaskList.add(BOB);"},{"lineNumber":139,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.setTasks(expectedUniqueTaskList);"},{"lineNumber":140,"author":{"gitId":"geraldfan"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"geraldfan"},"content":"    public void setTasks_nullList_throwsNullPointerException() {"},{"lineNumber":145,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"geraldfan"},"content":"    public void setTasks_list_replacesOwnListWithProvidedList() {"},{"lineNumber":150,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.add(ALICE);"},{"lineNumber":151,"author":{"gitId":"mrweikiat"},"content":"        List\u003cTask\u003e taskList \u003d Collections.singletonList(BOB);"},{"lineNumber":152,"author":{"gitId":"geraldfan"},"content":"        uniqueTaskList.setTasks(taskList);"},{"lineNumber":153,"author":{"gitId":"geraldfan"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":154,"author":{"gitId":"geraldfan"},"content":"        expectedUniqueTaskList.add(BOB);"},{"lineNumber":155,"author":{"gitId":"geraldfan"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"geraldfan"},"content":"    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"},{"lineNumber":160,"author":{"gitId":"mrweikiat"},"content":"        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":161,"author":{"gitId":"geraldfan"},"content":"        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":167,"author":{"gitId":"geraldfan"},"content":"            -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":74,"mrweikiat":8,"-":87}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"mrweikiat"},"content":"public class JsonAdaptedTaskTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"mrweikiat"},"content":"    private static final String VALID_NAME \u003d BENSON.getModuleName().toString();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    public void toModelType_validTaskDetails_returnsTask() throws Exception {"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"        JsonAdaptedTask task \u003d new JsonAdaptedTask(BENSON);"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        assertEquals(BENSON, task.toModelType());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        JsonAdaptedTask task \u003d"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"                new JsonAdaptedTask(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);"},{"lineNumber":43,"author":{"gitId":"mrweikiat"},"content":"        String expectedMessage \u003d ModuleName.MESSAGE_CONSTRAINTS;"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        JsonAdaptedTask task \u003d new JsonAdaptedTask(null, VALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);"},{"lineNumber":50,"author":{"gitId":"mrweikiat"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleName.class.getSimpleName());"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"        JsonAdaptedTask task \u003d"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"                new JsonAdaptedTask(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, null, VALID_EMAIL, VALID_REMARK, VALID_TAGS);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        JsonAdaptedTask task \u003d"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"                new JsonAdaptedTask(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_REMARK, VALID_TAGS);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_NAME, VALID_PHONE, null, VALID_REMARK, VALID_TAGS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"        JsonAdaptedTask task \u003d"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"                new JsonAdaptedTask(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_REMARK, invalidTags);"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"        assertThrows(IllegalValueException.class, task::toModelType);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":14,"mrweikiat":7,"danielonges":8,"-":64}},{"path":"src/test/java/seedu/address/storage/JsonSerializableTaskTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":14,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.testutil.TypicalTasks;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"public class JsonSerializableTaskTrackerTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskTrackerTest\");"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksTaskTracker.json\");"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskTaskTracker.json\");"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskTaskTracker.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    public void toModelType_typicalTasksFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        JsonSerializableTaskTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"                JsonSerializableTaskTracker.class).get();"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"        TaskTracker taskTrackerFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        TaskTracker typicalTasksTaskTracker \u003d TypicalTasks.getTypicalTaskTracker();"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        assertEquals(taskTrackerFromFile, typicalTasksTaskTracker);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        JsonSerializableTaskTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"                JsonSerializableTaskTracker.class).get();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        JsonSerializableTaskTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"                JsonSerializableTaskTracker.class).get();"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableTaskTracker.MESSAGE_DUPLICATE_TASK,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":19,"mrweikiat":1,"-":27}},{"path":"src/test/java/seedu/address/storage/JsonTaskTrackerStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.ALICE;"},{"lineNumber":7,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.HOON;"},{"lineNumber":8,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.IDA;"},{"lineNumber":9,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"public class JsonTaskTrackerStorageTest {"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTaskTrackerStorageTest\");"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    public void readTaskTracker_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e readTaskTracker(null));"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    private java.util.Optional\u003cReadOnlyTaskTracker\u003e readTaskTracker(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        return new JsonTaskTrackerStorage(Paths.get(filePath)).readTaskTracker(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"        assertFalse(readTaskTracker(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"        assertThrows(DataConversionException.class, () -\u003e readTaskTracker(\"notJsonFormatTaskTracker.json\"));"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"    public void readTaskTracker_invalidTaskTaskTracker_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"        assertThrows(DataConversionException.class, () -\u003e readTaskTracker(\"invalidTaskTaskTracker.json\"));"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"    public void readTaskTracker_invalidAndValidTaskTaskTracker_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        assertThrows(DataConversionException.class, () -\u003e readTaskTracker(\"invalidAndValidTaskTaskTracker.json\"));"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"    public void readAndSaveTaskTracker_allInOrder_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"        Path filePath \u003d testFolder.resolve(\"TempTaskTracker.json\");"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"        TaskTracker original \u003d getTypicalTaskTracker();"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"        JsonTaskTrackerStorage jsonTaskTrackerStorage \u003d new JsonTaskTrackerStorage(filePath);"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        // Save in new file and read back"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"        jsonTaskTrackerStorage.saveTaskTracker(original, filePath);"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        ReadOnlyTaskTracker readBack \u003d jsonTaskTrackerStorage.readTaskTracker(filePath).get();"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"        assertEquals(original, new TaskTracker(readBack));"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"        original.addTask(HOON);"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"        original.removeTask(ALICE);"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"        jsonTaskTrackerStorage.saveTaskTracker(original, filePath);"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"        readBack \u003d jsonTaskTrackerStorage.readTaskTracker(filePath).get();"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"        assertEquals(original, new TaskTracker(readBack));"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"        // Save and read without specifying file path"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"        original.addTask(IDA);"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"        jsonTaskTrackerStorage.saveTaskTracker(original); // file path not specified"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"        readBack \u003d jsonTaskTrackerStorage.readTaskTracker().get(); // file path not specified"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"        assertEquals(original, new TaskTracker(readBack));"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"    public void saveTaskTracker_nullTaskTracker_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveTaskTracker(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":"     * Saves {@code taskTracker} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"    private void saveTaskTracker(ReadOnlyTaskTracker taskTracker, String filePath) {"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"            new JsonTaskTrackerStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"                    .saveTaskTracker(taskTracker, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"geraldfan"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"    public void saveTaskTracker_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveTaskTracker(new TaskTracker(), null));"},{"lineNumber":109,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":106,"mrweikiat":4}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"        userPrefs.setTaskTrackerFilePath(Paths.get(\"tasktracker.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":1,"-":122}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"mrweikiat"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTaskTracker;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.ReadOnlyTaskTracker;"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"        JsonTaskTrackerStorage taskTrackerStorage \u003d new JsonTaskTrackerStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        storageManager \u003d new StorageManager(taskTrackerStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"    public void taskTrackerReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"         * {@link JsonTaskTrackerStorage} class."},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonTaskTrackerStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        TaskTracker original \u003d getTypicalTaskTracker();"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        storageManager.saveTaskTracker(original);"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        ReadOnlyTaskTracker retrieved \u003d storageManager.readTaskTracker().get();"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        assertEquals(original, new TaskTracker(retrieved));"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"    public void getTaskTrackerFilePath() {"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"        assertNotNull(storageManager.getTaskTrackerFilePath());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":14,"mrweikiat":1,"-":54}},{"path":"src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":" * A utility class to help with building EditTaskDescriptor objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"public class EditTaskDescriptorBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    private EditTaskDescriptor descriptor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"mrweikiat"},"content":"    public EditTaskDescriptorBuilder() {"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"        this.descriptor \u003d new EditTaskDescriptor(descriptor);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"mrweikiat"},"content":"    public EditTaskDescriptorBuilder(Task task) {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"        descriptor.setModuleName(task.getModuleName());"},{"lineNumber":35,"author":{"gitId":"mrweikiat"},"content":"        descriptor.setPhone(task.getPhone());"},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"        descriptor.setEmail(task.getEmail());"},{"lineNumber":37,"author":{"gitId":"mrweikiat"},"content":"        descriptor.setTags(task.getTags());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"     * Sets the {@code ModuleName} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"mrweikiat"},"content":"    public EditTaskDescriptorBuilder withName(String name) {"},{"lineNumber":44,"author":{"gitId":"mrweikiat"},"content":"        descriptor.setModuleName(new ModuleName(name));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"     * Sets the {@code Phone} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"mrweikiat"},"content":"    public EditTaskDescriptorBuilder withPhone(String phone) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"     * Sets the {@code Email} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"mrweikiat"},"content":"    public EditTaskDescriptorBuilder withEmail(String email) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"mrweikiat"},"content":"    public EditTaskDescriptorBuilder withTags(String... tags) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"    public EditTaskDescriptor build() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":13,"mrweikiat":14,"-":50}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.ModuleName;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"public class TaskBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"mrweikiat"},"content":"    private ModuleName moduleName;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    private Remark remark;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"mrweikiat"},"content":"     * Creates a {@code TaskBuilder} with the default details."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"mrweikiat"},"content":"    public TaskBuilder() {"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"        moduleName \u003d new ModuleName(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"mrweikiat"},"content":"     * Initializes the TaskBuilder with the data of {@code personToCopy}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"mrweikiat"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":45,"author":{"gitId":"mrweikiat"},"content":"        moduleName \u003d taskToCopy.getModuleName();"},{"lineNumber":46,"author":{"gitId":"mrweikiat"},"content":"        phone \u003d taskToCopy.getPhone();"},{"lineNumber":47,"author":{"gitId":"mrweikiat"},"content":"        email \u003d taskToCopy.getEmail();"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"        remark \u003d taskToCopy.getRemark();"},{"lineNumber":49,"author":{"gitId":"mrweikiat"},"content":"        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"mrweikiat"},"content":"     * Sets the {@code ModuleName} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"mrweikiat"},"content":"    public TaskBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"mrweikiat"},"content":"        this.moduleName \u003d new ModuleName(name);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"mrweikiat"},"content":"    public TaskBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"mrweikiat"},"content":"    public TaskBuilder withPhone(String phone) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"mrweikiat"},"content":"    public TaskBuilder withEmail(String email) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"    public TaskBuilder withRemark(String remark) {"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":92,"author":{"gitId":"mrweikiat"},"content":"    public Task build() {"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"        return new Task(moduleName, phone, email, remark, tags);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mrweikiat":20,"danielonges":14,"-":62}},{"path":"src/test/java/seedu/address/testutil/TaskTrackerBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":4,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":" * A utility class to help with building TaskTracker objects."},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" *     {@code TaskTracker ab \u003d new TaskTrackerBuilder().withTask(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"public class TaskTrackerBuilder {"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    private TaskTracker taskTracker;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    public TaskTrackerBuilder() {"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"        taskTracker \u003d new TaskTracker();"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    public TaskTrackerBuilder(TaskTracker taskTracker) {"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"        this.taskTracker \u003d taskTracker;"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"     * Adds a new {@code Task} to the {@code TaskTracker} that we are building."},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public TaskTrackerBuilder withTask(Task task) {"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"        taskTracker.addTask(task);"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    public TaskTracker build() {"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        return taskTracker;"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":33,"mrweikiat":1}},{"path":"src/test/java/seedu/address/testutil/TaskUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"},{"lineNumber":12,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":" * A utility class for Task."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"mrweikiat"},"content":"public class TaskUtil {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"     * Returns an add command string for adding the {@code task}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"mrweikiat"},"content":"    public static String getAddCommand(Task task) {"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"     * Returns the part of command string for the given {@code task}\u0027s details."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"    public static String getTaskDetails(Task task) {"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        // add and edit do not have remark fields"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"mrweikiat"},"content":"        sb.append(PREFIX_NAME + task.getModuleName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"        sb.append(PREFIX_PHONE + task.getPhone().value + \" \");"},{"lineNumber":35,"author":{"gitId":"mrweikiat"},"content":"        sb.append(PREFIX_EMAIL + task.getEmail().value + \" \");"},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"        task.getTags().stream().forEach("},{"lineNumber":37,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        // currently edit does not support editing of remarks"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"mrweikiat"},"content":"        descriptor.getModuleName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":8,"mrweikiat":8,"danielonges":2,"-":43}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"     * Returns the middle index of the task in the {@code model}\u0027s task list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"     * Returns the last index of the task in the {@code model}\u0027s task list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"        return Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"     * Returns the task in the {@code model}\u0027s task list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"    public static Task getTask(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"        return model.getFilteredTaskList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":7,"mrweikiat":1,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalTasks.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"import seedu.address.model.TaskTracker;"},{"lineNumber":17,"author":{"gitId":"mrweikiat"},"content":"import seedu.address.model.person.Task;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"mrweikiat"},"content":"public class TypicalTasks {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"mrweikiat"},"content":"    public static final Task ALICE \u003d new TaskBuilder().withName(\"Alice Pauline\")"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"            .withPhone(\"94351253\").withEmail(\"alice@example.com\")"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"            .withRemark(\"Likes skiing.\").withTags(\"friends\").build();"},{"lineNumber":27,"author":{"gitId":"mrweikiat"},"content":"    public static final Task BENSON \u003d new TaskBuilder().withName(\"Benson Meier\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"            .withRemark(\"Favourite pastime: Eating\").withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":30,"author":{"gitId":"mrweikiat"},"content":"    public static final Task CARL \u003d new TaskBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"            .withEmail(\"heinz@example.com\").build();"},{"lineNumber":32,"author":{"gitId":"mrweikiat"},"content":"    public static final Task DANIEL \u003d new TaskBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"},{"lineNumber":34,"author":{"gitId":"mrweikiat"},"content":"    public static final Task ELLE \u003d new TaskBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"            .withEmail(\"werner@example.com\").build();"},{"lineNumber":36,"author":{"gitId":"mrweikiat"},"content":"    public static final Task FIONA \u003d new TaskBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"            .withEmail(\"lydia@example.com\").build();"},{"lineNumber":38,"author":{"gitId":"mrweikiat"},"content":"    public static final Task GEORGE \u003d new TaskBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"            .withEmail(\"anna@example.com\").build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":42,"author":{"gitId":"mrweikiat"},"content":"    public static final Task HOON \u003d new TaskBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"            .withEmail(\"stefan@example.com\").build();"},{"lineNumber":44,"author":{"gitId":"mrweikiat"},"content":"    public static final Task IDA \u003d new TaskBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"            .withEmail(\"hans@example.com\").build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":48,"author":{"gitId":"mrweikiat"},"content":"    public static final Task AMY \u003d new TaskBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":50,"author":{"gitId":"mrweikiat"},"content":"    public static final Task BOB \u003d new TaskBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"mrweikiat"},"content":"    private TypicalTasks() {} // prevents instantiation"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"     * Returns an {@code TaskTracker} with all the typical tasks."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"    public static TaskTracker getTypicalTaskTracker() {"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        TaskTracker ab \u003d new TaskTracker();"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        for (Task task : getTypicalTasks()) {"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"            ab.addTask(task);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":9,"mrweikiat":14,"danielonges":12,"-":37}}]
