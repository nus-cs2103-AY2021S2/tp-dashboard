[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-W16-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-W16-1/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":"Are you always overwhelmed by a lot of commitments and struggling to keep track of them?"},{"lineNumber":6,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":"Introducing **SOChedule**, **a desktop task managing app** that will make your life much easier:"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"* SOChedule is a one-stop solution for managing tasks and events, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":"* This app is meant for users who can type fast, and prefer typing over mouse/voice commands."},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":"## About Us"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"For more details on our project team members, do check out the [AboutUs](https://github.com/AY2021S2-CS2103-W16-1/tp/blob/master/docs/AboutUs.md) page."},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":"## User Guide"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":"For more information on how to use SOChedule, you may refer to the [User Guide](https://github.com/AY2021S2-CS2103-W16-1/tp/blob/master/docs/UserGuide.md)."},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":17,"author":{"gitId":"YuFeng0930"},"content":"## Developer Guide"},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"For more information on how we develop SOChedule, you may refer to the [Developer Guide](https://github.com/AY2021S2-CS2103-W16-1/tp/blob/master/docs/DeveloperGuide.md)."},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":20,"author":{"gitId":"YuFeng0930"},"content":"## Acknowledgments"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"This project is based on the AddressBook-Level3 project, created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"YuFeng0930":17,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"### Cheng Yu Feng"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"\u003cimg src\u003d\"images/yufeng0930.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"[[github](https://github.com/YuFeng0930)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"* Role: Developer"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"* Responsibilities: Events Team"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"### Ding You Jia, Danelynn"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"\u003cimg src\u003d\"images/icelenaugust.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"[[github](http://github.com/icelenaugust)]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"* Role: Developer"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"* Responsibilities: Tasks Team"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"### Li Jiahe"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"\u003cimg src\u003d\"images/ljhgab.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"[[github](https://github.com/ljhgab)]"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"* Responsibilities: Tasks Team"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"### Yap Jing Kang"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"\u003cimg src\u003d\"images/souluseless.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"[[github](http://github.com/souluseless)]"},{"lineNumber":47,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"* Responsibilities: Tasks Team"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"### Yu Jiaxiang"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"\u003cimg src\u003d\"images/litone01.png\" width\u003d\"200px\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"[[github](http://github.com/litone01)]"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"[[portfolio](team/litone01.md)]"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"* Responsibilities: Events Team"}],"authorContributionMap":{"YuFeng0930":2,"icelenaugust":2,"-":36,"SoulUseless":13,"ljhgab":3,"litone01":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":" "},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"SoulUseless"},"content":"* NUS SOC Student"},{"lineNumber":240,"author":{"gitId":"SoulUseless"},"content":"* Prefer using CLI rather than GUI"},{"lineNumber":241,"author":{"gitId":"SoulUseless"},"content":"* Struggle to manage their schedule"},{"lineNumber":242,"author":{"gitId":"SoulUseless"},"content":"* Have a lot commitments (6 modules, TA and RA roles while balancing a part time internship)"},{"lineNumber":243,"author":{"gitId":"SoulUseless"},"content":"* Can type fast, hate mouse"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"SoulUseless"},"content":"**Value proposition**:"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"SoulUseless"},"content":"* Provide a simple platform for target users to manage their schedule"},{"lineNumber":248,"author":{"gitId":"SoulUseless"},"content":"* CLI commands to manage meetings or schedule with some contacts"},{"lineNumber":249,"author":{"gitId":"SoulUseless"},"content":"* CLI commands to add tasks and reminders"},{"lineNumber":250,"author":{"gitId":"SoulUseless"},"content":"* GUI to display the schedule of user"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"icelenaugust"},"content":"| Priority | As a …​                            | I want to …​                                                        | So that …​                                                                |"},{"lineNumber":257,"author":{"gitId":"icelenaugust"},"content":"| -------- | ------------------------------------- | ---------------------------------------------------------------------- | ---------------------------------------------------------------------------- |"},{"lineNumber":258,"author":{"gitId":"icelenaugust"},"content":"| `* * *`  | SOC Student                           | Add a task to my schedule                                              | I can track my task better                                                   |"},{"lineNumber":259,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | Allocate a priority score to a task                                    | I can prioritise my time better                                              |"},{"lineNumber":260,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | Edit a task in my schedule                                             | I can have flexibility in my schedule                                        |"},{"lineNumber":261,"author":{"gitId":"SoulUseless"},"content":"| `* * *`  | SOC Student                           | Mark a task complete in my schedule                                    | I can track which tasks I have completed                                     |"},{"lineNumber":262,"author":{"gitId":"SoulUseless"},"content":"| `* * *`  | SOC Student                           | Delete a task from my schedule from my schedule                        | I can have flexibility in my schedule                                        |"},{"lineNumber":263,"author":{"gitId":"icelenaugust"},"content":"| `* * *`  | SOC Student                           | View tasks in my schedule                                              | I can have a better sense of what will happen in the following days or weeks |"},{"lineNumber":264,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | Sort my tasks in my schedule in various orderings                      | I can prioritise my time better                                              |"},{"lineNumber":265,"author":{"gitId":"SoulUseless"},"content":"| `*`      | Forgetful SOC Student                 | Get reminders from SOChedule regarding task deadlines                  | I will not lose track of my tasks                                            |"},{"lineNumber":266,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC student under huge workload       | View my schedule to see my free time slots                             | I can allocate my time better and fill it up with more tasks                 |"},{"lineNumber":267,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student                           | View the people that I need to work with for a specific event          | I can keep in touch with the person better                                   |"},{"lineNumber":268,"author":{"gitId":"icelenaugust"},"content":"| `* * *`  | SOC Student                           | Add an event (with the required information) to my schedule            | I can track my time better                                                   |"},{"lineNumber":269,"author":{"gitId":"icelenaugust"},"content":"| `* *`    | SOC Student                           | Add recurring events (with the required information) to my schedule    | I can plan ahead for my schedule                                             |"},{"lineNumber":270,"author":{"gitId":"icelenaugust"},"content":"| `*`      | SOC Student                           | Add a person that I have to work with to an event in my schedule       | I can track who I need to work with for an even                              |"},{"lineNumber":271,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student                           | Add a meeting link to an event in my schedule                          | I can quickly join a online meeting                                          |"},{"lineNumber":272,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | Edit event description in my schedule                                  | I can have flexibility in my schedule                                        |"},{"lineNumber":273,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | Edit the event time in my schedule                                     | I can have flexibility in my schedule                                        |"},{"lineNumber":274,"author":{"gitId":"icelenaugust"},"content":"| `* * *`  | SOC Student                           | Delete an event from my schedule from my schedule                      | I can have flexibility in my schedule                                        |"},{"lineNumber":275,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student                           | Remove the person I am working with for an event                       | I can track who I need to work with for an event                             |"},{"lineNumber":276,"author":{"gitId":"SoulUseless"},"content":"| `* * *`  | SOC Student                           | View events in my schedule                                             | I can have a better sense of what will happen in the following days or weeks |"},{"lineNumber":277,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | View events for today                                                  | I can have a better sense of what will happen in the following hours         |"},{"lineNumber":278,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | Sort the tasks based on the deadline                                   | I can proceed with the task that is closer to the deadline                   |"},{"lineNumber":279,"author":{"gitId":"icelenaugust"},"content":"| `*`      | SOC Student                           | Get alerts for impending events                                        | I can prepare ahead of time for the event                                    |"},{"lineNumber":280,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student                           | Add the schedule of what I want to do and what I really do             | I can reflect which part of the day being not productive                     |"},{"lineNumber":281,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student                           | Set alert time frame for events                                        | I can prepare ahead of time                                                  |"},{"lineNumber":282,"author":{"gitId":"icelenaugust"},"content":"| `* *`    | SOC Student                           | Set colours to events                                                  | I can categorise my events                                                   |"},{"lineNumber":283,"author":{"gitId":"icelenaugust"},"content":"| `* *`    | SOC Student                           | Set colours to tasks                                                   | I can categorise my tasks                                                    |"},{"lineNumber":284,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | highlight the events that are very important                           | I can differentiate the important tasks from the rest                        |"},{"lineNumber":285,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student                           | record the progress of a habit user want to cultivate                  | I can cultivate a lot of good habits                                         |"},{"lineNumber":286,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student                           | write a diary each day                                                 | I can record my life                                                         |"},{"lineNumber":287,"author":{"gitId":"icelenaugust"},"content":"| `*`      | SOC Student with many project modules | know who I am doing the task with                                      | it is easier to schedule meetings or discussions with my group mates         |"},{"lineNumber":288,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student                           | keep track of the progress of each module                              | I can finish all tasks well and on time                                      |"},{"lineNumber":289,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | categorise my tasks                                                    | I can group my tasks to have a clearer schedule                              |"},{"lineNumber":290,"author":{"gitId":"SoulUseless"},"content":"| `* *`    | SOC Student                           | find out the free time between events                                  | fill in other activities to achieve better time management                   |"},{"lineNumber":291,"author":{"gitId":"SoulUseless"},"content":"| `*`      | SOC Student taking several projects   | have a better sense on the project tasks assigned and the due date     | I can finish the tasks assigned on time                                      |"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"icelenaugust"},"content":"(For all use cases below, the **System** is the `SOChedule` and the **Actor** is the `User`, unless specified otherwise)"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"SoulUseless"},"content":"**Use case: UC01 - Add a task**"},{"lineNumber":300,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":301,"author":{"gitId":"SoulUseless"},"content":"**MSS**"},{"lineNumber":302,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":303,"author":{"gitId":"SoulUseless"},"content":"1. User wishes to add a new task."},{"lineNumber":304,"author":{"gitId":"SoulUseless"},"content":"2. User enters the required parameters."},{"lineNumber":305,"author":{"gitId":"SoulUseless"},"content":"3. SOChedule displays a success message for adding the task."},{"lineNumber":306,"author":{"gitId":"SoulUseless"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":307,"author":{"gitId":"SoulUseless"},"content":"Use case ends."},{"lineNumber":308,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":309,"author":{"gitId":"SoulUseless"},"content":"**Extensions**"},{"lineNumber":310,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":311,"author":{"gitId":"SoulUseless"},"content":"* 2a. Some required information about the event is missing in the command."},{"lineNumber":312,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":313,"author":{"gitId":"SoulUseless"},"content":"    * 1a1. SOChedule displays an error message suggesting that information provided when creating"},{"lineNumber":314,"author":{"gitId":"SoulUseless"},"content":"      the event is incomplete."},{"lineNumber":315,"author":{"gitId":"SoulUseless"},"content":"      Use case ends."},{"lineNumber":316,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":317,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":318,"author":{"gitId":"SoulUseless"},"content":"* 2b. The date provided for the event is invalid"},{"lineNumber":319,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":320,"author":{"gitId":"SoulUseless"},"content":"    * 1b1. SOChedule displays an error message suggesting that date provied for the event"},{"lineNumber":321,"author":{"gitId":"SoulUseless"},"content":"      is invalid, or not following the `YYYY-MM-DD` format."},{"lineNumber":322,"author":{"gitId":"SoulUseless"},"content":"      Use case ends."},{"lineNumber":323,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":324,"author":{"gitId":"SoulUseless"},"content":"**Use case: UC02 - List tasks**"},{"lineNumber":325,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":326,"author":{"gitId":"SoulUseless"},"content":"**MSS**"},{"lineNumber":327,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":328,"author":{"gitId":"SoulUseless"},"content":"1. User wishes to add a new task."},{"lineNumber":329,"author":{"gitId":"SoulUseless"},"content":"2. User enters the corresponding command."},{"lineNumber":330,"author":{"gitId":"SoulUseless"},"content":"3. SOChedule displays all tasks."},{"lineNumber":331,"author":{"gitId":"SoulUseless"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":332,"author":{"gitId":"SoulUseless"},"content":"Use case ends."},{"lineNumber":333,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":334,"author":{"gitId":"SoulUseless"},"content":"**Use case: UC03 - Delete a task**"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"SoulUseless"},"content":"1. User requests to \u003cu\u003e list tasks (UC02)\u003c/u\u003e."},{"lineNumber":339,"author":{"gitId":"YuFeng0930"},"content":"2. SOChedule shows a list of tasks."},{"lineNumber":340,"author":{"gitId":"icelenaugust"},"content":"3. User chooses to delete a task."},{"lineNumber":341,"author":{"gitId":"icelenaugust"},"content":"4. User enters the index of the task to be deleted."},{"lineNumber":342,"author":{"gitId":"icelenaugust"},"content":"5. SOChedule displays a success message for deleting the task."},{"lineNumber":343,"author":{"gitId":"SoulUseless"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":344,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"icelenaugust"},"content":"* 2a. The task list is empty."},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"SoulUseless"},"content":"  \u003cbr\u003e"},{"lineNumber":353,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"icelenaugust"},"content":"    * 3a1. SOChedule shows an error message."},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"SoulUseless"},"content":"**Use case: UC04 - Mark a task as completed**"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"ljhgab"},"content":"**MSS**"},{"lineNumber":363,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":364,"author":{"gitId":"SoulUseless"},"content":"1. User requests to \u003cu\u003e list tasks (UC02)\u003c/u\u003e."},{"lineNumber":365,"author":{"gitId":"ljhgab"},"content":"2. SOChedule shows a list of tasks."},{"lineNumber":366,"author":{"gitId":"ljhgab"},"content":"3. User chooses to mark a task as completed."},{"lineNumber":367,"author":{"gitId":"ljhgab"},"content":"4. User enters the index of the task to be marked."},{"lineNumber":368,"author":{"gitId":"ljhgab"},"content":"5. SOChedule displays a success message for marking the task as completed."},{"lineNumber":369,"author":{"gitId":"SoulUseless"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":370,"author":{"gitId":"ljhgab"},"content":"Use case ends."},{"lineNumber":371,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":372,"author":{"gitId":"ljhgab"},"content":"**Extensions**"},{"lineNumber":373,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":374,"author":{"gitId":"ljhgab"},"content":"* 2a. The task list is empty."},{"lineNumber":375,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":376,"author":{"gitId":"ljhgab"},"content":"  Use case ends."},{"lineNumber":377,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":378,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":379,"author":{"gitId":"ljhgab"},"content":"* 3a. The given index is invalid."},{"lineNumber":380,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":381,"author":{"gitId":"ljhgab"},"content":"    * 3a1. SOChedule shows an error message indicating the invalidity of the index."},{"lineNumber":382,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":383,"author":{"gitId":"ljhgab"},"content":"      Use case resumes at step 2."},{"lineNumber":384,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":385,"author":{"gitId":"SoulUseless"},"content":"**Use case: UC05 - Add an event**"},{"lineNumber":386,"author":{"gitId":"litone01"},"content":""},{"lineNumber":387,"author":{"gitId":"litone01"},"content":"**MSS**"},{"lineNumber":388,"author":{"gitId":"litone01"},"content":""},{"lineNumber":389,"author":{"gitId":"litone01"},"content":"1. User requests to add a new event."},{"lineNumber":390,"author":{"gitId":"litone01"},"content":"1. SOChedule displays a success message for adding the event."},{"lineNumber":391,"author":{"gitId":"SoulUseless"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":392,"author":{"gitId":"litone01"},"content":"Use case ends."},{"lineNumber":393,"author":{"gitId":"litone01"},"content":""},{"lineNumber":394,"author":{"gitId":"litone01"},"content":"**Extensions**"},{"lineNumber":395,"author":{"gitId":"litone01"},"content":""},{"lineNumber":396,"author":{"gitId":"litone01"},"content":"* 1a. Some required information about the event is missing in the command."},{"lineNumber":397,"author":{"gitId":"litone01"},"content":""},{"lineNumber":398,"author":{"gitId":"litone01"},"content":"    * 1a1. SOChedule displays an error message suggesting that information provided when creating"},{"lineNumber":399,"author":{"gitId":"litone01"},"content":"      the event is incomplete."},{"lineNumber":400,"author":{"gitId":"litone01"},"content":"      Use case ends."},{"lineNumber":401,"author":{"gitId":"litone01"},"content":""},{"lineNumber":402,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":403,"author":{"gitId":"litone01"},"content":"* 1b. The date provided for the event is invalid"},{"lineNumber":404,"author":{"gitId":"litone01"},"content":""},{"lineNumber":405,"author":{"gitId":"SoulUseless"},"content":"    * 1b1. SOChedule displays an error message suggesting that date provided for the event"},{"lineNumber":406,"author":{"gitId":"litone01"},"content":"      is invalid, or not following the `YYYY-MM-DD` format."},{"lineNumber":407,"author":{"gitId":"litone01"},"content":"      Use case ends."},{"lineNumber":408,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":409,"author":{"gitId":"SoulUseless"},"content":"**Use case: UC06 - List events**"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"SoulUseless"},"content":"1. User requests to list all events in the SOChedule."},{"lineNumber":414,"author":{"gitId":"SoulUseless"},"content":"1. SOChedule displays a list of all events added."},{"lineNumber":415,"author":{"gitId":"SoulUseless"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":416,"author":{"gitId":"SoulUseless"},"content":"Use case ends."},{"lineNumber":417,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":418,"author":{"gitId":"SoulUseless"},"content":"**Extensions**"},{"lineNumber":419,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":420,"author":{"gitId":"SoulUseless"},"content":"* 1a. No events have been added."},{"lineNumber":421,"author":{"gitId":"SoulUseless"},"content":"    * 1a1. SOChedule displays an empty list."},{"lineNumber":422,"author":{"gitId":"SoulUseless"},"content":"      Use case ends."},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"SoulUseless"},"content":"**Use case: UC07 - Delete an event**"},{"lineNumber":425,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":426,"author":{"gitId":"SoulUseless"},"content":"**MSS**"},{"lineNumber":427,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":428,"author":{"gitId":"SoulUseless"},"content":"1. User requests to \u003cu\u003e list events (UC06)\u003c/u\u003e."},{"lineNumber":429,"author":{"gitId":"YuFeng0930"},"content":"2. SOChedule shows a list of events."},{"lineNumber":430,"author":{"gitId":"YuFeng0930"},"content":"3. User chooses to delete an event."},{"lineNumber":431,"author":{"gitId":"YuFeng0930"},"content":"4. User enters the index of the event to be deleted."},{"lineNumber":432,"author":{"gitId":"YuFeng0930"},"content":"5. SOChedule displays a success message for deleting the event."},{"lineNumber":433,"author":{"gitId":"SoulUseless"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":434,"author":{"gitId":"YuFeng0930"},"content":"Use case ends."},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"YuFeng0930"},"content":"* 2a. The event scheduler is empty."},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"YuFeng0930"},"content":"    * 3a1. SOChedule shows an error message."},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"litone01"},"content":"      "},{"lineNumber":450,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":455,"author":{"gitId":"SoulUseless"},"content":"1.  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."},{"lineNumber":456,"author":{"gitId":"SoulUseless"},"content":"1.  Should be able to hold up to 500 events without a noticeable sluggishness in performance for typical usage."},{"lineNumber":457,"author":{"gitId":"SoulUseless"},"content":"1.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":458,"author":{"gitId":"SoulUseless"},"content":"1.  Should give a response to user\u0027s input within 5 seconds."},{"lineNumber":459,"author":{"gitId":"SoulUseless"},"content":"1.  The user interface should be intuitive to a SoC freshman with little knowledge about programming."},{"lineNumber":460,"author":{"gitId":"SoulUseless"},"content":"1.  The source code should be open source."},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":467,"author":{"gitId":"SoulUseless"},"content":"* **Event**: Activities that start at a specific time and ends at a specific time."},{"lineNumber":468,"author":{"gitId":"SoulUseless"},"content":"* **Task**: Activities to be undertaken that can be marked complete/incomplete. Optionally it has a date field to indicate deadlines."},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":475,"author":{"gitId":"-"},"content":""},{"lineNumber":476,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":477,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":488,"author":{"gitId":"-"},"content":""},{"lineNumber":489,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":494,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"litone01"},"content":"### Deleting a task (Not in use yet)"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"litone01"},"content":"1. Deleting a task while all tasks are being shown"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"litone01"},"content":"   1. Prerequisites: List all tasks using the `list_task` command. Multiple tasks in the list."},{"lineNumber":503,"author":{"gitId":"-"},"content":""},{"lineNumber":504,"author":{"gitId":"litone01"},"content":"   1. Test case: `delete_task 1`\u003cbr\u003e"},{"lineNumber":505,"author":{"gitId":"litone01"},"content":"      Expected: First task is deleted from the list. Details of the deleted task shown in the status message."},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"litone01"},"content":"   1. Test case: `delete_task 0`\u003cbr\u003e"},{"lineNumber":508,"author":{"gitId":"litone01"},"content":"      Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":509,"author":{"gitId":"-"},"content":""},{"lineNumber":510,"author":{"gitId":"litone01"},"content":"   1. Other incorrect delete commands to try: `delete_task`, `delete_task x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":511,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":514,"author":{"gitId":"-"},"content":""},{"lineNumber":515,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":516,"author":{"gitId":"-"},"content":""},{"lineNumber":517,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"YuFeng0930":8,"icelenaugust":18,"-":338,"SoulUseless":108,"ljhgab":21,"litone01":28}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"## User Guide"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"SOChedule is a one-stop solution for managing tasks and events, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"## Feature List"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"* Adding a task: `add_task`"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"* Deleting a task: `delete_task`"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"* Listing all tasks: `list_task`"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"* Marking a task as done : `done_task`"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"* Adding an event: `add_event`"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"* Deleting an event: `delete_event`"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"* Listing all events: `list_event`"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"1. Download the latest `SOChedule.jar` from [link coming soon]."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your SOChedule."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"   * **`list_task`** : Lists all tasks."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"   * **`add_task`**`n/CS2103 assignment d/2021-02-27 p/1 c/school work t/urgent` : Adds a task named `CS2103 assignment` to the SOChedule with its respective attributes."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"   * **`delete_task`**`3` : Deletes the 3rd task shown in the current list."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"### Adding a task: `add_task`"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"Adds a task to SOChedule Task List."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"Format: `add_task n/TASKNAME d/DEADLINE p/PRIORITY [c/CATEGORY]... [t/TAG]...`"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"* `n/` is followed by the task name."},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"* `d/` is followed by the date, with the format YYYY-MM-DD."},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"* `p/` is followed by the priority, with 0 being highest and 9 being lowest. Other inputs are not accepted."},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"* `c/` is followed by the category. It is optional."},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"* `t/` is followed by the tag. It is optional."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"* `add_task n/CS2103 assignment d/2021-02-27 p/1 c/schoolwork t/urgent` adds a new task named \"CS2103 assignment\" with the respective parameters."},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"* `add_task n/CCA admin work d/2021-02-28 p/2 c/CCA` adds a new task \"CCA admin work\" with the respective parameters."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"### Listing all tasks: `list_task`"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"Lists all tasks from SOChedule Task List."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"Format: `list_task`"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"### Deleting a task: `delete_task`"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":"Deletes a task from SOChedule Task List."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"Format: `delete_task INDEX`"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"* Deletes the task at the specified INDEX."},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"* The index refers to the index number shown in the displayed task list."},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"* The index must be a positive and valid integer 1, 2, 3, ..."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"* `delete_task 2` deletes the second task in the task list."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"### Marking a task as done: `done_task`"},{"lineNumber":80,"author":{"gitId":"ljhgab"},"content":"Marks a task from SOChedule Task List as completed."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"Format: `done_task INDEX`"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"* Marks the task at the specified INDEX as complete."},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"* The index refers to the index number shown in the displayed task list."},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"* The index must be a positive and valid integer 1, 2, 3, ..."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"* `done_task 1` marks the first task in the task list as completed."},{"lineNumber":89,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"### Adding an event: `add_event`"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"Adds an event to the SOChedule Event Scheduler."},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"Format: `add_event n/TASKNAME sd/STARTDATE st/STARTTIME ed/ENDDATE et/ENDTIME [c/CATEGORY]... [t/TAG]...`"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"* `n/` is followed by the task name, it is case-sensitive."},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"* `sd/` is followed by the starting date, it has to be a **valid date** and in the format of **YYYY-MM-DD**. Here, Y is the year, M is the month, D is the day and all has to be integers."},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"* `st/` is followed by the time in 24-hour format and in the format of **hh:mm** Here, h is the hour, m is the minute and all has to be integers."},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"* `ed/` is followed by the end date, it has to be a **valid date** and in the format of **YYYY-MM-DD**."},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"* `et/` is followed by the time in 24-hour format and in the format of **hh:mm**."},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"* `c/` is followed by the category. It is optional."},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"* `t/` is followed by the tag. It is optional."},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"* `add_event n/CS2103 meeting sd/2021-02-27 st/15:00 ed/2021-02-27 et/17:00` adds an event with name `CS2103` and its respective attributes to the SOChedule Event Scheduler."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"### Deleting an event: `delete_event`"},{"lineNumber":105,"author":{"gitId":"YuFeng0930"},"content":"Deletes an event from the SOChedule Event Scheduler."},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"Format: `delete_event INDEX`"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"* Deletes the event at the specified INDEX."},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"* The index refers to the index number shown in the displayed event list."},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"* The index must be a positive and valid integer 1, 2, 3, ..."},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"YuFeng0930"},"content":"Examples:"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"* `delete_event 3` deletes the third event from the Event Scheduler."},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"### Listing all events: `list_event`"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":"Lists all events from SOChedule Event Scheduler."},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"Format: `list_event`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous SOChedule home folder."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"SoulUseless"},"content":"###General commands"},{"lineNumber":135,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":136,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":137,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":138,"author":{"gitId":"SoulUseless"},"content":"**Exit** | `exit`"},{"lineNumber":139,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":140,"author":{"gitId":"SoulUseless"},"content":"###Task-related commands"},{"lineNumber":141,"author":{"gitId":"SoulUseless"},"content":"Action | Format, Examples"},{"lineNumber":142,"author":{"gitId":"SoulUseless"},"content":"--------|------------------"},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"**Add** | `add_task n/TASKNAME d/DEADLINE p/PRIORITY [c/CATEGORY]... [t/TAG]...` \u003cbr\u003e e.g., `add_task n/CS2103 assignment d/2021-02-27 p/1 c/school work t/urgent`"},{"lineNumber":144,"author":{"gitId":"litone01"},"content":"**Delete** | `delete_task INDEX`\u003cbr\u003ee.g., `delete_task 1`"},{"lineNumber":145,"author":{"gitId":"litone01"},"content":"**Done** | `done_task INDEX`\u003cbr\u003ee.g., `done_task 1`"},{"lineNumber":146,"author":{"gitId":"litone01"},"content":"**List** | `list_task`"},{"lineNumber":147,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":148,"author":{"gitId":"SoulUseless"},"content":"###Event-related commands"},{"lineNumber":149,"author":{"gitId":"SoulUseless"},"content":"Action | Format, Examples"},{"lineNumber":150,"author":{"gitId":"SoulUseless"},"content":"--------|------------------"},{"lineNumber":151,"author":{"gitId":"litone01"},"content":"**Add** | `add_event n/TASKNAME sd/STARTDATE st/STARTTIME ed/ENDDATE et/ENDTIME [c/CATEGORY]... [t/TAG]...`\u003cbr\u003e e.g., `add_event n/CS2103 meeting sd/2021-02-27 st/15:00 ed/2021-02-27 et/17:00`"},{"lineNumber":152,"author":{"gitId":"litone01"},"content":"**Delete** | `delete_event INDEX`\u003cbr\u003ee.g., `delete_event 3`"},{"lineNumber":153,"author":{"gitId":"litone01"},"content":"**List** | `list_event`"}],"authorContributionMap":{"YuFeng0930":2,"icelenaugust":4,"-":70,"litone01":55,"SoulUseless":19,"ljhgab":3}},{"path":"docs/team/litone01.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"---"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"title: Jiaxiang\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"---"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":""},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"## Project: SOChedule (YET TO BE UPDATED)"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":""},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"SOChedule is a one-stop solution for managing tasks and events, optimized for use via a Command Line Interface (CLI)"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":10,"author":{"gitId":"litone01"},"content":""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":""},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":""},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":""},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":""},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"* **Documentation**:"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"    * User Guide:"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    * Developer Guide:"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":36,"author":{"gitId":"litone01"},"content":""},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"* **Community**:"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":""},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"* **Tools**:"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":""},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"litone01":47}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.Sochedule;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.storage.JsonSocheduleStorage;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.storage.SocheduleStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Sochedule ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"        SocheduleStorage socheduleStorage \u003d new JsonSocheduleStorage(userPrefs.getSocheduleFilePath());"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"        storage \u003d new StorageManager(socheduleStorage, userPrefsStorage);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s sochedule is not found,"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"     * or an empty sochedule will be used instead if errors occur when reading {@code storage}\u0027s sochedule."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"        //Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"        //ReadOnlyAddressBook initialData;"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"        Optional\u003cReadOnlySochedule\u003e socheduleOptional;"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"        ReadOnlySochedule initialData;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"            socheduleOptional \u003d storage.readSochedule();"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"            if (!socheduleOptional.isPresent()) {"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Sochedule\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"            //initialData \u003d socheduleOptional.orElseGet(SampleDataUtil::getSampleSochedule);"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"            //^once we have a sample sochedule"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"            initialData \u003d socheduleOptional.orElseGet(Sochedule::new);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Sochedule\");"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"            initialData \u003d new Sochedule();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Sochedule\");"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"            initialData \u003d new Sochedule();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":126,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":154,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":157,"author":{"gitId":"SoulUseless"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Sochedule\");"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":173,"author":{"gitId":"SoulUseless"},"content":"        logger.info(\"Starting Sochedule \" + MainApp.VERSION);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":179,"author":{"gitId":"SoulUseless"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Sochedule ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":160,"SoulUseless":26}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed!\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":4,"-":13}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"     * Returns the user prefs\u0027 sochedule file path."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"    Path getSocheduleFilePath();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"     * Returns the Sochedule taskList."},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"     * @see Model#getSochedule()"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"    ReadOnlySochedule getSochedule();"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":"    /** Returns an unmodifiable view of the filtered list of events */"},{"lineNumber":55,"author":{"gitId":"icelenaugust"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();"},{"lineNumber":56,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"icelenaugust":21,"-":36}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.parser.SocheduleParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"    private final SocheduleParser socheduleParser;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"        socheduleParser \u003d new SocheduleParser();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"        Command command \u003d socheduleParser.parseCommand(commandText);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"            storage.saveSochedule(model.getSochedule());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"    public Path getSocheduleFilePath() {"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":"        return model.getSocheduleFilePath();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"icelenaugust"},"content":"    public ReadOnlySochedule getSochedule() {"},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":"        return model.getSochedule();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"icelenaugust"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":80,"author":{"gitId":"icelenaugust"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":81,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":83,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"icelenaugust"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":85,"author":{"gitId":"icelenaugust"},"content":"        return model.getFilteredEventList();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"icelenaugust":14,"-":68,"litone01":5}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YuFeng0930"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":3,"author":{"gitId":"YuFeng0930"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"},{"lineNumber":6,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":" * Adds an event to the Sochedule."},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":" */"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":"public class AddEventCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"    public static final String COMMAND_WORD \u003d \"add_event\";"},{"lineNumber":22,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":23,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to Sochedule. \""},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_STARTDATE + \"YYYY-MM-DD \""},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"            + PREFIX_STARTTIME + \"HH:mm \""},{"lineNumber":28,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_ENDDATE + \"YYYY-MM-DD \""},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"            + PREFIX_ENDTIME + \"HH:mm \""},{"lineNumber":30,"author":{"gitId":"YuFeng0930"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]... \""},{"lineNumber":31,"author":{"gitId":"YuFeng0930"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":32,"author":{"gitId":"YuFeng0930"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_NAME + \"CS2103 meeting \""},{"lineNumber":34,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_STARTDATE + \"2021-02-27 \""},{"lineNumber":35,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_STARTTIME + \"15:00 \""},{"lineNumber":36,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_ENDDATE + \"2021-02-27 \""},{"lineNumber":37,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_ENDTIME + \"17:00 \""},{"lineNumber":38,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_CATEGORY + \"School \""},{"lineNumber":39,"author":{"gitId":"YuFeng0930"},"content":"            + PREFIX_TAG + \"Team Project\";"},{"lineNumber":40,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":41,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"},{"lineNumber":42,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in Sochedule\";"},{"lineNumber":43,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"    private final Event toAdd;"},{"lineNumber":45,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":46,"author":{"gitId":"YuFeng0930"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"     * Creates an AddEventCommand to add the specified {@code Event}"},{"lineNumber":48,"author":{"gitId":"YuFeng0930"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"YuFeng0930"},"content":"    public AddEventCommand(Event event) {"},{"lineNumber":50,"author":{"gitId":"YuFeng0930"},"content":"        requireNonNull(event);"},{"lineNumber":51,"author":{"gitId":"YuFeng0930"},"content":"        toAdd \u003d event;"},{"lineNumber":52,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":54,"author":{"gitId":"YuFeng0930"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"YuFeng0930"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":56,"author":{"gitId":"YuFeng0930"},"content":"        requireNonNull(model);"},{"lineNumber":57,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":58,"author":{"gitId":"YuFeng0930"},"content":"        if (model.hasEvent(toAdd)) {"},{"lineNumber":59,"author":{"gitId":"YuFeng0930"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":60,"author":{"gitId":"YuFeng0930"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":62,"author":{"gitId":"YuFeng0930"},"content":"        model.addEvent(toAdd);"},{"lineNumber":63,"author":{"gitId":"YuFeng0930"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":64,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":66,"author":{"gitId":"YuFeng0930"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"YuFeng0930"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitId":"YuFeng0930"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitId":"YuFeng0930"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"YuFeng0930"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"},{"lineNumber":71,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"YuFeng0930"},"content":"}"}],"authorContributionMap":{"YuFeng0930":68,"ljhgab":4}},{"path":"src/main/java/seedu/address/logic/commands/AddTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":" * Adds a task to the Sochedule."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"public class AddTaskCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    public static final String COMMAND_WORD \u003d \"add_task\";"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the Sochedule. \""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"            + PREFIX_DEADLINE + \"DEADLINE \""},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \""},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]... \""},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"            + PREFIX_NAME + \"Homework 1 \""},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"            + PREFIX_DEADLINE + \"2021-01-07 \""},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"            + PREFIX_PRIORITY + \"8 \""},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"            + PREFIX_CATEGORY + \"Homework \""},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"            + PREFIX_TAG + \"MA3110\";"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list\";"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"    private final Task toAdd;"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"     * Creates an AddTaskCommand to add the specified {@code Task}"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"    public AddTaskCommand(Task task) {"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        requireNonNull(task);"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"        toAdd \u003d task;"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"        requireNonNull(model);"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"        if (model.hasTask(toAdd)) {"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"        model.addTask(toAdd);"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"                || (other instanceof AddTaskCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":61,"litone01":5}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":" * Deletes an event identified using it\u0027s displayed index from the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"public class DeleteEventCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"    public static final String COMMAND_WORD \u003d \"delete_event\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"            + \": Deletes the event identified by the index number used in the displayed event list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":"    public DeleteEventCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"YuFeng0930"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"YuFeng0930"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"YuFeng0930"},"content":"        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"YuFeng0930"},"content":"        model.deleteEvent(eventToDelete);"},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"YuFeng0930"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"YuFeng0930"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":14,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"public class DeleteTaskCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    public static final String COMMAND_WORD \u003d \"delete_task\";"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    private final Index targetIndex;"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"    public DeleteTaskCommand(Index targetIndex) {"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"        requireNonNull(model);"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        if (lastShownList \u003d\u003d null || targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"        model.deleteTask(taskToDelete);"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"                || (other instanceof DeleteTaskCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":50,"litone01":1}},{"path":"src/main/java/seedu/address/logic/commands/DoneTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":" * Marks the status of an incomplete task as complete."},{"lineNumber":23,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"public class DoneTaskCommand extends Command {"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    public static final String COMMAND_WORD \u003d \"done_task\";"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"            + \": Marks the task identified by the index number used in the displayed task list.\\n\""},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Completed Task: %1$s\";"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    public static final String MESSAGE_TASK_ALREADY_COMPLETE \u003d \"This task has already been marked as complete.\";"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"    private final Index targetIndex;"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"    public DoneTaskCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * Executes the command and returns the result message."},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     * @param model {@code Model} which the command should operate on."},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"     * @return feedback message of the operation result for display."},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        // verify if index is valid"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"        Task taskToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"        // verify if task is already completed"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"        if (taskToComplete.isComplete()) {"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"            throw new CommandException(MESSAGE_TASK_ALREADY_COMPLETE);"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":""},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        Task completedTask \u003d createCompletedTask(taskToComplete);"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":""},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"        // replace the old task with the new and completed task and update"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"        model.setTask(taskToComplete, completedTask);"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"        return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, taskToComplete));"},{"lineNumber":69,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"     * Creates and returns a {@code Task} with the same details of {@code taskToComplete},"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"     * but completionStatus as complete."},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"     * @param taskToComplete task to be marked as complete."},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"     * @return a completed task."},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"    private static Task createCompletedTask(Task taskToComplete) {"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        assert taskToComplete !\u003d null;"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":""},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"        Task completedTask \u003d copyTask(taskToComplete);"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"        completedTask.markTaskAsDone();"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"        return completedTask;"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":""},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"     * Copies the task given and returns a new task with the same details as the given task."},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"     * @param taskToCopy task to be copied, here is the task to be completed."},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"     * @return a copied task."},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"    private static Task copyTask(Task taskToCopy) {"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"        Name taskName \u003d taskToCopy.getName();"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"        Date deadline \u003d taskToCopy.getDeadline();"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"        Priority priority \u003d taskToCopy.getPriority();"},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"        Set\u003cCategory\u003e categories \u003d taskToCopy.getCategories();"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"        Set\u003cTag\u003e tags \u003d taskToCopy.getTags();"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":""},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"        Task completedTask \u003d new Task(taskName, deadline, priority, categories, tags);"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"        return completedTask;"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":""},{"lineNumber":103,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"ljhgab"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitId":"ljhgab"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":106,"author":{"gitId":"ljhgab"},"content":"                || (other instanceof DoneTaskCommand // instanceof handles nulls"},{"lineNumber":107,"author":{"gitId":"ljhgab"},"content":"                \u0026\u0026 targetIndex.equals(((DoneTaskCommand) other).targetIndex)); // state check"},{"lineNumber":108,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":""},{"lineNumber":110,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":46,"litone01":64}},{"path":"src/main/java/seedu/address/logic/commands/ListEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YuFeng0930"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":3,"author":{"gitId":"YuFeng0930"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":6,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":" * Lists all events in Sochedule to the user."},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":" */"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":"public class ListEventCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"    public static final String COMMAND_WORD \u003d \"list_event\";"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":17,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"YuFeng0930"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":22,"author":{"gitId":"YuFeng0930"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":"}"}],"authorContributionMap":{"YuFeng0930":24}},{"path":"src/main/java/seedu/address/logic/commands/ListTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":" * Lists all tasks in Sochedule to the user."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"public class ListTaskCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    public static final String COMMAND_WORD \u003d \"list_task\";"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":22}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YuFeng0930"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":3,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"},{"lineNumber":6,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":20,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":22,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":23,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":" * Parses input arguments and creates a new AddEventCommand object"},{"lineNumber":26,"author":{"gitId":"YuFeng0930"},"content":" */"},{"lineNumber":27,"author":{"gitId":"YuFeng0930"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"},{"lineNumber":28,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"YuFeng0930"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand"},{"lineNumber":31,"author":{"gitId":"YuFeng0930"},"content":"     * and returns an AddEventCommand object for execution."},{"lineNumber":32,"author":{"gitId":"YuFeng0930"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitId":"YuFeng0930"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"YuFeng0930"},"content":"    public AddEventCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitId":"YuFeng0930"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitId":"YuFeng0930"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_STARTDATE,"},{"lineNumber":37,"author":{"gitId":"YuFeng0930"},"content":"                        PREFIX_STARTTIME, PREFIX_ENDDATE, PREFIX_ENDTIME, PREFIX_CATEGORY, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":39,"author":{"gitId":"YuFeng0930"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_STARTDATE, PREFIX_ENDDATE)"},{"lineNumber":40,"author":{"gitId":"YuFeng0930"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":41,"author":{"gitId":"YuFeng0930"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"YuFeng0930"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"        Name name \u003d SocheduleParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":45,"author":{"gitId":"YuFeng0930"},"content":"        Date startDate \u003d SocheduleParserUtil.parseDate(argMultimap.getValue(PREFIX_STARTDATE).get());"},{"lineNumber":46,"author":{"gitId":"YuFeng0930"},"content":"        Time startTime \u003d SocheduleParserUtil.parseTime(argMultimap.getValue(PREFIX_STARTTIME).get());"},{"lineNumber":47,"author":{"gitId":"YuFeng0930"},"content":"        Date endDate \u003d SocheduleParserUtil.parseDate(argMultimap.getValue(PREFIX_ENDDATE).get());"},{"lineNumber":48,"author":{"gitId":"YuFeng0930"},"content":"        Time endTime \u003d SocheduleParserUtil.parseTime(argMultimap.getValue(PREFIX_ENDTIME).get());"},{"lineNumber":49,"author":{"gitId":"YuFeng0930"},"content":"        Set\u003cCategory\u003e categoryList \u003d SocheduleParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"},{"lineNumber":50,"author":{"gitId":"YuFeng0930"},"content":"        Set\u003cTag\u003e tagList \u003d SocheduleParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":52,"author":{"gitId":"YuFeng0930"},"content":"        Event event \u003d new Event(name, startDate, startTime, endDate, endTime, categoryList, tagList);"},{"lineNumber":53,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":54,"author":{"gitId":"YuFeng0930"},"content":"        return new AddEventCommand(event);"},{"lineNumber":55,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":57,"author":{"gitId":"YuFeng0930"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"YuFeng0930"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":59,"author":{"gitId":"YuFeng0930"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":60,"author":{"gitId":"YuFeng0930"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"YuFeng0930"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":62,"author":{"gitId":"YuFeng0930"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":63,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":65,"author":{"gitId":"YuFeng0930"},"content":"}"}],"authorContributionMap":{"YuFeng0930":65}},{"path":"src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":" * Parses input arguments and creates a new AddTaskCommand object"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"     * and returns an AddTaskCommand object for execution."},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"    public AddTaskCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE, PREFIX_PRIORITY,"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"                        PREFIX_CATEGORY, PREFIX_TAG);"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"        Name name \u003d SocheduleParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        Date deadline \u003d SocheduleParserUtil.parseDate(argMultimap.getValue(PREFIX_DEADLINE).get());"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"        Priority priority \u003d SocheduleParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"        Set\u003cCategory\u003e categoryList \u003d SocheduleParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"        Set\u003cTag\u003e tagList \u003d SocheduleParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"        Task task \u003d new Task(name, deadline, priority, categoryList, tagList);"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"        return new AddTaskCommand(task);"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":61}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"    // Prefix shared by Events and Tasks"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    // Prefix for Tasks"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    // Prefix for Events"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"sd/\");"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"st/\");"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"ed/\");"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"et/\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":11,"litone01":12}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YuFeng0930"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":3,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":" * Parses input arguments and creates a new DeleteEventCommand object"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":" */"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"     * and returns a DeleteEventCommand object for execution."},{"lineNumber":17,"author":{"gitId":"YuFeng0930"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"YuFeng0930"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"            Index index \u003d SocheduleParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitId":"YuFeng0930"},"content":"            return new DeleteEventCommand(index);"},{"lineNumber":23,"author":{"gitId":"YuFeng0930"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"YuFeng0930"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":"}"}],"authorContributionMap":{"YuFeng0930":29}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" * Parses input arguments and creates a new DeleteTaskCommand object"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * and returns a DeleteTaskCommand object for execution."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    public DeleteTaskCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"            Index index \u003d SocheduleParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"            return new DeleteTaskCommand(index);"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"YuFeng0930":1,"ljhgab":28}},{"path":"src/main/java/seedu/address/logic/parser/DoneTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import seedu.address.logic.commands.DoneTaskCommand;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" * Parses input arguments and creates a new DoneTaskCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"public class DoneTaskCommandParser implements Parser\u003cDoneTaskCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * Parses the given {@code String} of arguments in the context of the DoneTaskCommand"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * and returns a DoneTaskCommand object for execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    public DoneTaskCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"            Index index \u003d SocheduleParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"            return new DoneTaskCommand(index);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneTaskCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":1,"-":19,"ljhgab":8}},{"path":"src/main/java/seedu/address/logic/parser/SocheduleParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.commands.DoneTaskCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.commands.ListEventCommand;"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.commands.ListTaskCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"litone01"},"content":" * Currently not doing any real work, will be improved in v1.2"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"public class SocheduleParser {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        case AddTaskCommand.COMMAND_WORD:"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"            return new AddTaskCommandParser().parse(arguments);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        case AddEventCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"            return new AddEventCommandParser().parse(arguments);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"        case DeleteTaskCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"            return new DeleteTaskCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"        case DeleteEventCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"            return new DeleteEventCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        case DoneTaskCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"            return new DoneTaskCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"        case ListTaskCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"            return new ListTaskCommand();"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":""},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"        case ListEventCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"            return new ListEventCommand();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":57,"litone01":24}},{"path":"src/main/java/seedu/address/logic/parser/SocheduleParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"public class SocheduleParserUtil {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"        requireNonNull(tag);"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":""},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"        requireNonNull(tags);"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"        for (String tagName : tags) {"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        return tagSet;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"     * Parses a {@code String date} into a {@code date}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"     * @throws ParseException if the given {@code date} is invalid."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"    public static Date parseDate(String date) throws ParseException {"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"        requireNonNull(date);"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"        return new Date(trimmedDate);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"     * Parses a {@code String time} into a {@code time}."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"     * @throws ParseException if the given {@code time} is invalid."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"    public static Time parseTime(String time) throws ParseException {"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"        requireNonNull(time);"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"        if (!Time.isValidTime(trimmedTime)) {"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"        return new Time(trimmedTime);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"     * Parses a {@code String priority} into a {@code priority}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"    public static Priority parsePriority(String priority) throws ParseException {"},{"lineNumber":118,"author":{"gitId":"litone01"},"content":"        requireNonNull(priority);"},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"        String trimmedPriority \u003d priority.trim();"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"        if (!Priority.isValidPriority(trimmedPriority)) {"},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"        return new Priority(trimmedPriority);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"litone01"},"content":"     * Parses a {@code String category} into a {@code category}."},{"lineNumber":128,"author":{"gitId":"litone01"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":129,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"litone01"},"content":"     * @throws ParseException if the given {@code category} is invalid."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"litone01"},"content":"    public static Category parseCategory(String category) throws ParseException {"},{"lineNumber":133,"author":{"gitId":"litone01"},"content":"        requireNonNull(category);"},{"lineNumber":134,"author":{"gitId":"litone01"},"content":"        String trimmedCategory \u003d category.trim();"},{"lineNumber":135,"author":{"gitId":"litone01"},"content":"        if (!Category.isValidCategoryName(trimmedCategory)) {"},{"lineNumber":136,"author":{"gitId":"litone01"},"content":"            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"litone01"},"content":"        return new Category(trimmedCategory);"},{"lineNumber":139,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"litone01"},"content":""},{"lineNumber":141,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"litone01"},"content":"     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"litone01"},"content":"    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"},{"lineNumber":145,"author":{"gitId":"litone01"},"content":"        requireNonNull(categories);"},{"lineNumber":146,"author":{"gitId":"litone01"},"content":"        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"},{"lineNumber":147,"author":{"gitId":"litone01"},"content":"        for (String categoryName : categories) {"},{"lineNumber":148,"author":{"gitId":"litone01"},"content":"            categorySet.add(parseCategory(categoryName));"},{"lineNumber":149,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"litone01"},"content":"        return categorySet;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}"},{"lineNumber":153,"author":{"gitId":"litone01"},"content":""}],"authorContributionMap":{"-":79,"litone01":74}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SOChedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"     * Replaces Sochedule data with the data in {@code sochedule}."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"    void setSochedule(ReadOnlySochedule sochedule);"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"    /** Returns the Sochedule */"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"    ReadOnlySochedule getSochedule();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":"     * Returns the user prefs\u0027 Sochedule file path."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":"    Path getSocheduleFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"     * Sets the user prefs\u0027 Sochedule file path."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"    void setSocheduleFilePath(Path socheduleFilePath);"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":61,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":62,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":63,"author":{"gitId":"icelenaugust"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"     * Returns true if a task with the same identity as {@code task} exists in the Sochedule."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":"    boolean hasTask(Task task);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"     * Deletes the given task."},{"lineNumber":73,"author":{"gitId":"icelenaugust"},"content":"     * The task must exist in the Sochedule."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":"    void deleteTask(Task target);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"icelenaugust"},"content":"     * Adds the given task."},{"lineNumber":79,"author":{"gitId":"icelenaugust"},"content":"     * {@code task} must not already exist in the Sochedule."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"icelenaugust"},"content":"    void addTask(Task task);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"     * Complete the given task."},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"     * {@code task} must not already exist in the Sochedule."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"    void doneTask(Task task);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"icelenaugust"},"content":"     * Replaces the given task {@code target} with {@code editedTask}."},{"lineNumber":91,"author":{"gitId":"icelenaugust"},"content":"     * {@code target} must exist in the Sochedule."},{"lineNumber":92,"author":{"gitId":"icelenaugust"},"content":"     * The task identity of {@code editedTask} must not be the same as another existing task in the Sochedule."},{"lineNumber":93,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"icelenaugust"},"content":"    void setTask(Task target, Task editedTask);"},{"lineNumber":95,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":96,"author":{"gitId":"icelenaugust"},"content":"    /** Returns an unmodifiable view of the filtered task list */"},{"lineNumber":97,"author":{"gitId":"icelenaugust"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"icelenaugust"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"icelenaugust"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":104,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":105,"author":{"gitId":"icelenaugust"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d event \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":106,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":107,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"icelenaugust"},"content":"     * Returns true if an event with the same identity as {@code event} exists in the Sochedule."},{"lineNumber":109,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"icelenaugust"},"content":"    boolean hasEvent(Event event);"},{"lineNumber":111,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":112,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"icelenaugust"},"content":"     * Deletes the given event."},{"lineNumber":114,"author":{"gitId":"icelenaugust"},"content":"     * The event must exist in the Sochedule."},{"lineNumber":115,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"icelenaugust"},"content":"    void deleteEvent(Event target);"},{"lineNumber":117,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":118,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"icelenaugust"},"content":"     * Adds the given event."},{"lineNumber":120,"author":{"gitId":"icelenaugust"},"content":"     * {@code event} must not already exist in the Sochedule."},{"lineNumber":121,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"icelenaugust"},"content":"    void addEvent(Event event);"},{"lineNumber":123,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":124,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"icelenaugust"},"content":"     * Replaces the given event {@code target} with {@code editedEvent}."},{"lineNumber":126,"author":{"gitId":"icelenaugust"},"content":"     * {@code target} must exist in the Sochedule."},{"lineNumber":127,"author":{"gitId":"icelenaugust"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the Sochedule."},{"lineNumber":128,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"icelenaugust"},"content":"    void setEvent(Event target, Event editedEvent);"},{"lineNumber":130,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":131,"author":{"gitId":"icelenaugust"},"content":"    /** Returns an unmodifiable view of the filtered event list */"},{"lineNumber":132,"author":{"gitId":"icelenaugust"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();"},{"lineNumber":133,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":134,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"icelenaugust"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}."},{"lineNumber":136,"author":{"gitId":"icelenaugust"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":137,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"icelenaugust"},"content":"    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"},{"lineNumber":139,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":1,"icelenaugust":75,"-":61,"litone01":3}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":" * Represents the in-memory model of the Sochedule data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    private final Sochedule sochedule;"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvents;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":"     * Initializes a ModelManager with the given Sochedule and userPrefs."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    public ModelManager(ReadOnlySochedule sochedule, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(sochedule, userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        logger.fine(\"Initializing with SOChedule: \" + sochedule + \" and user prefs \" + userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        this.sochedule \u003d new Sochedule(sochedule);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.sochedule.getTaskList());"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.sochedule.getEventList());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"        this(new Sochedule(), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"            return true;"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"        // instanceof handles nulls"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"            return false;"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"        // state check"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"        // null check is temporary during transition to new data"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":62,"author":{"gitId":"YuFeng0930"},"content":"        return (sochedule \u003d\u003d null || sochedule.equals(other.sochedule))"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 (filteredTasks \u003d\u003d null || filteredTasks.equals(other.filteredTasks))"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 (filteredEvents \u003d\u003d null || filteredEvents.equals(other.filteredEvents));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"icelenaugust"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SOChedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"icelenaugust"},"content":"    public void setSochedule(ReadOnlySochedule sochedule) {"},{"lineNumber":95,"author":{"gitId":"icelenaugust"},"content":"        this.sochedule.resetTaskData(sochedule);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"icelenaugust"},"content":"    public ReadOnlySochedule getSochedule() {"},{"lineNumber":100,"author":{"gitId":"icelenaugust"},"content":"        return sochedule;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"icelenaugust"},"content":"    public Path getSocheduleFilePath() {"},{"lineNumber":105,"author":{"gitId":"icelenaugust"},"content":"        return userPrefs.getSocheduleFilePath();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"icelenaugust"},"content":"    public void setSocheduleFilePath(Path socheduleFilePath) {"},{"lineNumber":110,"author":{"gitId":"icelenaugust"},"content":"        requireAllNonNull(socheduleFilePath);"},{"lineNumber":111,"author":{"gitId":"icelenaugust"},"content":"        userPrefs.setSocheduleFilePath(socheduleFilePath);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"icelenaugust"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":115,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"icelenaugust"},"content":"    public boolean hasTask(Task task) {"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(task);"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"        return sochedule.hasTask(task);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"icelenaugust"},"content":"    public void deleteTask(Task target) {"},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"        sochedule.removeTask(target);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"icelenaugust"},"content":"    public void addTask(Task task) {"},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":"        sochedule.addTask(task);"},{"lineNumber":130,"author":{"gitId":"SoulUseless"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"icelenaugust"},"content":"    public void setTask(Task target, Task editedTask) {"},{"lineNumber":135,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":136,"author":{"gitId":"SoulUseless"},"content":"        sochedule.setTask(target, editedTask);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"litone01"},"content":"    public void doneTask(Task task) {"},{"lineNumber":141,"author":{"gitId":"litone01"},"content":"        requireAllNonNull(task);"},{"lineNumber":142,"author":{"gitId":"litone01"},"content":"        sochedule.doneTask(task);"},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"SoulUseless"},"content":"     * Returns an unmodifiable view of the list of {@code Task}"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":149,"author":{"gitId":"icelenaugust"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":150,"author":{"gitId":"SoulUseless"},"content":"        return filteredTasks;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":154,"author":{"gitId":"icelenaugust"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":155,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(predicate);"},{"lineNumber":156,"author":{"gitId":"SoulUseless"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"icelenaugust"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d event \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":160,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"icelenaugust"},"content":"    public boolean hasEvent(Event event) {"},{"lineNumber":163,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(event);"},{"lineNumber":164,"author":{"gitId":"SoulUseless"},"content":"        return sochedule.hasEvent(event);"},{"lineNumber":165,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"icelenaugust"},"content":"    public void deleteEvent(Event target) {"},{"lineNumber":169,"author":{"gitId":"SoulUseless"},"content":"        sochedule.removeEvent(target);"},{"lineNumber":170,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":173,"author":{"gitId":"icelenaugust"},"content":"    public void addEvent(Event event) {"},{"lineNumber":174,"author":{"gitId":"SoulUseless"},"content":"        sochedule.addEvent(event);"},{"lineNumber":175,"author":{"gitId":"SoulUseless"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":176,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":178,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":179,"author":{"gitId":"icelenaugust"},"content":"    public void setEvent(Event target, Event editedEvent) {"},{"lineNumber":180,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(target, editedEvent);"},{"lineNumber":181,"author":{"gitId":"SoulUseless"},"content":"        sochedule.setEvent(target, editedEvent);"},{"lineNumber":182,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":184,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"SoulUseless"},"content":"     * Returns an unmodifiable view of the list of {@code Event}"},{"lineNumber":186,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":188,"author":{"gitId":"icelenaugust"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":189,"author":{"gitId":"SoulUseless"},"content":"        return filteredEvents;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":193,"author":{"gitId":"icelenaugust"},"content":"    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":194,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(predicate);"},{"lineNumber":195,"author":{"gitId":"SoulUseless"},"content":"        filteredEvents.setPredicate(predicate);"},{"lineNumber":196,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":3,"icelenaugust":41,"-":95,"SoulUseless":53,"litone01":5}},{"path":"src/main/java/seedu/address/model/ReadOnlySochedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":" * Unmodifiable view of Sochedule"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"public interface ReadOnlySochedule {"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     * Returns an unmodifiable view of the Tasks list."},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     * This list will not contain any duplicate tasks."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"     * Returns an unmodifiable view of the Events list."},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     * This list will not contain any duplicate events."},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":23}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"    Path getTaskListFilePath();"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"    Path getEventListFilePath();"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"icelenaugust":4,"-":15}},{"path":"src/main/java/seedu/address/model/Sochedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.UniqueTaskList;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"public class Sochedule implements ReadOnlySochedule {"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    private final UniqueEventList events;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"     *   among constructors."},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    {"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"        events \u003d new UniqueEventList();"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    public Sochedule() {}"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"     * Creates an Sochedule using the Tasks and Events in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    public Sochedule(ReadOnlySochedule toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"     * Replaces the contents of the task list with {@code tasks}."},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"     * {@code tasks} must not contain duplicate tasks."},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"     * Replaces the contents of the events list with {@code events}."},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"     * {@code events} must not contain duplicate events."},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"    public void setEvents(List\u003cEvent\u003e events) {"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        this.events.setEvents(events);"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"     * Resets the existing data of this {@code Sochedule} with {@code newData}."},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    public void resetData(ReadOnlySochedule newData) {"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(newData);"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        setTasks(newData.getTaskList());"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        setEvents(newData.getEventList());"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"     * Resets the existing task data of this {@code Sochedule} with {@code newData}."},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":"    public void resetTaskData(ReadOnlySochedule newData) {"},{"lineNumber":71,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(newData);"},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"        setTasks(newData.getTaskList());"},{"lineNumber":73,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"icelenaugust"},"content":"     * Resets the existing event data of this {@code Sochedule} with {@code newData}."},{"lineNumber":77,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"icelenaugust"},"content":"    public void resetEventData(ReadOnlySochedule newData) {"},{"lineNumber":79,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(newData);"},{"lineNumber":80,"author":{"gitId":"icelenaugust"},"content":"        setEvents(newData.getEventList());"},{"lineNumber":81,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"    //// task-level operations"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if a task with the same identity as {@code task} exists in Sochedule."},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"    public boolean hasTask(Task task) {"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(task);"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"        return tasks.contains(task);"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"     * Adds a task to Sochedule."},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"     * The task must not already exist in Sochedule."},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"    public void addTask(Task t) {"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"        tasks.add(t);"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"     * Replaces the given task {@code target} in the list with {@code editedTask}."},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"     * {@code target} must exist in Sochedule."},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"     * The task identity of {@code editedTask} must not be the same as another existing Task in Sochedule."},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"    public void setTask(Task target, Task editedTask) {"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(editedTask);"},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"        tasks.setTask(target, editedTask);"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"     * Removes {@code key} from {@code Sochedule}."},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"     * {@code key} must exist in Sochedule."},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"    public void removeTask(Task key) {"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"        tasks.remove(key);"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"     * Completes {@code key} from {@code Sochedule}."},{"lineNumber":122,"author":{"gitId":"litone01"},"content":"     * {@code task} must exist in Sochedule."},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"litone01"},"content":"    public void doneTask(Task task) {"},{"lineNumber":125,"author":{"gitId":"litone01"},"content":"        task.markTaskAsDone();"},{"lineNumber":126,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"litone01"},"content":""},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":"    //// event-level operations"},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":130,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if a event with the same identity as {@code event} exists in Sochedule."},{"lineNumber":132,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"SoulUseless"},"content":"    public boolean hasEvent(Event event) {"},{"lineNumber":134,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(event);"},{"lineNumber":135,"author":{"gitId":"SoulUseless"},"content":"        return events.contains(event);"},{"lineNumber":136,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":138,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"SoulUseless"},"content":"     * Adds a event to Sochedule."},{"lineNumber":140,"author":{"gitId":"SoulUseless"},"content":"     * The event must not already exist in Sochedule."},{"lineNumber":141,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"SoulUseless"},"content":"    public void addEvent(Event e) {"},{"lineNumber":143,"author":{"gitId":"SoulUseless"},"content":"        events.add(e);"},{"lineNumber":144,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":146,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"SoulUseless"},"content":"     * Replaces the given event {@code target} in the list with {@code editedEvent}."},{"lineNumber":148,"author":{"gitId":"SoulUseless"},"content":"     * {@code target} must exist in Sochedule."},{"lineNumber":149,"author":{"gitId":"SoulUseless"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing Event in Sochedule."},{"lineNumber":150,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"SoulUseless"},"content":"    public void setEvent(Event target, Event editedEvent) {"},{"lineNumber":152,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":153,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":154,"author":{"gitId":"SoulUseless"},"content":"        events.setEvent(target, editedEvent);"},{"lineNumber":155,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":157,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"SoulUseless"},"content":"     * Removes {@code key} from {@code Sochedule}."},{"lineNumber":159,"author":{"gitId":"SoulUseless"},"content":"     * {@code key} must exist in Sochedule."},{"lineNumber":160,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"SoulUseless"},"content":"    public void removeEvent(Event key) {"},{"lineNumber":162,"author":{"gitId":"SoulUseless"},"content":"        events.remove(key);"},{"lineNumber":163,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":165,"author":{"gitId":"SoulUseless"},"content":"    //// util methods"},{"lineNumber":166,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":167,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":169,"author":{"gitId":"SoulUseless"},"content":"        return tasks.asUnmodifiableObservableList().size() + \" Tasks;\""},{"lineNumber":170,"author":{"gitId":"SoulUseless"},"content":"                + events.asUnmodifiableObservableList().size() + \" Events\";"},{"lineNumber":171,"author":{"gitId":"SoulUseless"},"content":"        // TODO: refine later"},{"lineNumber":172,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":174,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"SoulUseless"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":176,"author":{"gitId":"SoulUseless"},"content":"        return tasks.asUnmodifiableObservableList();"},{"lineNumber":177,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":179,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":180,"author":{"gitId":"SoulUseless"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":181,"author":{"gitId":"SoulUseless"},"content":"        return events.asUnmodifiableObservableList();"},{"lineNumber":182,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":184,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":185,"author":{"gitId":"SoulUseless"},"content":"    public boolean equals(Object other) {"},{"lineNumber":186,"author":{"gitId":"SoulUseless"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":187,"author":{"gitId":"SoulUseless"},"content":"                || (other instanceof Sochedule // instanceof handles nulls"},{"lineNumber":188,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 tasks.equals(((Sochedule) other).tasks))"},{"lineNumber":189,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 events.equals(((Sochedule) other).events);"},{"lineNumber":190,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":192,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":193,"author":{"gitId":"SoulUseless"},"content":"    public int hashCode() {"},{"lineNumber":194,"author":{"gitId":"SoulUseless"},"content":"        return tasks.hashCode() ^ events.hashCode();"},{"lineNumber":195,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"icelenaugust":16,"SoulUseless":172,"litone01":8}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    private Path taskListFilePath \u003d Paths.get(\"data\", \"taskList.json\");"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    private Path eventListFilePath \u003d Paths.get(\"data\", \"eventList.json\");"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    private Path socheduleFilePath \u003d Paths.get(\"data\", \"sochedule.json\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"        setTaskListFilePath(newUserPrefs.getTaskListFilePath());"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"        setEventListFilePath(newUserPrefs.getEventListFilePath());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":"    public Path getTaskListFilePath() {"},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":"        return taskListFilePath;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"    public Path getEventListFilePath() {"},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"        return eventListFilePath;"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    public Path getSocheduleFilePath() {"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        return socheduleFilePath;"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":65,"author":{"gitId":"icelenaugust"},"content":"    public void setTaskListFilePath(Path taskListFilePath) {"},{"lineNumber":66,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(taskListFilePath);"},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"        this.taskListFilePath \u003d taskListFilePath;"},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":"    public void setEventListFilePath(Path eventListFilePath) {"},{"lineNumber":71,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(eventListFilePath);"},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"        this.eventListFilePath \u003d eventListFilePath;"},{"lineNumber":73,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":"    public void setSocheduleFilePath(Path socheduleFilePath) {"},{"lineNumber":76,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(socheduleFilePath);"},{"lineNumber":77,"author":{"gitId":"icelenaugust"},"content":"        this.socheduleFilePath \u003d socheduleFilePath;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 taskListFilePath.equals(o.taskListFilePath)"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 eventListFilePath.equals(o.eventListFilePath);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":98,"author":{"gitId":"YuFeng0930"},"content":"        return Objects.hash(guiSettings, taskListFilePath, eventListFilePath);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"        sb.append(\"\\nLocal Task List file location : \" + taskListFilePath);"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"        sb.append(\"\\nLocal Event List file location : \" + eventListFilePath);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":1,"icelenaugust":23,"-":77,"SoulUseless":9}},{"path":"src/main/java/seedu/address/model/common/Category.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.common;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" * Represents a Category in SOChedule."},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Guarantees: immutable; categoryName is valid as declared in {@link #isValidCategoryName(String)}."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"public class Category {"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Category names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    public final String categoryName;"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"     * Constructs a {@code Category}."},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     * @param categoryName A valid category name."},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"    public Category(String categoryName) {"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(categoryName);"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"        this.categoryName \u003d categoryName;"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    public static boolean isValidCategoryName(String test) {"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"     * Returns the name of the category."},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"     * @return the name of the category."},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"    public String getCategoryName() {"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"        return this.categoryName;"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"                || (other instanceof Category // instanceof handles nulls"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":""},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"        return categoryName.hashCode();"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":""},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"        return categoryName;"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":61,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":16,"SoulUseless":21,"litone01":24}},{"path":"src/main/java/seedu/address/model/common/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.common;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":" * Represents a Category in SOChedule."},{"lineNumber":13,"author":{"gitId":"litone01"},"content":" * Guarantees: immutable; date is valid as declared in {@link #isValidDate(String)}."},{"lineNumber":14,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"public class Date {"},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd\");"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"            \"Date should be represented in the format of YYYY-MM-DD, and please make sure the date is valid\";"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":"    // public static final String VALIDATION_REGEX \u003d \"^[0-9]{4}-(1[0-2]|0[1-9])-(3[01]|[12][0-9]|0[1-9])$\";"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    public final LocalDate date;"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"     * Constructs an {@code Date}."},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"     * @param dateString A valid date."},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"    public Date(String dateString) {"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(dateString);"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"        checkArgument(isValidDate(dateString), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"        date \u003d LocalDate.parse(dateString, DATE_FORMATTER);"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"    public LocalDate getDate() {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        return date;"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":42,"author":{"gitId":"YuFeng0930"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"YuFeng0930"},"content":"            LocalDate parsedDate \u003d LocalDate.parse(test,"},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"                    DATE_FORMATTER.withResolverStyle(ResolverStyle.STRICT));"},{"lineNumber":45,"author":{"gitId":"YuFeng0930"},"content":"            return true;"},{"lineNumber":46,"author":{"gitId":"YuFeng0930"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":47,"author":{"gitId":"YuFeng0930"},"content":"            return false;"},{"lineNumber":48,"author":{"gitId":"YuFeng0930"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"YuFeng0930"},"content":"        // return test.matches(VALIDATION_REGEX);"},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"                || (other instanceof Date // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"                \u0026\u0026 date.equals(((Date) other).date)); // state check"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":""},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        return date.hashCode();"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":""},{"lineNumber":64,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"icelenaugust"},"content":"     * Returns the date in a string."},{"lineNumber":66,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"        return this.date.format(DATE_FORMATTER);"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"YuFeng0930":13,"icelenaugust":39,"litone01":18}},{"path":"src/main/java/seedu/address/model/common/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.common;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":" * Represents a Task\u0027s or an Event\u0027s name in SOChedule."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"icelenaugust":2,"-":57}},{"path":"src/main/java/seedu/address/model/common/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.common;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":" * Represents a Tag in the SOChedule."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":1,"icelenaugust":1,"-":52}},{"path":"src/main/java/seedu/address/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":" * Represents an event in SOChedule."},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"public class Event {"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"    // Fields"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    private final Date startDate;"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"    private final Time startTime;"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    private final Date endDate;"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"    private final Time endTime;"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"     * Name field must be present and not null."},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"    public Event(Name name, Date startDate, Time startTime,"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"                Date endDate, Time endTime, Set\u003cCategory\u003e categories, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"        requireAllNonNull(name, startDate, endDate);"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        this.categories.addAll(categories);"},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"        this.tags.addAll(tags);"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"        return this.name;"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"    public Date getStartDate() {"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        return this.startDate;"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"    public Time getStartTime() {"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"        return this.startTime;"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"    public Date getEndDate() {"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"        return this.endDate;"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"    public Time getEndTime() {"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"        return this.endTime;"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"    public Set\u003cCategory\u003e getCategories() {"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        return this.categories;"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":68,"author":{"gitId":"YuFeng0930"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if both tasks have the same name."},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"     * This defines a weaker notion of equality between two tasks."},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"    public boolean isSameEvent(Event otherEvent) {"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"        if (otherEvent \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"            return true;"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"        return otherEvent !\u003d null"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 otherEvent.getName().equals(getName());"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if both tasks have the same identity and data fields."},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"     * This defines a stronger notion of equality between two tasks."},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"            return true;"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"        if (!(other instanceof Event)) {"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"        Event otherEvent \u003d (Event) other;"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"        return otherEvent.getName().equals(getName())"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 otherEvent.getStartDate().equals(getStartDate())"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 otherEvent.getStartTime().equals(getStartTime())"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 otherEvent.getEndDate().equals(getEndDate())"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 otherEvent.getEndTime().equals(getEndTime())"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 otherEvent.getCategories().equals(getCategories())"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 otherEvent.getTags().equals(getTags());"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"        builder.append(getName())"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"                .append(\"; Start Date: \")"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"                .append(getStartDate())"},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"                .append(\"; Start Time: \")"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"                .append(getStartTime())"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"                .append(\"; End Date: \")"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"                .append(getEndDate())"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"                .append(\"; End Time: \")"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"                .append(getEndTime())"},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":"                .append(\"; Category: \")"},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":"                .append(getCategories());"},{"lineNumber":122,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":123,"author":{"gitId":"SoulUseless"},"content":"        Set\u003cseedu.address.model.common.Tag\u003e tags \u003d getTags();"},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":125,"author":{"gitId":"SoulUseless"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":126,"author":{"gitId":"SoulUseless"},"content":"            tags.forEach(builder::append);"},{"lineNumber":127,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":"        return builder.toString();"},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"YuFeng0930":2,"icelenaugust":38,"SoulUseless":90}},{"path":"src/main/java/seedu/address/model/event/Time.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" * Represents a Time in SOChedule."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":" * Guarantees: immutable; time is valid as declared in {@link #isValidTime(String)}."},{"lineNumber":12,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"public class Time {"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"            \"Time should be represented in 24-hour notation, in the format of HH:mm\";"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    public static final String VALIDATION_REGEX \u003d \"^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])$\";"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    public final LocalTime time;"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"     * Constructs an {@code Time}."},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     * @param timeString A valid time."},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public Time(String timeString) {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        requireNonNull(timeString);"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"        checkArgument(isValidTime(timeString), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"        time \u003d LocalTime.parse(timeString, TIME_FORMATTER);"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"    public LocalTime getTime() {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        return time;"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if a given string is a valid time."},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":42,"author":{"gitId":"YuFeng0930"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"                || (other instanceof Time // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"                \u0026\u0026 time.equals(((Time) other).time)); // state check"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"        return time.hashCode();"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":""},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"     * Returns the time in a string."},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        return this.time !\u003d null ? this.time.format(TIME_FORMATTER) : \"\";"},{"lineNumber":62,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"YuFeng0930":1,"icelenaugust":19,"litone01":24,"SoulUseless":15,"ljhgab":4}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":" * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":" * Event uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":" * unique in terms of identity in the UniqueEventList. However, the removal of a event uses Event#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":" * as to ensure that the event with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":" * @see Event#isSameEvent(Event)"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if the list contains an equivalent test as the given argument."},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    public boolean contains(Event toCheck) {"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"     * Adds a event to the list."},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"     * The event must not already exist in the list."},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"    public void add(Event toAdd) {"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"            throw new DuplicateEventException();"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}."},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"     * {@code target} must exist in the list."},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"    public void setEvent(Event target, Event editedEvent) {"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(target, editedEvent);"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"            throw new EventNotFoundException();"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"            throw new DuplicateEventException();"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"        internalList.set(index, editedEvent);"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"     * Removes the equivalent event from the list."},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"     * The event must exist in the list."},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"    public void remove(Event toRemove) {"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(toRemove);"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"            throw new EventNotFoundException();"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"    public void setEvents(UniqueEventList replacement) {"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(replacement);"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"     * Replaces the contents of this list with {@code events}."},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"     * {@code events} must not contain duplicate events."},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"    public void setEvents(List\u003cEvent\u003e events) {"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"        requireAllNonNull(events);"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"        if (!eventsAreUnique(events)) {"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"            throw new DuplicateEventException();"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"        internalList.setAll(events);"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"        return internalUnmodifiableList;"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":"    public Iterator\u003cEvent\u003e iterator() {"},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":123,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if {@code events} contains only unique events."},{"lineNumber":125,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"SoulUseless"},"content":"    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"},{"lineNumber":127,"author":{"gitId":"SoulUseless"},"content":"        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":"            for (int j \u003d i + 1; j \u003c events.size(); j++) {"},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":"                if (events.get(i).isSameEvent(events.get(j))) {"},{"lineNumber":130,"author":{"gitId":"SoulUseless"},"content":"                    return false;"},{"lineNumber":131,"author":{"gitId":"SoulUseless"},"content":"                }"},{"lineNumber":132,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"SoulUseless"},"content":"        return true;"},{"lineNumber":135,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":136}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":" * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"public class DuplicateEventException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    public DuplicateEventException() {"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"        super(\"Operation would result in duplicate events\");"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":11}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":" * Signals that the operation is unable to find the specified event."},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"public class EventNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"SoulUseless":6}},{"path":"src/main/java/seedu/address/model/task/CompletionStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Represents the completion status of a task in SOChedule."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" * Guarantees: the status is either COMPLETE or INCOMPLETE."},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"public class CompletionStatus {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    public static final String VALIDATION_REGEX \u003d \"COMPLETE|INCOMPLETE\";"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"            \"Completion Statuses should only either by \\\"COMPLETE\\\" or \\\"INCOMPLETE\\\"\";"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    private Status completionStatus;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"    enum Status {"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"        COMPLETE,"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"        INCOMPLETE"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     * Constructs an {@code CompletionStatus}."},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    public CompletionStatus() {"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"        completionStatus \u003d Status.INCOMPLETE;"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"     * Constructs an {@code CompletionStatus}."},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"     * @param cs A valid completion status (\"COMPLETE\" or \"INCOMPLETE\")."},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    public CompletionStatus(String cs) {"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        switch (cs) {"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        case \"COMPLETE\":"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"            completionStatus \u003d Status.COMPLETE;"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        case \"INCOMPLETE\":"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"            completionStatus \u003d Status.INCOMPLETE;"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"            break;"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"        default:"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"            // should not reach here since validation is pre-done."},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"    public boolean isComplete() {"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        return completionStatus \u003d\u003d Status.COMPLETE;"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"     * Flips the completion status."},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"    public void flipCompletionStatus() {"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        if (completionStatus \u003d\u003d Status.COMPLETE) {"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"            completionStatus \u003d Status.INCOMPLETE;"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"            completionStatus \u003d Status.COMPLETE;"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"     * Updates the completion status of the task to COMPLETE;"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"     * Guarantees: task is currently incomplete."},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"    public void markAsDone() {"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"        completionStatus \u003d Status.COMPLETE;"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":""},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"     * Returns true if a given string is a valid completion status."},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"                || (other instanceof CompletionStatus // instanceof handles nulls"},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"                \u0026\u0026 completionStatus.equals(((CompletionStatus) other).completionStatus)); // state check"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":""},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"        return completionStatus.hashCode();"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":""},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"     * Returns a String representation of {@code CompletionStatus}."},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"        if (completionStatus \u003d\u003d Status.COMPLETE) {"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"            return \"Complete\";"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"        } else {"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"            return \"Incomplete\";"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"icelenaugust":5,"SoulUseless":70,"litone01":24}},{"path":"src/main/java/seedu/address/model/task/Priority.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Represents a Priority in SOChedule."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" * Guarantees: immutable; priority is valid as declared in {@link #isValidPriority(String)}."},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"public class Priority {"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"            \"Priority should be represented as an integer from 0 to 9\";"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[0-9]$\";"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    public static final int DEFAULT_PRIORITY \u003d 5;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    public final int priority;"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"     * Constructs an {@code Priority}."},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"     * @param priorityString A valid priority."},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    public Priority(String priorityString) {"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"        if (priorityString \u003d\u003d null) {"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"            priority \u003d DEFAULT_PRIORITY;"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"            checkArgument(isValidPriority(priorityString), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"            priority \u003d Integer.parseInt(priorityString);"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"    public int getPriority() {"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"        return priority;"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"     * Returns true if a given string is a valid priority."},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":"    public static boolean isValidPriority(String test) {"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        return test \u003d\u003d null || test.matches(VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"                || (other instanceof Priority // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"                \u0026\u0026 priority \u003d\u003d ((Priority) other).priority); // state check"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":""},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        return priority;"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":""},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"icelenaugust"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"        return Integer.toString(this.priority);"},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":33,"litone01":19,"SoulUseless":7}},{"path":"src/main/java/seedu/address/model/task/Task.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":" * Represents a task in SOChedule."},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"public class Task {"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"    // Fields"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    private final Date deadline;"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"    private final Priority priority;"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    private final CompletionStatus completionStatus \u003d new CompletionStatus();"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    private final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"     * Name field must be present and not null."},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    public Task(Name name, Date deadline, Priority priority, Set\u003cCategory\u003e categories, Set\u003cTag\u003e tags) {"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"        requireAllNonNull(name);"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"        this.priority \u003d priority;"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        this.categories.addAll(categories);"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"        this.tags.addAll(tags);"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":"    public Name getName() {"},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"        return this.name;"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"    public Date getDeadline() {"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"        return this.deadline;"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"    public Priority getPriority() {"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"        return this.priority;"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":"    public CompletionStatus getCompletionStatus() {"},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":"        return this.completionStatus;"},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"    public Set\u003cCategory\u003e getCategories() {"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"        return this.categories;"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":61,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"    public boolean isComplete() {"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        return completionStatus.isComplete();"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"    public void markTaskAsDone() {"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"        completionStatus.markAsDone();"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":71,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"     * Returns true if both tasks have the same name."},{"lineNumber":73,"author":{"gitId":"icelenaugust"},"content":"     * This defines a weaker notion of equality between two tasks."},{"lineNumber":74,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":"    public boolean isSameTask(Task otherTask) {"},{"lineNumber":76,"author":{"gitId":"icelenaugust"},"content":"        if (otherTask \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitId":"icelenaugust"},"content":"            return true;"},{"lineNumber":78,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":80,"author":{"gitId":"icelenaugust"},"content":"        return otherTask !\u003d null"},{"lineNumber":81,"author":{"gitId":"icelenaugust"},"content":"                \u0026\u0026 otherTask.getName().equals(getName());"},{"lineNumber":82,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":84,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"icelenaugust"},"content":"     * Returns true if both tasks have the same identity and data fields."},{"lineNumber":86,"author":{"gitId":"icelenaugust"},"content":"     * This defines a stronger notion of equality between two tasks."},{"lineNumber":87,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"icelenaugust"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitId":"icelenaugust"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitId":"icelenaugust"},"content":"            return true;"},{"lineNumber":92,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":94,"author":{"gitId":"icelenaugust"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":95,"author":{"gitId":"icelenaugust"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":98,"author":{"gitId":"icelenaugust"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":99,"author":{"gitId":"icelenaugust"},"content":"        return otherTask.getName().equals(getName())"},{"lineNumber":100,"author":{"gitId":"icelenaugust"},"content":"                \u0026\u0026 otherTask.getDeadline().equals(getDeadline())"},{"lineNumber":101,"author":{"gitId":"icelenaugust"},"content":"                \u0026\u0026 otherTask.getPriority().equals(getPriority())"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"                \u0026\u0026 otherTask.getCategories().equals(getCategories())"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"                \u0026\u0026 otherTask.getTags().equals(getTags())"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"                \u0026\u0026 otherTask.getCompletionStatus().equals(getCompletionStatus());"},{"lineNumber":105,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":107,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"icelenaugust"},"content":"    public String toString() {"},{"lineNumber":109,"author":{"gitId":"icelenaugust"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":110,"author":{"gitId":"icelenaugust"},"content":"        builder.append(getName())"},{"lineNumber":111,"author":{"gitId":"icelenaugust"},"content":"                .append(\"; Deadline: \")"},{"lineNumber":112,"author":{"gitId":"icelenaugust"},"content":"                .append(getDeadline())"},{"lineNumber":113,"author":{"gitId":"icelenaugust"},"content":"                .append(\"; Priority: \")"},{"lineNumber":114,"author":{"gitId":"icelenaugust"},"content":"                .append(getPriority())"},{"lineNumber":115,"author":{"gitId":"icelenaugust"},"content":"                .append(\"; Category: \")"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"                .append(getCategories())"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"                .append(\"; Completion Status: \")"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"                .append(completionStatus.toString());"},{"lineNumber":119,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":120,"author":{"gitId":"icelenaugust"},"content":"        Set\u003cseedu.address.model.common.Tag\u003e tags \u003d getTags();"},{"lineNumber":121,"author":{"gitId":"icelenaugust"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":122,"author":{"gitId":"icelenaugust"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":123,"author":{"gitId":"icelenaugust"},"content":"            tags.forEach(builder::append);"},{"lineNumber":124,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"icelenaugust"},"content":"        return builder.toString();"},{"lineNumber":126,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":128,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":129,"author":{"gitId":"icelenaugust"},"content":"}"},{"lineNumber":130,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":131,"author":{"gitId":"icelenaugust"},"content":""}],"authorContributionMap":{"icelenaugust":110,"SoulUseless":17,"litone01":4}},{"path":"src/main/java/seedu/address/model/task/UniqueTaskList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":" * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":" * Tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":" * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":" * as to ensure that the task with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":" *"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":" *"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":" * @see Task#isSameTask(Task)"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"        return internalList.stream().anyMatch(toCheck::isSameTask);"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":"     * Adds a task to the list."},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"     * The task must not already exist in the list."},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":"    public void add(Task toAdd) {"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":"     * {@code target} must exist in the list."},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":"     * The task identity of {@code editedTask} must not be the same as another existing task in the list."},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"icelenaugust"},"content":"    public void setTask(Task target, Task editedTask) {"},{"lineNumber":56,"author":{"gitId":"icelenaugust"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":61,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":63,"author":{"gitId":"icelenaugust"},"content":"        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"},{"lineNumber":64,"author":{"gitId":"icelenaugust"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":65,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"icelenaugust"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"     * The task must exist in the list."},{"lineNumber":73,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"icelenaugust"},"content":"    public void remove(Task toRemove) {"},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(toRemove);"},{"lineNumber":76,"author":{"gitId":"icelenaugust"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":77,"author":{"gitId":"icelenaugust"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":78,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":81,"author":{"gitId":"icelenaugust"},"content":"    public void setTasks(UniqueTaskList replacement) {"},{"lineNumber":82,"author":{"gitId":"icelenaugust"},"content":"        requireNonNull(replacement);"},{"lineNumber":83,"author":{"gitId":"icelenaugust"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":84,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":86,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"icelenaugust"},"content":"     * Replaces the contents of this list with {@code tasks}."},{"lineNumber":88,"author":{"gitId":"icelenaugust"},"content":"     * {@code tasks} must not contain duplicate tasks."},{"lineNumber":89,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"icelenaugust"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {"},{"lineNumber":91,"author":{"gitId":"icelenaugust"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":92,"author":{"gitId":"icelenaugust"},"content":"        if (!tasksAreUnique(tasks)) {"},{"lineNumber":93,"author":{"gitId":"icelenaugust"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":94,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":96,"author":{"gitId":"icelenaugust"},"content":"        internalList.setAll(tasks);"},{"lineNumber":97,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":99,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"icelenaugust"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"icelenaugust"},"content":"    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"},{"lineNumber":103,"author":{"gitId":"icelenaugust"},"content":"        return internalUnmodifiableList;"},{"lineNumber":104,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":106,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"icelenaugust"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":108,"author":{"gitId":"icelenaugust"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":111,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"icelenaugust"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitId":"icelenaugust"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitId":"icelenaugust"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitId":"icelenaugust"},"content":"                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":116,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":118,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"icelenaugust"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitId":"icelenaugust"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":123,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"icelenaugust"},"content":"     * Returns true if {@code tasks} contains only unique tasks."},{"lineNumber":125,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"icelenaugust"},"content":"    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"},{"lineNumber":127,"author":{"gitId":"icelenaugust"},"content":"        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"},{"lineNumber":128,"author":{"gitId":"icelenaugust"},"content":"            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"},{"lineNumber":129,"author":{"gitId":"icelenaugust"},"content":"                if (tasks.get(i).isSameTask(tasks.get(j))) {"},{"lineNumber":130,"author":{"gitId":"icelenaugust"},"content":"                    return false;"},{"lineNumber":131,"author":{"gitId":"icelenaugust"},"content":"                }"},{"lineNumber":132,"author":{"gitId":"icelenaugust"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"icelenaugust"},"content":"        return true;"},{"lineNumber":135,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":136}},{"path":"src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":" * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"public class DuplicateTaskException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"    public DuplicateTaskException() {"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"        super(\"Operation would result in duplicate tasks\");"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":11}},{"path":"src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":" * Signals that the operation is unable to find the specified task."},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"public class TaskNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"icelenaugust":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":"//import seedu.address.model.Sochedule;"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":"//import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"//import seedu.address.model.common.Name;"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"//import seedu.address.model.task.Task;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":"    //    public static Task[] getSampleTasks() {"},{"lineNumber":20,"author":{"gitId":"YuFeng0930"},"content":"    //"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":"    //    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"YuFeng0930"},"content":"    //    public static ReadOnlySochedule getSampleSochedule() {"},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":"    //"},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":"    //    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"     * Returns a category set containing the list of strings given."},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    public static Set\u003cCategory\u003e getCategorySet(String... strings) {"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        return Arrays.stream(strings)"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"                .map(Category::new)"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":12,"-":23,"SoulUseless":10}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedCategory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":" * Jackson-friendly version of {@link seedu.address.model.common.Category}."},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"class JsonAdaptedCategory {"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    private final String categoryName;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    public JsonAdaptedCategory(String categoryName) {"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"        this.categoryName \u003d categoryName;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"     * Converts a given {@code Category} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    public JsonAdaptedCategory(Category source) {"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"        categoryName \u003d source.getCategoryName();"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    public String getCategoryName() {"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        return categoryName;"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Category} object."},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted category."},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"    public Category toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"        if (!Category.isValidCategoryName(categoryName)) {"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        return new Category(categoryName);"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":47}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":" * Jackson-friendly version of {@link JsonAdaptedEvent}."},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"class JsonAdaptedEvent {"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    private final String startDate;"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    private final String startTime;"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    private final String endDate;"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    private final String endTime;"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    private final List\u003cJsonAdaptedCategory\u003e category \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"     * Constructs a {@code JsonAdaptedTask} with the given event details."},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    @JsonCreator"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"name\") String name, @JsonProperty(\"startDate\") String startDate,"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"                           @JsonProperty(\"startTime\") String startTime,"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"                           @JsonProperty(\"endDate\") String endDate, @JsonProperty(\"endTime\") String endTime,"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"                           @JsonProperty(\"category\") List\u003cJsonAdaptedCategory\u003e category,"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        this.name \u003d name;"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        if (category !\u003d null) {"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"            this.category.addAll(category);"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"     * Converts a given {@code Task} into this class for Jackson use."},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    public JsonAdaptedEvent(Event source) {"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        name \u003d source.getName().toString();"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        startDate \u003d source.getStartDate().toString();"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        startTime \u003d source.getStartTime().toString();"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"        endDate \u003d source.getEndDate().toString();"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"        endTime \u003d source.getEndTime().toString();"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"        category.addAll(source.getCategories().stream()"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"                .map(JsonAdaptedCategory::new)"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event."},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"    public Event toModelType() throws IllegalValueException {"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"        final List\u003cCategory\u003e eventCategories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"        final List\u003cTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"            eventTags.add(tag.toModelType());"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"        for (JsonAdaptedCategory cat : category) {"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"            eventCategories.add(cat.toModelType());"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"        if (startDate \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"        if (!Date.isValidDate(startDate)) {"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"        final Date modelStartDate \u003d new Date(startDate);"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"        if (!Time.isValidTime(startTime)) {"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"        final Time modelStartTime \u003d new Time(startTime);"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"        if (endDate \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"        if (!Date.isValidDate(endDate)) {"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"        final Date modelEndDate \u003d new Date(endDate);"},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":"        if (!Time.isValidTime(endTime)) {"},{"lineNumber":122,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"        final Time modelEndTime \u003d new Time(endTime);"},{"lineNumber":125,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":126,"author":{"gitId":"SoulUseless"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eventTags);"},{"lineNumber":127,"author":{"gitId":"SoulUseless"},"content":"        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(eventCategories);"},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":"        return new Event(modelName, modelStartDate, modelStartTime,"},{"lineNumber":130,"author":{"gitId":"SoulUseless"},"content":"                modelEndDate, modelEndTime, modelCategories, modelTags);"},{"lineNumber":131,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":133,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":133}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":47,"SoulUseless":1}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTask.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.CompletionStatus;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":" * Jackson-friendly version of {@link Task}."},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"class JsonAdaptedTask {"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    private final String deadline;"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    private final String priority;"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    private final String completionStatus;"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    private final List\u003cJsonAdaptedCategory\u003e category \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"     * Constructs a {@code JsonAdaptedTask} with the given task details."},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"deadline\") String deadline,"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"                             @JsonProperty(\"priority\") String priority,"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"                             @JsonProperty(\"completionStatus\") String completionStatus,"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"                             @JsonProperty(\"category\") List\u003cJsonAdaptedCategory\u003e category,"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        this.priority \u003d priority;"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        this.completionStatus \u003d completionStatus;"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        if (category !\u003d null) {"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"            this.category.addAll(category);"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"     * Converts a given {@code Task} into this class for Jackson use."},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"    public JsonAdaptedTask(Task source) {"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"        name \u003d source.getName().toString();"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        deadline \u003d source.getDeadline().toString();"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        priority \u003d source.getPriority().toString();"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        completionStatus \u003d source.isComplete() ? \"COMPLETE\" : \"INCOMPLETE\";"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        category.addAll(source.getCategories().stream()"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"                .map(JsonAdaptedCategory::new)"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task."},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"        final List\u003cCategory\u003e taskCategories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"            taskTags.add(tag.toModelType());"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"        for (JsonAdaptedCategory cat : category) {"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"            taskCategories.add(cat.toModelType());"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"        if (deadline \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"        if (!Date.isValidDate(deadline)) {"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"        final Date modelDeadline \u003d new Date(deadline);"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"        if (!Priority.isValidPriority(priority)) {"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"        final Priority modelPriority \u003d new Priority(priority);"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"        if (completionStatus \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"                    CompletionStatus.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"        if (!CompletionStatus.isValidStatus(completionStatus)) {"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"            throw new IllegalValueException(CompletionStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"        final CompletionStatus modelCompletionStatus \u003d new CompletionStatus(completionStatus);"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":"        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(taskCategories);"},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":122,"author":{"gitId":"SoulUseless"},"content":"        Task task \u003d new Task(modelName, modelDeadline, modelPriority, modelCategories, modelTags);"},{"lineNumber":123,"author":{"gitId":"SoulUseless"},"content":"        if (modelCompletionStatus.isComplete()) {"},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"            task.markTaskAsDone();"},{"lineNumber":125,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"SoulUseless"},"content":"        return task;"},{"lineNumber":127,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":129}},{"path":"src/main/java/seedu/address/storage/JsonSerializableSochedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.Sochedule;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":" * An Immutable Sochedule that is serializable to JSON format."},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"@JsonRootName(value \u003d \"sochedule\")"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"class JsonSerializableSochedule {"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Task list contains duplicate event(s).\";"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     * Constructs a {@code JsonSerializableSochedule} with the given persons."},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    @JsonCreator"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    public JsonSerializableSochedule(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks,"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"                                     @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        this.events.addAll(events);"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"     * Converts a given {@code ReadOnlySochedule} into this class for Jackson use."},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableSochedule}."},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"    public JsonSerializableSochedule(ReadOnlySochedule source) {"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"     * Converts this sochedule into the model\u0027s {@code Sochedule} object."},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"    public Sochedule toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        Sochedule sochedule \u003d new Sochedule();"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"            Task task \u003d jsonAdaptedTask.toModelType();"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"            if (sochedule.hasTask(task)) {"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"            sochedule.addTask(task);"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"            if (sochedule.hasEvent(event)) {"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"            sochedule.addEvent(event);"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"        return sochedule;"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":75}},{"path":"src/main/java/seedu/address/storage/JsonSocheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":" * A class to access Sochedule data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"public class JsonSocheduleStorage implements SocheduleStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonSocheduleStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public JsonSocheduleStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    public Path getSocheduleFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    public Optional\u003cReadOnlySochedule\u003e readSochedule() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        return readSochedule(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"     * Similar to {@link #readSochedule()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    public Optional\u003cReadOnlySochedule\u003e readSochedule(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        Optional\u003cJsonSerializableSochedule\u003e jsonSochedule \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"                filePath, JsonSerializableSochedule.class);"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        if (!jsonSochedule.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"            return Optional.of(jsonSochedule.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"    public void saveSochedule(ReadOnlySochedule sochedule) throws IOException {"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        saveSochedule(sochedule, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"     * Similar to {@link #saveSochedule(ReadOnlySochedule)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"    public void saveSochedule(ReadOnlySochedule sochedule, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"        requireNonNull(sochedule);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableSochedule(sochedule), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":60,"SoulUseless":20}},{"path":"src/main/java/seedu/address/storage/SocheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":" * Represents a storage for {@link seedu.address.model.Sochedule}."},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"public interface SocheduleStorage {"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    Path getSocheduleFilePath();"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     * Returns Sochedule data as a {@link ReadOnlySochedule}."},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    Optional\u003cReadOnlySochedule\u003e readSochedule() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"     * @see #getSocheduleFilePath()"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    Optional\u003cReadOnlySochedule\u003e readSochedule(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"     * Saves the given {@link ReadOnlySochedule} to the storage."},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"     * @param sochedule cannot be null."},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    void saveSochedule(ReadOnlySochedule sochedule) throws IOException;"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"     * @see #saveSochedule(ReadOnlySochedule)"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    void saveSochedule(ReadOnlySochedule sochedule, Path filePath) throws IOException;"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":45}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"public interface Storage extends UserPrefsStorage, SocheduleStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    Path getSocheduleFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    Optional\u003cReadOnlySochedule\u003e readSochedule() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    void saveSochedule(ReadOnlySochedule sochedule) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":26,"SoulUseless":5}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":" * Manages storage of Sochedule data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    private SocheduleStorage socheduleStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     * Creates a {@code SocheduleStorageManager} with the given {@code socheduleStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public StorageManager(SocheduleStorage socheduleStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"        this.socheduleStorage \u003d socheduleStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sochedule methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"    public Path getSocheduleFilePath() {"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"        return socheduleStorage.getSocheduleFilePath();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    public Optional\u003cReadOnlySochedule\u003e readSochedule() throws DataConversionException, IOException {"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"        return readSochedule(socheduleStorage.getSocheduleFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    public Optional\u003cReadOnlySochedule\u003e readSochedule(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        return socheduleStorage.readSochedule(filePath);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"    public void saveSochedule(ReadOnlySochedule sochedule) throws IOException {"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"        saveSochedule(sochedule, getSocheduleFilePath());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"    public void saveSochedule(ReadOnlySochedule sochedule, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"        socheduleStorage.saveSochedule(sochedule, filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":59,"SoulUseless":17}},{"path":"src/main/java/seedu/address/ui/EventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":" * An UI component that displays information of a {@code Event}."},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"    public final Event event;"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"    private HBox cardPane;"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"    private Label name;"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"    private Label startDate;"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"    private Label startTime;"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"    private Label endDate;"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"    private Label endTime;"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"    private Label category;"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"    private FlowPane tags;"},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"     * Creates a {@code EventCode} with the given {@code Event} and index to display."},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"    public EventCard(Event event, int displayedIndex) {"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"        this.event \u003d event;"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"        name.setText(event.getName().fullName);"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"        startDate.setText(event.getStartDate().toString());"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"        startTime.setText(event.getStartTime().toString());"},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":"        endDate.setText(event.getEndDate().toString());"},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":"        endTime.setText(event.getEndTime().toString());"},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":"        category.setText(event.getCategories().toString());"},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":"        event.getTags().stream()"},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":55,"author":{"gitId":"icelenaugust"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":56,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":"        // short circuit if same object"},{"lineNumber":61,"author":{"gitId":"icelenaugust"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"icelenaugust"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":65,"author":{"gitId":"icelenaugust"},"content":"        // instanceof handles nulls"},{"lineNumber":66,"author":{"gitId":"icelenaugust"},"content":"        if (!(other instanceof EventCard)) {"},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":"        // state check"},{"lineNumber":71,"author":{"gitId":"icelenaugust"},"content":"        EventCard card \u003d (EventCard) other;"},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":73,"author":{"gitId":"icelenaugust"},"content":"                \u0026\u0026 event.equals(card.event);"},{"lineNumber":74,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":75}},{"path":"src/main/java/seedu/address/ui/EventListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":" * Panel containing the list of events."},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    private ListView\u003cEvent\u003e eventListView;"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"     * Creates a {@code EventListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"        eventListView.setItems(eventList);"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"    class EventListViewCell extends ListCell\u003cEvent\u003e {"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"        protected void updateItem(Event event, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"            super.updateItem(event, empty);"},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"            if (empty || event \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":49}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103-w16-1.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":101,"litone01":1}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"    private EventListPanel eventListPanel;"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"    private StackPane eventListPanelPlaceholder;"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"    private StackPane taskListPanelPlaceholder;"},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":97,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":103,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":107,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":120,"author":{"gitId":"icelenaugust"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":121,"author":{"gitId":"icelenaugust"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":122,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":123,"author":{"gitId":"icelenaugust"},"content":"        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"},{"lineNumber":124,"author":{"gitId":"icelenaugust"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"icelenaugust"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getSocheduleFilePath());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"icelenaugust"},"content":"    public TaskListPanel getTaskListPanel() {"},{"lineNumber":177,"author":{"gitId":"icelenaugust"},"content":"        return taskListPanel;"},{"lineNumber":178,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":180,"author":{"gitId":"icelenaugust"},"content":"    public EventListPanel getEventListPanel() {"},{"lineNumber":181,"author":{"gitId":"icelenaugust"},"content":"        return eventListPanel;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":186,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"icelenaugust":20,"-":190}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"    public final Task task;"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"    private HBox cardPane;"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"    private Label name;"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"    private Label deadline;"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"    private Label priority;"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"    private Label completionStatus;"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"    private Label category;"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"    private FlowPane tags;"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":"     * Creates a {@code TaskCode} with the given {@code Task} and index to display."},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"        this.task \u003d task;"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"        name.setText(task.getName().fullName);"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"        deadline.setText(task.getDeadline().toString());"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"        priority.setText(task.getPriority().toString());"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"        completionStatus.setText(task.getCompletionStatus().toString());"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"        category.setText(task.getCategories().toString());"},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":"        task.getTags().stream()"},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":55,"author":{"gitId":"icelenaugust"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"icelenaugust"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"        // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"            return true;"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":62,"author":{"gitId":"icelenaugust"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitId":"icelenaugust"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":64,"author":{"gitId":"icelenaugust"},"content":"            return false;"},{"lineNumber":65,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"        // state check"},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":71,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":72}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":" * Panel containing the list of tasks."},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    private ListView\u003cTask\u003e taskListView;"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"        taskListView.setItems(taskList);"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"    class TaskListViewCell extends ListCell\u003cTask\u003e {"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"        protected void updateItem(Task task, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"            super.updateItem(task, empty);"},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":49}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/calendar.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"icelenaugust":1,"-":88}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"icelenaugust":1,"-":351}},{"path":"src/main/resources/view/EventListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"            \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"            \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"                    \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"                    \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"                \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"            \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"        \u003c/VBox\u003e"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"icelenaugust":38}},{"path":"src/main/resources/view/EventListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"icelenaugust":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"         title\u003d\"SOChedule\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"    \u003cImage url\u003d\"@/images/calendar.png\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":"        \u003cHBox styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\"\u003e"},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":"          \u003c!-- Task list --\u003e"},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":"          \u003cVBox alignment\u003d\"TOP_CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel\u003e"},{"lineNumber":55,"author":{"gitId":"icelenaugust"},"content":"              \u003cfont\u003e"},{"lineNumber":56,"author":{"gitId":"icelenaugust"},"content":"                \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"              \u003c/font\u003e"},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"              Tasks"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"            \u003c/Label\u003e"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":"            \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e"},{"lineNumber":64,"author":{"gitId":"icelenaugust"},"content":"              \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e"},{"lineNumber":66,"author":{"gitId":"icelenaugust"},"content":"          \u003c/VBox\u003e"},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"          \u003c!-- Event list --\u003e"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":"          \u003cVBox alignment\u003d\"TOP_CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel\u003e"},{"lineNumber":71,"author":{"gitId":"icelenaugust"},"content":"              \u003cfont\u003e"},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"                \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"},{"lineNumber":73,"author":{"gitId":"icelenaugust"},"content":"              \u003c/font\u003e"},{"lineNumber":74,"author":{"gitId":"icelenaugust"},"content":"              Events"},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":"            \u003c/Label\u003e"},{"lineNumber":76,"author":{"gitId":"icelenaugust"},"content":"            \u003cVBox fx:id\u003d\"eventList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":77,"author":{"gitId":"icelenaugust"},"content":"              \u003cpadding\u003e"},{"lineNumber":78,"author":{"gitId":"icelenaugust"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":79,"author":{"gitId":"icelenaugust"},"content":"              \u003c/padding\u003e"},{"lineNumber":80,"author":{"gitId":"icelenaugust"},"content":"              \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":81,"author":{"gitId":"icelenaugust"},"content":"            \u003c/VBox\u003e"},{"lineNumber":82,"author":{"gitId":"icelenaugust"},"content":"          \u003c/VBox\u003e"},{"lineNumber":83,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":84,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":85,"author":{"gitId":"icelenaugust"},"content":"        \u003c/HBox\u003e"},{"lineNumber":86,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"icelenaugust":37,"-":55}},{"path":"src/main/resources/view/TaskListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"            \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"            \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"                    \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"                    \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"                \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"            \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"completionStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$completionStatus\" /\u003e"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"            \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"        \u003c/VBox\u003e"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"\u003c/HBox\u003e"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":""}],"authorContributionMap":{"icelenaugust":38}},{"path":"src/main/resources/view/TaskListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"icelenaugust":8}},{"path":"src/test/data/JsonSerializableSocheduleTest/duplicateEventSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ ],"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2103 Meeting\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-27\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"TeamProject\" ]"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2103 Meeting\","},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-27\","},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"TeamProject\" ]"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"  } ]"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":20}},{"path":"src/test/data/JsonSerializableSocheduleTest/duplicateTaskSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ {"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Homework 1\","},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"8\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"INCOMPLETE\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"Homework\" ],"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"MA3110\" ]"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Homework 1\","},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"8\","},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"INCOMPLETE\","},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"Homework\" ],"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"MA3110\" ]"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"  } ],"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ ]"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":18}},{"path":"src/test/data/JsonSerializableSocheduleTest/invalidEventSchedulingSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ ],"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2103 Meeting\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-27\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"11:00\","},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"TeamProject\" ]"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"  } ]"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":12}},{"path":"src/test/data/JsonSerializableSocheduleTest/invalidEventSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ ],"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2103 Meeting\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-27\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:01230\","},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"TeamProject\" ]"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"  } ]"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":12}},{"path":"src/test/data/JsonSerializableSocheduleTest/invalidTaskSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ {"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Homework 1\","},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07123\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"8\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"INCOMPLETE\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"Homework\" ],"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"MA3110\" ]"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"  } ],"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ ]"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":11}},{"path":"src/test/data/JsonSerializableSocheduleTest/noEventTypicalSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ {"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Homework 1\","},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"8\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"INCOMPLETE\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"Homework\" ],"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"MA3110\" ]"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Clean the House\","},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"9\","},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"COMPLETE\","},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [],"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : []"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"  } ],"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ ]"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":18}},{"path":"src/test/data/JsonSerializableSocheduleTest/noTaskTypicalSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ ],"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2103 Meeting\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-27\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"TeamProject\" ]"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2105 Lecture\","},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-28\","},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [  ]"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2106 Tutorial\","},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-28\","},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"17:00\","},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"18:00\","},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"AtHome\" ]"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"  } ]"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":28}},{"path":"src/test/data/JsonSerializableSocheduleTest/typicalSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ {"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Homework 1\","},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"8\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"INCOMPLETE\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"Homework\" ],"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"MA3110\" ]"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Clean the House\","},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"9\","},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"COMPLETE\","},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [],"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : []"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"  } ],"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2103 Meeting\","},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-27\","},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"TeamProject\" ]"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2105 Lecture\","},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-28\","},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [  ]"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2106 Tutorial\","},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-28\","},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"17:00\","},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"18:00\","},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"AtHome\" ]"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"  } ]"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":42}},{"path":"src/test/data/JsonSocheduleStorageTest/invalidAndValidEventSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ ],"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2103 M@#@@@eeting\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-27\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"TeamProject\" ]"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2105 Lecture\","},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-28\","},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [  ]"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2106 Tutorial\","},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-28\","},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"17:00\","},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"18:00\","},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"AtHome\" ]"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"  } ]"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":28}},{"path":"src/test/data/JsonSocheduleStorageTest/invalidAndValidTaskSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ {"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Invalid Task\","},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"20211231234-01-07\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"8\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"INCOMPLETE\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"Homework\" ],"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"MA3110\" ]"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Clean the House\","},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"9\","},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"COMPLETE\","},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [],"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : []"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"  } ],"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ ]"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":18}},{"path":"src/test/data/JsonSocheduleStorageTest/invalidEventSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ ],"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"CS2103 M@#@@@eeting\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"startDate\" : \"2021-02-27\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"startTime\" : \"15:00\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"endDate\" : \"2021-02-27\","},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"endTime\" : \"17:00\","},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"School\" ],"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"TeamProject\" ]"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"  } ]"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":12}},{"path":"src/test/data/JsonSocheduleStorageTest/invalidTaskSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ {"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Invalid Task\","},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"20211231234-01-07\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"8\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"INCOMPLETE\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"Homework\" ],"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"MA3110\" ]"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"  } ],"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"  \"events\" : [ ]"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":11}},{"path":"src/test/data/JsonSocheduleStorageTest/missingFieldSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"{"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"  \"tasks\" : [ {"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Homework 1\","},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"8\","},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"INCOMPLETE\","},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [ \"Homework\" ],"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : [ \"MA3110\" ]"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \"name\" : \"Clean the House\","},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    \"deadline\" : \"2021-01-07\","},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \"priority\" : \"9\","},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \"completionStatus\" : \"COMPLETE\","},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    \"category\" : [],"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \"tagged\" : []"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"  } ]"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":17}},{"path":"src/test/data/JsonSocheduleStorageTest/notJsonFormatSochedule.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"blah."}],"authorContributionMap":{"SoulUseless":1}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_SAMPLE;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DEADLINE_SAMPLE;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_SAMPLE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Disabled;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.logic.commands.ListTaskCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.Sochedule;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.storage.JsonSocheduleStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        JsonSocheduleStorage socheduleStorage \u003d"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"                new JsonSocheduleStorage(temporaryFolder.resolve(\"sochedule.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        StorageManager storage \u003d new StorageManager(socheduleStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        String deleteTaskCommand \u003d \"delete_task 9\";"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        assertCommandException(deleteTaskCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"    @Disabled"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"        String listTaskCommand \u003d ListTaskCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"        assertCommandSuccess(listTaskCommand, ListTaskCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    @Disabled"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"        JsonSocheduleStorage socheduleStorage \u003d"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"                new JsonSocheduleIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"        StorageManager storage \u003d new StorageManager(socheduleStorage, userPrefsStorage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"        // Execute add task command"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"        String addTaskCommand \u003d AddTaskCommand.COMMAND_WORD + TASK_NAME_SAMPLE + TASK_DEADLINE_SAMPLE"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"                + PRIORITY_SAMPLE;"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"        Task expectedTask \u003d new TaskBuilder().build();"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"        ModelManager expectedModel \u003d new ModelManager(new Sochedule(), new UserPrefs());"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"        expectedModel.addTask(expectedTask);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"        assertCommandFailure(addTaskCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"    @Disabled"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":"                                      Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":134,"author":{"gitId":"SoulUseless"},"content":"                                      String expectedMessage) {"},{"lineNumber":135,"author":{"gitId":"SoulUseless"},"content":"        Model expectedModel \u003d new ModelManager(model.getSochedule(), new UserPrefs());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":147,"author":{"gitId":"SoulUseless"},"content":"                                      String expectedMessage, Model expectedModel) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"SoulUseless"},"content":"    private static class JsonSocheduleIoExceptionThrowingStub extends JsonSocheduleStorage {"},{"lineNumber":156,"author":{"gitId":"SoulUseless"},"content":"        private JsonSocheduleIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitId":"SoulUseless"},"content":"        public void saveSochedule(ReadOnlySochedule sochedule, Path filePath) throws IOException {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":124,"SoulUseless":41}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"YuFeng0930"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":"//import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"//"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"//import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":"//import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":"//import java.util.List;"},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"//"},{"lineNumber":17,"author":{"gitId":"YuFeng0930"},"content":"//import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    // for logic in sochedule"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    public static final String VALID_TASK_NAME \u003d \"Sample Task\";"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    public static final String VALID_TASK_DEADLINE \u003d \"2022-01-01\";"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    public static final String VALID_PRIORITY \u003d \"5\";"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    public static final String TASK_NAME_SAMPLE \u003d \" \" + PREFIX_NAME + VALID_TASK_NAME;"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    public static final String TASK_DEADLINE_SAMPLE \u003d \" \" + PREFIX_DEADLINE + VALID_TASK_DEADLINE;"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    public static final String PRIORITY_SAMPLE \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_NAME_INTERVIEW \u003d \"Coding Interview\";"},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_STARTDATE_INTERVIEW \u003d \"2022-03-22\";"},{"lineNumber":45,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_STARTTIME_INTERVIEW \u003d \"13:00\";"},{"lineNumber":46,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_ENDDATE_INTERVIEW \u003d \"2022-03-22\";"},{"lineNumber":47,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_ENDTIME_INTERVIEW \u003d \"15:00\";"},{"lineNumber":48,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_TAG_INTERVIEW \u003d \"Final\";"},{"lineNumber":49,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_CATEGORY_INTERVIEW \u003d \"Work\";"},{"lineNumber":50,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_NAME_ORIENTATION \u003d \"SoC FOP\";"},{"lineNumber":51,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_STARTDATE_ORIENTATION \u003d \"2022-07-24\";"},{"lineNumber":52,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_STARTTIME_ORIENTATION \u003d \"07:00\";"},{"lineNumber":53,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_ENDDATE_ORIENTATION \u003d \"2022-07-31\";"},{"lineNumber":54,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_ENDTIME_ORIENTATION \u003d \"22:00\";"},{"lineNumber":55,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_TAG_ORIENTATION \u003d \"Fun\";"},{"lineNumber":56,"author":{"gitId":"YuFeng0930"},"content":"    public static final String VALID_EVENT_CATEGORY_ORIENTATION \u003d \"School\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"YuFeng0930"},"content":"    //    /**"},{"lineNumber":86,"author":{"gitId":"YuFeng0930"},"content":"    //     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":87,"author":{"gitId":"YuFeng0930"},"content":"    //     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":88,"author":{"gitId":"YuFeng0930"},"content":"    //     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":89,"author":{"gitId":"YuFeng0930"},"content":"    //     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":90,"author":{"gitId":"YuFeng0930"},"content":"    //     */"},{"lineNumber":91,"author":{"gitId":"YuFeng0930"},"content":"    //    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":92,"author":{"gitId":"YuFeng0930"},"content":"    //        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":93,"author":{"gitId":"YuFeng0930"},"content":"    //        // only do so by copying its components."},{"lineNumber":94,"author":{"gitId":"YuFeng0930"},"content":"    //        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":95,"author":{"gitId":"YuFeng0930"},"content":"    //        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":96,"author":{"gitId":"YuFeng0930"},"content":"    //"},{"lineNumber":97,"author":{"gitId":"YuFeng0930"},"content":"    //        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":98,"author":{"gitId":"YuFeng0930"},"content":"    //        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":99,"author":{"gitId":"YuFeng0930"},"content":"    //        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":100,"author":{"gitId":"YuFeng0930"},"content":"    //    }"},{"lineNumber":101,"author":{"gitId":"YuFeng0930"},"content":"    //    /**"},{"lineNumber":102,"author":{"gitId":"YuFeng0930"},"content":"    //     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":103,"author":{"gitId":"YuFeng0930"},"content":"    //     * {@code model}\u0027s address book."},{"lineNumber":104,"author":{"gitId":"YuFeng0930"},"content":"    //     */"},{"lineNumber":105,"author":{"gitId":"YuFeng0930"},"content":"    //    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":106,"author":{"gitId":"YuFeng0930"},"content":"    //        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":107,"author":{"gitId":"YuFeng0930"},"content":"    //"},{"lineNumber":108,"author":{"gitId":"YuFeng0930"},"content":"    //        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":109,"author":{"gitId":"YuFeng0930"},"content":"    //        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":110,"author":{"gitId":"YuFeng0930"},"content":"    //        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":111,"author":{"gitId":"YuFeng0930"},"content":"    //"},{"lineNumber":112,"author":{"gitId":"YuFeng0930"},"content":"    //        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":113,"author":{"gitId":"YuFeng0930"},"content":"    //    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":51,"-":55,"litone01":9}},{"path":"src/test/java/seedu/address/logic/parser/SocheduleParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import static seedu.address.logic.parser.SocheduleParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":""},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":""},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"public class SocheduleParserUtilTest {"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    private static final String INVALID_NAME \u003d \"T@ask\";"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    private static final String INVALID_TAG \u003d \"#busy\";"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    private static final String INVALID_DATE_FORMAT \u003d \"2020/01/01\";"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    private static final String INVALID_DATE_VALUE \u003d \"2020-13-01\";"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"    private static final String INVALID_TIME_FORMAT \u003d \"1200\";"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"    private static final String INVALID_TIME_VALUE \u003d \"25:00\";"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"    private static final String INVALID_PRIORITY \u003d \"test\";"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"    private static final String INVALID_CATEGORY \u003d \"#school\";"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":""},{"lineNumber":34,"author":{"gitId":"litone01"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    private static final String VALID_DATE \u003d \"2020-01-01\";"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    private static final String VALID_TIME \u003d \"12:00\";"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    private static final String VALID_PRIORITY \u003d \"6\";"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    private static final String VALID_CATEGORY_1 \u003d \"school\";"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"    private static final String VALID_CATEGORY_2 \u003d \"math\";"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":""},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":""},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":""},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"            -\u003e SocheduleParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":""},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"        // No whitespaces"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"        assertEquals(INDEX_FIRST_PERSON, SocheduleParserUtil.parseIndex(\"1\"));"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":""},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        assertEquals(INDEX_FIRST_PERSON, SocheduleParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":""},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"        assertThrows(NullPointerException.class, () -\u003e SocheduleParserUtil.parseName(null));"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":""},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parseName(INVALID_NAME));"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":""},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedName, SocheduleParserUtil.parseName(VALID_NAME));"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"litone01"},"content":""},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedName, SocheduleParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":""},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"        assertThrows(NullPointerException.class, () -\u003e SocheduleParserUtil.parseTag(null));"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":""},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":""},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedTag, SocheduleParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":""},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedTag, SocheduleParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"litone01"},"content":""},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"litone01"},"content":"        assertThrows(NullPointerException.class, () -\u003e SocheduleParserUtil.parseTags(null));"},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":""},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"litone01"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, ()"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"            -\u003e SocheduleParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"litone01"},"content":""},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"litone01"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":125,"author":{"gitId":"litone01"},"content":"        assertTrue(SocheduleParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":126,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"litone01"},"content":""},{"lineNumber":128,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"litone01"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":130,"author":{"gitId":"litone01"},"content":"        Set\u003cTag\u003e actualTagSet \u003d SocheduleParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":131,"author":{"gitId":"litone01"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":132,"author":{"gitId":"litone01"},"content":""},{"lineNumber":133,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":134,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"litone01"},"content":""},{"lineNumber":136,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"litone01"},"content":"    public void parseDate_null_throwsNullPointerException() {"},{"lineNumber":138,"author":{"gitId":"litone01"},"content":"        assertThrows(NullPointerException.class, () -\u003e SocheduleParserUtil.parseDate(null));"},{"lineNumber":139,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"litone01"},"content":""},{"lineNumber":141,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"litone01"},"content":"    public void parseDate_invalidValue_throwsParseException() {"},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parseDate(INVALID_DATE_VALUE));"},{"lineNumber":144,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"litone01"},"content":""},{"lineNumber":146,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":147,"author":{"gitId":"litone01"},"content":"    public void parseDate_invalidFormat_throwsParseException() {"},{"lineNumber":148,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parseDate(INVALID_DATE_FORMAT));"},{"lineNumber":149,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"litone01"},"content":""},{"lineNumber":151,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"litone01"},"content":"    public void parseDate_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":153,"author":{"gitId":"litone01"},"content":"        Date expectedDate \u003d new Date(VALID_DATE);"},{"lineNumber":154,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedDate, SocheduleParserUtil.parseDate(VALID_DATE));"},{"lineNumber":155,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"litone01"},"content":""},{"lineNumber":157,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"litone01"},"content":"    public void parseDate_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":159,"author":{"gitId":"litone01"},"content":"        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"},{"lineNumber":160,"author":{"gitId":"litone01"},"content":"        Date expectedDate \u003d new Date(VALID_DATE);"},{"lineNumber":161,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedDate, SocheduleParserUtil.parseDate(dateWithWhitespace));"},{"lineNumber":162,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"litone01"},"content":""},{"lineNumber":164,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"litone01"},"content":"    public void parseTime_null_throwsNullPointerException() {"},{"lineNumber":166,"author":{"gitId":"litone01"},"content":"        assertThrows(NullPointerException.class, () -\u003e SocheduleParserUtil.parseTime(null));"},{"lineNumber":167,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"litone01"},"content":""},{"lineNumber":169,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":170,"author":{"gitId":"litone01"},"content":"    public void parseTime_invalidValue_throwsParseException() {"},{"lineNumber":171,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parseTime(INVALID_TIME_VALUE));"},{"lineNumber":172,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"litone01"},"content":""},{"lineNumber":174,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"litone01"},"content":"    public void parseTime_invalidFormat_throwsParseException() {"},{"lineNumber":176,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parseTime(INVALID_TIME_FORMAT));"},{"lineNumber":177,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"litone01"},"content":""},{"lineNumber":179,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"litone01"},"content":"    public void parseTime_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":181,"author":{"gitId":"litone01"},"content":"        Time expectedTime \u003d new Time(VALID_TIME);"},{"lineNumber":182,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedTime, SocheduleParserUtil.parseTime(VALID_TIME));"},{"lineNumber":183,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"litone01"},"content":""},{"lineNumber":185,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"litone01"},"content":"    public void parseTime_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":187,"author":{"gitId":"litone01"},"content":"        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"},{"lineNumber":188,"author":{"gitId":"litone01"},"content":"        Time expectedTime \u003d new Time(VALID_TIME);"},{"lineNumber":189,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedTime, SocheduleParserUtil.parseTime(timeWithWhitespace));"},{"lineNumber":190,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"litone01"},"content":""},{"lineNumber":192,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":193,"author":{"gitId":"litone01"},"content":"    public void parsePriority_null_throwsNullPointerException() {"},{"lineNumber":194,"author":{"gitId":"litone01"},"content":"        assertThrows(NullPointerException.class, () -\u003e SocheduleParserUtil.parsePriority(null));"},{"lineNumber":195,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"litone01"},"content":""},{"lineNumber":197,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":198,"author":{"gitId":"litone01"},"content":"    public void parsePriority_invalidValue_throwsParseException() {"},{"lineNumber":199,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parsePriority(INVALID_PRIORITY));"},{"lineNumber":200,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"litone01"},"content":""},{"lineNumber":202,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":203,"author":{"gitId":"litone01"},"content":"    public void parsePriority_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":204,"author":{"gitId":"litone01"},"content":"        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"},{"lineNumber":205,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedPriority, SocheduleParserUtil.parsePriority(VALID_PRIORITY));"},{"lineNumber":206,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"litone01"},"content":""},{"lineNumber":208,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":209,"author":{"gitId":"litone01"},"content":"    public void parsePriority_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":210,"author":{"gitId":"litone01"},"content":"        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"},{"lineNumber":211,"author":{"gitId":"litone01"},"content":"        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"},{"lineNumber":212,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedPriority, SocheduleParserUtil.parsePriority(priorityWithWhitespace));"},{"lineNumber":213,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"litone01"},"content":""},{"lineNumber":215,"author":{"gitId":"litone01"},"content":""},{"lineNumber":216,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":217,"author":{"gitId":"litone01"},"content":"    public void parseCategory_null_throwsNullPointerException() {"},{"lineNumber":218,"author":{"gitId":"litone01"},"content":"        assertThrows(NullPointerException.class, () -\u003e SocheduleParserUtil.parseCategory(null));"},{"lineNumber":219,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"litone01"},"content":""},{"lineNumber":221,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":222,"author":{"gitId":"litone01"},"content":"    public void parseCategory_invalidValue_throwsParseException() {"},{"lineNumber":223,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, () -\u003e SocheduleParserUtil.parseCategory(INVALID_CATEGORY));"},{"lineNumber":224,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"litone01"},"content":""},{"lineNumber":226,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":227,"author":{"gitId":"litone01"},"content":"    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"},{"lineNumber":228,"author":{"gitId":"litone01"},"content":"        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"},{"lineNumber":229,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedCategory, SocheduleParserUtil.parseCategory(VALID_CATEGORY_1));"},{"lineNumber":230,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"litone01"},"content":""},{"lineNumber":232,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":233,"author":{"gitId":"litone01"},"content":"    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"},{"lineNumber":234,"author":{"gitId":"litone01"},"content":"        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY_1 + WHITESPACE;"},{"lineNumber":235,"author":{"gitId":"litone01"},"content":"        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"},{"lineNumber":236,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedCategory, SocheduleParserUtil.parseCategory(categoryWithWhitespace));"},{"lineNumber":237,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"litone01"},"content":""},{"lineNumber":239,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":240,"author":{"gitId":"litone01"},"content":"    public void parseCategories_null_throwsNullPointerException() {"},{"lineNumber":241,"author":{"gitId":"litone01"},"content":"        assertThrows(NullPointerException.class, () -\u003e SocheduleParserUtil.parseCategories(null));"},{"lineNumber":242,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"litone01"},"content":""},{"lineNumber":244,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":245,"author":{"gitId":"litone01"},"content":"    public void parseCategories_collectionWithInvalidCategories_throwsParseException() {"},{"lineNumber":246,"author":{"gitId":"litone01"},"content":"        assertThrows(ParseException.class, ()"},{"lineNumber":247,"author":{"gitId":"litone01"},"content":"            -\u003e SocheduleParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, INVALID_CATEGORY)));"},{"lineNumber":248,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"litone01"},"content":""},{"lineNumber":250,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":251,"author":{"gitId":"litone01"},"content":"    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":252,"author":{"gitId":"litone01"},"content":"        assertTrue(SocheduleParserUtil.parseCategories(Collections.emptyList()).isEmpty());"},{"lineNumber":253,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"litone01"},"content":""},{"lineNumber":255,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":256,"author":{"gitId":"litone01"},"content":"    public void parseCategories_collectionWithValidCategories_returnsCategorySet() throws Exception {"},{"lineNumber":257,"author":{"gitId":"litone01"},"content":"        Set\u003cCategory\u003e actualCategorySet \u003d SocheduleParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1,"},{"lineNumber":258,"author":{"gitId":"litone01"},"content":"                VALID_CATEGORY_2));"},{"lineNumber":259,"author":{"gitId":"litone01"},"content":"        Set\u003cCategory\u003e expectedCategorySet \u003d new HashSet\u003c\u003e(Arrays.asList(new Category(VALID_CATEGORY_1),"},{"lineNumber":260,"author":{"gitId":"litone01"},"content":"                new Category(VALID_CATEGORY_2)));"},{"lineNumber":261,"author":{"gitId":"litone01"},"content":""},{"lineNumber":262,"author":{"gitId":"litone01"},"content":"        assertEquals(expectedCategorySet, actualCategorySet);"},{"lineNumber":263,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":264}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public void setSocheduleFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setSocheduleFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":19,"SoulUseless":2}},{"path":"src/test/java/seedu/address/model/common/CategoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.common;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"public class CategoryTest {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    /* TO REACTIVATE when requireNotNull is added"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Category(null));"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        String invalidCategoryName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidCategoryName));"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    /* TO REACTIVATE when validity check is merged from PR."},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    public void isValidCategoryName() {"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"        // null tag name"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":29}},{"path":"src/test/java/seedu/address/model/common/DateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.common;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":"public class DateTest {"},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Date(null));"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"        String invalidDate \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    public void isValidDate() {"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"        // null date"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"        // invalid date"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"        assertFalse(Date.isValidDate(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(Date.isValidDate(\"2023-02-29\")); // invalid date"},{"lineNumber":30,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(Date.isValidDate(\"2021-03-32\")); // invalid date"},{"lineNumber":31,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(Date.isValidDate(\"abcde\")); // invalid date"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"        // valid dates"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(Date.isValidDate(\"2020-02-13\"));"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(Date.isValidDate(\"2021-10-10\"));"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(Date.isValidDate(\"2000-04-30\"));"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"YuFeng0930":3,"icelenaugust":35}},{"path":"src/test/java/seedu/address/model/common/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.common;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"        assertFalse(Name.isValidName(\"do * at #\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Name.isValidName(\"lecture\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Name.isValidName(\"1337\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Name.isValidName(\"cs2103 lecture\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Name.isValidName(\"Official Meeting\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Name.isValidName(\"CS2103 Software Programming Lecture 2\")); // long names"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":33,"SoulUseless":7}},{"path":"src/test/java/seedu/address/model/common/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.common;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":25,"SoulUseless":1}},{"path":"src/test/java/seedu/address/model/event/EventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"YuFeng0930"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"YuFeng0930"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CATEGORY_INTERVIEW;"},{"lineNumber":6,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ENDDATE_INTERVIEW;"},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ENDTIME_INTERVIEW;"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_ORIENTATION;"},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_STARTDATE_INTERVIEW;"},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_STARTTIME_INTERVIEW;"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_INTERVIEW;"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.testutil.TypicalEvents.INTERVIEW;"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.testutil.TypicalEvents.ORIENTATION;"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"public class EventTest {"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":22,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"YuFeng0930"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":"        Event event \u003d new EventBuilder().build();"},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e event.getTags().remove(0));"},{"lineNumber":26,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":28,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":"    public void isSameEvent() {"},{"lineNumber":30,"author":{"gitId":"YuFeng0930"},"content":"        // same object -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"YuFeng0930"},"content":"        assertTrue(INTERVIEW.isSameEvent(INTERVIEW));"},{"lineNumber":32,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":33,"author":{"gitId":"YuFeng0930"},"content":"        // null -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(INTERVIEW.isSameEvent(null));"},{"lineNumber":35,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":36,"author":{"gitId":"YuFeng0930"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":37,"author":{"gitId":"YuFeng0930"},"content":"        Event editedInterview \u003d new EventBuilder(INTERVIEW)"},{"lineNumber":38,"author":{"gitId":"YuFeng0930"},"content":"                .withStartDate(VALID_EVENT_STARTDATE_INTERVIEW).withStartTime(VALID_EVENT_STARTTIME_INTERVIEW)"},{"lineNumber":39,"author":{"gitId":"YuFeng0930"},"content":"                .withEndDate(VALID_EVENT_ENDDATE_INTERVIEW).withEndTime(VALID_EVENT_ENDTIME_INTERVIEW)"},{"lineNumber":40,"author":{"gitId":"YuFeng0930"},"content":"                .withTags(VALID_EVENT_TAG_INTERVIEW).withCategories(VALID_EVENT_CATEGORY_INTERVIEW)"},{"lineNumber":41,"author":{"gitId":"YuFeng0930"},"content":"                .build();"},{"lineNumber":42,"author":{"gitId":"YuFeng0930"},"content":"        assertTrue(INTERVIEW.isSameEvent(editedInterview));"},{"lineNumber":43,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"YuFeng0930"},"content":"        editedInterview \u003d new EventBuilder(INTERVIEW).withName(VALID_EVENT_NAME_ORIENTATION).build();"},{"lineNumber":46,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(INTERVIEW.isSameEvent(editedInterview));"},{"lineNumber":47,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":48,"author":{"gitId":"YuFeng0930"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"YuFeng0930"},"content":"        Event editedOrientation \u003d new EventBuilder(ORIENTATION)"},{"lineNumber":50,"author":{"gitId":"YuFeng0930"},"content":"                .withName(VALID_EVENT_NAME_ORIENTATION.toLowerCase()).build();"},{"lineNumber":51,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(ORIENTATION.isSameEvent(editedOrientation));"},{"lineNumber":52,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":53,"author":{"gitId":"YuFeng0930"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"YuFeng0930"},"content":"        String nameWithTrailingSpaces \u003d VALID_EVENT_NAME_ORIENTATION + \" \";"},{"lineNumber":55,"author":{"gitId":"YuFeng0930"},"content":"        editedOrientation \u003d new EventBuilder(ORIENTATION).withName(nameWithTrailingSpaces).build();"},{"lineNumber":56,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(ORIENTATION.isSameEvent(editedOrientation));"},{"lineNumber":57,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":58,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"YuFeng0930":55,"SoulUseless":4}},{"path":"src/test/java/seedu/address/model/event/TimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"public class TimeTest {"},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Time(null));"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    public void constructor_invalidTime_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        String invalidTime \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    public void isValidTime() {"},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":"        // null email"},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"},{"lineNumber":26,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        // invalid time"},{"lineNumber":28,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(Time.isValidTime(\"\"));"},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(Time.isValidTime(\":00\"));"},{"lineNumber":30,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(Time.isValidTime(\"23:\"));"},{"lineNumber":31,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(Time.isValidTime(\"24:00\"));"},{"lineNumber":32,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(Time.isValidTime(\"23:60\"));"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        // valid times"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Time.isValidTime(\"23:59\"));"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Time.isValidTime(\"12:34\"));"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Time.isValidTime(\"00:00\"));"},{"lineNumber":38,"author":{"gitId":"YuFeng0930"},"content":"        assertTrue(Time.isValidTime(\"1:1\"));"},{"lineNumber":39,"author":{"gitId":"YuFeng0930"},"content":"        assertTrue(Time.isValidTime(\"0:0\"));"},{"lineNumber":40,"author":{"gitId":"YuFeng0930"},"content":"        assertTrue(Time.isValidTime(\"9:9\"));"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"YuFeng0930":17,"SoulUseless":25}},{"path":"src/test/java/seedu/address/model/event/UniqueEventListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"YuFeng0930"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"YuFeng0930"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ENDTIME_ORIENTATION;"},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_ORIENTATION;"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.testutil.TypicalEvents.INTERVIEW;"},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.testutil.TypicalEvents.ORIENTATION;"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":20,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"public class UniqueEventListTest {"},{"lineNumber":23,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":"    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":26,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"YuFeng0930"},"content":"    public void contains_nullEvent_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.contains(null));"},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":31,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"YuFeng0930"},"content":"    public void contains_eventNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"YuFeng0930"},"content":"        assertFalse(uniqueEventList.contains(ORIENTATION));"},{"lineNumber":34,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":36,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"YuFeng0930"},"content":"    public void contains_eventInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":39,"author":{"gitId":"YuFeng0930"},"content":"        assertTrue(uniqueEventList.contains(INTERVIEW));"},{"lineNumber":40,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":42,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"YuFeng0930"},"content":"    public void contains_eventWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":45,"author":{"gitId":"YuFeng0930"},"content":"        Event editedInterview \u003d new EventBuilder(INTERVIEW).withEndTime(VALID_EVENT_ENDTIME_ORIENTATION)"},{"lineNumber":46,"author":{"gitId":"YuFeng0930"},"content":"                .withTags(VALID_EVENT_TAG_ORIENTATION).build();"},{"lineNumber":47,"author":{"gitId":"YuFeng0930"},"content":"        assertTrue(uniqueEventList.contains(editedInterview));"},{"lineNumber":48,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":50,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"YuFeng0930"},"content":"    public void add_nullEvent_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.add(null));"},{"lineNumber":53,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":55,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"YuFeng0930"},"content":"    public void add_duplicateEvent_throwsDuplicateEventException() {"},{"lineNumber":57,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":58,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(DuplicateEventException.class, () -\u003e uniqueEventList.add(INTERVIEW));"},{"lineNumber":59,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":61,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvent_nullTargetEvent_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvent(null, INTERVIEW));"},{"lineNumber":64,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":66,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvent_nullEditedEvent_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvent(INTERVIEW, null));"},{"lineNumber":69,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":71,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e uniqueEventList.setEvent(INTERVIEW, INTERVIEW));"},{"lineNumber":74,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":76,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvent_editedEventIsSameEvent_success() {"},{"lineNumber":78,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":79,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.setEvent(INTERVIEW, INTERVIEW);"},{"lineNumber":80,"author":{"gitId":"YuFeng0930"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"},{"lineNumber":81,"author":{"gitId":"YuFeng0930"},"content":"        expectedUniqueEventList.add(INTERVIEW);"},{"lineNumber":82,"author":{"gitId":"YuFeng0930"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);"},{"lineNumber":83,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":85,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvent_editedEventHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":88,"author":{"gitId":"YuFeng0930"},"content":"        Event editedInterview \u003d new EventBuilder(INTERVIEW).withEndTime(VALID_EVENT_ENDTIME_ORIENTATION)"},{"lineNumber":89,"author":{"gitId":"YuFeng0930"},"content":"                .withTags(VALID_EVENT_TAG_ORIENTATION).build();"},{"lineNumber":90,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.setEvent(INTERVIEW, editedInterview);"},{"lineNumber":91,"author":{"gitId":"YuFeng0930"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"},{"lineNumber":92,"author":{"gitId":"YuFeng0930"},"content":"        expectedUniqueEventList.add(editedInterview);"},{"lineNumber":93,"author":{"gitId":"YuFeng0930"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);"},{"lineNumber":94,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":96,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvent_editedEventHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":99,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.setEvent(INTERVIEW, ORIENTATION);"},{"lineNumber":100,"author":{"gitId":"YuFeng0930"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"},{"lineNumber":101,"author":{"gitId":"YuFeng0930"},"content":"        expectedUniqueEventList.add(ORIENTATION);"},{"lineNumber":102,"author":{"gitId":"YuFeng0930"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);"},{"lineNumber":103,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":105,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvent_editedEventHasNonUniqueIdentity_throwsDuplicateEventException() {"},{"lineNumber":107,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":108,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(ORIENTATION);"},{"lineNumber":109,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(DuplicateEventException.class, () -\u003e uniqueEventList.setEvent(INTERVIEW, ORIENTATION));"},{"lineNumber":110,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":112,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"YuFeng0930"},"content":"    public void remove_nullEvent_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.remove(null));"},{"lineNumber":115,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":117,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"YuFeng0930"},"content":"    public void remove_eventDoesNotExist_throwsEventNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e uniqueEventList.remove(INTERVIEW));"},{"lineNumber":120,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":122,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"YuFeng0930"},"content":"    public void remove_existingEvent_removesEvent() {"},{"lineNumber":124,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":125,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.remove(INTERVIEW);"},{"lineNumber":126,"author":{"gitId":"YuFeng0930"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"},{"lineNumber":127,"author":{"gitId":"YuFeng0930"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);"},{"lineNumber":128,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":130,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvents_nullUniqueEventList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvents((UniqueEventList) null));"},{"lineNumber":133,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":135,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {"},{"lineNumber":137,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":138,"author":{"gitId":"YuFeng0930"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"},{"lineNumber":139,"author":{"gitId":"YuFeng0930"},"content":"        expectedUniqueEventList.add(ORIENTATION);"},{"lineNumber":140,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.setEvents(expectedUniqueEventList);"},{"lineNumber":141,"author":{"gitId":"YuFeng0930"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);"},{"lineNumber":142,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":144,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvents_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvents((List\u003cEvent\u003e) null));"},{"lineNumber":147,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":149,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvents_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.add(INTERVIEW);"},{"lineNumber":152,"author":{"gitId":"YuFeng0930"},"content":"        List\u003cEvent\u003e eventList \u003d Collections.singletonList(ORIENTATION);"},{"lineNumber":153,"author":{"gitId":"YuFeng0930"},"content":"        uniqueEventList.setEvents(eventList);"},{"lineNumber":154,"author":{"gitId":"YuFeng0930"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"},{"lineNumber":155,"author":{"gitId":"YuFeng0930"},"content":"        expectedUniqueEventList.add(ORIENTATION);"},{"lineNumber":156,"author":{"gitId":"YuFeng0930"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);"},{"lineNumber":157,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":159,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"YuFeng0930"},"content":"    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"},{"lineNumber":161,"author":{"gitId":"YuFeng0930"},"content":"        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(INTERVIEW, INTERVIEW);"},{"lineNumber":162,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(DuplicateEventException.class, () -\u003e uniqueEventList.setEvents(listWithDuplicateEvents));"},{"lineNumber":163,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":165,"author":{"gitId":"YuFeng0930"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"YuFeng0930"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"YuFeng0930"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueEventList.asUnmodifiableObservableList()"},{"lineNumber":168,"author":{"gitId":"YuFeng0930"},"content":"                .remove(0));"},{"lineNumber":169,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"YuFeng0930":166,"SoulUseless":4}},{"path":"src/test/java/seedu/address/model/task/CompletionStatusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"public class CompletionStatusTest {"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"    public void isValidCompletionStatus() {"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"        // invalid completionStatus"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"        assertFalse(CompletionStatus.isValidStatus(\"\")); // empty string"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"        // valid completionStatus"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(CompletionStatus.isValidStatus(\"INCOMPLETE\"));"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(CompletionStatus.isValidStatus(\"COMPLETE\"));"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":20}},{"path":"src/test/java/seedu/address/model/task/PriorityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"public class PriorityTest {"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"    public void constructor_invalidPriority_throwsIllegalArgumentException() {"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"        String invalidPriority \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    public void isValidPriority() {"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"        // invalid priority"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"        assertFalse(Priority.isValidPriority(\"\")); // empty string"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"        // valid priority"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(Priority.isValidPriority(\"0\"));"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(Priority.isValidPriority(\"1\"));"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(Priority.isValidPriority(\"3\"));"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(Priority.isValidPriority(null)); //null is valid"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":28,"SoulUseless":1}},{"path":"src/test/java/seedu/address/model/task/TaskTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.testutil.TypicalTasks.ASSIGNMENT;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"public class TaskTest {"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    public void isSameTask() {"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(ASSIGNMENT.isSameTask(ASSIGNMENT));"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"        // null -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"        assertFalse(ASSIGNMENT.isSameTask(null));"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"        //To be edited after CommandTestUtil class is updated for Sochedule"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"        /*"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"        Person editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"         */"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":50}},{"path":"src/test/java/seedu/address/model/task/UniqueTaskListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.testutil.TypicalTasks.ASSIGNMENT;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import static seedu.address.testutil.TypicalTasks.LAB;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"public class UniqueTaskListTest {"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"    public void contains_nullTask_throwsNullPointerException() {"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"    public void contains_taskNotInList_returnsFalse() {"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"        assertFalse(uniqueTaskList.contains(ASSIGNMENT));"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"    public void contains_taskInList_returnsTrue() {"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(uniqueTaskList.contains(ASSIGNMENT));"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":"    // To be uncommented when CommandTestUtil class is updated"},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"    /*"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":"    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"        Task editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDeadline(VALID_DEADLINE_ANY)"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"                .withCategories(VALID_CATEGORY_ANY).build();"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"        assertTrue(uniqueTaskList.contains(editedAssignment));"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":"    public void add_nullTask_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":55,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"icelenaugust"},"content":"    public void add_duplicateTask_throwsDuplicateTaskException() {"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(ASSIGNMENT));"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":61,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"icelenaugust"},"content":"    public void setTask_nullTargetTask_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, ASSIGNMENT));"},{"lineNumber":64,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":66,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"    public void setTask_nullEditedTask_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(ASSIGNMENT, null));"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":71,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"icelenaugust"},"content":"    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(ASSIGNMENT, ASSIGNMENT));"},{"lineNumber":74,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":76,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"icelenaugust"},"content":"    public void setTask_editedTaskIsSameTask_success() {"},{"lineNumber":78,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":79,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.setTask(ASSIGNMENT, ASSIGNMENT);"},{"lineNumber":80,"author":{"gitId":"icelenaugust"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":81,"author":{"gitId":"icelenaugust"},"content":"        expectedUniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":82,"author":{"gitId":"icelenaugust"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":83,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":85,"author":{"gitId":"icelenaugust"},"content":"    // To be uncommented when CommandTestUtil class is updated"},{"lineNumber":86,"author":{"gitId":"icelenaugust"},"content":"    /*"},{"lineNumber":87,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"icelenaugust"},"content":"    public void setTask_editedTaskHasSameIdentity_success() {"},{"lineNumber":89,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":90,"author":{"gitId":"icelenaugust"},"content":"        Task editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDeadline(VALID_DEADLINE_ANY)"},{"lineNumber":91,"author":{"gitId":"icelenaugust"},"content":"                .withCategories(VALID_CATEGORY_ANY).build();"},{"lineNumber":92,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.setTask(ASSIGNMENT, editedAssignment);"},{"lineNumber":93,"author":{"gitId":"icelenaugust"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":94,"author":{"gitId":"icelenaugust"},"content":"        expectedUniqueTaskList.add(editedAssignment);"},{"lineNumber":95,"author":{"gitId":"icelenaugust"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":96,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":99,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"icelenaugust"},"content":"    public void setTask_editedTaskHasDifferentIdentity_success() {"},{"lineNumber":101,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":102,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.setTask(ASSIGNMENT, LAB);"},{"lineNumber":103,"author":{"gitId":"icelenaugust"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":104,"author":{"gitId":"icelenaugust"},"content":"        expectedUniqueTaskList.add(LAB);"},{"lineNumber":105,"author":{"gitId":"icelenaugust"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":106,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":108,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"icelenaugust"},"content":"    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"},{"lineNumber":110,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":111,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(LAB);"},{"lineNumber":112,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(ASSIGNMENT, LAB));"},{"lineNumber":113,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":115,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"icelenaugust"},"content":"    public void remove_nullTask_throwsNullPointerException() {"},{"lineNumber":117,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"},{"lineNumber":118,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":120,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"icelenaugust"},"content":"    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"},{"lineNumber":122,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(ASSIGNMENT));"},{"lineNumber":123,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":125,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"icelenaugust"},"content":"    public void remove_existingTask_removesTask() {"},{"lineNumber":127,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":128,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.remove(ASSIGNMENT);"},{"lineNumber":129,"author":{"gitId":"icelenaugust"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":130,"author":{"gitId":"icelenaugust"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":131,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":133,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"icelenaugust"},"content":"    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"},{"lineNumber":136,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":138,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"icelenaugust"},"content":"    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"},{"lineNumber":140,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":141,"author":{"gitId":"icelenaugust"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":142,"author":{"gitId":"icelenaugust"},"content":"        expectedUniqueTaskList.add(LAB);"},{"lineNumber":143,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.setTasks(expectedUniqueTaskList);"},{"lineNumber":144,"author":{"gitId":"icelenaugust"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":145,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":147,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"icelenaugust"},"content":"    public void setTasks_nullList_throwsNullPointerException() {"},{"lineNumber":149,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"},{"lineNumber":150,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":152,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"icelenaugust"},"content":"    public void setTasks_list_replacesOwnListWithProvidedList() {"},{"lineNumber":154,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.add(ASSIGNMENT);"},{"lineNumber":155,"author":{"gitId":"icelenaugust"},"content":"        List\u003cTask\u003e taskList \u003d Collections.singletonList(LAB);"},{"lineNumber":156,"author":{"gitId":"icelenaugust"},"content":"        uniqueTaskList.setTasks(taskList);"},{"lineNumber":157,"author":{"gitId":"icelenaugust"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":158,"author":{"gitId":"icelenaugust"},"content":"        expectedUniqueTaskList.add(LAB);"},{"lineNumber":159,"author":{"gitId":"icelenaugust"},"content":"        assertEquals(expectedUniqueTaskList, uniqueTaskList);"},{"lineNumber":160,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":162,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":163,"author":{"gitId":"icelenaugust"},"content":"    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"},{"lineNumber":164,"author":{"gitId":"icelenaugust"},"content":"        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ASSIGNMENT, ASSIGNMENT);"},{"lineNumber":165,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"},{"lineNumber":166,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":168,"author":{"gitId":"icelenaugust"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"icelenaugust"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":170,"author":{"gitId":"icelenaugust"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueTaskList.asUnmodifiableObservableList()"},{"lineNumber":171,"author":{"gitId":"icelenaugust"},"content":"                .remove(0));"},{"lineNumber":172,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":173}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedEventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"public class JsonAdaptedEventTest {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":4}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.testutil.TypicalTasks.ASSIGNMENT;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.CompletionStatus;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"public class JsonAdaptedTaskTest {"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    private static final String INVALID_NAME \u003d \",!@#%$\";"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    private static final String INVALID_DEADLINE \u003d \",!@#%$\";"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    private static final String INVALID_PRIORITY \u003d \",!@#%$\";"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    private static final String INVALID_COMPLETION \u003d \",!@#%$\";"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    private static final String INVALID_TAGS \u003d \",!@#%$\";"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    private static final String INVALID_CATEGORIES \u003d \",!@#%$\";"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    private static final String VALID_NAME \u003d ASSIGNMENT.getName().toString();"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    private static final String VALID_DEADLINE \u003d ASSIGNMENT.getDeadline().toString();"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    private static final String VALID_PRIORITY \u003d ASSIGNMENT.getPriority().toString();"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    private static final String VALID_COMPLETION \u003d ASSIGNMENT.getCompletionStatus().toString();"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d ASSIGNMENT.getTags().stream()"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    private static final List\u003cJsonAdaptedCategory\u003e VALID_CATEGORIES \u003d ASSIGNMENT.getCategories().stream()"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"            .map(JsonAdaptedCategory::new)"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"            .collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_validTaskDetails_returnsTask() throws Exception {"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask task \u003d new JsonAdaptedTask(ASSIGNMENT);"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(ASSIGNMENT, task.toModelType());"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask person \u003d"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(INVALID_NAME, VALID_DEADLINE, VALID_PRIORITY,"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"                        VALID_COMPLETION, VALID_CATEGORIES, VALID_TAGS);"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask person \u003d"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(null, VALID_DEADLINE, VALID_PRIORITY,"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"                        VALID_COMPLETION, VALID_CATEGORIES, VALID_TAGS);"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_invalidDeadline_throwsIllegalValueException() {"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask person \u003d"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(VALID_NAME, INVALID_DEADLINE, VALID_PRIORITY,"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"                        VALID_COMPLETION, VALID_CATEGORIES, VALID_TAGS);"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_nullDeadline_throwsIllegalValueException() {"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask person \u003d"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(VALID_NAME, null, VALID_PRIORITY,"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"                        VALID_COMPLETION, VALID_CATEGORIES, VALID_TAGS);"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_invalidPriority_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask person \u003d"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(VALID_NAME, VALID_DEADLINE, INVALID_PRIORITY,"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"                        VALID_COMPLETION, VALID_CATEGORIES, VALID_TAGS);"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_invalidCompletion_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask person \u003d"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(VALID_NAME, VALID_DEADLINE, VALID_PRIORITY,"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"                        INVALID_COMPLETION, VALID_CATEGORIES, VALID_TAGS);"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"        String expectedMessage \u003d CompletionStatus.MESSAGE_CONSTRAINTS;"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_nullCompletion_throwsIllegalValueException() {"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask person \u003d"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(VALID_NAME, VALID_DEADLINE, VALID_PRIORITY,"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"                        null, VALID_CATEGORIES, VALID_TAGS);"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CompletionStatus.class.getSimpleName());"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAGS));"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask task \u003d"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(VALID_NAME, VALID_DEADLINE, VALID_PRIORITY,"},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"                        VALID_COMPLETION, VALID_CATEGORIES, invalidTags);"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, task::toModelType);"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_invalidCategories_throwsIllegalValueException() {"},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":"        List\u003cJsonAdaptedCategory\u003e invalidCategories \u003d new ArrayList\u003c\u003e(VALID_CATEGORIES);"},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":"        invalidCategories.add(new JsonAdaptedCategory(INVALID_CATEGORIES));"},{"lineNumber":122,"author":{"gitId":"SoulUseless"},"content":"        JsonAdaptedTask task \u003d"},{"lineNumber":123,"author":{"gitId":"SoulUseless"},"content":"                new JsonAdaptedTask(VALID_NAME, VALID_DEADLINE, VALID_PRIORITY,"},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"                        VALID_COMPLETION, invalidCategories, VALID_TAGS);"},{"lineNumber":125,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, task::toModelType);"},{"lineNumber":126,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":127}},{"path":"src/test/java/seedu/address/storage/JsonSerializableSocheduleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Disabled;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"public class JsonSerializableSocheduleTest {"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableSocheduleTest\");"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    private static final Path TYPICAL_SOCHEDULE \u003d TEST_DATA_FOLDER.resolve(\"typicalSochedule.json\");"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    private static final Path ONLY_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"noEventTypicalSochedule.json\");"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskSochedule.json\");"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskSochedule.json\");"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    private static final Path ONLY_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"noTaskTypicalSochedule.json\");"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventSochedule.json\");"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventSochedule.json\");"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    private static final Path INVALID_EVENT_SCHEDULING_FILE \u003d"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"            TEST_DATA_FOLDER.resolve(\"invalidEventSchedulingSochedule.json\");"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    /* PENDING CREATION OF TypicalSochedule, TypicalEvents"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_typicalSocheduleFile_success() throws Exception {"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        JsonSerializableSochedule dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SOCHEDULE,"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"                JsonSerializableSochedule.class).get();"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        Sochedule socheduleFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        Sochedule typicalSochedule \u003d TypicalSochedule.getTypicalSochedule();"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(socheduleFromFile, typicalSochedule);"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    MISSING:"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    toModelType_typicalTaskSocheduleFile_success()"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"    toModelType_typicalEventSocheduleFile_success()"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"    -- add get TaskOnlySochedule, EventOnlySochedule under TypicalSochedule"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    */"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        JsonSerializableSochedule dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"                JsonSerializableSochedule.class).get();"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"        JsonSerializableSochedule dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EVENT_FILE,"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"                JsonSerializableSochedule.class).get();"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        JsonSerializableSochedule dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"                JsonSerializableSochedule.class).get();"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableSochedule.MESSAGE_DUPLICATE_TASK,"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"                dataFromFile::toModelType);"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"        JsonSerializableSochedule dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EVENT_FILE,"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"                JsonSerializableSochedule.class).get();"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableSochedule.MESSAGE_DUPLICATE_EVENT,"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"                dataFromFile::toModelType);"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"    @Disabled"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"    // PENDING BUG SQUASH"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"    public void toModelType_improperSchedulingEvents_throwsIllegalValueException() throws Exception {"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"        JsonSerializableSochedule dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EVENT_SCHEDULING_FILE,"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"                JsonSerializableSochedule.class).get();"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableSochedule.MESSAGE_DUPLICATE_EVENT,"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"                dataFromFile::toModelType);"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":84}},{"path":"src/test/java/seedu/address/storage/JsonSocheduleStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.ReadOnlySochedule;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.Sochedule;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"public class JsonSocheduleStorageTest {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSocheduleStorageTest\");"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    private java.util.Optional\u003cReadOnlySochedule\u003e readSochedule(String filePath) throws Exception {"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"        return new JsonSocheduleStorage(Paths.get(filePath)).readSochedule(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"                : null;"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    public void readSochedule_nullFilePath_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(NullPointerException.class, () -\u003e readSochedule(null));"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        assertFalse(readSochedule(\"NonExistentFile.json\").isPresent());"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DataConversionException.class, () -\u003e readSochedule(\"notJsonFormatSochedule.json\"));"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"    public void readAddressBook_invalidEventSochedule_throwDataConversionException() {"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DataConversionException.class, () -\u003e readSochedule(\"invalidEventSochedule.json\"));"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"    public void readAddressBook_invalidTaskSochedule_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DataConversionException.class, () -\u003e readSochedule(\"invalidTaskSochedule.json\"));"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"    public void readAddressBook_invalidAndValidEventSochedule_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DataConversionException.class, () -\u003e readSochedule(\"invalidAndValidEventSochedule.json\"));"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"    public void readAddressBook_invalidAndValidTaskSochedule_throwDataConversionException() {"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DataConversionException.class, () -\u003e readSochedule(\"invalidAndValidTaskSochedule.json\"));"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"     * Saves {@code Sochedule} at the specified {@code filePath}."},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"    private void saveSochedule(ReadOnlySochedule addressBook, String filePath) {"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"            new JsonSocheduleStorage(Paths.get(filePath))"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"                    .saveSochedule(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"        } catch (IOException ioe) {"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveSochedule(new Sochedule(), null));"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"    public void saveSochedule_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveSochedule(null, \"SomeFile.json\"));"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"    // PENDING TypicalSochedule"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"    public void readAndSaveSochedule_allInOrder_success() throws Exception {"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"        Path filePath \u003d testFolder.resolve(\"TempSochedule.json\");"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"        Sochedule original \u003d getTypicalSochedule();"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"        JsonSocheduleStorage jsonSocheduleStorage \u003d new JsonSocheduleStorage(filePath);"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"        // Save in new file and read back"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"        jsonSocheduleStorage.saveSochedule(original, filePath);"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"        ReadOnlySochedule readBack \u003d jsonSocheduleStorage.readSochedule(filePath).get();"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(original, new Sochedule(readBack));"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"        // NEED RELOOK TO GET VAR NAMES"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"        original.addEvent(HOON);"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"        original.addTask(HOON);"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":"        original.removeEvent(ALICE);"},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"        original.removeTask(ALICE);"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"        jsonSocheduleStorage.saveSochedule(original, filePath);"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"        readBack \u003d jsonSocheduleStorage.readAddressBook(filePath).get();"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(original, new Sochedule(readBack));"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"        // Save and read without specifying file path"},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"        original.addTask(HOON);"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"        original.addEvent(HOON);"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"        jsonSocheduleStorage.saveSochedule(original); // file path not specified"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"        readBack \u003d jsonSocheduleStorage.readSochedule().get(); // file path not specified"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(original, new Sochedule(readBack));"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":"    */"},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":121}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"        userPrefs.setSocheduleFilePath(Paths.get(\"sochedule.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":122,"SoulUseless":1}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook; //TO UNCOMMENT ONCE IMPLEMENTED"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"        JsonSocheduleStorage socheduleStorage \u003d new JsonSocheduleStorage(getTempFilePath(\"ab\"));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        storageManager \u003d new StorageManager(socheduleStorage, userPrefsStorage);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":37,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":38,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":40,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"YuFeng0930"},"content":"    //    @Test"},{"lineNumber":49,"author":{"gitId":"YuFeng0930"},"content":"    //    public void addressBookReadSave() throws Exception {"},{"lineNumber":50,"author":{"gitId":"YuFeng0930"},"content":"    //        /*"},{"lineNumber":51,"author":{"gitId":"YuFeng0930"},"content":"    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":52,"author":{"gitId":"YuFeng0930"},"content":"    //         * {@link JsonAddressBookStorage} class."},{"lineNumber":53,"author":{"gitId":"YuFeng0930"},"content":"    //         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":54,"author":{"gitId":"YuFeng0930"},"content":"    //         */"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"    //        Sochedule original \u003d getTypicalSochedule(); - To uncomment once implemented"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    //        storageManager.saveSochedule(original);"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"    //        Sochedule retrieved \u003d storageManager.readSochedule().get();"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"    //        assertEquals(original, new Sochedule(retrieved));"},{"lineNumber":59,"author":{"gitId":"YuFeng0930"},"content":"    //    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        assertNotNull(storageManager.getSocheduleFilePath());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"YuFeng0930":8,"-":50,"SoulUseless":8}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":" * A utility class to help with building Event objects."},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"public class EventBuilder {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    public static final String DEFAULT_NAME \u003d \"CS2103 Lecture\";"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    public static final String DEFAULT_START_DATE \u003d \"2021-01-01\";"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    public static final String DEFAULT_START_TIME \u003d \"00:00\";"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    public static final String DEFAULT_END_DATE \u003d \"2021-01-10\";"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    public static final String DEFAULT_END_TIME \u003d \"23:59\";"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    private Date startDate;"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    private Time startTime;"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    private Date endDate;"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    private Time endTime;"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    private Set\u003cCategory\u003e categories;"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder() {"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        startDate \u003d new Date(DEFAULT_START_DATE);"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"        startTime \u003d new Time(DEFAULT_START_TIME);"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        endDate \u003d new Date(DEFAULT_END_DATE);"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        endTime \u003d new Time(DEFAULT_END_TIME);"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"        categories \u003d new HashSet\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"YuFeng0930"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}."},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder(Event eventToCopy) {"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        name \u003d eventToCopy.getName();"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        startDate \u003d eventToCopy.getStartDate();"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"        startTime \u003d eventToCopy.getStartTime();"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"        endDate \u003d eventToCopy.getEndDate();"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"        endTime \u003d eventToCopy.getEndTime();"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"        tags \u003d eventToCopy.getTags();"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        categories \u003d eventToCopy.getCategories();"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"     * Sets the {@code Name} of the {@code Event} that we are building."},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder withName(String name) {"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"     * Sets the {@code StartDate} of the {@code Event} that we are building."},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder withStartDate(String date) {"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"        this.startDate \u003d new Date(date);"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"     * Sets the {@code StartTime} of the {@code Event} that we are building."},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder withStartTime(String time) {"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"        this.startTime \u003d new Time(time);"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"     * Sets the {@code EndDate} of the {@code Event} that we are building."},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder withEndDate(String date) {"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"        this.endDate \u003d new Date(date);"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"     * Sets the {@code EndTime} of the {@code Event} that we are building."},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder withEndTime(String time) {"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"        this.endTime \u003d new Time(time);"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"YuFeng0930"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder withTags(String ... tags) {"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"YuFeng0930"},"content":"     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Event} that we are building."},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"    public EventBuilder withCategories(String ... tags) {"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"        this.categories \u003d SampleDataUtil.getCategorySet(tags);"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"    public Event build() {"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"        return new Event(name, startDate, startTime, endDate, endTime, categories, tags);"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"YuFeng0930":4,"SoulUseless":113}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Category;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Date;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Name;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.common.Tag;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":" * A utility class to help with building Task objects."},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"public class TaskBuilder {"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    public static final String DEFAULT_NAME \u003d \"Do this do that\";"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    public static final String DEFAULT_DATE \u003d \"2020-01-01\";"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"5\";"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    private Name name;"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    private Date deadline;"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    private Priority priority;"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    private Set\u003cCategory\u003e categories;"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     * Creates a {@code TaskBuilder} with the default details."},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    public TaskBuilder() {"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        deadline \u003d new Date(DEFAULT_DATE);"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        categories \u003d new HashSet\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}."},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"        name \u003d taskToCopy.getName();"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"        deadline \u003d taskToCopy.getDeadline();"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        priority \u003d taskToCopy.getPriority();"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        tags \u003d taskToCopy.getTags();"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        categories \u003d taskToCopy.getCategories();"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"     * Sets the {@code Name} of the {@code Task} that we are building."},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"    public TaskBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"     * Sets the {@code Deadline} of the {@code Task} that we are building."},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"    public TaskBuilder withDeadline(String date) {"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        this.deadline \u003d new Date(date);"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"     * Sets the {@code Priority} of the {@code Task} that we are building."},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"    public TaskBuilder withPriority(String priority) {"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"        this.priority \u003d new Priority(priority);"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"    public TaskBuilder withTags(String ... tags) {"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Task} that we are building."},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"    public TaskBuilder withCategories(String ... tags) {"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"        this.categories \u003d SampleDataUtil.getCategorySet(tags);"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"        return this;"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"    public Task build() {"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"        return new Task(name, deadline, priority, categories, tags);"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"icelenaugust":1,"SoulUseless":91,"litone01":1}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"     * Returns the middle index of the task in the {@code model}\u0027s task list."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    public static Index getTaskMidIndex(Model model) {"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"     * Returns the middle index of the event in the {@code model}\u0027s event list."},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    public static Index getEventMidIndex(Model model) {"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        return Index.fromOneBased(model.getFilteredEventList().size() / 2);"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"    public static Index getTaskLastIndex(Model model) {"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"        return Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"    public static Index getEventLastIndex(Model model) {"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        return Index.fromOneBased(model.getFilteredEventList().size());"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"    public static Task getTask(Model model, Index index) {"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"        return model.getFilteredTaskList().get(index.getZeroBased());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"    public static Event getEvent(Model model, Index index) {"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"        return model.getFilteredEventList().get(index.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":47,"SoulUseless":30}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YuFeng0930"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":3,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CATEGORY_INTERVIEW;"},{"lineNumber":4,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CATEGORY_ORIENTATION;"},{"lineNumber":5,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ENDDATE_INTERVIEW;"},{"lineNumber":6,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ENDDATE_ORIENTATION;"},{"lineNumber":7,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ENDTIME_INTERVIEW;"},{"lineNumber":8,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ENDTIME_ORIENTATION;"},{"lineNumber":9,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_INTERVIEW;"},{"lineNumber":10,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_ORIENTATION;"},{"lineNumber":11,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_STARTDATE_INTERVIEW;"},{"lineNumber":12,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_STARTDATE_ORIENTATION;"},{"lineNumber":13,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_STARTTIME_INTERVIEW;"},{"lineNumber":14,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_STARTTIME_ORIENTATION;"},{"lineNumber":15,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_INTERVIEW;"},{"lineNumber":16,"author":{"gitId":"YuFeng0930"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_ORIENTATION;"},{"lineNumber":17,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":18,"author":{"gitId":"YuFeng0930"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitId":"YuFeng0930"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitId":"YuFeng0930"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":22,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.Sochedule;"},{"lineNumber":23,"author":{"gitId":"YuFeng0930"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":24,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":25,"author":{"gitId":"YuFeng0930"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"YuFeng0930"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests."},{"lineNumber":27,"author":{"gitId":"YuFeng0930"},"content":" */"},{"lineNumber":28,"author":{"gitId":"YuFeng0930"},"content":"public class TypicalEvents {"},{"lineNumber":29,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":30,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event MEETING \u003d new EventBuilder().withName(\"CS2103 Meeting\")"},{"lineNumber":31,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(\"2021-03-17\").withStartTime(\"21:00\")"},{"lineNumber":32,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(\"2021-03-17\").withEndTime(\"23:00\")"},{"lineNumber":33,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(\"SocheduleBest\").withCategories(\"SchoolWork\")"},{"lineNumber":34,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":35,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event DATE \u003d new EventBuilder().withName(\"1 Year Anniversary\")"},{"lineNumber":36,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(\"2021-03-14\").withStartTime(\"08:00\")"},{"lineNumber":37,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(\"2021-03-17\").withEndTime(\"21:00\")"},{"lineNumber":38,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(\"LoveYou\").withCategories(\"Love\")"},{"lineNumber":39,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":40,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event CAMP \u003d new EventBuilder().withName(\"RVRC Camping\")"},{"lineNumber":41,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(\"2021-05-11\").withStartTime(\"08:00\")"},{"lineNumber":42,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(\"2021-05-15\").withEndTime(\"22:00\")"},{"lineNumber":43,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(\"Boring\").withCategories(\"Leisure\")"},{"lineNumber":44,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":45,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event HACKATHON \u003d new EventBuilder().withName(\"Google Hash Code\") // No tags"},{"lineNumber":46,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(\"2021-03-17\").withStartTime(\"21:00\")"},{"lineNumber":47,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(\"2021-03-17\").withEndTime(\"23:00\")"},{"lineNumber":48,"author":{"gitId":"YuFeng0930"},"content":"            .withCategories(\"Competition\")"},{"lineNumber":49,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":50,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event WORKSHOP \u003d new EventBuilder().withName(\"Shopee Code League Workshop\") // No category"},{"lineNumber":51,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(\"2021-03-17\").withStartTime(\"21:00\")"},{"lineNumber":52,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(\"2021-03-17\").withEndTime(\"23:00\")"},{"lineNumber":53,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(\"Learning\")"},{"lineNumber":54,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":55,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event COMPETITION \u003d new EventBuilder().withName(\"Inter College Game Basketball\")"},{"lineNumber":56,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(\"2021-03-17\").withStartTime(\"21:00\")"},{"lineNumber":57,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(\"2021-03-17\").withEndTime(\"23:00\")"},{"lineNumber":58,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(\"Semifinal\").withCategories(\"Exercise\")"},{"lineNumber":59,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":60,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":61,"author":{"gitId":"YuFeng0930"},"content":"    // Manually added"},{"lineNumber":62,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event CONCERT \u003d new EventBuilder().withName(\"JJ Lin Concert\")"},{"lineNumber":63,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(\"2021-03-17\").withStartTime(\"21:00\")"},{"lineNumber":64,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(\"2021-03-17\").withEndTime(\"23:00\")"},{"lineNumber":65,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(\"FirstConcert\").withCategories(\"Leisure\")"},{"lineNumber":66,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":67,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event PICNIC \u003d new EventBuilder().withName(\"Sentosa Picnic\")"},{"lineNumber":68,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(\"2021-03-17\").withStartTime(\"21:00\")"},{"lineNumber":69,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(\"2021-03-17\").withEndTime(\"23:00\")"},{"lineNumber":70,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(\"Chill\").withCategories(\"Leisure\")"},{"lineNumber":71,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":72,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":73,"author":{"gitId":"YuFeng0930"},"content":"    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":74,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event INTERVIEW \u003d new EventBuilder().withName(VALID_EVENT_NAME_INTERVIEW)"},{"lineNumber":75,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(VALID_EVENT_STARTDATE_INTERVIEW).withStartTime(VALID_EVENT_STARTTIME_INTERVIEW)"},{"lineNumber":76,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(VALID_EVENT_ENDDATE_INTERVIEW).withEndTime(VALID_EVENT_ENDTIME_INTERVIEW)"},{"lineNumber":77,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(VALID_EVENT_TAG_INTERVIEW).withCategories(VALID_EVENT_CATEGORY_INTERVIEW)"},{"lineNumber":78,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":79,"author":{"gitId":"YuFeng0930"},"content":"    public static final Event ORIENTATION \u003d new EventBuilder().withName(VALID_EVENT_NAME_ORIENTATION)"},{"lineNumber":80,"author":{"gitId":"YuFeng0930"},"content":"            .withStartDate(VALID_EVENT_STARTDATE_ORIENTATION).withStartTime(VALID_EVENT_STARTTIME_ORIENTATION)"},{"lineNumber":81,"author":{"gitId":"YuFeng0930"},"content":"            .withEndDate(VALID_EVENT_ENDDATE_ORIENTATION).withEndTime(VALID_EVENT_ENDTIME_ORIENTATION)"},{"lineNumber":82,"author":{"gitId":"YuFeng0930"},"content":"            .withTags(VALID_EVENT_TAG_ORIENTATION).withCategories(VALID_EVENT_CATEGORY_ORIENTATION)"},{"lineNumber":83,"author":{"gitId":"YuFeng0930"},"content":"            .build();"},{"lineNumber":84,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":85,"author":{"gitId":"YuFeng0930"},"content":"    public static final String KEYWORD_MATCHING_CODE \u003d \"Code\"; // A keyword that matches MEIER"},{"lineNumber":86,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":87,"author":{"gitId":"YuFeng0930"},"content":"    private TypicalEvents() {} // prevents instantiation"},{"lineNumber":88,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":89,"author":{"gitId":"YuFeng0930"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"YuFeng0930"},"content":"     * Returns an {@code Sochedule} with all the typical events."},{"lineNumber":91,"author":{"gitId":"YuFeng0930"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"YuFeng0930"},"content":"    public static Sochedule getTypicalSochedule() {"},{"lineNumber":93,"author":{"gitId":"YuFeng0930"},"content":"        Sochedule sochedule \u003d new Sochedule();"},{"lineNumber":94,"author":{"gitId":"YuFeng0930"},"content":"        for (Event event : getTypicalEvents()) {"},{"lineNumber":95,"author":{"gitId":"YuFeng0930"},"content":"            sochedule.addEvent(event);"},{"lineNumber":96,"author":{"gitId":"YuFeng0930"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"YuFeng0930"},"content":"        return sochedule;"},{"lineNumber":98,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"YuFeng0930"},"content":""},{"lineNumber":100,"author":{"gitId":"YuFeng0930"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {"},{"lineNumber":101,"author":{"gitId":"YuFeng0930"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING, DATE, CAMP, HACKATHON, WORKSHOP, COMPETITION));"},{"lineNumber":102,"author":{"gitId":"YuFeng0930"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"YuFeng0930"},"content":"}"}],"authorContributionMap":{"YuFeng0930":103}},{"path":"src/test/java/seedu/address/testutil/TypicalTasks.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"icelenaugust"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":3,"author":{"gitId":"icelenaugust"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"icelenaugust"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"icelenaugust"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":7,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.Sochedule;"},{"lineNumber":8,"author":{"gitId":"icelenaugust"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":9,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":10,"author":{"gitId":"icelenaugust"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"icelenaugust"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests."},{"lineNumber":12,"author":{"gitId":"icelenaugust"},"content":" */"},{"lineNumber":13,"author":{"gitId":"icelenaugust"},"content":"public class TypicalTasks {"},{"lineNumber":14,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":15,"author":{"gitId":"icelenaugust"},"content":"    public static final Task ASSIGNMENT \u003d new TaskBuilder().withName(\"CS2105 Assignment\")"},{"lineNumber":16,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(\"2020-01-01\").withCategories(\"SchoolWork\").withPriority(\"1\")"},{"lineNumber":17,"author":{"gitId":"icelenaugust"},"content":"            .build();"},{"lineNumber":18,"author":{"gitId":"icelenaugust"},"content":"    public static final Task LAB \u003d new TaskBuilder().withName(\"CS2106 Lab\")"},{"lineNumber":19,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(\"2020-01-02\").withCategories(\"SchoolWork\").withPriority(\"3\")"},{"lineNumber":20,"author":{"gitId":"icelenaugust"},"content":"            .build();"},{"lineNumber":21,"author":{"gitId":"icelenaugust"},"content":"    public static final Task BREAKFAST \u003d new TaskBuilder().withName(\"Toast Bread\")"},{"lineNumber":22,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(\"2020-03-01\").withCategories(\"Life\").withPriority(\"7\")"},{"lineNumber":23,"author":{"gitId":"icelenaugust"},"content":"            .build();"},{"lineNumber":24,"author":{"gitId":"icelenaugust"},"content":"    public static final Task SHOPPING \u003d new TaskBuilder().withName(\"Buy Clothes\")"},{"lineNumber":25,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(\"2020-03-02\").withCategories(\"Life\").withPriority(\"8\")"},{"lineNumber":26,"author":{"gitId":"icelenaugust"},"content":"            .build();"},{"lineNumber":27,"author":{"gitId":"icelenaugust"},"content":"    public static final Task REVISION \u003d new TaskBuilder().withName(\"Revise CS2103\")"},{"lineNumber":28,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(\"2020-04-02\").withCategories(\"Exam\").withPriority(\"2\")"},{"lineNumber":29,"author":{"gitId":"icelenaugust"},"content":"            .build();"},{"lineNumber":30,"author":{"gitId":"icelenaugust"},"content":"    public static final Task EXERCISE \u003d new TaskBuilder().withName(\"Run 10km\")"},{"lineNumber":31,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(\"2020-02-02\").withCategories(\"Exercise\").withPriority(\"5\")"},{"lineNumber":32,"author":{"gitId":"icelenaugust"},"content":"            .build();"},{"lineNumber":33,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":34,"author":{"gitId":"icelenaugust"},"content":"    // Manually added"},{"lineNumber":35,"author":{"gitId":"icelenaugust"},"content":"    public static final Task GAME \u003d new TaskBuilder().withName(\"Play Mario Kart\")"},{"lineNumber":36,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(\"2020-05-02\").withCategories(\"Leisure\").withPriority(\"8\")"},{"lineNumber":37,"author":{"gitId":"icelenaugust"},"content":"            .build();"},{"lineNumber":38,"author":{"gitId":"icelenaugust"},"content":"    public static final Task LECTURE \u003d new TaskBuilder().withName(\"Watch CS2103 Lecture\")"},{"lineNumber":39,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(\"2020-04-02\").withCategories(\"SchoolWork\").withPriority(\"2\")"},{"lineNumber":40,"author":{"gitId":"icelenaugust"},"content":"            .build();"},{"lineNumber":41,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":42,"author":{"gitId":"icelenaugust"},"content":"    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":43,"author":{"gitId":"icelenaugust"},"content":"    // To be uncommented when CommendTestUtil for sochedule is ready"},{"lineNumber":44,"author":{"gitId":"icelenaugust"},"content":"    /*"},{"lineNumber":45,"author":{"gitId":"icelenaugust"},"content":"    public static final Task RANDOMONE \u003d new TaskBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":46,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(VALID_DEADLINE_ANY).withCategories(VALID_CATEGORY_ANY)"},{"lineNumber":47,"author":{"gitId":"icelenaugust"},"content":"            .withPriority(VALID_PRIORITY_ANY).build();"},{"lineNumber":48,"author":{"gitId":"icelenaugust"},"content":"    public static final Task RANDOMTWO \u003d new TaskBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":49,"author":{"gitId":"icelenaugust"},"content":"            .withDeadline(VALID_DEADLINE_ANY).withCategories(VALID_CATEGORY_ANY)"},{"lineNumber":50,"author":{"gitId":"icelenaugust"},"content":"            .withPriority(VALID_PRIORITY_ANY).build();"},{"lineNumber":51,"author":{"gitId":"icelenaugust"},"content":"    */"},{"lineNumber":52,"author":{"gitId":"icelenaugust"},"content":"    public static final String KEYWORD_MATCHING_ASSIGNMENT \u003d \"Assignment\"; // A keyword that matches MEIER"},{"lineNumber":53,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":54,"author":{"gitId":"icelenaugust"},"content":"    private TypicalTasks() {} // prevents instantiation"},{"lineNumber":55,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":56,"author":{"gitId":"icelenaugust"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"icelenaugust"},"content":"     * Returns an {@code Sochedule} with all the typical tasks."},{"lineNumber":58,"author":{"gitId":"icelenaugust"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"icelenaugust"},"content":"    public static Sochedule getTypicalSochedule() {"},{"lineNumber":60,"author":{"gitId":"icelenaugust"},"content":"        Sochedule sochedule \u003d new Sochedule();"},{"lineNumber":61,"author":{"gitId":"icelenaugust"},"content":"        for (Task task : getTypicalTasks()) {"},{"lineNumber":62,"author":{"gitId":"icelenaugust"},"content":"            sochedule.addTask(task);"},{"lineNumber":63,"author":{"gitId":"icelenaugust"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"icelenaugust"},"content":"        return sochedule;"},{"lineNumber":65,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"icelenaugust"},"content":""},{"lineNumber":67,"author":{"gitId":"icelenaugust"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":68,"author":{"gitId":"icelenaugust"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ASSIGNMENT, LAB, BREAKFAST, SHOPPING, REVISION, EXERCISE));"},{"lineNumber":69,"author":{"gitId":"icelenaugust"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"icelenaugust"},"content":"}"}],"authorContributionMap":{"icelenaugust":70}}]
