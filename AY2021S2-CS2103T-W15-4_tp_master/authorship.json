[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W15-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W15-4/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"kieron560"},"content":"![UI-mockup](./docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"# Focuris"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Focuris helps NUS Computing Students manage their schedules by being able to add events of different times and priorities. It is optimised for the CLI such that students are easily able to add new events easily and quickly."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Value Proposition"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"- Adding of various different types of events, such as, lectures, tutorials, recitations, labs, and tasks"},{"lineNumber":12,"author":{"gitId":"-"},"content":"- Adding of events to friends in the address book"},{"lineNumber":13,"author":{"gitId":"-"},"content":"- Ability to find common timeslot where all your friends are available to meet based on their schedules added"},{"lineNumber":14,"author":{"gitId":"-"},"content":"- See events that are taken in conjunction with your friends"},{"lineNumber":15,"author":{"gitId":"-"},"content":"- Prioritize your tasks and events by assigning priorities to each event"},{"lineNumber":16,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":17,"author":{"gitId":"kieron560"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"kieron560":4,"-":13}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"### Ng Zhi Cai"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"\u003cimg src\u003d\"images/nhzaci.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"[[github](https://github.com/nhzaci)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"- Role: Team Lead"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"toahi"},"content":"### Qin Yifan"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"toahi"},"content":"\u003cimg src\u003d\"images/toahi.png\" width\u003d\"200px\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"toahi"},"content":"[[github](http://github.com/toahi)]"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"toahi"},"content":"* Role: Developer"},{"lineNumber":27,"author":{"gitId":"-"},"content":"* Responsibilities: UI"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"toahi"},"content":"### Kieron Koh"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"kieron560"},"content":"\u003cimg src\u003d\"images/kieron560.png\" width\u003d\"200px\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"kieron560"},"content":"[[github](http://github.com/kieron560)]"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"- Role: Team Lead"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"- Responsibilities: UI"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"jrvslam"},"content":"### Jarveis Lam"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"jrvslam"},"content":"\u003cimg src\u003d\"images/jrvslam.png\" width\u003d\"200px\"\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"jrvslam"},"content":"[[github](http://github.com/jrvslam)]"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":45,"author":{"gitId":"jrvslam"},"content":"* Responsibilities: Logic"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"kieron560"},"content":"### Jerard Soh"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"kieron560"},"content":"\u003cimg src\u003d\"images/jerardsoh.png\" width\u003d\"200px\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"kieron560"},"content":"[[github](http://github.com/jerardsoh)]"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"- Role: Developer"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"- Responsibilities: Storage"}],"authorContributionMap":{"nhzaci":8,"toahi":5,"jrvslam":4,"kieron560":5,"-":32}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"- Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  {:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"The **_Architecture Diagram_** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"- At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"- At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"- [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"- [**`Logic`**](#logic-component): The command executor."},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"- [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"- [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"- defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"- exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"- Executes user commands using the `Logic` component."},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"- Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":83,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":88,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":89,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":96,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"- stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"- stores the address book data."},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"- exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"- does not depend on any of the other three components."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"- can save `UserPref` objects in json format and read it back."},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"- can save the address book data in json format and read it back."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":"- `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"- `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":"- `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":172,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"nhzaci"},"content":"- **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":207,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":208,"author":{"gitId":"nhzaci"},"content":"  - Pros: Easy to implement."},{"lineNumber":209,"author":{"gitId":"nhzaci"},"content":"  - Cons: May have performance issues in terms of memory usage."},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"nhzaci"},"content":"- **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":213,"author":{"gitId":"nhzaci"},"content":"  - Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":214,"author":{"gitId":"nhzaci"},"content":"  - Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"nhzaci"},"content":"- [Documentation guide](Documentation.md)"},{"lineNumber":227,"author":{"gitId":"nhzaci"},"content":"- [Testing guide](Testing.md)"},{"lineNumber":228,"author":{"gitId":"nhzaci"},"content":"- [Logging guide](Logging.md)"},{"lineNumber":229,"author":{"gitId":"nhzaci"},"content":"- [Configuration guide](Configuration.md)"},{"lineNumber":230,"author":{"gitId":"nhzaci"},"content":"- [DevOps guide](DevOps.md)"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"jrvslam"},"content":"* NUS Computing Student"},{"lineNumber":241,"author":{"gitId":"jrvslam"},"content":"* has a need to manage a significant number of contacts, schedule, and school timetable"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"jrvslam"},"content":"**Value proposition**:"},{"lineNumber":248,"author":{"gitId":"jrvslam"},"content":"* Adding of various different types of events, such as, lectures, tutorials, recitations, labs, and tasks"},{"lineNumber":249,"author":{"gitId":"jrvslam"},"content":"* Adding of events to friends in the address book"},{"lineNumber":250,"author":{"gitId":"jrvslam"},"content":"* Ability to find a common timeslot where all your friends are available to meet based on their schedules added"},{"lineNumber":251,"author":{"gitId":"jrvslam"},"content":"* See events that are taken in conjunction with your friends"},{"lineNumber":252,"author":{"gitId":"jrvslam"},"content":"* Prioritize your tasks and events by assigning priorities to each event"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                                 | So that I can…​                                                        |"},{"lineNumber":259,"author":{"gitId":"nhzaci"},"content":"| -------- | ------------------------------------------ | -------------------------------------------- | ---------------------------------------------------------------------- |"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions                       | refer to instructions when I forget how to use the App                 |"},{"lineNumber":261,"author":{"gitId":"nhzaci"},"content":"| `* * *`  | user                                       | add a new event                              |                                                                        |"},{"lineNumber":262,"author":{"gitId":"nhzaci"},"content":"| `* * *`  | user                                       | edit an existing event                       |                                                                        |"},{"lineNumber":263,"author":{"gitId":"nhzaci"},"content":"| `* * *`  | user                                       | delete an existing event                     |                                                                        |"},{"lineNumber":264,"author":{"gitId":"nhzaci"},"content":"| `* * *`  | user                                       | get a weekly view of all events in that week | get an overview of how busy the coming week is                         |"},{"lineNumber":265,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person                             |                                                                        |"},{"lineNumber":266,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                              | remove entries that I no longer need                                   |"},{"lineNumber":267,"author":{"gitId":"nhzaci"},"content":"| `* * *`  | user                                       | edit a person                                | edit entries to update changes in details                              |"},{"lineNumber":268,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name                        | locate details of persons without having to go through the entire list |"},{"lineNumber":269,"author":{"gitId":"nhzaci"},"content":"| `* *`    | user                                       | find an event by name                        | locate specific events without scrolling through list                  |"},{"lineNumber":270,"author":{"gitId":"nhzaci"},"content":"| `* *`    | user                                       | attach priorities to different events        | manage time better by working on events with higher priorities first   |"},{"lineNumber":271,"author":{"gitId":"nhzaci"},"content":"| `* *`    | user with many persons in the address book | import my friends\u0027 schedules                 | find common empty time between multiple friends to meet up             |"},{"lineNumber":272,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details                 | minimize chance of someone else seeing them by accident                |"},{"lineNumber":273,"author":{"gitId":"nhzaci"},"content":"| `* *`    | user                                       | export my calendar to share with friends     | other friends can see when I am free to catch up                       |"},{"lineNumber":274,"author":{"gitId":"nhzaci"},"content":"| `*`      | user                                       | see a calendar view of tasks and schedule    | get a high level view of availability in the upcoming weeks            |"},{"lineNumber":275,"author":{"gitId":"nhzaci"},"content":"| `*`      | user                                       | add profile pictures for contacts            | better overview of friend\u0027s pictures                                   |"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"nhzaci"},"content":"_{More to be added}_"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"JerardSoh"},"content":"(For all use cases below, the **System** is `Focuris` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"**Use case: Delete a person**"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"1.  User requests to list persons"},{"lineNumber":288,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows a list of persons"},{"lineNumber":289,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":290,"author":{"gitId":"JerardSoh"},"content":"4.  Focuris deletes the person"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"nhzaci"},"content":"- 2a. The list is empty."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"nhzaci"},"content":"- 3a. The given index is invalid."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"nhzaci"},"content":"  - 3a1. Focuris shows an error message."},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"    Use case resumes at step 2."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"JerardSoh"},"content":"**Use case: Add a person**"},{"lineNumber":307,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":308,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":309,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":310,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to add a person"},{"lineNumber":311,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris adds the person"},{"lineNumber":312,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":313,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":314,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":315,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":316,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":317,"author":{"gitId":"nhzaci"},"content":"- 1a. The format to add a person is invalid."},{"lineNumber":318,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":319,"author":{"gitId":"nhzaci"},"content":"  - 1a1. Focuris shows an error message."},{"lineNumber":320,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":321,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 1."},{"lineNumber":322,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":323,"author":{"gitId":"nhzaci"},"content":"- 1b. The person already exists in Focuris."},{"lineNumber":324,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":325,"author":{"gitId":"nhzaci"},"content":"  - 1b1. Focuris shows an error message."},{"lineNumber":326,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":327,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 1."},{"lineNumber":328,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":329,"author":{"gitId":"JerardSoh"},"content":"**Use case: Edit a person**"},{"lineNumber":330,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":331,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":332,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":333,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to list persons"},{"lineNumber":334,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows a list of persons"},{"lineNumber":335,"author":{"gitId":"JerardSoh"},"content":"3.  User requests to edit a specific person in the list"},{"lineNumber":336,"author":{"gitId":"JerardSoh"},"content":"4.  Focuris edits the person"},{"lineNumber":337,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":338,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":339,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":340,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":341,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":342,"author":{"gitId":"nhzaci"},"content":"- 2a. The list is empty."},{"lineNumber":343,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":344,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":345,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":346,"author":{"gitId":"nhzaci"},"content":"- 3a. The given index is invalid."},{"lineNumber":347,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":348,"author":{"gitId":"nhzaci"},"content":"  - 3a1. Focuris shows an error message."},{"lineNumber":349,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":350,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 2."},{"lineNumber":351,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":352,"author":{"gitId":"nhzaci"},"content":"- 3b. No fields are provided to edit."},{"lineNumber":353,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":354,"author":{"gitId":"nhzaci"},"content":"  - 3b1. Focuris shows an error message."},{"lineNumber":355,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":356,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 2."},{"lineNumber":357,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":358,"author":{"gitId":"JerardSoh"},"content":"**Use case: Find a person**"},{"lineNumber":359,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":360,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":361,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":362,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to find a person"},{"lineNumber":363,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows a list of persons whose names contain any of the given words"},{"lineNumber":364,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":365,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":366,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":367,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":368,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":369,"author":{"gitId":"nhzaci"},"content":"- 1a. There is no such person with the given keyword"},{"lineNumber":370,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":371,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":372,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":373,"author":{"gitId":"JerardSoh"},"content":"**Use case: Request help**"},{"lineNumber":374,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":375,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":376,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":377,"author":{"gitId":"JerardSoh"},"content":"1.  User requests help"},{"lineNumber":378,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows a link to the User Guide."},{"lineNumber":379,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":380,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":381,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":382,"author":{"gitId":"JerardSoh"},"content":"**Use case: List events in a particular week**"},{"lineNumber":383,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":384,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":385,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":386,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to list events in a particular week"},{"lineNumber":387,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows all events pertaining to the week"},{"lineNumber":388,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":389,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":390,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":391,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":392,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":393,"author":{"gitId":"nhzaci"},"content":"- 1a. There are no events in that week."},{"lineNumber":394,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":395,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":396,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":397,"author":{"gitId":"nhzaci"},"content":"- 1b. The given index is invalid."},{"lineNumber":398,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":399,"author":{"gitId":"nhzaci"},"content":"  - 1a1. Focuris shows an error message."},{"lineNumber":400,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":401,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 1."},{"lineNumber":402,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":403,"author":{"gitId":"JerardSoh"},"content":"**Use case: List events in a particular year**"},{"lineNumber":404,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":405,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":406,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":407,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to list events in a particular year"},{"lineNumber":408,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows all events pertaining to the year"},{"lineNumber":409,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":410,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":411,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":412,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":413,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":414,"author":{"gitId":"nhzaci"},"content":"- 1a. The given year is invalid"},{"lineNumber":415,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":416,"author":{"gitId":"nhzaci"},"content":"  - 1a1. Focuris shows an error message"},{"lineNumber":417,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":418,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 1."},{"lineNumber":419,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":420,"author":{"gitId":"nhzaci"},"content":"- 2a. The list is empty."},{"lineNumber":421,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":422,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":423,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":424,"author":{"gitId":"nhzaci"},"content":"**Use case: Reset list of events to current week**"},{"lineNumber":425,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":426,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":427,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":428,"author":{"gitId":"nhzaci"},"content":"1. User requests for events to be reset to current week"},{"lineNumber":429,"author":{"gitId":"nhzaci"},"content":"2. Focuris shows all events pertaining to current week and year"},{"lineNumber":430,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":431,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":432,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":433,"author":{"gitId":"nhzaci"},"content":"- 2a. The list is empty."},{"lineNumber":434,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":435,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":436,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":437,"author":{"gitId":"JerardSoh"},"content":"**Use case: Show list of all events**"},{"lineNumber":438,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":439,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":440,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":441,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to list all events in Focuris"},{"lineNumber":442,"author":{"gitId":"nhzaci"},"content":"2.  Focuris shows all current events"},{"lineNumber":443,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":444,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":445,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":446,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":447,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":448,"author":{"gitId":"nhzaci"},"content":"- 2a. The list is empty."},{"lineNumber":449,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":450,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":451,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":452,"author":{"gitId":"JerardSoh"},"content":"**Use case: Delete an event**"},{"lineNumber":453,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":454,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":455,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":456,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to list events"},{"lineNumber":457,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows a list of events"},{"lineNumber":458,"author":{"gitId":"JerardSoh"},"content":"3.  User requests to delete a specific event in the list"},{"lineNumber":459,"author":{"gitId":"JerardSoh"},"content":"4.  Focuris deletes the event"},{"lineNumber":460,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":461,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":462,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":463,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":464,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":465,"author":{"gitId":"nhzaci"},"content":"- 2a. The list is empty."},{"lineNumber":466,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":467,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":468,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":469,"author":{"gitId":"nhzaci"},"content":"- 3a. The given index is invalid."},{"lineNumber":470,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":471,"author":{"gitId":"nhzaci"},"content":"  - 3a1. Focuris shows an error message."},{"lineNumber":472,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":473,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 2."},{"lineNumber":474,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":475,"author":{"gitId":"JerardSoh"},"content":"**Use case: Add an event**"},{"lineNumber":476,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":477,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":478,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":479,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to add an event"},{"lineNumber":480,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris adds the event"},{"lineNumber":481,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":482,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":483,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":484,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":485,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":486,"author":{"gitId":"nhzaci"},"content":"- 1a. The format to add an event is invalid."},{"lineNumber":487,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":488,"author":{"gitId":"nhzaci"},"content":"  - 1a1. Focuris shows an error message."},{"lineNumber":489,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":490,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 1."},{"lineNumber":491,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":492,"author":{"gitId":"nhzaci"},"content":"- 1b. The event already exists in Focuris."},{"lineNumber":493,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":494,"author":{"gitId":"nhzaci"},"content":"  - 1b1. Focuris shows an error message."},{"lineNumber":495,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":496,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 1."},{"lineNumber":497,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":498,"author":{"gitId":"JerardSoh"},"content":"**Use case: Edit an event**"},{"lineNumber":499,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":500,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":501,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":502,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to list all events"},{"lineNumber":503,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows a list of events"},{"lineNumber":504,"author":{"gitId":"JerardSoh"},"content":"3.  User requests to edit a specific event in the list"},{"lineNumber":505,"author":{"gitId":"JerardSoh"},"content":"4.  Focuris edits the event"},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"nhzaci"},"content":"- 2a. The list is empty."},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":514,"author":{"gitId":"-"},"content":""},{"lineNumber":515,"author":{"gitId":"nhzaci"},"content":"- 3a. The given index is invalid."},{"lineNumber":516,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":517,"author":{"gitId":"nhzaci"},"content":"  - 3a1. Focuris shows an error message."},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 2."},{"lineNumber":520,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":521,"author":{"gitId":"nhzaci"},"content":"- 3b. No fields are provided to edit."},{"lineNumber":522,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":523,"author":{"gitId":"nhzaci"},"content":"  - 3b1. Focuris shows an error message."},{"lineNumber":524,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":525,"author":{"gitId":"JerardSoh"},"content":"    Use case resumes at step 2."},{"lineNumber":526,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":527,"author":{"gitId":"JerardSoh"},"content":"**Use case: Find an event**"},{"lineNumber":528,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":529,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":530,"author":{"gitId":"-"},"content":""},{"lineNumber":531,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to find an event"},{"lineNumber":532,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris shows a list of events related to the matching keyword"},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":535,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":536,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":537,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":538,"author":{"gitId":"nhzaci"},"content":"- 1a. There is no such event with the given keyword"},{"lineNumber":539,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":540,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":541,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":542,"author":{"gitId":"JerardSoh"},"content":"**Use case: Clear all entries of persons**"},{"lineNumber":543,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":544,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":545,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":546,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to clear all entries of persons in Focuris"},{"lineNumber":547,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris clears the entries of persons."},{"lineNumber":548,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":549,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":550,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":551,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":552,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":553,"author":{"gitId":"nhzaci"},"content":"- 1a. The list is already cleared."},{"lineNumber":554,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":555,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":556,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":557,"author":{"gitId":"JerardSoh"},"content":"**Use case: Clear all entries of events**"},{"lineNumber":558,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":559,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":560,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":561,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to clear all entries of events in Focuris"},{"lineNumber":562,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris clears the entries of events."},{"lineNumber":563,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":564,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":565,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":566,"author":{"gitId":"JerardSoh"},"content":"**Extensions**"},{"lineNumber":567,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":568,"author":{"gitId":"nhzaci"},"content":"- 1a. The list is already cleared."},{"lineNumber":569,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":570,"author":{"gitId":"JerardSoh"},"content":"  Use case ends."},{"lineNumber":571,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":572,"author":{"gitId":"JerardSoh"},"content":"**Use case: Exit Focuris**"},{"lineNumber":573,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":574,"author":{"gitId":"JerardSoh"},"content":"**MSS**"},{"lineNumber":575,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":576,"author":{"gitId":"JerardSoh"},"content":"1.  User requests to exit Focuris"},{"lineNumber":577,"author":{"gitId":"JerardSoh"},"content":"2.  Focuris closes."},{"lineNumber":578,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":579,"author":{"gitId":"JerardSoh"},"content":"    Use case ends."},{"lineNumber":580,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":581,"author":{"gitId":"nhzaci"},"content":"_{More to be added}_"},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":584,"author":{"gitId":"-"},"content":""},{"lineNumber":585,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":586,"author":{"gitId":"kieron560"},"content":"2.  Should be able to hold up to 1000 persons/events without a noticeable sluggishness in performance for typical usage."},{"lineNumber":587,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":588,"author":{"gitId":"-"},"content":""},{"lineNumber":589,"author":{"gitId":"nhzaci"},"content":"_{More to be added}_"},{"lineNumber":590,"author":{"gitId":"-"},"content":""},{"lineNumber":591,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":592,"author":{"gitId":"-"},"content":""},{"lineNumber":593,"author":{"gitId":"nhzaci"},"content":"- **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":594,"author":{"gitId":"nhzaci"},"content":"- **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":595,"author":{"gitId":"-"},"content":""},{"lineNumber":596,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":597,"author":{"gitId":"-"},"content":""},{"lineNumber":598,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":599,"author":{"gitId":"-"},"content":""},{"lineNumber":600,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":601,"author":{"gitId":"-"},"content":""},{"lineNumber":602,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":603,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":604,"author":{"gitId":"-"},"content":""},{"lineNumber":605,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":608,"author":{"gitId":"-"},"content":""},{"lineNumber":609,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":610,"author":{"gitId":"-"},"content":""},{"lineNumber":611,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":612,"author":{"gitId":"-"},"content":""},{"lineNumber":613,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":614,"author":{"gitId":"-"},"content":""},{"lineNumber":615,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":616,"author":{"gitId":"-"},"content":""},{"lineNumber":617,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":620,"author":{"gitId":"-"},"content":"      Expected: The most recent window size and location is retained."},{"lineNumber":621,"author":{"gitId":"-"},"content":""},{"lineNumber":622,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":623,"author":{"gitId":"-"},"content":""},{"lineNumber":624,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":625,"author":{"gitId":"-"},"content":""},{"lineNumber":626,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":627,"author":{"gitId":"-"},"content":""},{"lineNumber":628,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":629,"author":{"gitId":"-"},"content":""},{"lineNumber":630,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":631,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":632,"author":{"gitId":"-"},"content":""},{"lineNumber":633,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":634,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":635,"author":{"gitId":"-"},"content":""},{"lineNumber":636,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":637,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":638,"author":{"gitId":"-"},"content":""},{"lineNumber":639,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":640,"author":{"gitId":"-"},"content":""},{"lineNumber":641,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":642,"author":{"gitId":"-"},"content":""},{"lineNumber":643,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":644,"author":{"gitId":"-"},"content":""},{"lineNumber":645,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":646,"author":{"gitId":"-"},"content":""},{"lineNumber":647,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"nhzaci":99,"jrvslam":8,"kieron560":1,"-":309,"JerardSoh":230}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"kieron560"},"content":"Focuris is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Focuris can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"- Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  {:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"kieron560"},"content":"1. Download the latest `focuris.jar` from [link coming soon]."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"kieron560"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your Focuris."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"   - **`list`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"kieron560"},"content":"   - **`add`**`-p n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the application."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"   - **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"   - **`clear`** : Deletes all contacts."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"   - **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"- Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"  e.g. in `add -p n/NAME`, `NAME` is a parameter which can be used as `add -p n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"- Items in curly brackets are either-or, meaning you must include at least one of the options within the curly brackets.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"  e.g. in `add {-p n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​ | -e n/NAME s/TIME_START e/TIME_END [d/DESCRIPTION]}`"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"- Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"- Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"- Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"- If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"- Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"kieron560"},"content":"![help message](images/helpMessageNew.png)"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"### Adding a person or event to Focuris: `add`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"Adds a new event or person to Focuris"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"Format: `add {-p n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​ | -e n/NAME s/TIME_START e/TIME_END [d/DESCRIPTION]}`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"- Adds a person if `-p` is used, otherwise, an event if `-e` is used"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"- For events, time start and time end should be specified in `DD-MM-YYYY HHMM` format"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"- `add -p n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"- `add -p n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"- `add -e n/NUS Hackathon s/12-03-2021 1000 e/13-03-2021 1800`"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"- `add -e n/Complete Homework s/02-03-2021 1000 e/02-03-2021 1400 d/Complete weekly quiz and group tasks for CS2103T`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"kieron560"},"content":"Shows a list of all persons in the Focuris Person List."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"jrvslam"},"content":"Edits multiple items in Focuris."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"jrvslam"},"content":"* Edits the item at the specified `INDEX`. The index refers to the type of item, followed by index number shown in the respective displayed item list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"* The format of `INDEX` is `{P | E}[NUMBER]`, where Persons are prefixed with `P` and Events are prefixed with `E`."},{"lineNumber":113,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":114,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":115,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":116,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":120,"author":{"gitId":"jrvslam"},"content":"*  `edit P1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":121,"author":{"gitId":"jrvslam"},"content":"*  `edit P2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"*  `edit E1 n/CS2030S` Edits the name of the 1st Event to `CS2030S`."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"toahi"},"content":"### Search using a matching keyword : `find`"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"toahi"},"content":"Finds a class using a matching keyword in Focuris. Uses flags such as  -e, -p, -l, -t, -lab, -r"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":"Format: `find {-e | -p | -l | -t | -lab | -r} KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":131,"author":{"gitId":"toahi"},"content":"* -e is the event flag. Attach it to the end of the command to search for an event"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"toahi"},"content":"* `find -e CS2101` returns the CS2101 event"},{"lineNumber":136,"author":{"gitId":"nhzaci"},"content":"* `find -p John` returns John\u0027s profile"},{"lineNumber":137,"author":{"gitId":"toahi"},"content":"* `find -l CS2101` returns the CS2101 lecture"},{"lineNumber":138,"author":{"gitId":"toahi"},"content":"* `find -t CS2101` returns the CS2101 tutorial"},{"lineNumber":139,"author":{"gitId":"toahi"},"content":"* `find -lab lsm1301` returns the CS2101 lab"},{"lineNumber":140,"author":{"gitId":"toahi"},"content":"* `find -r CS2030` returns the CS2030 recitation"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"nhzaci"},"content":"- The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":"- The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"- Only the name is searched."},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":"- Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"- Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":147,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"kieron560"},"content":"Deletes the specified person from the Focuris."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"nhzaci"},"content":"* Deletes the person at the specified `INDEX` of person list (prefixed with `P`) or event list (prefixed with `E`)."},{"lineNumber":156,"author":{"gitId":"jrvslam"},"content":"* The index refers to the index number shown in the respective displayed list."},{"lineNumber":157,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":160,"author":{"gitId":"nhzaci"},"content":"* `list` followed by `delete P2` deletes the 2nd person in Focuris."},{"lineNumber":161,"author":{"gitId":"jrvslam"},"content":"* `find CS2100` followed by `delete E1` deletes the 1st Event in the results of the `find` command."},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"JerardSoh"},"content":"### Changing the week : `week`"},{"lineNumber":164,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":165,"author":{"gitId":"JerardSoh"},"content":"Changes the week shown and all events to the corresponding week."},{"lineNumber":166,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":167,"author":{"gitId":"JerardSoh"},"content":"Format: `week {WEEK_NUMBER | first | next | prev | last}`"},{"lineNumber":168,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":169,"author":{"gitId":"nhzaci"},"content":"- Shows events of the week at the specified `WEEK_NUMBER`."},{"lineNumber":170,"author":{"gitId":"nhzaci"},"content":"- The `WEEK_NUMBER` **must be a positive integer** from 1, 2, 3, …​"},{"lineNumber":171,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":172,"author":{"gitId":"JerardSoh"},"content":"Examples:"},{"lineNumber":173,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":174,"author":{"gitId":"nhzaci"},"content":"- `week 2` shows events of the second week of the year."},{"lineNumber":175,"author":{"gitId":"nhzaci"},"content":"- `week next` shows the next week of events."},{"lineNumber":176,"author":{"gitId":"nhzaci"},"content":"- `week prev` shows the previous week of events."},{"lineNumber":177,"author":{"gitId":"nhzaci"},"content":"- `week first` shows the first week of events."},{"lineNumber":178,"author":{"gitId":"nhzaci"},"content":"- `week last` shows the last week of events."},{"lineNumber":179,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":180,"author":{"gitId":"JerardSoh"},"content":"### Changing the year : `year`"},{"lineNumber":181,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":182,"author":{"gitId":"JerardSoh"},"content":"Changes the year shown and all events to the corresponding year."},{"lineNumber":183,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":184,"author":{"gitId":"JerardSoh"},"content":"Format: `year {YEAR_NUMBER | next | prev}`"},{"lineNumber":185,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":186,"author":{"gitId":"nhzaci"},"content":"- The year entered **must be a 4 digit positive integer** ranging from 2021 onwards."},{"lineNumber":187,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":188,"author":{"gitId":"JerardSoh"},"content":"Examples:"},{"lineNumber":189,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":190,"author":{"gitId":"nhzaci"},"content":"- `year 2022` shows events of the year 2022."},{"lineNumber":191,"author":{"gitId":"nhzaci"},"content":"- `year next` shows events of the next year."},{"lineNumber":192,"author":{"gitId":"nhzaci"},"content":"- `year prev` shows events of the previous year."},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"kieron560"},"content":"Clears all entries from Focuris."},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"nhzaci"},"content":"### Shortcut back to current week\u0027s task list: `today`"},{"lineNumber":201,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":202,"author":{"gitId":"nhzaci"},"content":"Changes your current view for task list back to current week and year."},{"lineNumber":203,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":204,"author":{"gitId":"nhzaci"},"content":"Format: `today`"},{"lineNumber":205,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"kieron560"},"content":"Focuris data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"kieron560"},"content":"Focuris data are saved as a JSON file `[JAR file location]/data/focuris.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":221,"author":{"gitId":"kieron560"},"content":"If your changes to the data file makes its format invalid, Focuris will discard all data and start with an empty data file at the next run."},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":233,"author":{"gitId":"kieron560"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Focuris home folder."},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"nhzaci"},"content":"---"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"nhzaci"},"content":"| Action     | Format, Examples                                                                                                                                                                                                                 |"},{"lineNumber":240,"author":{"gitId":"nhzaci"},"content":"| ---------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |"},{"lineNumber":241,"author":{"gitId":"nhzaci"},"content":"| **Add**    | `add {-p n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​ \\| -e n/NAME s/TIME_START e/TIME_END [d/DESCRIPTION]}`\u003cbr\u003e e.g.,`add -p n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` |"},{"lineNumber":242,"author":{"gitId":"nhzaci"},"content":"| **Clear**  | `clear`                                                                                                                                                                                                                          |"},{"lineNumber":243,"author":{"gitId":"nhzaci"},"content":"| **Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete E3`                                                                                                                                                                                              |"},{"lineNumber":244,"author":{"gitId":"nhzaci"},"content":"| **Edit**   | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit P2 n/James Lee e/jameslee@example.com`                                                                                                      |"},{"lineNumber":245,"author":{"gitId":"nhzaci"},"content":"| **Find**   | `find {-e \\| -p \\| -l \\| -t \\| -lab \\| -r} KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find -p James Jake`                                                                                                                                                                       |"},{"lineNumber":246,"author":{"gitId":"nhzaci"},"content":"| **List**   | `list`                                                                                                                                                                                                                           |"},{"lineNumber":247,"author":{"gitId":"nhzaci"},"content":"| **Help**   | `help`                                                                                                                                                                                                                           |"},{"lineNumber":248,"author":{"gitId":"nhzaci"},"content":"| **Today**  | `today`                                                                                                                                                                                                                          |"},{"lineNumber":249,"author":{"gitId":"nhzaci"},"content":"| **Week**   | `week {WEEK_NUMBER \\| first \\| next \\| prev \\| last}` \u003cbr\u003e e.g., `week 2`                                                                                                                                                        |"},{"lineNumber":250,"author":{"gitId":"nhzaci"},"content":"| **Year**   | `year {YEAR_NUMBER \\| next \\| prev}` \u003cbr\u003e e.g., `year 2022`                                                                                                                                                                      |"}],"authorContributionMap":{"nhzaci":72,"toahi":8,"jrvslam":6,"kieron560":12,"-":135,"JerardSoh":17}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"kieron560"},"content":"title: Focuris"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"kieron560":1,"-":18}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.storage.EventBookStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.storage.JsonEventBookStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":40,"author":{"gitId":"-"},"content":" */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"        EventBookStorage eventBookStorage \u003d new JsonEventBookStorage(userPrefs.getEventBookFilePath());"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"        storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":83,"author":{"gitId":"kieron560"},"content":"        ReadOnlyAddressBook initialAddressData;"},{"lineNumber":84,"author":{"gitId":"kieron560"},"content":"        Optional\u003cReadOnlyEventBook\u003e eventBookOptional;"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"        ReadOnlyEventBook initialEventData;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"kieron560"},"content":"            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":94,"author":{"gitId":"kieron560"},"content":"            initialAddressData \u003d new AddressBook();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":97,"author":{"gitId":"kieron560"},"content":"            initialAddressData \u003d new AddressBook();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"kieron560"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"            eventBookOptional \u003d storage.readEventBook();"},{"lineNumber":102,"author":{"gitId":"kieron560"},"content":"            if (!eventBookOptional.isPresent()) {"},{"lineNumber":103,"author":{"gitId":"kieron560"},"content":"                logger.info(\"Data file not found. Will be starting with a sample EventBook\");"},{"lineNumber":104,"author":{"gitId":"kieron560"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"            initialEventData \u003d eventBookOptional.orElseGet(SampleDataUtil::getSampleEventBook);"},{"lineNumber":106,"author":{"gitId":"kieron560"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":107,"author":{"gitId":"kieron560"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty EventBook\");"},{"lineNumber":108,"author":{"gitId":"kieron560"},"content":"            initialEventData \u003d new EventBook();"},{"lineNumber":109,"author":{"gitId":"kieron560"},"content":"        } catch (IOException e) {"},{"lineNumber":110,"author":{"gitId":"kieron560"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty EventBook\");"},{"lineNumber":111,"author":{"gitId":"kieron560"},"content":"            initialEventData \u003d new EventBook();"},{"lineNumber":112,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"kieron560"},"content":"        return new ModelManager(initialAddressData, userPrefs, initialEventData);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":143,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":171,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":18,"-":177,"JerardSoh":8}},{"path":"src/main/java/seedu/address/logic/commands/TodoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"public class TodoCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Todo Event to Focuris. \""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"            + \"Parameters: \""},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"            + PREFIX_NAME + \"Household Chores\""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"            + PREFIX_DESCRIPTION + \"Clean my room and wash the dishes\";"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Todo added: %1$s\";"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This Todo already exists in Focuris\";"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    private final Event toAdd;"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     * Creates an TodoCommand to add the specified Todo Event {@code Event}"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"    public TodoCommand(Event event) {"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        requireNonNull(event);"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"        toAdd \u003d event;"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        requireNonNull(model);"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"        if (model.hasEvent(toAdd)) {"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        model.addEvent(toAdd);"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"                || (other instanceof TodoCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"                \u0026\u0026 toAdd.equals(((TodoCommand) other).toAdd));"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":54}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"import seedu.address.logic.commands.TodoCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"        case TodoCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"            return new TodoCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"/d\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.Description;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"     * Parses a {@code String eventName} into a {@code EventName}."},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"     * @throws ParseException if the given {@code eventName} is invalid."},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"    public static EventName parseEventName(String eventName) throws ParseException {"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"        requireNonNull(eventName);"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        String trimmedEventName \u003d eventName.trim();"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"        if (!Name.isValidName(trimmedEventName)) {"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"        return new EventName(trimmedEventName);"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"     * Parses a {@code String description} into a {@code Description}."},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"     * @throws ParseException if the given {@code description} is invalid."},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"    public static Description parseDescription(String description) throws ParseException {"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"        requireNonNull(description);"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"        if (!Name.isValidName(trimmedDescription)) {"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":32,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/TodoCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import seedu.address.logic.commands.TodoCommand;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.Description;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.EventStatus;"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":" */"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"public class TodoCommandParser implements Parser\u003cTodoCommand\u003e {"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    private static final EventStatus TODO_EVENT_STATUS \u003d EventStatus.TODO;"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"     * Parses the given {@code String} of arguments in the context of the TodoCommand"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"     * and returns an TodoCommand object for execution."},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"    public TodoCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION);"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION)"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TodoCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"        Event event \u003d new Event(eventName, TODO_EVENT_STATUS, description);"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"        return new TodoCommand(event);"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":53}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":" * Duplicates are not allowed (by .isSamePerson comparison) and (by .isSameEvent comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":119,"JerardSoh":2}},{"path":"src/main/java/seedu/address/model/EventBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kieron560"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":3,"author":{"gitId":"kieron560"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":5,"author":{"gitId":"kieron560"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":7,"author":{"gitId":"kieron560"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":9,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":10,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":11,"author":{"gitId":"kieron560"},"content":"public class EventBook implements ReadOnlyEventBook {"},{"lineNumber":12,"author":{"gitId":"kieron560"},"content":"    private final UniqueEventList events;"},{"lineNumber":13,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":14,"author":{"gitId":"kieron560"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"kieron560"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":16,"author":{"gitId":"kieron560"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":17,"author":{"gitId":"kieron560"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"kieron560"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":19,"author":{"gitId":"kieron560"},"content":"     *   among constructors."},{"lineNumber":20,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kieron560"},"content":"    {"},{"lineNumber":22,"author":{"gitId":"kieron560"},"content":"        events \u003d new UniqueEventList();"},{"lineNumber":23,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":25,"author":{"gitId":"kieron560"},"content":"    public EventBook() {}"},{"lineNumber":26,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":27,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"kieron560"},"content":"     * Creates an EventBook using the Persons in the {@code toBeCopied}"},{"lineNumber":29,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"kieron560"},"content":"    public EventBook(ReadOnlyEventBook toBeCopied) {"},{"lineNumber":31,"author":{"gitId":"kieron560"},"content":"        this();"},{"lineNumber":32,"author":{"gitId":"kieron560"},"content":"        resetData(toBeCopied);"},{"lineNumber":33,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":35,"author":{"gitId":"kieron560"},"content":"    //// list overwrite operations"},{"lineNumber":36,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":37,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"kieron560"},"content":"     * Replaces the contents of the event list with {@code events}."},{"lineNumber":39,"author":{"gitId":"kieron560"},"content":"     * {@code events} must not contain duplicate events."},{"lineNumber":40,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"kieron560"},"content":"    public void setEvents(List\u003cEvent\u003e events) {"},{"lineNumber":42,"author":{"gitId":"kieron560"},"content":"        this.events.setEvents(events);"},{"lineNumber":43,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":45,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"kieron560"},"content":"     * Resets the existing data of this {@code EventBook} with {@code newData}."},{"lineNumber":47,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"kieron560"},"content":"    public void resetData(ReadOnlyEventBook newData) {"},{"lineNumber":49,"author":{"gitId":"kieron560"},"content":"        requireNonNull(newData);"},{"lineNumber":50,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":51,"author":{"gitId":"kieron560"},"content":"        setEvents(newData.getEventList());"},{"lineNumber":52,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":54,"author":{"gitId":"kieron560"},"content":"    //// event-level operations"},{"lineNumber":55,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":56,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"kieron560"},"content":"     * Returns true if an event with the same identity as {@code event} exists in the event book."},{"lineNumber":58,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"kieron560"},"content":"    public boolean hasEvent(Event event) {"},{"lineNumber":60,"author":{"gitId":"kieron560"},"content":"        requireNonNull(event);"},{"lineNumber":61,"author":{"gitId":"kieron560"},"content":"        return events.contains(event);"},{"lineNumber":62,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":64,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"kieron560"},"content":"     * Adds a event to the event book."},{"lineNumber":66,"author":{"gitId":"kieron560"},"content":"     * The event must not already exist in the event book."},{"lineNumber":67,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"kieron560"},"content":"    public void addEvent(Event e) {"},{"lineNumber":69,"author":{"gitId":"kieron560"},"content":"        events.add(e);"},{"lineNumber":70,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":72,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"kieron560"},"content":"     * Replaces the given event {@code target} in the list with {@code editedPerson}."},{"lineNumber":74,"author":{"gitId":"kieron560"},"content":"     * {@code target} must exist in the event book."},{"lineNumber":75,"author":{"gitId":"kieron560"},"content":"     * The event identity of {@code editedPerson} must not be the same as another existing event in the event book."},{"lineNumber":76,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"kieron560"},"content":"    public void setEvent(Event target, Event editedPerson) {"},{"lineNumber":78,"author":{"gitId":"kieron560"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":79,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":80,"author":{"gitId":"kieron560"},"content":"        events.setEvent(target, editedPerson);"},{"lineNumber":81,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":83,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"kieron560"},"content":"     * Removes {@code key} from this {@code EventBook}."},{"lineNumber":85,"author":{"gitId":"kieron560"},"content":"     * {@code key} must exist in the event book."},{"lineNumber":86,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"kieron560"},"content":"    public void removeEvent(Event key) {"},{"lineNumber":88,"author":{"gitId":"kieron560"},"content":"        events.remove(key);"},{"lineNumber":89,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":91,"author":{"gitId":"kieron560"},"content":"    //// util methods"},{"lineNumber":92,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":93,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"kieron560"},"content":"    public String toString() {"},{"lineNumber":95,"author":{"gitId":"kieron560"},"content":"        return events.asUnmodifiableObservableList().size() + \" events\";"},{"lineNumber":96,"author":{"gitId":"kieron560"},"content":"        // TODO: refine later"},{"lineNumber":97,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":99,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"kieron560"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":101,"author":{"gitId":"kieron560"},"content":"        return events.asUnmodifiableObservableList();"},{"lineNumber":102,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":104,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"kieron560"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitId":"kieron560"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":107,"author":{"gitId":"kieron560"},"content":"                || (other instanceof EventBook // instanceof handles nulls"},{"lineNumber":108,"author":{"gitId":"kieron560"},"content":"                \u0026\u0026 events.equals(((EventBook) other).events));"},{"lineNumber":109,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":111,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"kieron560"},"content":"    public int hashCode() {"},{"lineNumber":113,"author":{"gitId":"kieron560"},"content":"        return events.hashCode();"},{"lineNumber":114,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":116,"author":{"gitId":"kieron560"},"content":"}"}],"authorContributionMap":{"kieron560":116}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitId":"kieron560"},"content":"    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"kieron560"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":90,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":91,"author":{"gitId":"kieron560"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":92,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"kieron560"},"content":"     * Returns the user prefs\u0027 event book file path."},{"lineNumber":94,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"kieron560"},"content":"    Path getEventBookFilePath();"},{"lineNumber":96,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":97,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"kieron560"},"content":"     * Sets the user prefs\u0027 event book file path."},{"lineNumber":99,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"kieron560"},"content":"    void setEventBookFilePath(Path eventBookFilePath);"},{"lineNumber":101,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":102,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"kieron560"},"content":"     * Replaces event book data with the data in {@code eventBook}."},{"lineNumber":104,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"kieron560"},"content":"    void setEventBook(ReadOnlyEventBook eventBook);"},{"lineNumber":106,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":107,"author":{"gitId":"kieron560"},"content":"    /** Returns the EventBook */"},{"lineNumber":108,"author":{"gitId":"kieron560"},"content":"    ReadOnlyEventBook getEventBook();"},{"lineNumber":109,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":110,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"kieron560"},"content":"     * Returns true if an event with the same identity as {@code event} exists in the event book."},{"lineNumber":112,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"kieron560"},"content":"    boolean hasEvent(Event event);"},{"lineNumber":114,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":115,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"kieron560"},"content":"     * Deletes the given event."},{"lineNumber":117,"author":{"gitId":"kieron560"},"content":"     * The person must exist in the event book."},{"lineNumber":118,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"kieron560"},"content":"    void deleteEvent(Event target);"},{"lineNumber":120,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":121,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"kieron560"},"content":"     * Adds the given event."},{"lineNumber":123,"author":{"gitId":"kieron560"},"content":"     * {@code person} must not already exist in the event book."},{"lineNumber":124,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"kieron560"},"content":"    void addEvent(Event event);"},{"lineNumber":126,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":127,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"kieron560"},"content":"     * Replaces the given event {@code target} with {@code editedEvent}."},{"lineNumber":129,"author":{"gitId":"kieron560"},"content":"     * {@code target} must exist in the event book."},{"lineNumber":130,"author":{"gitId":"kieron560"},"content":"     * The person identity of {@code editedEvent} must not be the same as another existing event in the event book."},{"lineNumber":131,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"kieron560"},"content":"    void setEvent(Event target, Event editedEvent);"},{"lineNumber":133,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":134,"author":{"gitId":"kieron560"},"content":"    /** Returns an unmodifiable view of the filtered event list */"},{"lineNumber":135,"author":{"gitId":"kieron560"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();"},{"lineNumber":136,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":137,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"kieron560"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}."},{"lineNumber":139,"author":{"gitId":"kieron560"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":140,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"kieron560"},"content":"    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":55,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":24,"author":{"gitId":"kieron560"},"content":"    private final EventBook eventBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":27,"author":{"gitId":"kieron560"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvent;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"kieron560"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyEventBook eventBook) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":34,"author":{"gitId":"kieron560"},"content":"        requireAllNonNull(addressBook, userPrefs, eventBook);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"kieron560"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs"},{"lineNumber":37,"author":{"gitId":"kieron560"},"content":"            + \"event book: \" + eventBook);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":40,"author":{"gitId":"kieron560"},"content":"        this.eventBook \u003d new EventBook(eventBook);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":43,"author":{"gitId":"kieron560"},"content":"        filteredEvent \u003d new FilteredList\u003c\u003e(this.eventBook.getEventList());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":47,"author":{"gitId":"kieron560"},"content":"        this(new AddressBook(), new UserPrefs(), new EventBook());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"kieron560"},"content":"    public Path getEventBookFilePath() {"},{"lineNumber":87,"author":{"gitId":"kieron560"},"content":"        return userPrefs.getEventBookFilePath();"},{"lineNumber":88,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":90,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"kieron560"},"content":"    public void setEventBookFilePath(Path eventBookFilePath) {"},{"lineNumber":92,"author":{"gitId":"kieron560"},"content":"        requireNonNull(eventBookFilePath);"},{"lineNumber":93,"author":{"gitId":"kieron560"},"content":"        userPrefs.setEventBookFilePath(eventBookFilePath);"},{"lineNumber":94,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"kieron560"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":133,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":134,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":135,"author":{"gitId":"kieron560"},"content":"    public void setEventBook(ReadOnlyEventBook eventBook) {"},{"lineNumber":136,"author":{"gitId":"kieron560"},"content":"        this.eventBook.resetData(eventBook);"},{"lineNumber":137,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":139,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"kieron560"},"content":"    public ReadOnlyEventBook getEventBook() {"},{"lineNumber":141,"author":{"gitId":"kieron560"},"content":"        return eventBook;"},{"lineNumber":142,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":144,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":145,"author":{"gitId":"kieron560"},"content":"    public boolean hasEvent(Event event) {"},{"lineNumber":146,"author":{"gitId":"kieron560"},"content":"        requireNonNull(event);"},{"lineNumber":147,"author":{"gitId":"kieron560"},"content":"        return eventBook.hasEvent(event);"},{"lineNumber":148,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":150,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"kieron560"},"content":"    public void deleteEvent(Event target) {"},{"lineNumber":152,"author":{"gitId":"kieron560"},"content":"        eventBook.removeEvent(target);"},{"lineNumber":153,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":155,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"kieron560"},"content":"    public void addEvent(Event event) {"},{"lineNumber":157,"author":{"gitId":"kieron560"},"content":"        eventBook.addEvent(event);"},{"lineNumber":158,"author":{"gitId":"kieron560"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":159,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":161,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"kieron560"},"content":"    public void setEvent(Event target, Event editedEvent) {"},{"lineNumber":163,"author":{"gitId":"kieron560"},"content":"        requireAllNonNull(target, editedEvent);"},{"lineNumber":164,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":165,"author":{"gitId":"kieron560"},"content":"        eventBook.setEvent(target, editedEvent);"},{"lineNumber":166,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":180,"author":{"gitId":"kieron560"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":181,"author":{"gitId":"kieron560"},"content":"        return filteredEvent;"},{"lineNumber":182,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"kieron560"},"content":"    @Override"},{"lineNumber":191,"author":{"gitId":"kieron560"},"content":"    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":192,"author":{"gitId":"kieron560"},"content":"        requireAllNonNull(predicate);"},{"lineNumber":193,"author":{"gitId":"kieron560"},"content":"        filteredEvent.setPredicate(predicate);"},{"lineNumber":194,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":211,"author":{"gitId":"kieron560"},"content":"                \u0026\u0026 eventBook.equals(other.eventBook)"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":213,"author":{"gitId":"kieron560"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":214,"author":{"gitId":"kieron560"},"content":"                \u0026\u0026 filteredEvent.equals(other.filteredEvent);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":71,"-":146}},{"path":"src/main/java/seedu/address/model/ReadOnlyEventBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kieron560"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":3,"author":{"gitId":"kieron560"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":6,"author":{"gitId":"kieron560"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kieron560"},"content":" * Unmodifiable view of an event book"},{"lineNumber":8,"author":{"gitId":"kieron560"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kieron560"},"content":"public interface ReadOnlyEventBook {"},{"lineNumber":10,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"kieron560"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":12,"author":{"gitId":"kieron560"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":13,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"kieron560"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":15,"author":{"gitId":"kieron560"},"content":"}"}],"authorContributionMap":{"kieron560":15}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"kieron560"},"content":"    Path getEventBookFilePath();"},{"lineNumber":17,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":2,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"},{"lineNumber":18,"author":{"gitId":"kieron560"},"content":"    private Path eventBookFilePath \u003d Paths.get(\"data\", \"eventbook.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"},{"lineNumber":40,"author":{"gitId":"kieron560"},"content":"        setEventBookFilePath(newUserPrefs.getEventBookFilePath());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"kieron560"},"content":"    public Path getEventBookFilePath() {"},{"lineNumber":62,"author":{"gitId":"kieron560"},"content":"        return eventBookFilePath;"},{"lineNumber":63,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":65,"author":{"gitId":"kieron560"},"content":"    public void setEventBookFilePath(Path eventBookFilePath) {"},{"lineNumber":66,"author":{"gitId":"kieron560"},"content":"        requireNonNull(eventBookFilePath);"},{"lineNumber":67,"author":{"gitId":"kieron560"},"content":"        this.eventBookFilePath \u003d eventBookFilePath;"},{"lineNumber":68,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":82,"author":{"gitId":"kieron560"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"},{"lineNumber":83,"author":{"gitId":"kieron560"},"content":"                \u0026\u0026 eventBookFilePath.equals(o.eventBookFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":95,"author":{"gitId":"kieron560"},"content":"        sb.append(\"\\nLocal data addressbook file location : \" + addressBookFilePath);"},{"lineNumber":96,"author":{"gitId":"kieron560"},"content":"        sb.append(\"\\nLocal data eventBook file location: \" + eventBookFilePath);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":15,"-":85}},{"path":"src/main/java/seedu/address/model/event/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":" * Represents a description for an Event in Focuris."},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":" * Guarantees: immutable; is valid as declared in"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"public class Description {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"            \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    public final String description;"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * Constructs a {@code Description}."},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     * @param description A valid description."},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    public Description(String description) {"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        requireNonNull(description);"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        this.description \u003d description;"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"     * Returns true if a given string is a valid description"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"        return this.description;"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"                \u0026\u0026 this.description.equals(((Description) other).description)); // state check"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        return description.hashCode();"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":58}},{"path":"src/main/java/seedu/address/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":" * Represents an Event in Focuris."},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":" * Guarantees: details are present and not null, fields are validated, immutable."},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":" */"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"public class Event {"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    // Identity Fields"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    private final EventName eventName;"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    // private final EventTime timeStart; // commented out for v1.2"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    // private final EventTime timeEnd; // commented out for v1.2"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    private final EventStatus status;"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    // Data Fields"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    private final Description description;"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"    private final Set\u003cPerson\u003e persons \u003d new HashSet\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"    public Event(EventName eventName, EventStatus status, Description description) {"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"        requireAllNonNull(eventName, status, description);"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"        this.eventName \u003d eventName;"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"        // this.timeStart \u003d timeStart; // commented out for v1.2"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        // this.timeEnd \u003d timeEnd; // commented out for v1.2"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        this.status \u003d status;"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        this.description \u003d description;"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"        // this.tags.addAll(tags); // commented out for v1.2"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"        // this.persons.addAll(persons); // commented out for v1.2"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"    public EventName getName() {"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"        return this.eventName;"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"    /* Commented out for v1.2"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"    public EventTime getTimeStart() {"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"        return this.timeStart;"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"    /* Commented out for v1.2"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"    public EventTime getTimeEnd() {"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"        return this.timeEnd;"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"    public EventStatus getStatus() {"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"        return this.status;"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"    public Description getDescription() {"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"        return this.description;"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     * if modification is attempted."},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"        return Collections.unmodifiableSet(this.tags);"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"     * Returns an immutable Person set, which throws {@code UnsupportedOperationException}"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"     * if modification is attempted."},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"    public Set\u003cPerson\u003e getPersons() {"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"        return Collections.unmodifiableSet(this.persons);"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"     * Returns true if both events have the same name."},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"     * This defines a weaker notion of equality between two Events."},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"    public boolean isSameEvent(Event otherEvent) {"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"        if (otherEvent \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"            return true;"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"        if (otherEvent !\u003d null) {"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"            return otherEvent.getName().equals(getName());"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"        return false;"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"     * Returns true if both Events have the same identity and data fields."},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"     * This defines a stronger notion of equality between two Events."},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"            return true;"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"        if (!(other instanceof Event)) {"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"            return false;"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"        Event otherEvent \u003d (Event) other;"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"        return otherEvent.getName().equals(getName())"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"                \u0026\u0026 otherEvent.getStatus().equals(getStatus())"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"                \u0026\u0026 otherEvent.getTags().equals(getTags())"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"                \u0026\u0026 otherEvent.getPersons().equals(getPersons());"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"    public int hashCode() {"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"        return Objects.hash(eventName, status, description,"},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":"                tags, persons);"},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"    public String toString() {"},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":132,"author":{"gitId":"nhzaci"},"content":"        builder.append(getName())"},{"lineNumber":133,"author":{"gitId":"nhzaci"},"content":"                .append(\"; Status: \")"},{"lineNumber":134,"author":{"gitId":"nhzaci"},"content":"                .append(getStatus())"},{"lineNumber":135,"author":{"gitId":"nhzaci"},"content":"                .append(\"; Description: \")"},{"lineNumber":136,"author":{"gitId":"nhzaci"},"content":"                .append(getDescription());"},{"lineNumber":137,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":138,"author":{"gitId":"nhzaci"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":139,"author":{"gitId":"nhzaci"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":140,"author":{"gitId":"nhzaci"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":141,"author":{"gitId":"nhzaci"},"content":"            tags.forEach(builder::append);"},{"lineNumber":142,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"        Set\u003cPerson\u003e persons \u003d getPersons();"},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":"        if (!persons.isEmpty()) {"},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"            builder.append(\"; Persons: \");"},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":"            persons.forEach(builder::append);"},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":"        return builder.toString();"},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":153,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":153}},{"path":"src/main/java/seedu/address/model/event/EventName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":" * Represents an Event\u0027s name in Focuris"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"public class EventName {"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    public final String eventName;"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"     * Constructs a {@code EventName}."},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"     * @param eventName A valid event name."},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"    public EventName(String eventName) {"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"        requireNonNull(eventName);"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"        checkArgument(isValidName(eventName), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"        this.eventName \u003d eventName;"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        return this.eventName;"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"                || (other instanceof EventName // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"                \u0026\u0026 this.eventName.equals(((EventName) other).eventName)); // state check"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"        return this.eventName.hashCode();"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":59}},{"path":"src/main/java/seedu/address/model/event/EventStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public enum EventStatus {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"    IN_PROGRESS,"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    DONE"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/seedu/address/model/event/EventTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"public class EventTime {"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Event times should be \""},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"            + \"provided in the format DD/MM/YYYY hh:mm and adhere to the \""},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"            + \"following constraints: \\n\""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"            + \"1. DD should only contain values from 01 to 31, and correspond\""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"            + \"to the correct range for each month:\\n\""},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"            + \"    - 01 to 28 for Feb except for leap years.\\n\""},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"            + \"    - 01 to 30 for Apr, Jun, Sep and Nov.\\n\""},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"            + \"    - 01 to 31 for months: Jan, Mar, May, Jul, Aug, Oct and Dec.\\n\""},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"            + \"2. MM should only contain values from 01 to 12.\\n\""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"            + \"3. YYYY should only contain values from 0000 to 9999.\\n\""},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"            + \"4. hh should only contain values from 00 to 23.\\n\""},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"            + \"5. mm should only contain values from 00 to 59.\\n\";"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"     * Matches DD/MM/YYYY hh:mm with the following constraints:"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"     * DD: 01 to 09 || 10 to 29 || 30 to 31"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"     * MM: 00 to 12 -\u003e edge case month 00, checked in isValidDateTime"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     * YYYY: 0000 to 9999 -\u003e Java\u0027s max date is 99999999999999"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"     * hh: 00 to 19 || 20 to 23"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"     * mm: 00 to 59"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"    public static final String VALIDATION_REGEX \u003d"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"            \"^(([0][1-9]|[1-2][0-9])|(3[01]))\\\\/(([0][1-9])|([1][0-2]))\\\\/\\\\d\\\\d\\\\d\\\\d \""},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"                    + \"(([0-1][0-9])|([2][0-3])):[0-5][0-9]$\";"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"     * DateTimeFormatter for dd/MM/yyyy HHmm input format on date inputs"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter INPUT_DATE_FORMAT \u003d"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"    public final LocalDateTime eventTime;"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"     * Constructs a {@code EventTime}"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"     * @param eventTime A valid eventTime"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"    public EventTime(String eventTime) {"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"        requireNonNull(eventTime);"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        checkArgument(isValidEventTime(eventTime), MESSAGE_CONSTRAINTS);"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"        LocalDateTime parsedDateTime \u003d LocalDateTime.now();"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"        // catch errors in parsing datetime"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"            // try to parse date time"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"            parsedDateTime \u003d parseStringToLocalDateTime(eventTime);"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"        } catch (DateTimeParseException dateTimeParseException) {"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"            // use checkArgument to pass error upwards"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"            checkArgument(false, MESSAGE_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"        this.eventTime \u003d parsedDateTime;"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"     * Returns true if a given String is a valid eventTime"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"    public static boolean isValidEventTime(String test) {"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"        // System.out.println(test);"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"        // System.out.println(test.matches(VALIDATION_REGEX) ? \"PASS\" : \"FAIL\");"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"     * Parser for event time in the correct format into a LocalDateTime object"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"     * @param eventTime eventTime that passed validation"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"     * @return local date time object from string eventTime in correct format"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"     * @throws DateTimeParseException if there\u0027s an error passing the eventTime"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"    private static LocalDateTime parseStringToLocalDateTime(String eventTime)"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"            throws DateTimeParseException {"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"        return LocalDateTime.parse("},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"                eventTime,"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"                INPUT_DATE_FORMAT);"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"    public String toString() {"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"        return this.eventTime.toString();"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"                || (other instanceof EventTime // instanceof handles nulls"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"                \u0026\u0026 this.eventTime.equals(((EventTime) other).eventTime)); // state check"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"        return this.eventTime.hashCode();"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":104}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":" * A event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":" * events uses Event#isSameEvent(Event) for equality so as to ensure that the events being added or updated is"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":" * unique in terms of identity in the UniqueEventList. However, the removal of a event uses Event#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":" * as to ensure that the event with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":" *"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":" *"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":" * @see Event#isSameEvent(Event)"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     * Returns true if the list contains an equivalent event as the given argument."},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    public boolean contains(Event toCheck) {"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"     * Adds an event to the list."},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"     * The event must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    public void add(Event toAdd) {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"            throw new DuplicateEventException();"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}."},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    public void setEvent(Event target, Event editedEvent) {"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"        requireAllNonNull(target, editedEvent);"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"            throw new EventNotFoundException();"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"            throw new DuplicateEventException();"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"        internalList.set(index, editedEvent);"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"     * Removes the equivalent event from the list."},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"     * The event must exist in the list."},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"    public void remove(Event toRemove) {"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"            throw new EventNotFoundException();"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"    public void setEvents(UniqueEventList replacement) {"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"     * Replaces the contents of this list with {@code events}."},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"     * {@code events} must not contain duplicate events."},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"    public void setEvents(List\u003cEvent\u003e events) {"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"        requireAllNonNull(events);"},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"        if (!eventsAreUnique(events)) {"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":"            throw new DuplicateEventException();"},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"        internalList.setAll(events);"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"    public Iterator\u003cEvent\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":"                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":"     * Returns true if {@code events} contains only unique events."},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":"    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":"        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"JerardSoh"},"content":"            for (int j \u003d i + 1; j \u003c events.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"JerardSoh"},"content":"                if (events.get(i).isSameEvent(events.get(j))) {"},{"lineNumber":131,"author":{"gitId":"JerardSoh"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"JerardSoh"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"JerardSoh"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":137}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":" */"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"public class DuplicateEventException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    public DuplicateEventException() {"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"        super(\"Operation would result in duplicate events\");"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":11}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":" * Signals that the operation is unable to find the specified event."},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"public class EventNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"nhzaci":6}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"        // Updated since previous code was at risk of throwing NullPointerException"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"        if (otherPerson !\u003d null) {"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"            return otherPerson.getName().equals(getName());"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"        return false;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":6,"-":121}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.Description;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.EventStatus;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"    public static Set\u003cPerson\u003e getSamplePersonSet() {"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        return new HashSet\u003c\u003e(Arrays.asList(getSamplePersons()));"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    public static ReadOnlyEventBook getSampleEventBook() {"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"        EventBook sampleEb \u003d new EventBook();"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"        for (Event sampleEvent : getSampleEvents()) {"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"            sampleEb.addEvent(sampleEvent);"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"        return sampleEb;"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"    public static Event[] getSampleEvents() {"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"        return new Event[] {new Event(new EventName(\"Lunch with John\"),"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"                EventStatus.TODO, new Description(\"At VivoCity\"))};"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"        /* Removed timeStart and timeEnd in v1.2"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        return new Event[] {new Event(new EventName(\"Lunch with John\"), new EventTime(\"12/01/2021 10:10\"),"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"                new EventTime(\"21/01/2021 10:10\"), EventStatus.TODO, new Description(\"At VivoCity\"),"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"                getTagSet(\"Friends\"), getSamplePersonSet())"},{"lineNumber":77,"author":{"gitId":"kieron560"},"content":"        };"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"         */"},{"lineNumber":79,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":9,"kieron560":3,"-":60,"JerardSoh":18}},{"path":"src/main/java/seedu/address/storage/EventBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" * Represents a storage for {@link seedu.address.model.EventBook}."},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"public interface EventBookStorage {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    Path getEventBookFilePath();"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * Returns EventBook data as a {@link ReadOnlyEventBook}."},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * @see #getEventBookFilePath()"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"     * Saves the given {@link ReadOnlyEventBook} to the storage."},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"     * @param eventBook cannot be null."},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook) throws IOException;"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"     * @see #saveEventBook(ReadOnlyEventBook)"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException;"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":45}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.Description;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.EventStatus;"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":" * Jackson-friendly version of {@link Event}."},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"class JsonAdaptedEvent {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    private final String eventName;"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"    private String start;"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    private String end;"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    private final String eventStatus;"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    private final String eventDescription;"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"     * Constructs a {@code JsonAdaptedEvent} with the given event details."},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"name\") String eventName, @JsonProperty(\"start\") String timeStart,"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"                            @JsonProperty(\"end\") String timeEnd, @JsonProperty(\"status\") String eventStatus,"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"                            @JsonProperty(\"description\") String description,"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"                            @JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        this.eventName \u003d eventName;"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"        this.start \u003d timeStart;"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"        this.end \u003d timeEnd;"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"        this.eventStatus \u003d eventStatus;"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        this.eventDescription \u003d description;"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"        if (persons !\u003d null) {"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"            this.persons.addAll(persons);"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"     * Converts a given {@code Event} into this class for Jackson use."},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    public JsonAdaptedEvent(Event source) {"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"        eventName \u003d source.getName().eventName;"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"        // start \u003d changeEventTimeFormat(source.getTimeStart().eventTime.toString());"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        // end \u003d changeEventTimeFormat(source.getTimeEnd().eventTime.toString());"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"        eventStatus \u003d source.getStatus().toString();"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"        eventDescription \u003d source.getDescription().description;"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"        persons.addAll(source.getPersons().stream()"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"                .map(JsonAdaptedPerson::new)"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"    /* Commented out in v1.2"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"    private String changeEventTimeFormat(String eventTime) {"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"        String[] dateAndTime \u003d eventTime.replaceAll(\"[-T]\", \" \").split(\" \");"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        String date \u003d dateAndTime[2] + \"/\" + dateAndTime[1] + \"/\" + dateAndTime[0] + \" \";"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"        String time \u003d dateAndTime[3];"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"        return date + time;"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"    public Event toModelType() throws IllegalValueException {"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"        final List\u003cTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"        final List\u003cPerson\u003e eventPersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"            eventTags.add(tag.toModelType());"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"        for (JsonAdaptedPerson person : persons) {"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"            eventPersons.add(person.toModelType());"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"        if (eventName \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"                    EventName.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"        if (!EventName.isValidName(eventName)) {"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"        final EventName modelName \u003d new EventName(eventName);"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"        /* Commented out in v1.2"},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":"        if (start \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":"                    EventTime.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":"        if (!EventTime.isValidEventTime(start)) {"},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(EventTime.MESSAGE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":"        final EventTime modelTimeStart \u003d new EventTime(start);"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"         */"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"        /* Commented out in v1.2"},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"        if (end \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"                    EventTime.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":"        if (!EventTime.isValidEventTime(end)) {"},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(EventTime.MESSAGE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"JerardSoh"},"content":"        final EventTime modelTimeEnd \u003d new EventTime(end);"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"         */"},{"lineNumber":131,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":132,"author":{"gitId":"JerardSoh"},"content":"        if (eventStatus \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":134,"author":{"gitId":"JerardSoh"},"content":"                    EventStatus.class.getSimpleName()));"},{"lineNumber":135,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":137,"author":{"gitId":"JerardSoh"},"content":"        final EventStatus modelStatus;"},{"lineNumber":138,"author":{"gitId":"JerardSoh"},"content":"        switch(eventStatus) {"},{"lineNumber":139,"author":{"gitId":"JerardSoh"},"content":"        case (\"TODO\"):"},{"lineNumber":140,"author":{"gitId":"JerardSoh"},"content":"            modelStatus \u003d EventStatus.TODO;"},{"lineNumber":141,"author":{"gitId":"JerardSoh"},"content":"            break;"},{"lineNumber":142,"author":{"gitId":"JerardSoh"},"content":"        case (\"IN_PROGRESS\"):"},{"lineNumber":143,"author":{"gitId":"JerardSoh"},"content":"            modelStatus \u003d EventStatus.IN_PROGRESS;"},{"lineNumber":144,"author":{"gitId":"JerardSoh"},"content":"            break;"},{"lineNumber":145,"author":{"gitId":"JerardSoh"},"content":"        case (\"DONE\"):"},{"lineNumber":146,"author":{"gitId":"JerardSoh"},"content":"            modelStatus \u003d EventStatus.DONE;"},{"lineNumber":147,"author":{"gitId":"JerardSoh"},"content":"            break;"},{"lineNumber":148,"author":{"gitId":"JerardSoh"},"content":"        default:"},{"lineNumber":149,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":150,"author":{"gitId":"JerardSoh"},"content":"                    EventStatus.class.getSimpleName()));"},{"lineNumber":151,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":153,"author":{"gitId":"JerardSoh"},"content":"        if (eventDescription \u003d\u003d null) {"},{"lineNumber":154,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":155,"author":{"gitId":"JerardSoh"},"content":"                    Description.class.getSimpleName()));"},{"lineNumber":156,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"JerardSoh"},"content":"        if (!Description.isValidDescription(eventDescription)) {"},{"lineNumber":158,"author":{"gitId":"JerardSoh"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"JerardSoh"},"content":"        final Description modelDescription \u003d new Description(eventDescription);"},{"lineNumber":161,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":162,"author":{"gitId":"JerardSoh"},"content":"        final Set\u003cPerson\u003e modelPersons \u003d new HashSet\u003c\u003e(eventPersons);"},{"lineNumber":163,"author":{"gitId":"JerardSoh"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eventTags);"},{"lineNumber":164,"author":{"gitId":"nhzaci"},"content":"        return new Event(modelName, modelStatus, modelDescription);"},{"lineNumber":165,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":167,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"nhzaci":11,"JerardSoh":156}},{"path":"src/main/java/seedu/address/storage/JsonEventBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":" * A class to access EventBook data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"public class JsonEventBookStorage implements EventBookStorage {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonEventBookStorage.class);"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    public JsonEventBookStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    public Path getEventBookFilePath() {"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        return readEventBook(filePath);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"     * Similar to {@link #readEventBook()}."},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        Optional\u003cJsonSerializableEventBook\u003e jsonEventBook \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"                filePath, JsonSerializableEventBook.class);"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        if (!jsonEventBook.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"            return Optional.of(jsonEventBook.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook) throws IOException {"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"        saveEventBook(eventBook, filePath);"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"     * Similar to {@link #saveEventBook(ReadOnlyEventBook)}."},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"        requireNonNull(eventBook);"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableEventBook(eventBook), filePath);"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":80}},{"path":"src/main/java/seedu/address/storage/JsonSerializableEventBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":" * An Immutable EventBook that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"@JsonRootName(value \u003d \"eventbook\")"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"class JsonSerializableEventBook {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     * Constructs a {@code JsonSerializableEventBook} with the given events."},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    public JsonSerializableEventBook(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        this.events.addAll(events);"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"     * Converts a given {@code ReadOnlyEventBook} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableEventBook}."},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    public JsonSerializableEventBook(ReadOnlyEventBook source) {"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"     * Converts this event book into the model\u0027s {@code EventBook} object."},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    public EventBook toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        EventBook eventBook \u003d new EventBook();"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"            if (eventBook.hasEvent(event)) {"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"            eventBook.addEvent(event);"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"        return eventBook;"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":61}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"public interface Storage extends AddressBookStorage, EventBookStorage, UserPrefsStorage {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    Path getEventBookFilePath();"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException;"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook) throws IOException;"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":31,"JerardSoh":11}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":" * Manages storage of AddressBook and EventBook data in local storage."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    private EventBookStorage eventBookStorage;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, EventBookStorage eventBookStorage,"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        this.eventBookStorage \u003d eventBookStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    public Path getEventBookFilePath() {"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"        return eventBookStorage.getEventBookFilePath();"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException {"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"        return readEventBook(eventBookStorage.getEventBookFilePath());"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"        return eventBookStorage.readEventBook(filePath);"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook) throws IOException {"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"        saveEventBook(eventBook, eventBookStorage.getEventBookFilePath());"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException {"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"        eventBookStorage.saveEventBook(eventBook, filePath);"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":77,"JerardSoh":33}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"kieron560"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w15-4.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":1,"-":101}},{"path":"src/test/data/JsonEventBookStorageTest/invalidAndValidEventAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"  \"events\": [ {"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"Event with valid name field CS2030\","},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"10/01/2020 10:00\","},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"12/12/2021 12:00\","},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"DONE\","},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Object oriented Programming module\""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"  }, {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"Event with invalid start field\","},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"asd10/01/2020 10:00\","},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"12/12/2021 12:00\","},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"DONE\","},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Object oriented Programming module\""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"  }"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"  ]"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":16}},{"path":"src/test/data/JsonEventBookStorageTest/invalidEventAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"  \"events\": [ {"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"Event with invalid name field CS2030@!SZ-\","},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"10/01/2020 10:00\","},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"12/12/2021 12:00\","},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"DONE\","},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Object oriented Programming module\""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"  } ]"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/test/data/JsonEventBookStorageTest/notJsonFormatEventBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"not json format!"}],"authorContributionMap":{"JerardSoh":1}},{"path":"src/test/data/JsonSerializableEventBookTest/duplicateEventAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"  \"events\": [ {"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"CS2030\","},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"10/01/2020 10:00\","},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"12/12/2021 12:00\","},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"DONE\","},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Object oriented Programming module\","},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    \"tagged\": [\"A\"]"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"CS2030\","},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"10/01/2020 10:00\","},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"12/12/2021 12:00\","},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"DONE\","},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Object oriented Programming module\""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"  } ]"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":16}},{"path":"src/test/data/JsonSerializableEventBookTest/invalidEventAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"  \"events\": [ {"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"CS2030\","},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"10/01/2020 10:00\","},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"12/12/2021 12:00\","},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"invalid status!\","},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Object oriented Programming module\""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"  } ]"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/test/data/JsonSerializableEventBookTest/typicalEventsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"  \"_comment\": \"EventBook save file which contains the same Event values as in TypicalEvents#getTypicalEventBook()\","},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"  \"events\" : [ {"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"CS2030\","},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"10/01/2020 10:00\","},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"12/12/2021 12:00\","},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"DONE\","},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Object oriented Programming module\","},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    \"tagged\": [ ],"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    \"persons\" : [ {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"      \"name\" : \"Alex Yeoh\","},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"      \"phone\" : \"87438807\","},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"      \"email\" : \"alexyeoh@example.com\","},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"      \"address\" : \"Blk 30 Geylang Street 29, #06-40\","},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"      \"tagged\" : [ \"friends\" ]"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    }, {"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"      \"name\" : \"Bernice Yu\","},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"      \"phone\" : \"99272758\","},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"      \"email\" : \"berniceyu@example.com\","},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"      \"address\" : \"Blk 30 Lorong 3 Serangoon Gardens, #07-18\","},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"      \"tagged\" : [ \"colleagues\", \"friends\" ]"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    }, {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"      \"name\" : \"Charlotte Oliveiro\","},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"      \"phone\" : \"93210283\","},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"      \"email\" : \"charlotte@example.com\","},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"      \"address\" : \"Blk 11 Ang Mo Kio Street 74, #11-04\","},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"      \"tagged\" : [ \"neighbours\" ]"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    }, {"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"      \"name\" : \"David Li\","},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"      \"phone\" : \"91031282\","},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"      \"email\" : \"lidavid@example.com\","},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"      \"address\" : \"Blk 436 Serangoon Gardens Street 26, #16-43\","},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"      \"tagged\" : [ \"family\" ]"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    }, {"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"      \"name\" : \"Irfan Ibrahim\","},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"      \"phone\" : \"92492021\","},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"      \"email\" : \"irfan@example.com\","},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"      \"address\" : \"Blk 47 Tampines Street 20, #17-35\","},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"      \"tagged\" : [ \"classmates\" ]"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    }, {"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"      \"name\" : \"Roy Balakrishnan\","},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"      \"phone\" : \"92624417\","},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"      \"email\" : \"royb@example.com\","},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"      \"address\" : \"Blk 45 Aljunied Street 85, #11-31\","},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"      \"tagged\" : [ \"colleagues\" ]"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    } ]"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"  }, {"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"CS2107\","},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"10/03/2021 10:00\","},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"30/01/2022 12:00\","},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"IN_PROGRESS\","},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Introduction to Information Security\","},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"    \"tagged\": [ ],"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    \"persons\": [ ]"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"  }, {"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"CS1010S\","},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"01/12/2019 10:00\","},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"02/01/2022 12:00\","},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"DONE\","},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Programming Methodology I\","},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"    \"tagged\": [ ],"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    \"persons\": [ ]"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"  }, {"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"    \"name\": \"Complete Assignment 1\","},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"    \"start\": \"05/10/2021 02:00\","},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"    \"end\": \"10/10/2021 18:00\","},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"    \"status\": \"TODO\","},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"    \"description\": \"Assignment from CS2030\","},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"    \"tagged\": [ ],"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"    \"persons\": [ ]"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"  } ]"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":72}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\": {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\": 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\": 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\": \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\": {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\": 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\": 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\": 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"  \"addressBookFilePath\": \"addressbook.json\","},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"  \"eventBookFilePath\": \"eventbook.json\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":12,"JerardSoh":2}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"  \"addressBookFilePath\" : \"addressbook.json\","},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"  \"eventBookFilePath\" : \"eventbook.json\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":10,"JerardSoh":2}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.storage.JsonEventBookStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        JsonEventBookStorage eventBookStorage \u003d"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"                new JsonEventBookStorage(temporaryFolder.resolve(\"eventBook.json\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"        JsonEventBookStorage eventBookStorage \u003d"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"                new JsonEventBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionEventBook.json\"));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":138,"author":{"gitId":"kieron560"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getEventBook());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":169,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"JerardSoh"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":171,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"JerardSoh"},"content":"    private static class JsonEventBookIoExceptionThrowingStub extends JsonEventBookStorage {"},{"lineNumber":173,"author":{"gitId":"JerardSoh"},"content":"        private JsonEventBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":174,"author":{"gitId":"JerardSoh"},"content":"            super(filePath);"},{"lineNumber":175,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":177,"author":{"gitId":"JerardSoh"},"content":"        @Override"},{"lineNumber":178,"author":{"gitId":"JerardSoh"},"content":"        public void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException {"},{"lineNumber":179,"author":{"gitId":"JerardSoh"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":180,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":1,"-":159,"JerardSoh":22}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"kieron560"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"kieron560"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getEventBook());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":3,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":114,"author":{"gitId":"kieron560"},"content":"        public Path getEventBookFilePath() {"},{"lineNumber":115,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":118,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":119,"author":{"gitId":"kieron560"},"content":"        public void setEventBookFilePath(Path eventBookFilePath) {"},{"lineNumber":120,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":154,"author":{"gitId":"kieron560"},"content":"        public void setEventBook(ReadOnlyEventBook eventBook) {"},{"lineNumber":155,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":158,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":159,"author":{"gitId":"kieron560"},"content":"        public ReadOnlyEventBook getEventBook() {"},{"lineNumber":160,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":163,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"kieron560"},"content":"        public boolean hasEvent(Event event) {"},{"lineNumber":165,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":168,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":169,"author":{"gitId":"kieron560"},"content":"        public void deleteEvent(Event target) {"},{"lineNumber":170,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":173,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":174,"author":{"gitId":"kieron560"},"content":"        public void addEvent(Event event) {"},{"lineNumber":175,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":178,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":179,"author":{"gitId":"kieron560"},"content":"        public void setEvent(Event target, Event editedEvent) {"},{"lineNumber":180,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":193,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":194,"author":{"gitId":"kieron560"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":195,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":198,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":199,"author":{"gitId":"kieron560"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":200,"author":{"gitId":"kieron560"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":224,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":52,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":26,"author":{"gitId":"kieron560"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());"},{"lineNumber":27,"author":{"gitId":"kieron560"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":3,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.EventStatus;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"    public static final String VALID_NAME_CS2030 \u003d \"CS2030\";"},{"lineNumber":31,"author":{"gitId":"kieron560"},"content":"    public static final String VALID_NAME_CS2107 \u003d \"CS2107\";"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"    public static final String VALID_DESCRIPTION_CS2030 \u003d \"Object-oriented Programming\";"},{"lineNumber":33,"author":{"gitId":"kieron560"},"content":"    public static final String VALID_DESCRIPTION_CS2107 \u003d \"Introduction to Information Security\";"},{"lineNumber":34,"author":{"gitId":"kieron560"},"content":"    public static final EventStatus VALID_STATUS_CS2030 \u003d EventStatus.DONE;"},{"lineNumber":35,"author":{"gitId":"kieron560"},"content":"    public static final EventStatus VALID_STATUS_CS2107 \u003d EventStatus.IN_PROGRESS;"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"    public static final String VALID_TIME_START_CS2030 \u003d \"12/12/2021 12:00\";"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    public static final String VALID_TIME_END_CS2030 \u003d \"10/01/2020 10:00\";"},{"lineNumber":38,"author":{"gitId":"kieron560"},"content":"    public static final String VALID_TIME_START_CS2107 \u003d \"10/03/2021 10:00\";"},{"lineNumber":39,"author":{"gitId":"kieron560"},"content":"    public static final String VALID_TIME_END_CS2107 \u003d \"30/01/2022 12:00\";"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":119,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":5,"kieron560":7,"-":128}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"kieron560"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"kieron560"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getEventBook());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"kieron560"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getEventBook());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":4,"-":106}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"kieron560"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"kieron560"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":47,"author":{"gitId":"kieron560"},"content":"                model.getEventBook());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"kieron560"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":69,"author":{"gitId":"kieron560"},"content":"                model.getEventBook());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"kieron560"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":83,"author":{"gitId":"kieron560"},"content":"                model.getEventBook());"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"kieron560"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":100,"author":{"gitId":"kieron560"},"content":"                model.getEventBook());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":10,"-":168}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":28,"author":{"gitId":"kieron560"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());"},{"lineNumber":29,"author":{"gitId":"kieron560"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":3,"-":81}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"kieron560"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalEventBook());"},{"lineNumber":27,"author":{"gitId":"kieron560"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getEventBook());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":3,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/TodoCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"public class TodoCommandTest {"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TodoCommand(null));"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new TodoCommandTest.ModelStubAcceptingEventAdded();"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"        CommandResult commandResult \u003d new TodoCommand(validEvent).execute(modelStub);"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"        assertEquals(String.format(TodoCommand.MESSAGE_SUCCESS, validEvent), commandResult.getFeedbackToUser());"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"        TodoCommand todoCommand \u003d new TodoCommand(validEvent);"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        TodoCommandTest.ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"        assertThrows(CommandException.class, TodoCommand.MESSAGE_DUPLICATE_EVENT, () -\u003e todoCommand.execute(modelStub));"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"        Event cs2030 \u003d new EventBuilder().withName(\"CS2030\").build();"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"        Event cs2100 \u003d new EventBuilder().withName(\"CS2100\").build();"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        TodoCommand todoCS2030Command \u003d new TodoCommand(cs2030);"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"        TodoCommand todoCS2100Command \u003d new TodoCommand(cs2100);"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"        assertTrue(todoCS2030Command.equals(todoCS2030Command));"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"        TodoCommand todoCs2030CommandCopy \u003d new TodoCommand(cs2030);"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"        assertTrue(todoCS2030Command.equals(todoCs2030CommandCopy));"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"        assertFalse(todoCS2030Command.equals(1));"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"        assertFalse(todoCS2030Command.equals(null));"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"        // different person -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"        assertFalse(todoCS2030Command.equals(todoCS2100Command));"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"    private class ModelStub implements Model {"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"        public Path getEventBookFilePath() {"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"        public void setEventBookFilePath(Path eventBookFilePath) {"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"        public void addPerson(Person person) {"},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":134,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"nhzaci"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":136,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":139,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"nhzaci"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":141,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":149,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":154,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"nhzaci"},"content":"        public void setEventBook(ReadOnlyEventBook eventBook) {"},{"lineNumber":156,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":159,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"nhzaci"},"content":"        public ReadOnlyEventBook getEventBook() {"},{"lineNumber":161,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":164,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"nhzaci"},"content":"        public boolean hasEvent(Event event) {"},{"lineNumber":166,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":169,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"nhzaci"},"content":"        public void deleteEvent(Event target) {"},{"lineNumber":171,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":174,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":175,"author":{"gitId":"nhzaci"},"content":"        public void addEvent(Event event) {"},{"lineNumber":176,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":179,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":180,"author":{"gitId":"nhzaci"},"content":"        public void setEvent(Event target, Event editedEvent) {"},{"lineNumber":181,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":184,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"nhzaci"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":186,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":189,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"nhzaci"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":191,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":194,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":195,"author":{"gitId":"nhzaci"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":196,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":199,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":200,"author":{"gitId":"nhzaci"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":201,"author":{"gitId":"nhzaci"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":205,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"nhzaci"},"content":"     * A Model stub that contains a single person."},{"lineNumber":207,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"nhzaci"},"content":"    private class ModelStubWithEvent extends ModelStub {"},{"lineNumber":209,"author":{"gitId":"nhzaci"},"content":"        private final Event event;"},{"lineNumber":210,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":211,"author":{"gitId":"nhzaci"},"content":"        ModelStubWithEvent(Event event) {"},{"lineNumber":212,"author":{"gitId":"nhzaci"},"content":"            requireNonNull(event);"},{"lineNumber":213,"author":{"gitId":"nhzaci"},"content":"            this.event \u003d event;"},{"lineNumber":214,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":216,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":217,"author":{"gitId":"nhzaci"},"content":"        public boolean hasEvent(Event event) {"},{"lineNumber":218,"author":{"gitId":"nhzaci"},"content":"            requireNonNull(event);"},{"lineNumber":219,"author":{"gitId":"nhzaci"},"content":"            return this.event.isSameEvent(event);"},{"lineNumber":220,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":223,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"nhzaci"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":225,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"nhzaci"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {"},{"lineNumber":227,"author":{"gitId":"nhzaci"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":228,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":229,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":230,"author":{"gitId":"nhzaci"},"content":"        public boolean hasEvent(Event event) {"},{"lineNumber":231,"author":{"gitId":"nhzaci"},"content":"            requireNonNull(event);"},{"lineNumber":232,"author":{"gitId":"nhzaci"},"content":"            return eventsAdded.stream().anyMatch(event::isSameEvent);"},{"lineNumber":233,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":235,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":236,"author":{"gitId":"nhzaci"},"content":"        public void addEvent(Event event) {"},{"lineNumber":237,"author":{"gitId":"nhzaci"},"content":"            requireNonNull(event);"},{"lineNumber":238,"author":{"gitId":"nhzaci"},"content":"            eventsAdded.add(event);"},{"lineNumber":239,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":241,"author":{"gitId":"nhzaci"},"content":"        @Override"},{"lineNumber":242,"author":{"gitId":"nhzaci"},"content":"        public ReadOnlyEventBook getEventBook() {"},{"lineNumber":243,"author":{"gitId":"nhzaci"},"content":"            return new EventBook();"},{"lineNumber":244,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":247,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":247}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"     * A stub ReadOnlyAddressBook whose persons and events list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":101,"JerardSoh":2}},{"path":"src/test/java/seedu/address/model/EventBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kieron560"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":3,"author":{"gitId":"kieron560"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kieron560"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"kieron560"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"kieron560"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2107;"},{"lineNumber":7,"author":{"gitId":"kieron560"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_CS2107;"},{"lineNumber":8,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.CS2030;"},{"lineNumber":10,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":11,"author":{"gitId":"kieron560"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"kieron560"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"kieron560"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"kieron560"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":16,"author":{"gitId":"kieron560"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":18,"author":{"gitId":"kieron560"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitId":"kieron560"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":21,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":22,"author":{"gitId":"kieron560"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":23,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":24,"author":{"gitId":"kieron560"},"content":"public class EventBookTest {"},{"lineNumber":25,"author":{"gitId":"kieron560"},"content":"    private final EventBook eventBook \u003d new EventBook();"},{"lineNumber":26,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":27,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"kieron560"},"content":"    public void constructor() {"},{"lineNumber":29,"author":{"gitId":"kieron560"},"content":"        assertEquals(Collections.emptyList(), eventBook.getEventList());"},{"lineNumber":30,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":32,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"kieron560"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"kieron560"},"content":"        assertThrows(NullPointerException.class, () -\u003e eventBook.resetData(null));"},{"lineNumber":35,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":37,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"kieron560"},"content":"    public void resetData_withValidReadOnlyEventBook_replacesData() {"},{"lineNumber":39,"author":{"gitId":"kieron560"},"content":"        EventBook newData \u003d new EventBook();"},{"lineNumber":40,"author":{"gitId":"kieron560"},"content":"        eventBook.resetData(newData);"},{"lineNumber":41,"author":{"gitId":"kieron560"},"content":"        assertEquals(newData, eventBook);"},{"lineNumber":42,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":44,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"kieron560"},"content":"    public void resetData_withDuplicateEvents_throwsDuplicateEventException() {"},{"lineNumber":46,"author":{"gitId":"kieron560"},"content":"        // Two persons with the same identity fields"},{"lineNumber":47,"author":{"gitId":"kieron560"},"content":"        Event editedCS2030 \u003d new EventBuilder(CS2030).withDescription(VALID_DESCRIPTION_CS2107)"},{"lineNumber":48,"author":{"gitId":"kieron560"},"content":"                .withStatus(VALID_STATUS_CS2107).build();"},{"lineNumber":49,"author":{"gitId":"kieron560"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(CS2030, editedCS2030);"},{"lineNumber":50,"author":{"gitId":"kieron560"},"content":"        EventBookStub newData \u003d new EventBookStub(newEvents);"},{"lineNumber":51,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":52,"author":{"gitId":"kieron560"},"content":"        assertThrows(DuplicateEventException.class, () -\u003e eventBook.resetData(newData));"},{"lineNumber":53,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":55,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"kieron560"},"content":"    public void hasEvent_nullEvent_throwsNullPointerException() {"},{"lineNumber":57,"author":{"gitId":"kieron560"},"content":"        assertThrows(NullPointerException.class, () -\u003e eventBook.hasEvent(null));"},{"lineNumber":58,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":60,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"kieron560"},"content":"    public void hasEvent_eventNotInEventBook_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"kieron560"},"content":"        assertFalse(eventBook.hasEvent(CS2030));"},{"lineNumber":63,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":65,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"kieron560"},"content":"    public void hasEvent_eventInEventBook_returnsTrue() {"},{"lineNumber":67,"author":{"gitId":"kieron560"},"content":"        eventBook.addEvent(CS2030);"},{"lineNumber":68,"author":{"gitId":"kieron560"},"content":"        assertTrue(eventBook.hasEvent(CS2030));"},{"lineNumber":69,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":71,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"kieron560"},"content":"    public void hasEvent_eventWithSameIdentityFieldsInEventBook_returnsTrue() {"},{"lineNumber":73,"author":{"gitId":"kieron560"},"content":"        eventBook.addEvent(CS2030);"},{"lineNumber":74,"author":{"gitId":"kieron560"},"content":"        Event editedCS2030 \u003d new EventBuilder(CS2030).withDescription(VALID_DESCRIPTION_CS2107)"},{"lineNumber":75,"author":{"gitId":"kieron560"},"content":"                .withStatus(VALID_STATUS_CS2107).build();"},{"lineNumber":76,"author":{"gitId":"kieron560"},"content":"        assertTrue(eventBook.hasEvent(editedCS2030));"},{"lineNumber":77,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":79,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"kieron560"},"content":"    public void getEventList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":81,"author":{"gitId":"kieron560"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e eventBook.getEventList().remove(0));"},{"lineNumber":82,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":84,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"kieron560"},"content":"     * A stub ReadOnlyEventBook whose persons list can violate interface constraints."},{"lineNumber":86,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"kieron560"},"content":"    private static class EventBookStub implements ReadOnlyEventBook {"},{"lineNumber":88,"author":{"gitId":"kieron560"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"},{"lineNumber":89,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":90,"author":{"gitId":"kieron560"},"content":"        EventBookStub(Collection\u003cEvent\u003e events) {"},{"lineNumber":91,"author":{"gitId":"kieron560"},"content":"            this.events.setAll(events);"},{"lineNumber":92,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":94,"author":{"gitId":"kieron560"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"kieron560"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":96,"author":{"gitId":"kieron560"},"content":"            return events;"},{"lineNumber":97,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":100,"author":{"gitId":"kieron560"},"content":"}"}],"authorContributionMap":{"kieron560":100}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"kieron560"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.CS2030;"},{"lineNumber":10,"author":{"gitId":"kieron560"},"content":"import static seedu.address.testutil.TypicalEvents.CS2107;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitId":"kieron560"},"content":"import seedu.address.testutil.EventBookBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":34,"author":{"gitId":"kieron560"},"content":"        assertEquals(new EventBook(), new EventBook(modelManager.getEventBook()));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":46,"author":{"gitId":"kieron560"},"content":"        userPrefs.setEventBookFilePath(Paths.get(\"event/book/file/path\"));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":54,"author":{"gitId":"kieron560"},"content":"        userPrefs.setEventBookFilePath(Paths.get(\"new/event/book/file/path\"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"kieron560"},"content":"    public void setEventBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"kieron560"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setEventBookFilePath(null));"},{"lineNumber":78,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"kieron560"},"content":"    public void setEventBookFilePath_validPath_setsEventBookFilePath() {"},{"lineNumber":89,"author":{"gitId":"kieron560"},"content":"        Path path \u003d Paths.get(\"event/book/file/path\");"},{"lineNumber":90,"author":{"gitId":"kieron560"},"content":"        modelManager.setEventBookFilePath(path);"},{"lineNumber":91,"author":{"gitId":"kieron560"},"content":"        assertEquals(path, modelManager.getEventBookFilePath());"},{"lineNumber":92,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"kieron560"},"content":"    public void hasEvent_nullEvent_throwsNullPointerException() {"},{"lineNumber":101,"author":{"gitId":"kieron560"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEvent(null));"},{"lineNumber":102,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"kieron560"},"content":"    public void hasPerson_eventNotInEventBook_returnsFalse() {"},{"lineNumber":111,"author":{"gitId":"kieron560"},"content":"        assertFalse(modelManager.hasEvent(CS2030));"},{"lineNumber":112,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"kieron560"},"content":"    public void hasEvent_eventInEventBook_returnsTrue() {"},{"lineNumber":122,"author":{"gitId":"kieron560"},"content":"        modelManager.addEvent(CS2030);"},{"lineNumber":123,"author":{"gitId":"kieron560"},"content":"        assertTrue(modelManager.hasEvent(CS2030));"},{"lineNumber":124,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"kieron560"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"kieron560"},"content":"    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":133,"author":{"gitId":"kieron560"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEventList().remove(0));"},{"lineNumber":134,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":140,"author":{"gitId":"kieron560"},"content":"        EventBook eventBook \u003d new EventBookBuilder().withEvent(CS2030).withEvent(CS2107).build();"},{"lineNumber":141,"author":{"gitId":"kieron560"},"content":"        EventBook differentEventBook \u003d new EventBook();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":145,"author":{"gitId":"kieron560"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs, eventBook);"},{"lineNumber":146,"author":{"gitId":"kieron560"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, eventBook);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":159,"author":{"gitId":"kieron560"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, eventBook)));"},{"lineNumber":160,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":161,"author":{"gitId":"kieron560"},"content":"        // different eventBook -\u003e returns false"},{"lineNumber":162,"author":{"gitId":"kieron560"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, differentEventBook)));"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"kieron560"},"content":"        // different filteredPersonList -\u003e returns false"},{"lineNumber":165,"author":{"gitId":"kieron560"},"content":"        String[] personKeywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":166,"author":{"gitId":"kieron560"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(personKeywords)));"},{"lineNumber":167,"author":{"gitId":"kieron560"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, eventBook)));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"kieron560"},"content":"        /* Will rewrite new class for this -- EventNamePredicate"},{"lineNumber":173,"author":{"gitId":"kieron560"},"content":"        // different filteredEventList -\u003e returns false"},{"lineNumber":174,"author":{"gitId":"kieron560"},"content":"        String[] eventKeywords \u003d CS2030.getName().eventName.split(\"\\\\s+\");"},{"lineNumber":175,"author":{"gitId":"kieron560"},"content":"        modelManager.updateFilteredEventList(new NameContainsKeywordsPredicate(Arrays.asList(eventKeywords)));"},{"lineNumber":176,"author":{"gitId":"kieron560"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, eventBook)));"},{"lineNumber":177,"author":{"gitId":"kieron560"},"content":"         */"},{"lineNumber":178,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":179,"author":{"gitId":"kieron560"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":180,"author":{"gitId":"kieron560"},"content":"        modelManager.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":181,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":185,"author":{"gitId":"kieron560"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, eventBook)));"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kieron560":63,"-":124}},{"path":"src/test/java/seedu/address/model/event/EventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2030;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.testutil.TypicalEvents.CS1010S;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import static seedu.address.testutil.TypicalEvents.CS2030;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"public class EventTest {"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"    public void isSameEvent() {"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"        // same object -\u003e returns true"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"        assertTrue(CS2030.isSameEvent(CS2030));"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"        // null -\u003e returns false"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS1010S.isSameEvent(null));"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"        // same name, all other attrs different"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        // -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"        Event editedCS1010S \u003d new EventBuilder(CS1010S).withStatus(EventStatus.TODO)"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"                .withDescription(\"This is not the actual description\").build();"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"        assertTrue(CS1010S.isSameEvent(editedCS1010S));"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"        // different name, all other attrs same -\u003e false"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"        editedCS1010S \u003d new EventBuilder(CS1010S).withName(\"CS2030\").build();"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS1010S.isSameEvent(editedCS1010S));"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"        // name differs in case, all other attrs same -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"        Event editedCS2030 \u003d new EventBuilder(CS2030)"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"                .withName(VALID_NAME_CS2030.toLowerCase()).build();"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS2030.isSameEvent(editedCS2030));"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        // name has trailing spaces, all other attrs same -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_CS2030 + \" \";"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"        editedCS2030 \u003d new EventBuilder(CS2030)"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"                .withName(nameWithTrailingSpaces).build();"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS2030.isSameEvent(editedCS2030));"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"    public void equals() {"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"        Event cs2030Copy \u003d new EventBuilder(CS2030).build();"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"        assertTrue(CS2030.equals(cs2030Copy));"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"        assertTrue(CS2030.equals(CS2030));"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS2030.equals(null));"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"        // different type -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS2030.equals(5));"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        // different event -\u003e returns false"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS2030.equals(CS1010S));"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        // different name -\u003e returns false"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"        Event editedCS2030 \u003d new EventBuilder(CS2030).withName(\"abcabc\").build();"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS2030.equals(editedCS2030));"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"        // different timeStart -\u003e return false"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"        /* Commented out v1.2"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"        editedCS2030 \u003d new EventBuilder(CS2030).withTimeEnd(\"10/06/2043 09:00\").build();"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS2030.equals(editedCS2030));"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"         */"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"        // different timeEnd -\u003e return false"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"        /* Commented out v1.2"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"        editedCS2030 \u003d new EventBuilder(CS2030).withTimeStart(\"10/06/2043 09:00\").build();"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"        assertFalse(CS2030.equals(editedCS2030));"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"         */"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":79}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedEventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.storage.JsonAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.TypicalEvents.CS2030;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.Description;"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.event.EventStatus;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"public class JsonAdaptedEventTest {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    private static final String INVALID_TIME \u003d \"651234\";"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    private static final String INVALID_STATUS \u003d \"ASD\";"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    private static final String INVALID_DESCRIPTION \u003d \"@A!example.com\";"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    private static final String INVALID_PERSON_NAME \u003d \"R@chel\";"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    private static final String VALID_NAME \u003d CS2030.getName().toString();"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"    private static final String VALID_TIME_START \u003d \"01/12/2019 10:00\";"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"    private static final String VALID_TIME_END \u003d \"02/01/2022 12:00\";"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"    // private static final String VALID_TIME_START \u003d changeEventTimeFormat(CS2030.getTimeStart().toString());"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"    // private static final String VALID_TIME_END \u003d changeEventTimeFormat(CS2030.getTimeEnd().toString());"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    private static final String VALID_STATUS \u003d CS2030.getStatus().toString();"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    private static final String VALID_DESCRIPTION \u003d CS2030.getDescription().toString();"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CS2030.getTags().stream()"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"    private static final List\u003cJsonAdaptedPerson\u003e VALID_PERSONS \u003d CS2030.getPersons().stream()"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"            .map(JsonAdaptedPerson::new)"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"            .collect(Collectors.toList());"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"    /*"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"    private static String changeEventTimeFormat(String eventTime) {"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        String[] dateAndTime \u003d eventTime.replaceAll(\"[-T]\", \" \").split(\" \");"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        String date \u003d dateAndTime[2] + \"/\" + dateAndTime[1] + \"/\" + dateAndTime[0] + \" \";"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        String time \u003d dateAndTime[3];"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"        return date + time;"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_validEventDetails_returnsEvent() throws Exception {"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(CS2030);"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(CS2030, event.toModelType());"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(INVALID_NAME, VALID_TIME_START,"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"                        VALID_TIME_END, VALID_STATUS, VALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d EventName.MESSAGE_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(null, VALID_TIME_START, VALID_TIME_END,"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"                VALID_STATUS, VALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName());"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"    /*"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_invalidTimeStart_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, INVALID_TIME,"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"                        VALID_TIME_END, VALID_STATUS, VALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d EventTime.MESSAGE_CONSTRAINTS;"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"    /*"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_nullTimeStart_throwsIllegalValueException() {"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, null,"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"                VALID_TIME_END, VALID_STATUS, VALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventTime.class.getSimpleName());"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"    /*"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_invalidTimeEnd_throwsIllegalValueException() {"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, VALID_TIME_START,"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"                INVALID_TIME, VALID_STATUS, VALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d EventTime.MESSAGE_CONSTRAINTS;"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"    /*"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_nullTimeEnd_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, VALID_TIME_START,"},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":"                null, VALID_STATUS, VALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventTime.class.getSimpleName());"},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, VALID_TIME_START,"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":"                VALID_TIME_END, INVALID_STATUS, VALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, event::toModelType);"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, VALID_TIME_START,"},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":"                VALID_TIME_END, null, VALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":129,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventStatus.class.getSimpleName());"},{"lineNumber":130,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":131,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":133,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_invalidDescription_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, VALID_TIME_START,"},{"lineNumber":136,"author":{"gitId":"JerardSoh"},"content":"                VALID_TIME_END, VALID_STATUS, INVALID_DESCRIPTION, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":137,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"},{"lineNumber":138,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":139,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":141,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {"},{"lineNumber":143,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, VALID_TIME_START,"},{"lineNumber":144,"author":{"gitId":"JerardSoh"},"content":"                VALID_TIME_END, VALID_STATUS, null, VALID_TAGS, VALID_PERSONS);"},{"lineNumber":145,"author":{"gitId":"JerardSoh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"},{"lineNumber":146,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":147,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":149,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":151,"author":{"gitId":"JerardSoh"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":152,"author":{"gitId":"JerardSoh"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":153,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, VALID_TIME_START,"},{"lineNumber":154,"author":{"gitId":"JerardSoh"},"content":"                VALID_TIME_END, VALID_STATUS, INVALID_DESCRIPTION, invalidTags, VALID_PERSONS);"},{"lineNumber":155,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, event::toModelType);"},{"lineNumber":156,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":158,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_invalidPersons_throwsIllegalValueException() {"},{"lineNumber":160,"author":{"gitId":"JerardSoh"},"content":"        List\u003cJsonAdaptedPerson\u003e invalidPersons \u003d new ArrayList\u003c\u003e(VALID_PERSONS);"},{"lineNumber":161,"author":{"gitId":"JerardSoh"},"content":"        invalidPersons.add(new JsonAdaptedPerson(INVALID_PERSON_NAME, VALID_PHONE,"},{"lineNumber":162,"author":{"gitId":"JerardSoh"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS));"},{"lineNumber":163,"author":{"gitId":"JerardSoh"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_NAME, VALID_TIME_START,"},{"lineNumber":164,"author":{"gitId":"JerardSoh"},"content":"                VALID_TIME_END, VALID_STATUS, INVALID_DESCRIPTION, VALID_TAGS, invalidPersons);"},{"lineNumber":165,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, event::toModelType);"},{"lineNumber":166,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":168,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"nhzaci":14,"JerardSoh":154}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"        // Modify data by adding and removing person, overwrite exiting file, and read back"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"        // Save and read person without specifying file path"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":107,"JerardSoh":3}},{"path":"src/test/java/seedu/address/storage/JsonEventBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.TypicalEvents.CS2030;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.TypicalEvents.CS2100;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.TypicalEvents.CS3230;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"public class JsonEventBookStorageTest {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonEventBookStorageTest\");"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    public void readEventBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e readEventBook(null));"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    private java.util.Optional\u003cReadOnlyEventBook\u003e readEventBook(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        return new JsonEventBookStorage(Paths.get(filePath)).readEventBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"        assertFalse(readEventBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEventBook(\"notJsonFormatEventBook.json\"));"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    public void readEventBook_invalidEventAddressBook_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEventBook(\"invalidEventAddressBook.json\"));"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"    /*"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    public void readAddressBook_invalidAndValidEventAddressBook_throwDataConversionException() {"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEventBook(\"invalidAndValidEventAddressBook.json\"));"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"    public void readAndSaveEventBook_allInOrder_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"        Path filePath \u003d testFolder.resolve(\"TempEventBook.json\");"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"        EventBook original \u003d getTypicalEventBook();"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"        JsonEventBookStorage jsonEventBookStorage \u003d new JsonEventBookStorage(filePath);"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"        // Save in new file and read back"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"        jsonEventBookStorage.saveEventBook(original, filePath);"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"        ReadOnlyEventBook readBack \u003d jsonEventBookStorage.readEventBook(filePath).get();"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(original, new EventBook(readBack));"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"        // Modify data by adding and removing person, overwrite exiting file, and read back"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        original.addEvent(CS3230);"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"        original.removeEvent(CS2030);"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"        jsonEventBookStorage.saveEventBook(original, filePath);"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"        readBack \u003d jsonEventBookStorage.readEventBook(filePath).get();"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(original, new EventBook(readBack));"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"        // Save and read person without specifying file path"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"        original.addEvent(CS2100);"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"        jsonEventBookStorage.saveEventBook(original); // file path not specified"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"        readBack \u003d jsonEventBookStorage.readEventBook().get(); // file path not specified"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(original, new EventBook(readBack));"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"    public void saveEventBook_nullEventBook_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveEventBook(null, \"SomeFile.json\"));"},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"     * Saves {@code eventBook} at the specified {@code filePath}."},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"    private void saveEventBook(ReadOnlyEventBook eventBook, String filePath) {"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"            new JsonEventBookStorage(Paths.get(filePath))"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"                    .saveEventBook(eventBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException ioe) {"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"    public void saveEventBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveEventBook(new EventBook(), null));"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"nhzaci":2,"JerardSoh":109}},{"path":"src/test/java/seedu/address/storage/JsonSerializableEventBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.testutil.TypicalEvents;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"public class JsonSerializableEventBookTest {"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableEventBookTest\");"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsAddressBook.json\");"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventAddressBook.json\");"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventAddressBook.json\");"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_typicalEventsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        JsonSerializableEventBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EVENTS_FILE,"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"                JsonSerializableEventBook.class).get();"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        EventBook eventBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        EventBook typicalEventsAddressBook \u003d TypicalEvents.getTypicalEventBook();"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(eventBookFromFile, typicalEventsAddressBook);"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        JsonSerializableEventBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EVENT_FILE,"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"                JsonSerializableEventBook.class).get();"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"        JsonSerializableEventBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EVENT_FILE,"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"                JsonSerializableEventBook.class).get();"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableEventBook.MESSAGE_DUPLICATE_EVENT,"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":47}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        userPrefs.setEventBookFilePath(Paths.get(\"eventbook.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":123,"JerardSoh":1}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"import seedu.address.model.ReadOnlyEventBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        JsonEventBookStorage eventBookStorage \u003d new JsonEventBookStorage(getTempFilePath(\"eb\"));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":45,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":46,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":58,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":59,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":60,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"    public void eventBookReadSave() throws Exception {"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"        /*"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"         * {@link JsonEventBookStorage} class."},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonEventBookStorageTest} class."},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"         */"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        EventBook original \u003d getTypicalEventBook();"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"        storageManager.saveEventBook(original);"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"        ReadOnlyEventBook retrieved \u003d storageManager.readEventBook().get();"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(original, new EventBook(retrieved));"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"    public void getEventBookFilePath() {"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"        assertNotNull(storageManager.getEventBookFilePath());"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":67,"JerardSoh":23}},{"path":"src/test/java/seedu/address/testutil/EventBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kieron560"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":3,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":4,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":6,"author":{"gitId":"kieron560"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kieron560"},"content":" * A utility class to help with building EventBook objects."},{"lineNumber":8,"author":{"gitId":"kieron560"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"kieron560"},"content":" *     {@code EventBook ab \u003d new EventBookBuilder().withEvent(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"kieron560"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kieron560"},"content":"public class EventBookBuilder {"},{"lineNumber":12,"author":{"gitId":"kieron560"},"content":"    private EventBook eventBook;"},{"lineNumber":13,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":14,"author":{"gitId":"kieron560"},"content":"    public EventBookBuilder() {"},{"lineNumber":15,"author":{"gitId":"kieron560"},"content":"        eventBook \u003d new EventBook();"},{"lineNumber":16,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":18,"author":{"gitId":"kieron560"},"content":"    public EventBookBuilder(EventBook eventBook) {"},{"lineNumber":19,"author":{"gitId":"kieron560"},"content":"        this.eventBook \u003d eventBook;"},{"lineNumber":20,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":22,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"kieron560"},"content":"     * Adds a new {@code Event} to the {@code EventBook} that we are building."},{"lineNumber":24,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kieron560"},"content":"    public EventBookBuilder withEvent(Event event) {"},{"lineNumber":26,"author":{"gitId":"kieron560"},"content":"        eventBook.addEvent(event);"},{"lineNumber":27,"author":{"gitId":"kieron560"},"content":"        return this;"},{"lineNumber":28,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":30,"author":{"gitId":"kieron560"},"content":"    public EventBook build() {"},{"lineNumber":31,"author":{"gitId":"kieron560"},"content":"        return eventBook;"},{"lineNumber":32,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kieron560"},"content":"}"}],"authorContributionMap":{"kieron560":33}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.Description;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.EventName;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.EventStatus;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.EventTime;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":" * A utility class to help with building Event objects"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":" */"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"public class EventBuilder {"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    public static final String DEFAULT_NAME \u003d \"CS2103T\";"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    public static final String DEFAULT_TIME_START \u003d \"20/12/2022 18:00\";"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    public static final String DEFAULT_TIME_END \u003d \"01/10/2023 19:00\";"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    public static final EventStatus DEFAULT_STATUS \u003d EventStatus.TODO;"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"This is the first software engineering module in NUS\";"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    // Identity Fields"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    private EventName eventName;"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"    private EventTime timeStart;"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    private EventTime timeEnd;"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"    private EventStatus status;"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"    // Data Fields"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"    private Description description;"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"    private Set\u003cPerson\u003e persons;"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"     * Creates a {@code EventBuilder} with the default details."},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder() {"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"        eventName \u003d new EventName(DEFAULT_NAME);"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"        timeStart \u003d new EventTime(DEFAULT_TIME_START);"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"        timeEnd \u003d new EventTime(DEFAULT_TIME_END);"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        status \u003d DEFAULT_STATUS;"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"        persons \u003d new HashSet\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}."},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder(Event eventToCopy) {"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"        eventName \u003d eventToCopy.getName();"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"        // timeStart \u003d eventToCopy.getTimeStart(); // Commented out in v1.2"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"        // timeEnd \u003d eventToCopy.getTimeEnd(); // Commented out in v1.2"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"        status \u003d eventToCopy.getStatus();"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"        description \u003d eventToCopy.getDescription();"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        persons \u003d new HashSet\u003c\u003e(eventToCopy.getPersons());"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"     * Sets the {@code EventName} of the {@code Event} that we are building."},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder withName(String name) {"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"        this.eventName \u003d new EventName(name);"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"        return this;"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"    /* Commented out v1.2"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder withTimeStart(String timeStartString) {"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"        this.timeStart \u003d new EventTime(timeStartString);"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"        return this;"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"    /* Commented out v1.2"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder withTimeEnd(String endTimeString) {"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"        this.timeEnd \u003d new EventTime(endTimeString);"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"     * Sets the {@code EventStatus} of the {@code Event} that we are building."},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder withStatus(EventStatus status) {"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"        this.status \u003d status;"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"        return this;"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"     * Sets the {@code Description} of the {@code Event} that we are building."},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder withDescription(String description) {"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"        return this;"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"     * Takes sample set {@code Set\u003cPerson\u003e} and set it to the {@code Event} that we are building."},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder withTestPersons() {"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"        this.persons \u003d SampleDataUtil.getSamplePersonSet();"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"        return this;"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"    public EventBuilder withTags(String ... tags) {"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"        return this;"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"     * Builds the event with existing EventBuilder attributes"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"     * @return Event built with EventBuilder attributes"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"    public Event build() {"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"        return new Event(eventName, status, description);"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":125}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":7,"author":{"gitId":"kieron560"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import seedu.address.model.event.EventStatus;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests."},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"public class TypicalEvents {"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"    public static final Event CS2030 \u003d new EventBuilder().withName(\"CS2030\")"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"            .withDescription(\"Object oriented Programming module\")"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"            .withStatus(EventStatus.DONE)"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"            .withTestPersons().build();"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    public static final Event CS2107 \u003d new EventBuilder().withName(\"CS2107\")"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"            .withDescription(\"Introduction to Information Security\")"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"            .withStatus(EventStatus.IN_PROGRESS).build();"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    public static final Event CS1010S \u003d new EventBuilder().withName(\"CS1010S\")"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"            .withDescription(\"Programming Methodology I\")"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"            .withStatus(EventStatus.DONE).build();"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    public static final Event COMPLETE_ASSIGNMENT \u003d new EventBuilder()"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"            .withName(\"Complete Assignment 1\")"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"            .withDescription(\"Assignment from CS2030\")"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"            .withStatus(EventStatus.TODO).build();"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    //Manually added"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    public static final Event CS3230 \u003d new EventBuilder().withName(\"CS3230\")"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"            .withDescription(\"Design and Analysis of Algorithms\")"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"            .withStatus(EventStatus.IN_PROGRESS).build();"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"    public static final Event CS2100 \u003d new EventBuilder().withName(\"CS2100\")"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"            .withDescription(\"Computer Organisation\")"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"            .withStatus(EventStatus.DONE).build();"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"    TypicalEvents() {} // prevents instantiation"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":42,"author":{"gitId":"kieron560"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"kieron560"},"content":"     * Returns an {@code EventBook} with all the typical events."},{"lineNumber":44,"author":{"gitId":"kieron560"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"kieron560"},"content":"    public static EventBook getTypicalEventBook() {"},{"lineNumber":46,"author":{"gitId":"kieron560"},"content":"        EventBook eb \u003d new EventBook();"},{"lineNumber":47,"author":{"gitId":"kieron560"},"content":"        for (Event event : getTypicalEvents()) {"},{"lineNumber":48,"author":{"gitId":"kieron560"},"content":"            eb.addEvent(event);"},{"lineNumber":49,"author":{"gitId":"kieron560"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"kieron560"},"content":"        return eb;"},{"lineNumber":51,"author":{"gitId":"kieron560"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"kieron560"},"content":""},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CS2030, CS2107,"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"                CS1010S, COMPLETE_ASSIGNMENT));"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":36,"kieron560":12,"JerardSoh":9}}]
