[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"chenzaza"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T11-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T11-3/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"chenzaza"},"content":"* This is **TutorsPet**.\u003cbr\u003e"},{"lineNumber":6,"author":{"gitId":"chenzaza"},"content":"  * Target user: Tuition teachers \u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"  * Usage: Manage and categorise contacts of students and their guardians"},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"  * Goal: To improve efficiency and reduce confusion when tutors are tracking students\u0027 information"},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"  "},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"* The project evolves the `AddressBook-Level3` (`AB3` for short) into a more powerful or more optimized contact management app."},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"  * `AB3` is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."},{"lineNumber":12,"author":{"gitId":"chenzaza"},"content":"  * `AB3` comes with a **reasonable level of user and developer documentation**."},{"lineNumber":13,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":14,"author":{"gitId":"chenzaza"},"content":"* It is named `TutorsPet` because it aims to facilitate a tutor\u0027s management of students\u0027 information."},{"lineNumber":15,"author":{"gitId":"chenzaza"},"content":"* For the detailed documentation of this project, see the **[TutorsPet Product Website](https://ay2021s2-cs2103t-t11-3.github.io/tp/)**."},{"lineNumber":16,"author":{"gitId":"chenzaza"},"content":"* This project is based on `AB3` project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"chenzaza":13,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"sylviaokt"},"content":"# About Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"sylviaokt"},"content":"## TutorsPet Project team"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"sylviaokt"},"content":"### Andrea Tan Wan Ling"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"sylviaokt"},"content":"\u003cimg src\u003d\"images/andrea-twl.png\" width\u003d\"200px\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"sylviaokt"},"content":"[[github](http://github.com/andrea-twl)]"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"sylviaokt"},"content":"* Role: Documentation, Testing"},{"lineNumber":14,"author":{"gitId":"sylviaokt"},"content":"* Responsibilities: Ensures quality of various project documents"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"chenzaza"},"content":"### Gu Yichen"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"sylviaokt"},"content":"\u003cimg src\u003d\"images/chenzaza.png\" width\u003d\"200px\"\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"sylviaokt"},"content":"[[github](http://github.com/chenzaza)]"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"sylviaokt"},"content":"* Role: Code quality, Testing"},{"lineNumber":23,"author":{"gitId":"sylviaokt"},"content":"* Responsibilities: Ensures adherence to coding standards"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"sylviaokt"},"content":"### Han Zong Yu"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"sylviaokt"},"content":"\u003cimg src\u003d\"images/internityz.png\" width\u003d\"200px\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"sylviaokt"},"content":"[[github](https://github.com/internityz)]"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"sylviaokt"},"content":"* Role: Integration, Testing"},{"lineNumber":32,"author":{"gitId":"sylviaokt"},"content":"* Responsibilities: Versioning of code, maintaining the code repository, integrating various parts of the software to create a whole."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"sylviaokt"},"content":"### Kang Min Hui, Mabel"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"sylviaokt"},"content":"\u003cimg src\u003d\"images/mabel-kang.png\" width\u003d\"200px\"\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"sylviaokt"},"content":"[[github](http://github.com/mabel-kang)]"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"sylviaokt"},"content":"* Role: Scheduling and tracking, Testing"},{"lineNumber":42,"author":{"gitId":"sylviaokt"},"content":"* Responsibilities:  Defining, assigning, and tracking project tasks"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"sylviaokt"},"content":"### Sylvia Ong Kai Ting"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"sylviaokt"},"content":"\u003cimg src\u003d\"images/sylviaokt.png\" width\u003d\"200px\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"sylviaokt"},"content":"[[github](http://github.com/sylviaokt)]"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"sylviaokt"},"content":"* Role: Deliverables and deadlines, Testing"},{"lineNumber":51,"author":{"gitId":"sylviaokt"},"content":"* Responsibilities: Ensure project deliverables are done on time and in the right format"}],"authorContributionMap":{"chenzaza":1,"-":24,"sylviaokt":26}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"andrea-twl"},"content":"**Target user profile**: Private tuition teachers"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"andrea-twl"},"content":"* has a need to manage a significant number of student contacts"},{"lineNumber":240,"author":{"gitId":"andrea-twl"},"content":"* has to plan lessons based on each student\u0027s profile"},{"lineNumber":241,"author":{"gitId":"andrea-twl"},"content":"* is comfortable carrying a laptop around"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"andrea-twl"},"content":"**Value proposition**: manage many contacts with a lot of different details"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":251,"author":{"gitId":"andrea-twl"},"content":"| -------- | ------------------------------------------ | ------------------------------- | ---------------------------------------------------------------------- |"},{"lineNumber":252,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions          | refer to instructions when I forget how to use the App                 |"},{"lineNumber":253,"author":{"gitId":"andrea-twl"},"content":"| `* * *`  | user                                       | add new student\u0027s contact       | I can store information on a student                                   |                                   |"},{"lineNumber":254,"author":{"gitId":"andrea-twl"},"content":"| `* * *`  | user                                       | delete a student\u0027s contact      | remove entries that I no longer need and reduce cluttering             |                     |"},{"lineNumber":255,"author":{"gitId":"andrea-twl"},"content":"| `* * *`  | user                                       | edit a student\u0027s contact        | I can update the contact book when a student’s details has changed.    |"},{"lineNumber":256,"author":{"gitId":"andrea-twl"},"content":"| `* *`    | user                                       | find a student by name          | locate details of students without having to go through the entire list|"},{"lineNumber":257,"author":{"gitId":"andrea-twl"},"content":"| `* *`    | user                                       | find a student by school        | plan my lesson/schedules according to their school’s curriculum        |"},{"lineNumber":258,"author":{"gitId":"andrea-twl"},"content":"| `* *`    | user                                       | sort students by lesson days    | I can see my schedule for the week                                     |"},{"lineNumber":259,"author":{"gitId":"andrea-twl"},"content":"| `* *`    | user                                       | easily access guardians’ contact| I can quickly reach them in case of any emergencies or sudden changes  |"},{"lineNumber":260,"author":{"gitId":"andrea-twl"},"content":"| `*`      | expert user                                | add customized tags to contacts | I will be able to access each group of students more easily"},{"lineNumber":261,"author":{"gitId":"andrea-twl"},"content":"| `*`      | expert user                                | attach remarks to contacts      | So I remember details that might not be covered in the original program|"},{"lineNumber":262,"author":{"gitId":"andrea-twl"},"content":"| `*`      | user                                       | hide private contact details    | minimize chance of someone else seeing them by accident                |"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"internityz"},"content":"(For all use cases below, the **System** is the `TutorPets` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"internityz"},"content":"**Use case: Add a new contact**"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"internityz"},"content":"1.  User keys in the contact to be added"},{"lineNumber":275,"author":{"gitId":"internityz"},"content":"2.  TutorPets shows the added contact into the list"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"internityz"},"content":"* 1a. The given details is in an incorrect format."},{"lineNumber":282,"author":{"gitId":"internityz"},"content":""},{"lineNumber":283,"author":{"gitId":"internityz"},"content":"    * 1a1. TutorPets shows an error message."},{"lineNumber":284,"author":{"gitId":"internityz"},"content":""},{"lineNumber":285,"author":{"gitId":"internityz"},"content":"      Use case ends."},{"lineNumber":286,"author":{"gitId":"internityz"},"content":""},{"lineNumber":287,"author":{"gitId":"internityz"},"content":"**Use case: Clears all entries contact**"},{"lineNumber":288,"author":{"gitId":"internityz"},"content":""},{"lineNumber":289,"author":{"gitId":"internityz"},"content":"**MSS**"},{"lineNumber":290,"author":{"gitId":"internityz"},"content":""},{"lineNumber":291,"author":{"gitId":"internityz"},"content":"1.  User enters clears all entries contact command"},{"lineNumber":292,"author":{"gitId":"internityz"},"content":"2.  TutorPets clears all the contact in list"},{"lineNumber":293,"author":{"gitId":"internityz"},"content":""},{"lineNumber":294,"author":{"gitId":"internityz"},"content":"    Use case ends."},{"lineNumber":295,"author":{"gitId":"internityz"},"content":""},{"lineNumber":296,"author":{"gitId":"internityz"},"content":"**Extensions**"},{"lineNumber":297,"author":{"gitId":"internityz"},"content":""},{"lineNumber":298,"author":{"gitId":"internityz"},"content":"* 1a. The given details is in an incorrect format."},{"lineNumber":299,"author":{"gitId":"internityz"},"content":""},{"lineNumber":300,"author":{"gitId":"internityz"},"content":"    * 1a1. TutorPets shows an error message."},{"lineNumber":301,"author":{"gitId":"internityz"},"content":""},{"lineNumber":302,"author":{"gitId":"internityz"},"content":"      Use case ends."},{"lineNumber":303,"author":{"gitId":"internityz"},"content":""},{"lineNumber":304,"author":{"gitId":"internityz"},"content":"**Use case: Delete a student contact**"},{"lineNumber":305,"author":{"gitId":"internityz"},"content":""},{"lineNumber":306,"author":{"gitId":"internityz"},"content":"**MSS**"},{"lineNumber":307,"author":{"gitId":"internityz"},"content":""},{"lineNumber":308,"author":{"gitId":"internityz"},"content":"1.  User requests to list contacts"},{"lineNumber":309,"author":{"gitId":"internityz"},"content":"2.  TutorPets shows a list of students’ contact"},{"lineNumber":310,"author":{"gitId":"internityz"},"content":"3.  User requests to delete a specific contact from the list"},{"lineNumber":311,"author":{"gitId":"internityz"},"content":"4.  TutorPets deletes the person"},{"lineNumber":312,"author":{"gitId":"internityz"},"content":""},{"lineNumber":313,"author":{"gitId":"internityz"},"content":"    Use case ends."},{"lineNumber":314,"author":{"gitId":"internityz"},"content":""},{"lineNumber":315,"author":{"gitId":"internityz"},"content":"**Extensions**"},{"lineNumber":316,"author":{"gitId":"internityz"},"content":""},{"lineNumber":317,"author":{"gitId":"internityz"},"content":"* 2a. The list is empty."},{"lineNumber":318,"author":{"gitId":"internityz"},"content":""},{"lineNumber":319,"author":{"gitId":"internityz"},"content":"  Use case ends."},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"internityz"},"content":"* 3a. The given index is invalid."},{"lineNumber":322,"author":{"gitId":"internityz"},"content":""},{"lineNumber":323,"author":{"gitId":"internityz"},"content":"    * 3a1. TutorPets shows an error message."},{"lineNumber":324,"author":{"gitId":"internityz"},"content":""},{"lineNumber":325,"author":{"gitId":"internityz"},"content":"      Use case resumes at step 2."},{"lineNumber":326,"author":{"gitId":"internityz"},"content":""},{"lineNumber":327,"author":{"gitId":"internityz"},"content":"**Use case: Editing an existing contact**"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"internityz"},"content":"1.  User requests to list contacts"},{"lineNumber":332,"author":{"gitId":"internityz"},"content":"2.  TutorPets shows a list of students’ contact"},{"lineNumber":333,"author":{"gitId":"internityz"},"content":"3.  User requests to edit a specific contact from the list"},{"lineNumber":334,"author":{"gitId":"internityz"},"content":"4.  TutorPets edits the selected contact"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"internityz"},"content":"* 1a. The given details is in an incorrect format."},{"lineNumber":341,"author":{"gitId":"internityz"},"content":""},{"lineNumber":342,"author":{"gitId":"internityz"},"content":"    * 1a1. TutorPets shows an error message."},{"lineNumber":343,"author":{"gitId":"internityz"},"content":""},{"lineNumber":344,"author":{"gitId":"internityz"},"content":"      Use case ends."},{"lineNumber":345,"author":{"gitId":"internityz"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"internityz"},"content":"    * 3a1. TutorPets shows an error message."},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"internityz"},"content":"**Use case: Exit TutorPets**"},{"lineNumber":357,"author":{"gitId":"internityz"},"content":""},{"lineNumber":358,"author":{"gitId":"internityz"},"content":"**MSS**"},{"lineNumber":359,"author":{"gitId":"internityz"},"content":""},{"lineNumber":360,"author":{"gitId":"internityz"},"content":"1.  User enters exit into command prompt"},{"lineNumber":361,"author":{"gitId":"internityz"},"content":"2.  TutorPets saves the current contact in the list and exits."},{"lineNumber":362,"author":{"gitId":"internityz"},"content":""},{"lineNumber":363,"author":{"gitId":"internityz"},"content":"    Use case ends."},{"lineNumber":364,"author":{"gitId":"internityz"},"content":""},{"lineNumber":365,"author":{"gitId":"internityz"},"content":"**Extensions**"},{"lineNumber":366,"author":{"gitId":"internityz"},"content":""},{"lineNumber":367,"author":{"gitId":"internityz"},"content":"* 1a. The given details is in an incorrect format."},{"lineNumber":368,"author":{"gitId":"internityz"},"content":""},{"lineNumber":369,"author":{"gitId":"internityz"},"content":"    * 1a1. TutorPets shows an error message."},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"internityz"},"content":"**Use case: Search for a student contact**"},{"lineNumber":374,"author":{"gitId":"internityz"},"content":""},{"lineNumber":375,"author":{"gitId":"internityz"},"content":"**MSS**"},{"lineNumber":376,"author":{"gitId":"internityz"},"content":""},{"lineNumber":377,"author":{"gitId":"internityz"},"content":"1.  User enters the student name or specified keyword to be searched."},{"lineNumber":378,"author":{"gitId":"internityz"},"content":"2.  TutorPets shows a list of searched students."},{"lineNumber":379,"author":{"gitId":"internityz"},"content":""},{"lineNumber":380,"author":{"gitId":"internityz"},"content":"    Use case ends."},{"lineNumber":381,"author":{"gitId":"internityz"},"content":""},{"lineNumber":382,"author":{"gitId":"internityz"},"content":"**Extensions**"},{"lineNumber":383,"author":{"gitId":"internityz"},"content":""},{"lineNumber":384,"author":{"gitId":"internityz"},"content":"* 1a. The search result list is empty."},{"lineNumber":385,"author":{"gitId":"internityz"},"content":""},{"lineNumber":386,"author":{"gitId":"internityz"},"content":"  Use case ends."},{"lineNumber":387,"author":{"gitId":"internityz"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":393,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":394,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":395,"author":{"gitId":"mabel-kang"},"content":"4.  Should work without requiring an installer."},{"lineNumber":396,"author":{"gitId":"mabel-kang"},"content":"5.  Should not depend on remote server."},{"lineNumber":397,"author":{"gitId":"mabel-kang"},"content":"6.  Everything should be packaged into a single JAR file."},{"lineNumber":398,"author":{"gitId":"mabel-kang"},"content":"7.  JAR file should not exceed 100MB."},{"lineNumber":399,"author":{"gitId":"mabel-kang"},"content":"8.  System should be usable and understandable by a novice."},{"lineNumber":400,"author":{"gitId":"mabel-kang"},"content":"9.  System should be able to run even if the data file has errors arising from a user manually editing it."},{"lineNumber":401,"author":{"gitId":"mabel-kang"},"content":"10. Users should be comfortable with the system even after not using it for a period of time."},{"lineNumber":402,"author":{"gitId":"mabel-kang"},"content":"11. System should be able to store up to 500 contacts."},{"lineNumber":403,"author":{"gitId":"mabel-kang"},"content":"12. System should be able to function if a user overwrites the data file with another data file that is named the same."},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"sylviaokt"},"content":"* **Private tuition teachers**: Freelance tuition teachers not belonging to any organisations"},{"lineNumber":410,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":411,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":412,"author":{"gitId":"sylviaokt"},"content":"* **Novice**: A user that is new to using TutorsPet"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":421,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":438,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":449,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":452,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":455,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"internityz":90,"mabel-kang":9,"-":348,"andrea-twl":16,"sylviaokt":2}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"sylviaokt"},"content":"TutorsPet is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, TutorsPet can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"sylviaokt"},"content":"1. Download the latest `tutorspet.jar` from [here](https://github.com/AY2021S2-CS2103T-T11-3/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"chenzaza"},"content":"   * **`add`**`n/Alice Tan s/Abc Secondary School p/98765432 e/alicet@example.com a/John street, block 123, #01-01 gn/Mary Tan gp/23456789` : Adds a student\u0027s contact named `Alice Tan` to TutorsPet."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"sylviaokt"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"chenzaza"},"content":"### Adding a contact: `add`"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"chenzaza"},"content":"Adds a student’s contact to TutorsPet."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"chenzaza"},"content":"Format: `add n/NAME s/SCHOOL p/PHONE e/EMAIL a/ADDRESS gn/GUARDIAN_NAME gp/GUARDIAN_PHONE [t/TAG]…​`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":82,"author":{"gitId":"chenzaza"},"content":"A student’s contact can have any number of tags (including 0)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":86,"author":{"gitId":"chenzaza"},"content":"* `add n/Alice Tan s/Abc Secondary School p/98765432 e/alicet@example.com a/John street, block 123, #01-01 gn/Mary Tan gp/23456789`"},{"lineNumber":87,"author":{"gitId":"chenzaza"},"content":"* `add n/Bob Lee t/sec3 s/Def Secondary School p/87654321 e/bobl@example.com a/Bob street, block 321, #01-02 gn/John Lee gp/12345678 t/classA`"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"Edits an existing person in the address book."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"chenzaza"},"content":"Format: `edit INDEX [n/NAME] [s/SCHOOL] [p/PHONE] [e/EMAIL] [a/ADDRESS] [gn/GUARDIAN_NAME] [gp/GUARDIAN_PHONE] [t/TAG]…​`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":102,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":103,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":104,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":109,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":110,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"internityz"},"content":"### Searching for a contact: `search`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"internityz"},"content":"Searches for a student’s contact whose details contain any of the given keywords."},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"sylviaokt"},"content":"Format: `search [n/KEYWORD] [s/KEYWORD] [MORE_KEYWORDS]`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"internityz"},"content":"* The search is case-insensitive. E.g. `TAN` will match `Tan` ."},{"lineNumber":119,"author":{"gitId":"internityz"},"content":"* The order of the keywords does not matter. E.g. `Tan Alice` will match `Alice Tan`."},{"lineNumber":120,"author":{"gitId":"sylviaokt"},"content":"* Both name and school can be searched according to the prefix."},{"lineNumber":121,"author":{"gitId":"internityz"},"content":"* Only full words will be matched e.g. `Ta` will not match `Tan`"},{"lineNumber":122,"author":{"gitId":"internityz"},"content":"* Contacts matching at least one keyword will be returned. "},{"lineNumber":123,"author":{"gitId":"internityz"},"content":"  E.g. `Alice Tan` will return `Alice Ng` and `Bob Tan`."},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":126,"author":{"gitId":"sylviaokt"},"content":"* `search n/eliza s/woodlands` returns student whose name is `Eliza` studying in `woodlands primary school`"},{"lineNumber":127,"author":{"gitId":"sylviaokt"},"content":"* `search n/Patrick Lim` returns `patrick lim` and `Lim Zi Ying`"},{"lineNumber":128,"author":{"gitId":"sylviaokt"},"content":"* `search s/raffles hwa` returns students studying in `Raffles Institution`,"},{"lineNumber":129,"author":{"gitId":"internityz"},"content":"  `Hwa chong institution`, and also students whose name consists of Hwa or Raffles if there is any."},{"lineNumber":130,"author":{"gitId":"internityz"},"content":""},{"lineNumber":131,"author":{"gitId":"sylviaokt"},"content":"Searches for a student’s contact whose contact name contains any of the given keywords."},{"lineNumber":132,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":133,"author":{"gitId":"sylviaokt"},"content":"Format: `search n/KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"sylviaokt"},"content":"* The search is case-insensitive."},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"sylviaokt"},"content":"  E.g. `TAN` will match `Tan`"},{"lineNumber":138,"author":{"gitId":"sylviaokt"},"content":"* The order of the keywords does not matter."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"sylviaokt"},"content":"  E.g. `Tan Alice` will match `Alice Tan`"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":142,"author":{"gitId":"sylviaokt"},"content":"* Only full words will be matched."},{"lineNumber":143,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":144,"author":{"gitId":"sylviaokt"},"content":"  E.g. `Ta` will not match `Tan`"},{"lineNumber":145,"author":{"gitId":"sylviaokt"},"content":"* Contacts matching at least one keyword will be returned."},{"lineNumber":146,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":147,"author":{"gitId":"sylviaokt"},"content":"  E.g. `Alice Tan` will return `Alice Ng` and `Bob Tan`"},{"lineNumber":148,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":149,"author":{"gitId":"sylviaokt"},"content":"Examples:"},{"lineNumber":150,"author":{"gitId":"sylviaokt"},"content":"* `search n/eliza` returns `Eliza` and `Eliza Ng`"},{"lineNumber":151,"author":{"gitId":"sylviaokt"},"content":"* `search n/Patrick Lim` returns `patrick lim` and `Lim Zi Ying`"},{"lineNumber":152,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":153,"author":{"gitId":"internityz"},"content":"Searches for contacts from a specific school using keywords"},{"lineNumber":154,"author":{"gitId":"internityz"},"content":""},{"lineNumber":155,"author":{"gitId":"internityz"},"content":"Format: `search s/KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":156,"author":{"gitId":"internityz"},"content":""},{"lineNumber":157,"author":{"gitId":"internityz"},"content":"* The search is case-insensitive. \u003cbr/\u003e"},{"lineNumber":158,"author":{"gitId":"internityz"},"content":"  e.g `RAFFLES JUNIOR COLLEGE` will match students studying in `Raffles junior college`"},{"lineNumber":159,"author":{"gitId":"internityz"},"content":"* The order of the keywords does not matter.\u003cbr/\u003e"},{"lineNumber":160,"author":{"gitId":"internityz"},"content":"  e.g. `Chong Hwa` will match students studying in `Hwa Chong Institution`"},{"lineNumber":161,"author":{"gitId":"internityz"},"content":"* Only the stated keyword is searched."},{"lineNumber":162,"author":{"gitId":"internityz"},"content":"* Only full words will be matched e.g. `Raffle` will not match `Raffles`"},{"lineNumber":163,"author":{"gitId":"internityz"},"content":"* The contact matching at least one keyword will be returned (i.e. OR search). \u003cbr/\u003e"},{"lineNumber":164,"author":{"gitId":"internityz"},"content":"  e.g. `Raffles Hwa` will return students studying in `Raffles Junior College`or `Hwa Chong Institution`"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":167,"author":{"gitId":"internityz"},"content":"* `search s/woodlands` returns students studying in `woodlands primary school` and `woodlands secondary school`"},{"lineNumber":168,"author":{"gitId":"internityz"},"content":"* `search s/raffles hwa` returns students studying in `Raffles Institution` and `Hwa chong institution`"},{"lineNumber":169,"author":{"gitId":"internityz"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"mabel-kang"},"content":"Deletes the specified student\u0027s contact from the address book."},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"mabel-kang"},"content":"* Deletes the contact at the specified `INDEX`."},{"lineNumber":178,"author":{"gitId":"mabel-kang"},"content":"* The index refers to the index number shown in the displayed student list."},{"lineNumber":179,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":182,"author":{"gitId":"mabel-kang"},"content":"* `list` followed by `delete 2` deletes the 2nd student in the address book."},{"lineNumber":183,"author":{"gitId":"mabel-kang"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st student in the results of the `find` command."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"Clears all entries from the address book."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run."},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":218,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":225,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":226,"author":{"gitId":"chenzaza"},"content":"**Add** | `add n/NAME s/SCHOOL p/PHONE e/EMAIL a/ADDRESS gn/GUARDIAN_NAME gp/GUARDIAN_PHONE [t/TAG]…​` \u003cbr\u003e e.g., `add n/Bob Lee t/sec3 s/Def Secondary School p/87654321 a/Bob street, block 321, #01-02 gn/John Lee gp/12345678 t/classA`"},{"lineNumber":227,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":228,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":229,"author":{"gitId":"chenzaza"},"content":"**Edit** | `edit INDEX [n/NAME] [s/SCHOOL] [p/PHONE] [e/EMAIL] [a/ADDRESS] [gn/GUARDIAN_NAME] [gp/GUARDIAN_PHONE] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":230,"author":{"gitId":"sylviaokt"},"content":"**Search** | `search KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":231,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":232,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"chenzaza":10,"internityz":24,"mabel-kang":5,"-":166,"sylviaokt":27}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"mabel-kang"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mabel-kang":1,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_NAME;"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"chenzaza"},"content":" * Adds a student to TutorsPet."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"chenzaza"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to TutorsPet. \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitId":"chenzaza"},"content":"            + PREFIX_SCHOOL + \"SCHOOL \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitId":"chenzaza"},"content":"            + PREFIX_GUARDIAN_NAME + \"GUARDIAN_NAME \""},{"lineNumber":32,"author":{"gitId":"chenzaza"},"content":"            + PREFIX_GUARDIAN_PHONE + \"GUARDIAN_PHONE \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":36,"author":{"gitId":"chenzaza"},"content":"            + PREFIX_SCHOOL + \"Clementi Secondary School \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":40,"author":{"gitId":"chenzaza"},"content":"            + PREFIX_GUARDIAN_NAME + \"Helen Doe \""},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"            + PREFIX_GUARDIAN_PHONE + \"98765431 \""},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"            + PREFIX_TAG + \"math \""},{"lineNumber":43,"author":{"gitId":"chenzaza"},"content":"            + PREFIX_TAG + \"sec3\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"chenzaza"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"},{"lineNumber":46,"author":{"gitId":"chenzaza"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in TutorsPet\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":15,"-":61}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"mabel-kang"},"content":" * Clears TutorsPet."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"mabel-kang"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"TutorsPet has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mabel-kang":2,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"mabel-kang"},"content":" * Deletes a student identified using it\u0027s displayed index from the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"mabel-kang"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Student: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mabel-kang":2,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitId":"chenzaza"},"content":"import seedu.address.model.person.School;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"mabel-kang"},"content":" * Edits the details of an existing student in TutorsPet."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"mabel-kang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""},{"lineNumber":38,"author":{"gitId":"mabel-kang"},"content":"            + \"by the index number used in the displayed student list. \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"mabel-kang"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Student: %1$s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":52,"author":{"gitId":"mabel-kang"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in the address book.\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"mabel-kang"},"content":"     * @param index of the student in the filtered student list to edit"},{"lineNumber":59,"author":{"gitId":"mabel-kang"},"content":"     * @param editPersonDescriptor details to edit the student with"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":98,"author":{"gitId":"chenzaza"},"content":"        School updatedSchool \u003d editPersonDescriptor.getSchool().orElse(personToEdit.getSchool());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":102,"author":{"gitId":"chenzaza"},"content":"        Name updatedGuardianName \u003d editPersonDescriptor.getGuardianName().orElse(personToEdit.getGuardianName());"},{"lineNumber":103,"author":{"gitId":"chenzaza"},"content":"        Phone updatedGuardianPhone \u003d editPersonDescriptor.getGuardianPhone().orElse(personToEdit.getGuardianPhone());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"chenzaza"},"content":"        return new Person(updatedName, updatedSchool, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":107,"author":{"gitId":"chenzaza"},"content":"                updatedGuardianName, updatedGuardianPhone, updatedTags);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"mabel-kang"},"content":"     * Stores the details to edit the student with. Each non-empty field value will replace the"},{"lineNumber":130,"author":{"gitId":"mabel-kang"},"content":"     * corresponding field value of the student."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":134,"author":{"gitId":"chenzaza"},"content":"        private School school;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":138,"author":{"gitId":"chenzaza"},"content":"        private Name guardianName;"},{"lineNumber":139,"author":{"gitId":"chenzaza"},"content":"        private Phone guardianPhone;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":146,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":147,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":150,"author":{"gitId":"chenzaza"},"content":"            setSchool(toCopy.school);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":154,"author":{"gitId":"chenzaza"},"content":"            setGuardianName(toCopy.guardianName);"},{"lineNumber":155,"author":{"gitId":"chenzaza"},"content":"            setGuardianPhone(toCopy.guardianPhone);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":161,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":163,"author":{"gitId":"chenzaza"},"content":"            return CollectionUtil.isAnyNonNull(name, school, phone, email, address, guardianName, guardianPhone, tags);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"chenzaza"},"content":"        public void setSchool(School school) {"},{"lineNumber":175,"author":{"gitId":"chenzaza"},"content":"            this.school \u003d school;"},{"lineNumber":176,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":178,"author":{"gitId":"chenzaza"},"content":"        public Optional\u003cSchool\u003e getSchool() {"},{"lineNumber":179,"author":{"gitId":"chenzaza"},"content":"            return Optional.ofNullable(school);"},{"lineNumber":180,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"chenzaza"},"content":"        public void setGuardianName(Name guardianName) {"},{"lineNumber":207,"author":{"gitId":"chenzaza"},"content":"            this.guardianName \u003d guardianName;"},{"lineNumber":208,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":210,"author":{"gitId":"chenzaza"},"content":"        public Optional\u003cName\u003e getGuardianName() {"},{"lineNumber":211,"author":{"gitId":"chenzaza"},"content":"            return Optional.ofNullable(guardianName);"},{"lineNumber":212,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":214,"author":{"gitId":"chenzaza"},"content":"        public void setGuardianPhone(Phone guardianPhone) {"},{"lineNumber":215,"author":{"gitId":"chenzaza"},"content":"            this.guardianPhone \u003d guardianPhone;"},{"lineNumber":216,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":218,"author":{"gitId":"chenzaza"},"content":"        public Optional\u003cPhone\u003e getGuardianPhone() {"},{"lineNumber":219,"author":{"gitId":"chenzaza"},"content":"            return Optional.ofNullable(guardianPhone);"},{"lineNumber":220,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":223,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":224,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":225,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":231,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":232,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":233,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":234,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":255,"author":{"gitId":"chenzaza"},"content":"                    \u0026\u0026 getSchool().equals(e.getSchool())"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":259,"author":{"gitId":"chenzaza"},"content":"                    \u0026\u0026 getGuardianName().equals(e.getGuardianName())"},{"lineNumber":260,"author":{"gitId":"chenzaza"},"content":"                    \u0026\u0026 getGuardianPhone().equals(e.getGuardianPhone())"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":40,"mabel-kang":9,"-":215}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"mabel-kang"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting TutorsPet as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mabel-kang":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":" * Lists all students in TutorsPet to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"chenzaza"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":2,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/SearchCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"sylviaokt"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"sylviaokt"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"mabel-kang"},"content":" * Finds and lists all students in TutorsPet whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"internityz"},"content":"public class SearchCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"internityz"},"content":"    public static final String COMMAND_WORD \u003d \"search\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"mabel-kang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Search all students whose school names contain any of \""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitId":"internityz"},"content":"            + \"Parameters: s/KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitId":"internityz"},"content":"            + \"Example: \" + COMMAND_WORD + \" s/woodlands\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"sylviaokt"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"sylviaokt"},"content":"    public SearchCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":35,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitId":"internityz"},"content":"                || (other instanceof SearchCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitId":"internityz"},"content":"                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"internityz":6,"mabel-kang":2,"-":31,"sylviaokt":5}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_NAME;"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitId":"chenzaza"},"content":"import seedu.address.model.person.School;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitId":"chenzaza"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SCHOOL, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":39,"author":{"gitId":"chenzaza"},"content":"                        PREFIX_ADDRESS, PREFIX_GUARDIAN_NAME, PREFIX_GUARDIAN_PHONE, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_SCHOOL, PREFIX_ADDRESS, PREFIX_PHONE,"},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"                PREFIX_EMAIL, PREFIX_GUARDIAN_NAME, PREFIX_GUARDIAN_PHONE)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":48,"author":{"gitId":"chenzaza"},"content":"        School school \u003d ParserUtil.parseSchool(argMultimap.getValue(PREFIX_SCHOOL).get());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":52,"author":{"gitId":"chenzaza"},"content":"        Name guardianName \u003d ParserUtil.parseGuardianName(argMultimap.getValue(PREFIX_GUARDIAN_NAME).get());"},{"lineNumber":53,"author":{"gitId":"chenzaza"},"content":"        Phone guardianPhone \u003d ParserUtil.parseGuardianPhone(argMultimap.getValue(PREFIX_GUARDIAN_PHONE).get());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"chenzaza"},"content":"        Person person \u003d new Person(name, school, phone, email, address, guardianName, guardianPhone, tagList);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":12,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitId":"internityz"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"internityz"},"content":"        case SearchCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"internityz"},"content":"            return new SearchCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"internityz"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"internityz":4,"-":73}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"    public static final Prefix PREFIX_SCHOOL \u003d new Prefix(\"s/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitId":"chenzaza"},"content":"    public static final Prefix PREFIX_GUARDIAN_NAME \u003d new Prefix(\"gn/\");"},{"lineNumber":15,"author":{"gitId":"chenzaza"},"content":"    public static final Prefix PREFIX_GUARDIAN_PHONE \u003d new Prefix(\"gp/\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":3,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_NAME;"},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitId":"chenzaza"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SCHOOL, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":39,"author":{"gitId":"chenzaza"},"content":"                        PREFIX_ADDRESS, PREFIX_GUARDIAN_NAME, PREFIX_GUARDIAN_PHONE, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"chenzaza"},"content":"        if (argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"},{"lineNumber":54,"author":{"gitId":"chenzaza"},"content":"            editPersonDescriptor.setSchool(ParserUtil.parseSchool(argMultimap.getValue(PREFIX_SCHOOL).get()));"},{"lineNumber":55,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"chenzaza"},"content":"        if (argMultimap.getValue(PREFIX_GUARDIAN_NAME).isPresent()) {"},{"lineNumber":66,"author":{"gitId":"chenzaza"},"content":"            editPersonDescriptor.setGuardianName(ParserUtil.parseGuardianName(argMultimap"},{"lineNumber":67,"author":{"gitId":"chenzaza"},"content":"                    .getValue(PREFIX_GUARDIAN_NAME).get()));"},{"lineNumber":68,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"chenzaza"},"content":"        if (argMultimap.getValue(PREFIX_GUARDIAN_PHONE).isPresent()) {"},{"lineNumber":70,"author":{"gitId":"chenzaza"},"content":"            editPersonDescriptor.setGuardianPhone(ParserUtil.parseGuardianPhone(argMultimap"},{"lineNumber":71,"author":{"gitId":"chenzaza"},"content":"                    .getValue(PREFIX_GUARDIAN_PHONE).get()));"},{"lineNumber":72,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":16,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"chenzaza"},"content":"import seedu.address.model.person.School;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":29,"author":{"gitId":"mabel-kang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"chenzaza"},"content":"     * Parses a {@code String school} into a {@code School}."},{"lineNumber":57,"author":{"gitId":"chenzaza"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitId":"chenzaza"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"chenzaza"},"content":"     * @throws ParseException if the given {@code school} is invalid."},{"lineNumber":60,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":"    public static School parseSchool(String school) throws ParseException {"},{"lineNumber":62,"author":{"gitId":"chenzaza"},"content":"        requireNonNull(school);"},{"lineNumber":63,"author":{"gitId":"chenzaza"},"content":"        String trimmedSchool \u003d school.trim();"},{"lineNumber":64,"author":{"gitId":"chenzaza"},"content":"        if (!School.isValidSchool(trimmedSchool)) {"},{"lineNumber":65,"author":{"gitId":"chenzaza"},"content":"            throw new ParseException(School.MESSAGE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"chenzaza"},"content":"        return new School(trimmedSchool);"},{"lineNumber":68,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"chenzaza"},"content":"     * Parses a {@code String guardianName} into a {@code Name}."},{"lineNumber":117,"author":{"gitId":"chenzaza"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":118,"author":{"gitId":"chenzaza"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"chenzaza"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":120,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"chenzaza"},"content":"    public static Name parseGuardianName(String guardianName) throws ParseException {"},{"lineNumber":122,"author":{"gitId":"chenzaza"},"content":"        requireNonNull(guardianName);"},{"lineNumber":123,"author":{"gitId":"chenzaza"},"content":"        String trimmedName \u003d guardianName.trim();"},{"lineNumber":124,"author":{"gitId":"chenzaza"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":125,"author":{"gitId":"chenzaza"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"chenzaza"},"content":"        return new Name(trimmedName);"},{"lineNumber":128,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":130,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"chenzaza"},"content":"     * Parses a {@code String guardianPhone} into a {@code Phone}."},{"lineNumber":132,"author":{"gitId":"chenzaza"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":133,"author":{"gitId":"chenzaza"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"chenzaza"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":135,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"chenzaza"},"content":"    public static Phone parseGuardianPhone(String guardianPhone) throws ParseException {"},{"lineNumber":137,"author":{"gitId":"chenzaza"},"content":"        requireNonNull(guardianPhone);"},{"lineNumber":138,"author":{"gitId":"chenzaza"},"content":"        String trimmedPhone \u003d guardianPhone.trim();"},{"lineNumber":139,"author":{"gitId":"chenzaza"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":140,"author":{"gitId":"chenzaza"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"chenzaza"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":143,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":46,"mabel-kang":1,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/SearchCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"internityz"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"internityz"},"content":""},{"lineNumber":3,"author":{"gitId":"sylviaokt"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"internityz"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"sylviaokt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"sylviaokt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":7,"author":{"gitId":"internityz"},"content":""},{"lineNumber":8,"author":{"gitId":"internityz"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"sylviaokt"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"internityz"},"content":""},{"lineNumber":11,"author":{"gitId":"internityz"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":12,"author":{"gitId":"internityz"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"sylviaokt"},"content":"import seedu.address.model.person.NameAndSchoolContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"internityz"},"content":""},{"lineNumber":15,"author":{"gitId":"internityz"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"sylviaokt"},"content":" * Parses input arguments and creates a new SearchCommand object"},{"lineNumber":17,"author":{"gitId":"internityz"},"content":" */"},{"lineNumber":18,"author":{"gitId":"internityz"},"content":"public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"},{"lineNumber":19,"author":{"gitId":"internityz"},"content":""},{"lineNumber":20,"author":{"gitId":"internityz"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"sylviaokt"},"content":"     * Parses the given {@code String} of arguments in the context of the SearchCommand"},{"lineNumber":22,"author":{"gitId":"sylviaokt"},"content":"     * and returns a SearchCommand object for execution."},{"lineNumber":23,"author":{"gitId":"internityz"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitId":"internityz"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"internityz"},"content":"    public SearchCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitId":"internityz"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":27,"author":{"gitId":"internityz"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"internityz"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitId":"internityz"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitId":"internityz"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"internityz"},"content":""},{"lineNumber":32,"author":{"gitId":"sylviaokt"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitId":"sylviaokt"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SCHOOL);"},{"lineNumber":34,"author":{"gitId":"internityz"},"content":""},{"lineNumber":35,"author":{"gitId":"sylviaokt"},"content":"        String[] nameKeywords \u003d null;"},{"lineNumber":36,"author":{"gitId":"sylviaokt"},"content":"        String[] schoolKeywords \u003d null;"},{"lineNumber":37,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":38,"author":{"gitId":"sylviaokt"},"content":"        if (!argMultimap.getValue(PREFIX_NAME).isPresent()"},{"lineNumber":39,"author":{"gitId":"sylviaokt"},"content":"                \u0026\u0026 !argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"},{"lineNumber":40,"author":{"gitId":"sylviaokt"},"content":"            throw new ParseException("},{"lineNumber":41,"author":{"gitId":"sylviaokt"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"sylviaokt"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"sylviaokt"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":44,"author":{"gitId":"sylviaokt"},"content":"            nameKeywords \u003d extractKeywordsAsArray(argMultimap, PREFIX_NAME);"},{"lineNumber":45,"author":{"gitId":"sylviaokt"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"sylviaokt"},"content":"        if (argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"sylviaokt"},"content":"            schoolKeywords \u003d extractKeywordsAsArray(argMultimap, PREFIX_SCHOOL);"},{"lineNumber":48,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":49,"author":{"gitId":"sylviaokt"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"sylviaokt"},"content":"        List\u003cString\u003e nameKeywordsList \u003d nameKeywords \u003d\u003d null ? null : Arrays.asList(nameKeywords);"},{"lineNumber":51,"author":{"gitId":"sylviaokt"},"content":"        List\u003cString\u003e schoolKeywordsList \u003d schoolKeywords \u003d\u003d null ? null : Arrays.asList(schoolKeywords);"},{"lineNumber":52,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":53,"author":{"gitId":"sylviaokt"},"content":"        return new SearchCommand(new NameAndSchoolContainsKeywordsPredicate(nameKeywordsList, schoolKeywordsList));"},{"lineNumber":54,"author":{"gitId":"sylviaokt"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":56,"author":{"gitId":"sylviaokt"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"sylviaokt"},"content":"     * Extracts out the keywords and place them in an array"},{"lineNumber":58,"author":{"gitId":"mabel-kang"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"sylviaokt"},"content":"     * @param argMultimap ArgumentMultimap that maps the keywords to the prefixes"},{"lineNumber":60,"author":{"gitId":"sylviaokt"},"content":"     * @param prefix The prefix for which the keywords it is mapped to is to be extracted"},{"lineNumber":61,"author":{"gitId":"sylviaokt"},"content":"     * @return An array of keywords"},{"lineNumber":62,"author":{"gitId":"sylviaokt"},"content":"     * @throws ParseException if there is no keyword following the prefix"},{"lineNumber":63,"author":{"gitId":"sylviaokt"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"sylviaokt"},"content":"    public String[] extractKeywordsAsArray(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"},{"lineNumber":65,"author":{"gitId":"sylviaokt"},"content":"        String keywords \u003d \"\";"},{"lineNumber":66,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":67,"author":{"gitId":"sylviaokt"},"content":"        if (prefix.equals(PREFIX_NAME)) {"},{"lineNumber":68,"author":{"gitId":"sylviaokt"},"content":"            keywords \u003d argMultimap.getValue(PREFIX_NAME).get();"},{"lineNumber":69,"author":{"gitId":"sylviaokt"},"content":"        } else if (prefix.equals(PREFIX_SCHOOL)) {"},{"lineNumber":70,"author":{"gitId":"sylviaokt"},"content":"            keywords \u003d argMultimap.getValue(PREFIX_SCHOOL).get();"},{"lineNumber":71,"author":{"gitId":"sylviaokt"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":73,"author":{"gitId":"sylviaokt"},"content":"        requireNonNull(keywords);"},{"lineNumber":74,"author":{"gitId":"sylviaokt"},"content":"        String trimmedName \u003d keywords.trim();"},{"lineNumber":75,"author":{"gitId":"sylviaokt"},"content":"        if (trimmedName.isEmpty()) {"},{"lineNumber":76,"author":{"gitId":"sylviaokt"},"content":"            throw new ParseException("},{"lineNumber":77,"author":{"gitId":"sylviaokt"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitId":"sylviaokt"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"sylviaokt"},"content":"        return trimmedName.split(\"\\\\s+\");"},{"lineNumber":80,"author":{"gitId":"internityz"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"internityz"},"content":""},{"lineNumber":82,"author":{"gitId":"internityz"},"content":"}"}],"authorContributionMap":{"internityz":27,"mabel-kang":1,"sylviaokt":54}},{"path":"src/main/java/seedu/address/model/person/NameAndSchoolContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sylviaokt"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":3,"author":{"gitId":"sylviaokt"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"sylviaokt"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":6,"author":{"gitId":"sylviaokt"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":8,"author":{"gitId":"sylviaokt"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"sylviaokt"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"sylviaokt"},"content":" */"},{"lineNumber":11,"author":{"gitId":"sylviaokt"},"content":"public class NameAndSchoolContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitId":"sylviaokt"},"content":"    private final List\u003cString\u003e nameKeywords;"},{"lineNumber":13,"author":{"gitId":"sylviaokt"},"content":"    private final List\u003cString\u003e schoolKeywords;"},{"lineNumber":14,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":15,"author":{"gitId":"sylviaokt"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"sylviaokt"},"content":"     * Constructor of NameAndSchoolContainsKeywordsPredicate"},{"lineNumber":17,"author":{"gitId":"mabel-kang"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"sylviaokt"},"content":"     * @param nameKeywords List of keywords to be matched with the names"},{"lineNumber":19,"author":{"gitId":"sylviaokt"},"content":"     * @param schoolKeywords List of keywords to be matched the school"},{"lineNumber":20,"author":{"gitId":"sylviaokt"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"sylviaokt"},"content":"    public NameAndSchoolContainsKeywordsPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e schoolKeywords) {"},{"lineNumber":22,"author":{"gitId":"sylviaokt"},"content":"        this.nameKeywords \u003d nameKeywords;"},{"lineNumber":23,"author":{"gitId":"sylviaokt"},"content":"        this.schoolKeywords \u003d schoolKeywords;"},{"lineNumber":24,"author":{"gitId":"sylviaokt"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":26,"author":{"gitId":"sylviaokt"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"sylviaokt"},"content":"    public boolean test(Person person) {"},{"lineNumber":28,"author":{"gitId":"sylviaokt"},"content":"        if (this.nameKeywords \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"sylviaokt"},"content":"            return schoolKeywords.stream()"},{"lineNumber":30,"author":{"gitId":"sylviaokt"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getSchool().fullSchoolName, keyword));"},{"lineNumber":31,"author":{"gitId":"sylviaokt"},"content":"        } else if (this.schoolKeywords \u003d\u003d null) {"},{"lineNumber":32,"author":{"gitId":"sylviaokt"},"content":"            return nameKeywords.stream()"},{"lineNumber":33,"author":{"gitId":"sylviaokt"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":34,"author":{"gitId":"sylviaokt"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"sylviaokt"},"content":"            return nameKeywords.stream()"},{"lineNumber":36,"author":{"gitId":"sylviaokt"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword))"},{"lineNumber":37,"author":{"gitId":"sylviaokt"},"content":"                    || schoolKeywords.stream()"},{"lineNumber":38,"author":{"gitId":"sylviaokt"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getSchool().fullSchoolName, keyword));"},{"lineNumber":39,"author":{"gitId":"sylviaokt"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"sylviaokt"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":42,"author":{"gitId":"sylviaokt"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"sylviaokt"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"sylviaokt"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"sylviaokt"},"content":"                || (other instanceof NameAndSchoolContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"sylviaokt"},"content":"                \u0026\u0026 nameKeywords.equals(((NameAndSchoolContainsKeywordsPredicate) other).nameKeywords)"},{"lineNumber":47,"author":{"gitId":"sylviaokt"},"content":"                \u0026\u0026 schoolKeywords.equals(((NameAndSchoolContainsKeywordsPredicate) other)"},{"lineNumber":48,"author":{"gitId":"sylviaokt"},"content":"                .schoolKeywords)); // state check"},{"lineNumber":49,"author":{"gitId":"sylviaokt"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":51,"author":{"gitId":"sylviaokt"},"content":"}"}],"authorContributionMap":{"mabel-kang":1,"sylviaokt":50}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"chenzaza"},"content":"    private final School school;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitId":"chenzaza"},"content":"    private final Name guardianName;"},{"lineNumber":24,"author":{"gitId":"chenzaza"},"content":"    private final Phone guardianPhone;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chenzaza"},"content":"    public Person(Name name, School school, Phone phone, Email email, Address address, Name guardianName,"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"                  Phone guardianPhone, Set\u003cTag\u003e tags) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"        this.school \u003d school;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"        this.guardianName \u003d guardianName;"},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"        this.guardianPhone \u003d guardianPhone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"chenzaza"},"content":"    public School getSchool() {"},{"lineNumber":51,"author":{"gitId":"chenzaza"},"content":"        return school;"},{"lineNumber":52,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"chenzaza"},"content":"    public Name getGuardianName() {"},{"lineNumber":67,"author":{"gitId":"chenzaza"},"content":"        return guardianName;"},{"lineNumber":68,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":70,"author":{"gitId":"chenzaza"},"content":"    public Phone getGuardianPhone() {"},{"lineNumber":71,"author":{"gitId":"chenzaza"},"content":"        return guardianPhone;"},{"lineNumber":72,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":111,"author":{"gitId":"chenzaza"},"content":"                \u0026\u0026 otherPerson.getSchool().equals(getSchool())"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":115,"author":{"gitId":"chenzaza"},"content":"                \u0026\u0026 otherPerson.getGuardianName().equals(getGuardianName())"},{"lineNumber":116,"author":{"gitId":"chenzaza"},"content":"                \u0026\u0026 otherPerson.getGuardianPhone().equals(getGuardianPhone())"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":123,"author":{"gitId":"chenzaza"},"content":"        return Objects.hash(name, school, phone, email, address, guardianName, guardianPhone, tags);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":130,"author":{"gitId":"chenzaza"},"content":"                .append(\"; School: \")"},{"lineNumber":131,"author":{"gitId":"chenzaza"},"content":"                .append(getSchool())"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":137,"author":{"gitId":"chenzaza"},"content":"                .append(getAddress())"},{"lineNumber":138,"author":{"gitId":"chenzaza"},"content":"                .append(\"; Guardian\u0027s Name: \")"},{"lineNumber":139,"author":{"gitId":"chenzaza"},"content":"                .append(getGuardianName())"},{"lineNumber":140,"author":{"gitId":"chenzaza"},"content":"                .append(\"; Guardian\u0027s Phone: \")"},{"lineNumber":141,"author":{"gitId":"chenzaza"},"content":"                .append(getGuardianPhone());"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":31,"-":120}},{"path":"src/main/java/seedu/address/model/person/School.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chenzaza"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":3,"author":{"gitId":"chenzaza"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":6,"author":{"gitId":"chenzaza"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":" * Represents a Student\u0027s school in TutorsPet."},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSchool(String)}"},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"public class School {"},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":12,"author":{"gitId":"chenzaza"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"chenzaza"},"content":"            \"Schools should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":15,"author":{"gitId":"chenzaza"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"chenzaza"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"chenzaza"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"chenzaza"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":21,"author":{"gitId":"chenzaza"},"content":"    public final String fullSchoolName;"},{"lineNumber":22,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":23,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chenzaza"},"content":"     * Constructs a {@code School}."},{"lineNumber":25,"author":{"gitId":"chenzaza"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"chenzaza"},"content":"     * @param schoolName A valid school."},{"lineNumber":27,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chenzaza"},"content":"    public School(String schoolName) {"},{"lineNumber":29,"author":{"gitId":"chenzaza"},"content":"        requireNonNull(schoolName);"},{"lineNumber":30,"author":{"gitId":"chenzaza"},"content":"        checkArgument(isValidSchool(schoolName), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"chenzaza"},"content":"        fullSchoolName \u003d schoolName;"},{"lineNumber":32,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"chenzaza"},"content":"     * Returns true if a given string is a valid school."},{"lineNumber":36,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"    public static boolean isValidSchool(String test) {"},{"lineNumber":38,"author":{"gitId":"chenzaza"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"chenzaza"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"chenzaza"},"content":"        return fullSchoolName;"},{"lineNumber":45,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":47,"author":{"gitId":"chenzaza"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"chenzaza"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"chenzaza"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"chenzaza"},"content":"                || (other instanceof School // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"chenzaza"},"content":"                \u0026\u0026 fullSchoolName.equals(((School) other).fullSchoolName)); // state check"},{"lineNumber":52,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":54,"author":{"gitId":"chenzaza"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"chenzaza"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"chenzaza"},"content":"        return fullSchoolName.hashCode();"},{"lineNumber":57,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":59,"author":{"gitId":"chenzaza"},"content":"}"}],"authorContributionMap":{"chenzaza":59}},{"path":"src/main/java/seedu/address/model/person/SchoolContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"internityz"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"internityz"},"content":""},{"lineNumber":3,"author":{"gitId":"internityz"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"internityz"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"internityz"},"content":""},{"lineNumber":6,"author":{"gitId":"internityz"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"internityz"},"content":""},{"lineNumber":8,"author":{"gitId":"internityz"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"internityz"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"internityz"},"content":" */"},{"lineNumber":11,"author":{"gitId":"internityz"},"content":"public class SchoolContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitId":"internityz"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"internityz"},"content":""},{"lineNumber":14,"author":{"gitId":"internityz"},"content":"    public SchoolContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"internityz"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"internityz"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"internityz"},"content":""},{"lineNumber":18,"author":{"gitId":"internityz"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"internityz"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitId":"internityz"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"internityz"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getSchool().fullSchoolName, keyword));"},{"lineNumber":22,"author":{"gitId":"internityz"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"internityz"},"content":""},{"lineNumber":24,"author":{"gitId":"internityz"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"internityz"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"internityz"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"internityz"},"content":"                || (other instanceof SchoolContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"internityz"},"content":"                \u0026\u0026 keywords.equals(((SchoolContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"internityz"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"internityz"},"content":""},{"lineNumber":31,"author":{"gitId":"internityz"},"content":"}"}],"authorContributionMap":{"internityz":31}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"mabel-kang"},"content":" * Represents a Tag in TutorsPet."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mabel-kang":1,"-":53}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"chenzaza"},"content":"import seedu.address.model.person.School;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":23,"author":{"gitId":"chenzaza"},"content":"            new Person(new Name(\"Alex Yeoh\"), new School(\"Abc Secondary School\"), new Phone(\"87438807\"),"},{"lineNumber":24,"author":{"gitId":"chenzaza"},"content":"                new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":25,"author":{"gitId":"chenzaza"},"content":"                new Name(\"Jane Yeoh\"), new Phone(\"87438800\"),"},{"lineNumber":26,"author":{"gitId":"chenzaza"},"content":"                getTagSet(\"math\")),"},{"lineNumber":27,"author":{"gitId":"chenzaza"},"content":"            new Person(new Name(\"Bernice Yu\"), new School(\"Xyz Secondary School\"), new Phone(\"99272758\"),"},{"lineNumber":28,"author":{"gitId":"chenzaza"},"content":"                new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":29,"author":{"gitId":"chenzaza"},"content":"                new Name(\"Ben Yu\"), new Phone(\"99272758\"),"},{"lineNumber":30,"author":{"gitId":"chenzaza"},"content":"                getTagSet(\"sec4\", \"physics\")),"},{"lineNumber":31,"author":{"gitId":"chenzaza"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new School(\"Cde Secondary School\"),"},{"lineNumber":32,"author":{"gitId":"chenzaza"},"content":"                new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":33,"author":{"gitId":"chenzaza"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Name(\"Claire Oliveiro\"), new Phone(\"93210288\"),"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"                getTagSet(\"classA\")),"},{"lineNumber":35,"author":{"gitId":"chenzaza"},"content":"            new Person(new Name(\"David Li\"), new School(\"Li Secondary School\"), new Phone(\"91031282\"),"},{"lineNumber":36,"author":{"gitId":"chenzaza"},"content":"                new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"                new Name(\"Li Li\"), new Phone(\"91031288\"), getTagSet(\"sec1\")),"},{"lineNumber":38,"author":{"gitId":"chenzaza"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new School(\"Efg Secondary School\"), new Phone(\"92492021\"),"},{"lineNumber":39,"author":{"gitId":"chenzaza"},"content":"                new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":40,"author":{"gitId":"chenzaza"},"content":"                new Name(\"Frank Ibrahim\"), new Phone(\"92492022\"),"},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"                getTagSet(\"sec2\")),"},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new School(\"Efg Secondary School\"),"},{"lineNumber":43,"author":{"gitId":"chenzaza"},"content":"                new Phone(\"92624417\"), new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":44,"author":{"gitId":"chenzaza"},"content":"                new Name(\"Bob Balakrishnan\"), new Phone(\"92624411\"),"},{"lineNumber":45,"author":{"gitId":"chenzaza"},"content":"                getTagSet(\"physics\"))"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":24,"-":42}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"chenzaza"},"content":"import seedu.address.model.person.School;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"chenzaza"},"content":"    private final String school;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":33,"author":{"gitId":"chenzaza"},"content":"    private final String guardianName;"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"    private final String guardianPhone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"school\") String school,"},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"},{"lineNumber":43,"author":{"gitId":"chenzaza"},"content":"                             @JsonProperty(\"address\") String address,"},{"lineNumber":44,"author":{"gitId":"chenzaza"},"content":"                             @JsonProperty(\"guardianName\") String guardianName,"},{"lineNumber":45,"author":{"gitId":"chenzaza"},"content":"                             @JsonProperty(\"guardianPhone\") String guardianPhone,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":48,"author":{"gitId":"chenzaza"},"content":"        this.school \u003d school;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":52,"author":{"gitId":"chenzaza"},"content":"        this.guardianName \u003d guardianName;"},{"lineNumber":53,"author":{"gitId":"chenzaza"},"content":"        this.guardianPhone \u003d guardianPhone;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":64,"author":{"gitId":"chenzaza"},"content":"        school \u003d source.getSchool().fullSchoolName;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":68,"author":{"gitId":"chenzaza"},"content":"        guardianName \u003d source.getGuardianName().fullName;"},{"lineNumber":69,"author":{"gitId":"chenzaza"},"content":"        guardianPhone \u003d source.getGuardianPhone().value;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"chenzaza"},"content":"        if (school \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"chenzaza"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"chenzaza"},"content":"        if (!School.isValidSchool(school)) {"},{"lineNumber":98,"author":{"gitId":"chenzaza"},"content":"            throw new IllegalValueException(School.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"chenzaza"},"content":"        final School modelSchool \u003d new School(school);"},{"lineNumber":101,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"chenzaza"},"content":"        if (guardianName \u003d\u003d null) {"},{"lineNumber":127,"author":{"gitId":"chenzaza"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"chenzaza"},"content":"        if (!Name.isValidName(guardianName)) {"},{"lineNumber":130,"author":{"gitId":"chenzaza"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"chenzaza"},"content":"        final Name modelGuardianName \u003d new Name(guardianName);"},{"lineNumber":133,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":134,"author":{"gitId":"chenzaza"},"content":"        if (guardianPhone \u003d\u003d null) {"},{"lineNumber":135,"author":{"gitId":"chenzaza"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":136,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"chenzaza"},"content":"        if (!Phone.isValidPhone(guardianPhone)) {"},{"lineNumber":138,"author":{"gitId":"chenzaza"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitId":"chenzaza"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"chenzaza"},"content":"        final Phone modelGuardianPhone \u003d new Phone(guardianPhone);"},{"lineNumber":141,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":143,"author":{"gitId":"chenzaza"},"content":"        return new Person(modelName, modelSchool, modelPhone, modelEmail, modelAddress, modelGuardianName,"},{"lineNumber":144,"author":{"gitId":"chenzaza"},"content":"                modelGuardianPhone, modelTags);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":41,"-":106}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"mabel-kang"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-t11-3.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mabel-kang":1,"-":101}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"chenzaza"},"content":"    private Label school;"},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"chenzaza"},"content":"    private Label guardianName;"},{"lineNumber":45,"author":{"gitId":"chenzaza"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"chenzaza"},"content":"    private Label guardianPhone;"},{"lineNumber":47,"author":{"gitId":"chenzaza"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":58,"author":{"gitId":"chenzaza"},"content":"        school.setText(person.getSchool().fullSchoolName);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":"        guardianName.setText(person.getGuardianName().fullName);"},{"lineNumber":62,"author":{"gitId":"chenzaza"},"content":"        guardianPhone.setText(person.getGuardianPhone().value);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":9,"-":77}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"chenzaza"},"content":"      \u003cLabel fx:id\u003d\"school\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$school\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"      \u003cLabel fx:id\u003d\"guardianName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$guardianName\" /\u003e"},{"lineNumber":35,"author":{"gitId":"chenzaza"},"content":"      \u003cLabel fx:id\u003d\"guardianPhone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$guardianPhone\" /\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"chenzaza":3,"-":36}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"chenzaza"},"content":"    \"school\": \"Hans Secondary School\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"    \"address\": \"4th street\","},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Aileen Muster\","},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"9482422\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":4,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Jurong West Secondary School\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Amanda Pauline\","},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"94351254\","},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"    \"tagged\": [ \"sec1\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":13,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Jurong West Secondary School\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":16,"author":{"gitId":"chenzaza"},"content":"    \"address\": \"4th street\","},{"lineNumber":17,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Amanda Pauline\","},{"lineNumber":18,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"94351254\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":8,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Jurong West Secondary School\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Amanda Pauline\","},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"94351254\","},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"    \"tagged\" : [ \"sec1\" ]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":14,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Clementi Town Secondary School\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":18,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Jay Maier\","},{"lineNumber":19,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"98765433\","},{"lineNumber":20,"author":{"gitId":"chenzaza"},"content":"    \"tagged\" : [ \"sec2\", \"math\" ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":23,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Wall Street Secondary School\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":27,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Louis Kurz\","},{"lineNumber":28,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"95352564\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":32,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Clementi Town Secondary School\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":36,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Jay Maier\","},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"98765433\","},{"lineNumber":38,"author":{"gitId":"chenzaza"},"content":"    \"tagged\" : [ \"sec3\" ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Michegan Secondary School\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":45,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"John Meyer\","},{"lineNumber":46,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"9482225\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":50,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Tokyo Secondary School\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":54,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Fay Kunz\","},{"lineNumber":55,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"9482425\","},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":59,"author":{"gitId":"chenzaza"},"content":"    \"school\" : \"Fourth Secondary School\","},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":62,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":63,"author":{"gitId":"chenzaza"},"content":"    \"guardianName\" : \"Barbara Best\","},{"lineNumber":64,"author":{"gitId":"chenzaza"},"content":"    \"guardianPhone\" : \"9482444\","},{"lineNumber":65,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":24,"-":43}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GUARDIAN_NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GUARDIAN_PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":85,"author":{"gitId":"chenzaza"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SCHOOL_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":86,"author":{"gitId":"chenzaza"},"content":"                + ADDRESS_DESC_AMY + GUARDIAN_NAME_DESC_AMY + GUARDIAN_PHONE_DESC_AMY;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":5,"-":160}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_NAME;"},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"    public static final String VALID_SCHOOL_AMY \u003d \"Abc Secondary School\";"},{"lineNumber":35,"author":{"gitId":"chenzaza"},"content":"    public static final String VALID_SCHOOL_BOB \u003d \"Cba Secondary School\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"    public static final String VALID_GUARDIAN_NAME_AMY \u003d \"Alice Bee\";"},{"lineNumber":43,"author":{"gitId":"chenzaza"},"content":"    public static final String VALID_GUARDIAN_NAME_BOB \u003d \"Ben Choo\";"},{"lineNumber":44,"author":{"gitId":"chenzaza"},"content":"    public static final String VALID_GUARDIAN_PHONE_AMY \u003d \"33333333\";"},{"lineNumber":45,"author":{"gitId":"chenzaza"},"content":"    public static final String VALID_GUARDIAN_PHONE_BOB \u003d \"44444444\";"},{"lineNumber":46,"author":{"gitId":"chenzaza"},"content":"    public static final String VALID_TAG_SEC3 \u003d \"sec3\";"},{"lineNumber":47,"author":{"gitId":"chenzaza"},"content":"    public static final String VALID_TAG_MATH \u003d \"math\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":51,"author":{"gitId":"chenzaza"},"content":"    public static final String SCHOOL_DESC_AMY \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_AMY;"},{"lineNumber":52,"author":{"gitId":"chenzaza"},"content":"    public static final String SCHOOL_DESC_BOB \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_BOB;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":59,"author":{"gitId":"chenzaza"},"content":"    public static final String GUARDIAN_NAME_DESC_AMY \u003d \" \" + PREFIX_GUARDIAN_NAME + VALID_GUARDIAN_NAME_AMY;"},{"lineNumber":60,"author":{"gitId":"chenzaza"},"content":"    public static final String GUARDIAN_NAME_DESC_BOB \u003d \" \" + PREFIX_GUARDIAN_NAME + VALID_GUARDIAN_NAME_BOB;"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":"    public static final String GUARDIAN_PHONE_DESC_AMY \u003d \" \" + PREFIX_GUARDIAN_PHONE + VALID_GUARDIAN_PHONE_AMY;"},{"lineNumber":62,"author":{"gitId":"chenzaza"},"content":"    public static final String GUARDIAN_PHONE_DESC_BOB \u003d \" \" + PREFIX_GUARDIAN_PHONE + VALID_GUARDIAN_PHONE_BOB;"},{"lineNumber":63,"author":{"gitId":"chenzaza"},"content":"    public static final String TAG_DESC_MATH \u003d \" \" + PREFIX_TAG + VALID_TAG_MATH;"},{"lineNumber":64,"author":{"gitId":"chenzaza"},"content":"    public static final String TAG_DESC_SEC3 \u003d \" \" + PREFIX_TAG + VALID_TAG_SEC3;"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":79,"author":{"gitId":"chenzaza"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withSchool(VALID_SCHOOL_AMY)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":81,"author":{"gitId":"chenzaza"},"content":"                .withGuardianName(VALID_GUARDIAN_NAME_AMY).withGuardianPhone(VALID_GUARDIAN_PHONE_AMY)"},{"lineNumber":82,"author":{"gitId":"chenzaza"},"content":"                .withTags(VALID_TAG_MATH).build();"},{"lineNumber":83,"author":{"gitId":"chenzaza"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withSchool(VALID_SCHOOL_BOB)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":85,"author":{"gitId":"chenzaza"},"content":"                .withGuardianName(VALID_GUARDIAN_NAME_BOB).withGuardianPhone(VALID_GUARDIAN_PHONE_BOB)"},{"lineNumber":86,"author":{"gitId":"chenzaza"},"content":"                .withTags(VALID_TAG_SEC3, VALID_TAG_MATH).build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":124,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":25,"-":120}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SEC3;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitId":"chenzaza"},"content":"                .withTags(VALID_TAG_SEC3).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_SEC3).build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":3,"-":170}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SEC3;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"chenzaza"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_SEC3).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":2,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/SearchCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mabel-kang"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":3,"author":{"gitId":"mabel-kang"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"mabel-kang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"mabel-kang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"mabel-kang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":11,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":13,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":14,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":15,"author":{"gitId":"mabel-kang"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":17,"author":{"gitId":"mabel-kang"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"mabel-kang"},"content":"import java.util.Collections;"},{"lineNumber":19,"author":{"gitId":"mabel-kang"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":21,"author":{"gitId":"mabel-kang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":22,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":23,"author":{"gitId":"mabel-kang"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":24,"author":{"gitId":"mabel-kang"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":25,"author":{"gitId":"mabel-kang"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":26,"author":{"gitId":"mabel-kang"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"mabel-kang"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"mabel-kang"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"mabel-kang"},"content":"import seedu.address.model.person.NameAndSchoolContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":31,"author":{"gitId":"mabel-kang"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"mabel-kang"},"content":" * Contains integration tests (interaction with the Model) for {@code SearchCommand}."},{"lineNumber":33,"author":{"gitId":"mabel-kang"},"content":" */"},{"lineNumber":34,"author":{"gitId":"mabel-kang"},"content":"public class SearchCommandTest {"},{"lineNumber":35,"author":{"gitId":"mabel-kang"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"mabel-kang"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":38,"author":{"gitId":"mabel-kang"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"mabel-kang"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitId":"mabel-kang"},"content":"        NameAndSchoolContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":41,"author":{"gitId":"mabel-kang"},"content":"                new NameAndSchoolContainsKeywordsPredicate(Collections.singletonList(\"first\"), null);"},{"lineNumber":42,"author":{"gitId":"mabel-kang"},"content":"        NameAndSchoolContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":43,"author":{"gitId":"mabel-kang"},"content":"                new NameAndSchoolContainsKeywordsPredicate(Collections.singletonList(\"second\"),"},{"lineNumber":44,"author":{"gitId":"mabel-kang"},"content":"                        Collections.singletonList(\"Jurong\"));"},{"lineNumber":45,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":46,"author":{"gitId":"mabel-kang"},"content":"        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitId":"mabel-kang"},"content":"        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"},{"lineNumber":48,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":49,"author":{"gitId":"mabel-kang"},"content":"        // same object -\u003e returns true"},{"lineNumber":50,"author":{"gitId":"mabel-kang"},"content":"        assertTrue(searchFirstCommand.equals(searchFirstCommand));"},{"lineNumber":51,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":52,"author":{"gitId":"mabel-kang"},"content":"        // same values -\u003e returns true"},{"lineNumber":53,"author":{"gitId":"mabel-kang"},"content":"        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstPredicate);"},{"lineNumber":54,"author":{"gitId":"mabel-kang"},"content":"        assertTrue(searchFirstCommand.equals(searchFirstCommandCopy));"},{"lineNumber":55,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":56,"author":{"gitId":"mabel-kang"},"content":"        // different types -\u003e returns false"},{"lineNumber":57,"author":{"gitId":"mabel-kang"},"content":"        assertFalse(searchFirstCommand.equals(1));"},{"lineNumber":58,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":59,"author":{"gitId":"mabel-kang"},"content":"        // null -\u003e returns false"},{"lineNumber":60,"author":{"gitId":"mabel-kang"},"content":"        assertFalse(searchFirstCommand.equals(null));"},{"lineNumber":61,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":62,"author":{"gitId":"mabel-kang"},"content":"        // different person -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"mabel-kang"},"content":"        assertFalse(searchFirstCommand.equals(searchSecondCommand));"},{"lineNumber":64,"author":{"gitId":"mabel-kang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":66,"author":{"gitId":"mabel-kang"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"sylviaokt"},"content":"    public void execute_multipleKeywords_multipleStudentsFound() {"},{"lineNumber":68,"author":{"gitId":"mabel-kang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":69,"author":{"gitId":"mabel-kang"},"content":"        NameAndSchoolContainsKeywordsPredicate predicate \u003d preparePredicate(\" n/Kurz Elle Kunz\");"},{"lineNumber":70,"author":{"gitId":"mabel-kang"},"content":"        SearchCommand command \u003d new SearchCommand(predicate);"},{"lineNumber":71,"author":{"gitId":"mabel-kang"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":72,"author":{"gitId":"mabel-kang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitId":"mabel-kang"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":74,"author":{"gitId":"mabel-kang"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":76,"author":{"gitId":"mabel-kang"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"mabel-kang"},"content":"    public void execute_nonMatchingKeywords_zeroStudentsFound() {"},{"lineNumber":78,"author":{"gitId":"mabel-kang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":79,"author":{"gitId":"sylviaokt"},"content":"        NameAndSchoolContainsKeywordsPredicate predicate \u003d preparePredicate(\" n/Jade\");"},{"lineNumber":80,"author":{"gitId":"mabel-kang"},"content":"        SearchCommand command \u003d new SearchCommand(predicate);"},{"lineNumber":81,"author":{"gitId":"mabel-kang"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":82,"author":{"gitId":"mabel-kang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitId":"mabel-kang"},"content":"        assertEquals(Arrays.asList(), model.getFilteredPersonList());"},{"lineNumber":84,"author":{"gitId":"mabel-kang"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":86,"author":{"gitId":"mabel-kang"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"mabel-kang"},"content":"    public void execute_keywordsOrderSwitched_success() {"},{"lineNumber":88,"author":{"gitId":"mabel-kang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":89,"author":{"gitId":"mabel-kang"},"content":"        NameAndSchoolContainsKeywordsPredicate predicate \u003d preparePredicate(\" s/West Jurong\");"},{"lineNumber":90,"author":{"gitId":"mabel-kang"},"content":"        SearchCommand command \u003d new SearchCommand(predicate);"},{"lineNumber":91,"author":{"gitId":"mabel-kang"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":92,"author":{"gitId":"mabel-kang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitId":"mabel-kang"},"content":"        assertEquals(Arrays.asList(ALICE), model.getFilteredPersonList());"},{"lineNumber":94,"author":{"gitId":"mabel-kang"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":96,"author":{"gitId":"mabel-kang"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"mabel-kang"},"content":"     * Parses {@code userInput} into a {@code NameAndSchoolContainsKeywordsPredicate}."},{"lineNumber":98,"author":{"gitId":"mabel-kang"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"mabel-kang"},"content":"    private NameAndSchoolContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":100,"author":{"gitId":"mabel-kang"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":101,"author":{"gitId":"mabel-kang"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_NAME, PREFIX_SCHOOL);"},{"lineNumber":102,"author":{"gitId":"mabel-kang"},"content":"        System.out.println(argMultimap);"},{"lineNumber":103,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":104,"author":{"gitId":"mabel-kang"},"content":"        String[] nameKeywords \u003d null;"},{"lineNumber":105,"author":{"gitId":"mabel-kang"},"content":"        String[] schoolKeywords \u003d null;"},{"lineNumber":106,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":107,"author":{"gitId":"mabel-kang"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":108,"author":{"gitId":"mabel-kang"},"content":"            nameKeywords \u003d extractKeywords(argMultimap, PREFIX_NAME);"},{"lineNumber":109,"author":{"gitId":"mabel-kang"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"mabel-kang"},"content":"        if (argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"},{"lineNumber":111,"author":{"gitId":"mabel-kang"},"content":"            schoolKeywords \u003d extractKeywords(argMultimap, PREFIX_SCHOOL);"},{"lineNumber":112,"author":{"gitId":"mabel-kang"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"mabel-kang"},"content":"        List\u003cString\u003e nameKeywordsList \u003d nameKeywords \u003d\u003d null ? null : Arrays.asList(nameKeywords);"},{"lineNumber":114,"author":{"gitId":"mabel-kang"},"content":"        List\u003cString\u003e schoolKeywordsList \u003d schoolKeywords \u003d\u003d null ? null : Arrays.asList(schoolKeywords);"},{"lineNumber":115,"author":{"gitId":"mabel-kang"},"content":"        return new NameAndSchoolContainsKeywordsPredicate(nameKeywordsList, schoolKeywordsList);"},{"lineNumber":116,"author":{"gitId":"mabel-kang"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":118,"author":{"gitId":"mabel-kang"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"mabel-kang"},"content":"     * Extracts keywords from input into a {@code String[]}."},{"lineNumber":120,"author":{"gitId":"mabel-kang"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"mabel-kang"},"content":"    private String[] extractKeywords(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":122,"author":{"gitId":"mabel-kang"},"content":"        String keywords \u003d \"\";"},{"lineNumber":123,"author":{"gitId":"mabel-kang"},"content":""},{"lineNumber":124,"author":{"gitId":"mabel-kang"},"content":"        if (prefix.equals(PREFIX_NAME)) {"},{"lineNumber":125,"author":{"gitId":"mabel-kang"},"content":"            keywords \u003d argMultimap.getValue(PREFIX_NAME).get();"},{"lineNumber":126,"author":{"gitId":"mabel-kang"},"content":"        } else if (prefix.equals(PREFIX_SCHOOL)) {"},{"lineNumber":127,"author":{"gitId":"mabel-kang"},"content":"            keywords \u003d argMultimap.getValue(PREFIX_SCHOOL).get();"},{"lineNumber":128,"author":{"gitId":"mabel-kang"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"mabel-kang"},"content":"        requireNonNull(keywords);"},{"lineNumber":130,"author":{"gitId":"mabel-kang"},"content":"        String trimmedName \u003d keywords.trim();"},{"lineNumber":131,"author":{"gitId":"mabel-kang"},"content":"        return trimmedName.split(\"\\\\s+\");"},{"lineNumber":132,"author":{"gitId":"mabel-kang"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"mabel-kang"},"content":"}"}],"authorContributionMap":{"mabel-kang":131,"sylviaokt":2}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GUARDIAN_NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GUARDIAN_NAME_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GUARDIAN_PHONE_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GUARDIAN_PHONE_DESC_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":23,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"},{"lineNumber":24,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"},{"lineNumber":25,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MATH;"},{"lineNumber":26,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SEC3;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":29,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GUARDIAN_NAME_BOB;"},{"lineNumber":30,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GUARDIAN_PHONE_BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MATH;"},{"lineNumber":35,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SEC3;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":57,"author":{"gitId":"chenzaza"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_MATH).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":60,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":62,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_MATH, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":65,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":66,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":67,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_MATH, new AddCommand(expectedPerson));"},{"lineNumber":68,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":69,"author":{"gitId":"chenzaza"},"content":"        // multiple schools - last school accepted"},{"lineNumber":70,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SCHOOL_DESC_AMY + SCHOOL_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":71,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":72,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_MATH, new AddCommand(expectedPerson));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":75,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":76,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":77,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_MATH, new AddCommand(expectedPerson));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":80,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":81,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":82,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_MATH, new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":85,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":86,"author":{"gitId":"chenzaza"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":87,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_MATH, new AddCommand(expectedPerson));"},{"lineNumber":88,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":89,"author":{"gitId":"chenzaza"},"content":"        // multiple guardian names - last guardian name accepted"},{"lineNumber":90,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":91,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_AMY + GUARDIAN_NAME_DESC_BOB"},{"lineNumber":92,"author":{"gitId":"chenzaza"},"content":"                + GUARDIAN_PHONE_DESC_BOB + TAG_DESC_MATH, new AddCommand(expectedPerson));"},{"lineNumber":93,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":94,"author":{"gitId":"chenzaza"},"content":"        // multiple guardian phones - last guardian phone accepted"},{"lineNumber":95,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":96,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_AMY"},{"lineNumber":97,"author":{"gitId":"chenzaza"},"content":"                + GUARDIAN_PHONE_DESC_BOB + TAG_DESC_MATH, new AddCommand(expectedPerson));"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":100,"author":{"gitId":"chenzaza"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_MATH, VALID_TAG_SEC3)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":102,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":103,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":104,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_SEC3 + TAG_DESC_MATH, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":111,"author":{"gitId":"chenzaza"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + SCHOOL_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":112,"author":{"gitId":"chenzaza"},"content":"                        + ADDRESS_DESC_AMY + GUARDIAN_NAME_DESC_AMY + GUARDIAN_PHONE_DESC_AMY,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":121,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":122,"author":{"gitId":"chenzaza"},"content":"                        + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB,"},{"lineNumber":123,"author":{"gitId":"chenzaza"},"content":"                expectedMessage);"},{"lineNumber":124,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":125,"author":{"gitId":"chenzaza"},"content":"        // missing school prefix"},{"lineNumber":126,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_SCHOOL_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":127,"author":{"gitId":"chenzaza"},"content":"                        + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":131,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":132,"author":{"gitId":"chenzaza"},"content":"                        + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":136,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":137,"author":{"gitId":"chenzaza"},"content":"                        + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":141,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":142,"author":{"gitId":"chenzaza"},"content":"                        + VALID_ADDRESS_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB,"},{"lineNumber":143,"author":{"gitId":"chenzaza"},"content":"                expectedMessage);"},{"lineNumber":144,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":145,"author":{"gitId":"chenzaza"},"content":"        // missing guardian name prefix"},{"lineNumber":146,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":147,"author":{"gitId":"chenzaza"},"content":"                        + ADDRESS_DESC_BOB + VALID_GUARDIAN_NAME_BOB + GUARDIAN_PHONE_DESC_BOB,"},{"lineNumber":148,"author":{"gitId":"chenzaza"},"content":"                expectedMessage);"},{"lineNumber":149,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":150,"author":{"gitId":"chenzaza"},"content":"        // missing guardian phone prefix"},{"lineNumber":151,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":152,"author":{"gitId":"chenzaza"},"content":"                        + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + VALID_GUARDIAN_PHONE_BOB,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":156,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_SCHOOL_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":157,"author":{"gitId":"chenzaza"},"content":"                        + VALID_ADDRESS_BOB + VALID_GUARDIAN_NAME_BOB + VALID_GUARDIAN_PHONE_BOB,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":164,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":165,"author":{"gitId":"chenzaza"},"content":"                + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":166,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_SEC3 + TAG_DESC_MATH, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":169,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":170,"author":{"gitId":"chenzaza"},"content":"                + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":171,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_SEC3 + TAG_DESC_MATH, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":174,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":175,"author":{"gitId":"chenzaza"},"content":"                + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":176,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_SEC3 + TAG_DESC_MATH, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":179,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":180,"author":{"gitId":"chenzaza"},"content":"                + INVALID_ADDRESS_DESC + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":181,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_SEC3 + TAG_DESC_MATH, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":184,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":185,"author":{"gitId":"chenzaza"},"content":"                + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":186,"author":{"gitId":"chenzaza"},"content":"                + INVALID_TAG_DESC + VALID_TAG_MATH, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":189,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + SCHOOL_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":190,"author":{"gitId":"chenzaza"},"content":"                + INVALID_ADDRESS_DESC + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB,"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":194,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + SCHOOL_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":195,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GUARDIAN_NAME_DESC_BOB + GUARDIAN_PHONE_DESC_BOB"},{"lineNumber":196,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_SEC3 + TAG_DESC_MATH,"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":95,"-":104}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitId":"sylviaokt"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"sylviaokt"},"content":"import seedu.address.model.person.NameAndSchoolContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"sylviaokt"},"content":"    public void parseCommand_search() throws Exception {"},{"lineNumber":73,"author":{"gitId":"sylviaokt"},"content":"        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"alice\", \"bernice\", \"charlie\");"},{"lineNumber":74,"author":{"gitId":"sylviaokt"},"content":"        List\u003cString\u003e schoolKeywords \u003d Arrays.asList(\"abc\", \"cde\", \"def\");"},{"lineNumber":75,"author":{"gitId":"sylviaokt"},"content":"        SearchCommand command \u003d (SearchCommand) parser.parseCommand("},{"lineNumber":76,"author":{"gitId":"sylviaokt"},"content":"                SearchCommand.COMMAND_WORD + \" n/\" + nameKeywords.stream().collect(Collectors.joining(\" \"))"},{"lineNumber":77,"author":{"gitId":"sylviaokt"},"content":"                        + \" s/\" + schoolKeywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":78,"author":{"gitId":"sylviaokt"},"content":"        assertEquals(new SearchCommand("},{"lineNumber":79,"author":{"gitId":"sylviaokt"},"content":"                new NameAndSchoolContainsKeywordsPredicate(nameKeywords, schoolKeywords)), command);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":94,"sylviaokt":10}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MATH;"},{"lineNumber":17,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SEC3;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MATH;"},{"lineNumber":26,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SEC3;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_MATH + TAG_DESC_SEC3 + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_MATH + TAG_EMPTY + TAG_DESC_SEC3, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"chenzaza"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_MATH + TAG_DESC_SEC3, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":111,"author":{"gitId":"chenzaza"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_SEC3"},{"lineNumber":112,"author":{"gitId":"chenzaza"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_MATH;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":116,"author":{"gitId":"chenzaza"},"content":"                .withTags(VALID_TAG_SEC3, VALID_TAG_MATH).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitId":"chenzaza"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_MATH;"},{"lineNumber":163,"author":{"gitId":"chenzaza"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_MATH).build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitId":"chenzaza"},"content":"                + TAG_DESC_MATH + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_MATH"},{"lineNumber":173,"author":{"gitId":"chenzaza"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_SEC3;"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":176,"author":{"gitId":"chenzaza"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_MATH, VALID_TAG_SEC3)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":15,"-":196}},{"path":"src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"sylviaokt"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":3,"author":{"gitId":"sylviaokt"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"sylviaokt"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"sylviaokt"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":7,"author":{"gitId":"sylviaokt"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":9,"author":{"gitId":"sylviaokt"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":11,"author":{"gitId":"sylviaokt"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":12,"author":{"gitId":"sylviaokt"},"content":"import seedu.address.model.person.NameAndSchoolContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":14,"author":{"gitId":"sylviaokt"},"content":"public class SearchCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":16,"author":{"gitId":"sylviaokt"},"content":"    private SearchCommandParser parser \u003d new SearchCommandParser();"},{"lineNumber":17,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":18,"author":{"gitId":"sylviaokt"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"sylviaokt"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"sylviaokt"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"sylviaokt"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":23,"author":{"gitId":"sylviaokt"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"sylviaokt"},"content":"    public void parse_validArgs_returnsSearchCommand() {"},{"lineNumber":25,"author":{"gitId":"sylviaokt"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitId":"sylviaokt"},"content":"        SearchCommand expectedSearchCommand \u003d"},{"lineNumber":27,"author":{"gitId":"sylviaokt"},"content":"                new SearchCommand(new NameAndSchoolContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"),"},{"lineNumber":28,"author":{"gitId":"sylviaokt"},"content":"                        Arrays.asList(\"abc\", \"def\")));"},{"lineNumber":29,"author":{"gitId":"sylviaokt"},"content":"        assertParseSuccess(parser, \" n/Alice Bob s/abc def\", expectedSearchCommand);"},{"lineNumber":30,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":31,"author":{"gitId":"sylviaokt"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitId":"sylviaokt"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t Bob  \\t s/abc \\n def   \\t\", expectedSearchCommand);"},{"lineNumber":33,"author":{"gitId":"sylviaokt"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"sylviaokt"},"content":""},{"lineNumber":35,"author":{"gitId":"sylviaokt"},"content":"}"}],"authorContributionMap":{"sylviaokt":35}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SEC3;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"chenzaza"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SEC3)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":76,"author":{"gitId":"chenzaza"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SEC3)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":3,"-":99}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GUARDIAN_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GUARDIAN_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"},{"lineNumber":12,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SEC3;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":39,"author":{"gitId":"chenzaza"},"content":"                .withAddress(VALID_ADDRESS_BOB).withSchool(VALID_SCHOOL_BOB).withGuardianName(VALID_GUARDIAN_NAME_BOB)"},{"lineNumber":40,"author":{"gitId":"chenzaza"},"content":"                .withGuardianPhone(VALID_GUARDIAN_PHONE_BOB).withTags(VALID_TAG_SEC3).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"chenzaza"},"content":"        // different school -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"chenzaza"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withSchool(VALID_SCHOOL_BOB).build();"},{"lineNumber":81,"author":{"gitId":"chenzaza"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":82,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"chenzaza"},"content":"        // different guardian\u0027s name -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"chenzaza"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_GUARDIAN_NAME_BOB).build();"},{"lineNumber":97,"author":{"gitId":"chenzaza"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":98,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":99,"author":{"gitId":"chenzaza"},"content":"        // different guardian\u0027s phone -\u003e returns false"},{"lineNumber":100,"author":{"gitId":"chenzaza"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_GUARDIAN_PHONE_BOB).build();"},{"lineNumber":101,"author":{"gitId":"chenzaza"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":102,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":104,"author":{"gitId":"chenzaza"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_SEC3).build();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":19,"-":88}},{"path":"src/test/java/seedu/address/model/person/SchoolTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chenzaza"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":3,"author":{"gitId":"chenzaza"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"chenzaza"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"public class SchoolTest {"},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"chenzaza"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"chenzaza"},"content":"        assertThrows(NullPointerException.class, () -\u003e new School(null));"},{"lineNumber":14,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":16,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"chenzaza"},"content":"    public void constructor_invalidSchool_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"chenzaza"},"content":"        String invalidSchool \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"chenzaza"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new School(invalidSchool));"},{"lineNumber":20,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":22,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"chenzaza"},"content":"    public void isValidSchool() {"},{"lineNumber":24,"author":{"gitId":"chenzaza"},"content":"        // null school"},{"lineNumber":25,"author":{"gitId":"chenzaza"},"content":"        assertThrows(NullPointerException.class, () -\u003e School.isValidSchool(null));"},{"lineNumber":26,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":27,"author":{"gitId":"chenzaza"},"content":"        // invalid school"},{"lineNumber":28,"author":{"gitId":"chenzaza"},"content":"        assertFalse(School.isValidSchool(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"chenzaza"},"content":"        assertFalse(School.isValidSchool(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"chenzaza"},"content":"        assertFalse(School.isValidSchool(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"chenzaza"},"content":"        assertFalse(School.isValidSchool(\"school*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":33,"author":{"gitId":"chenzaza"},"content":"        // valid school"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"        assertTrue(School.isValidSchool(\"the best school\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"chenzaza"},"content":"        assertTrue(School.isValidSchool(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"chenzaza"},"content":"        assertTrue(School.isValidSchool(\"123 school\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"        assertTrue(School.isValidSchool(\"Best School\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"chenzaza"},"content":"        assertTrue(School.isValidSchool(\"David Roger Jackson Ray Secondary School\")); // long school names"},{"lineNumber":39,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chenzaza"},"content":"}"}],"authorContributionMap":{"chenzaza":40}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SEC3;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"chenzaza"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SEC3)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"chenzaza"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SEC3)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":3,"-":167}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"chenzaza"},"content":"import seedu.address.model.person.School;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitId":"chenzaza"},"content":"    private static final String INVALID_SCHOOL \u003d \"R@chel School\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitId":"chenzaza"},"content":"    private static final String INVALID_GUARDIAN_NAME \u003d \"\u0026lice\";"},{"lineNumber":28,"author":{"gitId":"chenzaza"},"content":"    private static final String INVALID_GUARDIAN_PHONE \u003d \"+432156\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitId":"chenzaza"},"content":"    private static final String VALID_SCHOOL \u003d BENSON.getSchool().toString();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":36,"author":{"gitId":"chenzaza"},"content":"    private static final String VALID_GUARDIAN_NAME \u003d BENSON.getGuardianName().toString();"},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"    private static final String VALID_GUARDIAN_PHONE \u003d BENSON.getGuardianPhone().toString();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":51,"author":{"gitId":"chenzaza"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":52,"author":{"gitId":"chenzaza"},"content":"                        VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":60,"author":{"gitId":"chenzaza"},"content":"                VALID_ADDRESS, VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"chenzaza"},"content":"    public void toModelType_invalidSchool_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":68,"author":{"gitId":"chenzaza"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_SCHOOL, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":69,"author":{"gitId":"chenzaza"},"content":"                        VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":70,"author":{"gitId":"chenzaza"},"content":"        String expectedMessage \u003d School.MESSAGE_CONSTRAINTS;"},{"lineNumber":71,"author":{"gitId":"chenzaza"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":72,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":74,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"chenzaza"},"content":"    public void toModelType_nullSchool_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":77,"author":{"gitId":"chenzaza"},"content":"                VALID_ADDRESS, VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":78,"author":{"gitId":"chenzaza"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName());"},{"lineNumber":79,"author":{"gitId":"chenzaza"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":80,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":85,"author":{"gitId":"chenzaza"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":86,"author":{"gitId":"chenzaza"},"content":"                        VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":93,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":94,"author":{"gitId":"chenzaza"},"content":"                VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":102,"author":{"gitId":"chenzaza"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":103,"author":{"gitId":"chenzaza"},"content":"                        VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":111,"author":{"gitId":"chenzaza"},"content":"                VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":119,"author":{"gitId":"chenzaza"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":120,"author":{"gitId":"chenzaza"},"content":"                        VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":127,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":128,"author":{"gitId":"chenzaza"},"content":"                null, VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"chenzaza"},"content":"    public void toModelType_invalidGuardianName_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":136,"author":{"gitId":"chenzaza"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":137,"author":{"gitId":"chenzaza"},"content":"                        INVALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":138,"author":{"gitId":"chenzaza"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":139,"author":{"gitId":"chenzaza"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":140,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":142,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":143,"author":{"gitId":"chenzaza"},"content":"    public void toModelType_nullGuardianName_throwsIllegalValueException() {"},{"lineNumber":144,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":145,"author":{"gitId":"chenzaza"},"content":"                VALID_ADDRESS, null, VALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":146,"author":{"gitId":"chenzaza"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":147,"author":{"gitId":"chenzaza"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":148,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":150,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"chenzaza"},"content":"    public void toModelType_invalidGuardianPhone_throwsIllegalValueException() {"},{"lineNumber":152,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":153,"author":{"gitId":"chenzaza"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":154,"author":{"gitId":"chenzaza"},"content":"                        VALID_GUARDIAN_NAME, INVALID_GUARDIAN_PHONE, VALID_TAGS);"},{"lineNumber":155,"author":{"gitId":"chenzaza"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":156,"author":{"gitId":"chenzaza"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":157,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":159,"author":{"gitId":"chenzaza"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"chenzaza"},"content":"    public void toModelType_nullGuardianPhone_throwsIllegalValueException() {"},{"lineNumber":161,"author":{"gitId":"chenzaza"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":162,"author":{"gitId":"chenzaza"},"content":"                VALID_ADDRESS, VALID_GUARDIAN_NAME, null, VALID_TAGS);"},{"lineNumber":163,"author":{"gitId":"chenzaza"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":164,"author":{"gitId":"chenzaza"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":165,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":172,"author":{"gitId":"chenzaza"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SCHOOL, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":173,"author":{"gitId":"chenzaza"},"content":"                        VALID_GUARDIAN_NAME, VALID_GUARDIAN_PHONE, invalidTags);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":76,"-":101}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitId":"chenzaza"},"content":"import seedu.address.model.person.School;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"        descriptor.setSchool(person.getSchool());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"        descriptor.setGuardianName(person.getGuardianName());"},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"        descriptor.setGuardianPhone(person.getGuardianPhone());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"chenzaza"},"content":"     * Sets the {@code School} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"chenzaza"},"content":"    public EditPersonDescriptorBuilder withSchool(String school) {"},{"lineNumber":58,"author":{"gitId":"chenzaza"},"content":"        descriptor.setSchool(new School(school));"},{"lineNumber":59,"author":{"gitId":"chenzaza"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"chenzaza"},"content":"     * Sets the {@code GuardianName} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":88,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"chenzaza"},"content":"    public EditPersonDescriptorBuilder withGuardianName(String name) {"},{"lineNumber":90,"author":{"gitId":"chenzaza"},"content":"        descriptor.setGuardianName(new Name(name));"},{"lineNumber":91,"author":{"gitId":"chenzaza"},"content":"        return this;"},{"lineNumber":92,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":94,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"chenzaza"},"content":"     * Sets the {@code GuardianPhone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":96,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"chenzaza"},"content":"    public EditPersonDescriptorBuilder withGuardianPhone(String phone) {"},{"lineNumber":98,"author":{"gitId":"chenzaza"},"content":"        descriptor.setGuardianPhone(new Phone(phone));"},{"lineNumber":99,"author":{"gitId":"chenzaza"},"content":"        return this;"},{"lineNumber":100,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":28,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"chenzaza"},"content":"import seedu.address.model.person.School;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":21,"author":{"gitId":"chenzaza"},"content":"    public static final String DEFAULT_SCHOOL \u003d \"Jurong West Secondary School\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitId":"chenzaza"},"content":"    public static final String DEFAULT_GUARDIAN_NAME \u003d \"Ben Bee\";"},{"lineNumber":26,"author":{"gitId":"chenzaza"},"content":"    public static final String DEFAULT_GUARDIAN_PHONE \u003d \"88886666\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":29,"author":{"gitId":"chenzaza"},"content":"    private School school;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitId":"chenzaza"},"content":"    private Name guardianName;"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"    private Phone guardianPhone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"        school \u003d new School(DEFAULT_SCHOOL);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":46,"author":{"gitId":"chenzaza"},"content":"        guardianName \u003d new Name(DEFAULT_GUARDIAN_NAME);"},{"lineNumber":47,"author":{"gitId":"chenzaza"},"content":"        guardianPhone \u003d new Phone(DEFAULT_GUARDIAN_PHONE);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":56,"author":{"gitId":"chenzaza"},"content":"        school \u003d personToCopy.getSchool();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":60,"author":{"gitId":"chenzaza"},"content":"        guardianName \u003d personToCopy.getGuardianName();"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":"        guardianPhone \u003d personToCopy.getGuardianPhone();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"chenzaza"},"content":"     * Sets the {@code School} of the {@code Person} that we are building."},{"lineNumber":107,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"chenzaza"},"content":"    public PersonBuilder withSchool(String school) {"},{"lineNumber":109,"author":{"gitId":"chenzaza"},"content":"        this.school \u003d new School(school);"},{"lineNumber":110,"author":{"gitId":"chenzaza"},"content":"        return this;"},{"lineNumber":111,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":113,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"chenzaza"},"content":"     * Sets the {@code GuardianName} of the {@code Person} that we are building."},{"lineNumber":115,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"chenzaza"},"content":"    public PersonBuilder withGuardianName(String name) {"},{"lineNumber":117,"author":{"gitId":"chenzaza"},"content":"        this.guardianName \u003d new Name(name);"},{"lineNumber":118,"author":{"gitId":"chenzaza"},"content":"        return this;"},{"lineNumber":119,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":121,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"chenzaza"},"content":"     * Sets the {@code GuardianPhone} of the {@code Person} that we are building."},{"lineNumber":123,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"chenzaza"},"content":"    public PersonBuilder withGuardianPhone(String phone) {"},{"lineNumber":125,"author":{"gitId":"chenzaza"},"content":"        this.guardianPhone \u003d new Phone(phone);"},{"lineNumber":126,"author":{"gitId":"chenzaza"},"content":"        return this;"},{"lineNumber":127,"author":{"gitId":"chenzaza"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"chenzaza"},"content":""},{"lineNumber":129,"author":{"gitId":"chenzaza"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"chenzaza"},"content":"     * Builds the {@code Person}."},{"lineNumber":131,"author":{"gitId":"chenzaza"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":133,"author":{"gitId":"chenzaza"},"content":"        return new Person(name, school, phone, email,"},{"lineNumber":134,"author":{"gitId":"chenzaza"},"content":"                address, guardianName, guardianPhone, tags);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":42,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_NAME;"},{"lineNumber":6,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GUARDIAN_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":37,"author":{"gitId":"chenzaza"},"content":"        sb.append(PREFIX_SCHOOL + person.getSchool().fullSchoolName + \" \");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"        sb.append(PREFIX_GUARDIAN_NAME + person.getGuardianName().fullName + \" \");"},{"lineNumber":42,"author":{"gitId":"chenzaza"},"content":"        sb.append(PREFIX_GUARDIAN_PHONE + person.getGuardianPhone().value + \" \");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":44,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":55,"author":{"gitId":"chenzaza"},"content":"        descriptor.getSchool().ifPresent(school -\u003e sb.append(PREFIX_SCHOOL).append(school.fullSchoolName).append(\" \"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":59,"author":{"gitId":"chenzaza"},"content":"        descriptor.getGuardianName().ifPresent(guardianName -\u003e sb.append(PREFIX_GUARDIAN_NAME)"},{"lineNumber":60,"author":{"gitId":"chenzaza"},"content":"                .append(guardianName.fullName).append(\" \"));"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":"        descriptor.getGuardianPhone().ifPresent(guardianPhone -\u003e sb.append(PREFIX_GUARDIAN_PHONE)"},{"lineNumber":62,"author":{"gitId":"chenzaza"},"content":"                .append(guardianPhone.value).append(\" \"));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":11,"-":62}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GUARDIAN_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GUARDIAN_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GUARDIAN_PHONE_AMY;"},{"lineNumber":10,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GUARDIAN_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":16,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"},{"lineNumber":17,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MATH;"},{"lineNumber":18,"author":{"gitId":"chenzaza"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SEC3;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":34,"author":{"gitId":"chenzaza"},"content":"            .withPhone(\"94351253\").withSchool(\"Jurong West Secondary School\")"},{"lineNumber":35,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(\"Amanda Pauline\").withGuardianPhone(\"94351254\")"},{"lineNumber":36,"author":{"gitId":"chenzaza"},"content":"            .withTags(\"sec1\").build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":40,"author":{"gitId":"chenzaza"},"content":"            .withSchool(\"Clementi Town Secondary School\").withGuardianName(\"Jay Maier\")"},{"lineNumber":41,"author":{"gitId":"chenzaza"},"content":"            .withGuardianPhone(\"98765433\").withTags(\"sec2\", \"math\").build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":43,"author":{"gitId":"chenzaza"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withSchool(\"Wall Street Secondary School\")"},{"lineNumber":44,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(\"Louis Kurz\").withGuardianPhone(\"95352564\").build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":46,"author":{"gitId":"chenzaza"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withSchool(\"Clementi Town Secondary School\")"},{"lineNumber":47,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(\"Jay Maier\").withGuardianPhone(\"98765433\").withTags(\"sec3\").build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":49,"author":{"gitId":"chenzaza"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withSchool(\"Michegan Secondary School\")"},{"lineNumber":50,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(\"John Meyer\").withGuardianPhone(\"9482225\").build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":52,"author":{"gitId":"chenzaza"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withSchool(\"Tokyo Secondary School\")"},{"lineNumber":53,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(\"Fay Kunz\").withGuardianPhone(\"9482425\").build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":55,"author":{"gitId":"chenzaza"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withSchool(\"Fourth Secondary School\")"},{"lineNumber":56,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(\"Barbara Best\").withGuardianPhone(\"9482444\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":60,"author":{"gitId":"chenzaza"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withSchool(\"Little India Secondary School\")"},{"lineNumber":61,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(\"Alexander Meier\").withGuardianPhone(\"8482422\").build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":63,"author":{"gitId":"chenzaza"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSchool(\"Chicago Secondary School\")"},{"lineNumber":64,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(\"Robert Mueller\").withGuardianPhone(\"8482133\").build();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":68,"author":{"gitId":"chenzaza"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withSchool(VALID_SCHOOL_AMY)"},{"lineNumber":69,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(VALID_GUARDIAN_NAME_AMY).withGuardianPhone(VALID_GUARDIAN_PHONE_AMY)"},{"lineNumber":70,"author":{"gitId":"chenzaza"},"content":"            .withTags(VALID_TAG_MATH).build();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":72,"author":{"gitId":"chenzaza"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSchool(VALID_SCHOOL_BOB)"},{"lineNumber":73,"author":{"gitId":"chenzaza"},"content":"            .withGuardianName(VALID_GUARDIAN_NAME_BOB).withGuardianPhone(VALID_GUARDIAN_PHONE_BOB)"},{"lineNumber":74,"author":{"gitId":"chenzaza"},"content":"            .withTags(VALID_TAG_SEC3, VALID_TAG_MATH)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chenzaza":33,"-":62}}]
