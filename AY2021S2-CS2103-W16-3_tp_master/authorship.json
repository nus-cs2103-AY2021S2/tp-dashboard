[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-W16-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-W16-3/tp/actions/workflows/gradle.yml)"},{"lineNumber":2,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"* HippoCampus is a contact and task manager to help students keep track of tasks.\u003cbr\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  Example usages:"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"  * Remember your friends\u0027 contacts/birthdays"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"  * Keep track of assignment deadlines"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"  * Quickly access contacts of group mates in the same project/module"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"  * Take short notes/reminders/todos"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"* It is named `HippoCampus` because the hippocampus is a part of the brain that plays a major role in **memory** and **learning**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"* For new users keen to start using HippoCampus, check out the **[User Guide](docs/UserGuide.md)**."},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"* For the detailed documentation of this project, see the **[Developer Guide](docs/DeveloperGuide.md)**."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"pyuxiang":1,"nickyfoo":9,"-":5}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"### Glenn Lee"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"\u003cimg src\u003d\"images/glennljs.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"[[github](http://github.com/glennljs)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"### Justin Peh Yu Xiang"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"\u003cimg src\u003d\"images/pyuxiang.png\" width\u003d\"200px\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"[[homepage](https://pyuxiang.com/)]"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"[[github](https://github.com/pyuxiang)]"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"### Foo Chuan Le, Nicholas"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"\u003cimg src\u003d\"images/nickyfoo.png\" width\u003d\"200px\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"[[github](http://github.com/nickyfoo)]"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"### Gary Lee Jia Jin"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"\u003cimg src\u003d\"images/garyljj.png\" width\u003d\"200px\"\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"[[github](https://github.com/garyljj)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"### Zheng Ruoxin"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"\u003cimg src\u003d\"images/zhengruoxin.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"[[github](https://github.com/zhengruoxin)]"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"### Lee Pai Joo Yvelle"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"\u003cimg src\u003d\"images/ellevy.png\" width\u003d\"200px\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"[[github](https://github.com/ellevy)]"}],"authorContributionMap":{"glennljs":3,"zhengruoxin":3,"pyuxiang":4,"nickyfoo":3,"garyljj":3,"-":30,"Ellevy":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point)."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"nickyfoo"},"content":"* has a need to manage a significant number of contacts across multiple modules/organisations"},{"lineNumber":240,"author":{"gitId":"nickyfoo"},"content":"* has a need to keep track of many assignment deadlines"},{"lineNumber":241,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"nickyfoo"},"content":"**Value proposition**:"},{"lineNumber":247,"author":{"gitId":"nickyfoo"},"content":"* manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":248,"author":{"gitId":"nickyfoo"},"content":"* group and access contacts by organization/module"},{"lineNumber":249,"author":{"gitId":"nickyfoo"},"content":"* track assignment deadlines"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":256,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":257,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"},{"lineNumber":258,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person               |                                                                        |"},{"lineNumber":259,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |"},{"lineNumber":261,"author":{"gitId":"garyljj"},"content":"| `* * *` | new user exploring the app | see the app populated with sample data | know how the app will look like when it is in use |"},{"lineNumber":262,"author":{"gitId":"garyljj"},"content":"| `* * *` | user ready to starting to use the app | purge all current data | get rid of sample data used for exploring the app |"},{"lineNumber":263,"author":{"gitId":"garyljj"},"content":"| `* * *` | new user exploring the app | view a help page/ use a help command | know what functions are available/ learn the correct syntax for functions |"},{"lineNumber":264,"author":{"gitId":"garyljj"},"content":"| `* * *` | user starting to use the app | tag contacts to an organization/module | easily look up relevant contacts for the organization/module |"},{"lineNumber":265,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |"},{"lineNumber":266,"author":{"gitId":"-"},"content":"| `*`      | user with many persons in the address book | sort persons by name           | locate a person easily                                                 |"},{"lineNumber":267,"author":{"gitId":"zhengruoxin"},"content":"| `* *`    | user who enjoys planning ahead             | search dates                                               | see tasks in a time period"},{"lineNumber":268,"author":{"gitId":"zhengruoxin"},"content":"| `*` | busy student | check timetable | never be late |"},{"lineNumber":269,"author":{"gitId":"zhengruoxin"},"content":"| `*` | busy student | track my meetings | see when I am free ||"},{"lineNumber":270,"author":{"gitId":"glennljs"},"content":"| `*`      | busy student                               | search free times                                          | find times to relax                              |"},{"lineNumber":271,"author":{"gitId":"nickyfoo"},"content":"| `* *`    | efficient student                          | look at the number of completed tasks each week            | monitor my productivity                          |"},{"lineNumber":272,"author":{"gitId":"nickyfoo"},"content":"| `* *`    | student with a plan                        | access the important reminders and tasks for the day/week  | remind myself to be on task and follow my plan   |"},{"lineNumber":273,"author":{"gitId":"zhengruoxin"},"content":"| `* *` | forgetful student | record all my deadlines | easily access all deadlines due |"},{"lineNumber":274,"author":{"gitId":"zhengruoxin"},"content":"| `*` | hardworking student | diligently plan my deadlines | always keep on task |"},{"lineNumber":275,"author":{"gitId":"zhengruoxin"},"content":"| `* *` | social butterfly | keep track of events | always remember the things to attend |"},{"lineNumber":276,"author":{"gitId":"zhengruoxin"},"content":"| `* *` | friend | record birthdays | wish my friends on time |"},{"lineNumber":277,"author":{"gitId":"glennljs"},"content":"| `* *`    | experienced user                           | execute multiple commands at a time                        | improve the efficiency of my workflow            |"},{"lineNumber":278,"author":{"gitId":"nickyfoo"},"content":"| `* *`    | long term user/student                     | Delete and wipe all my current tasks                       | use it in a clean slate for future semesters     |"},{"lineNumber":279,"author":{"gitId":"nickyfoo"},"content":"| `*`      | student taking many modules                | check exam dates                         |                                                                |"},{"lineNumber":280,"author":{"gitId":"nickyfoo"},"content":"| `* *`    | forgetful person                           | take down notes                          |                                                                |"},{"lineNumber":281,"author":{"gitId":"nickyfoo"},"content":"| `* *`    | clumsy person                              | undo/edit misspelled names/numbers/notes | fix mistakes                                                   |"},{"lineNumber":282,"author":{"gitId":"nickyfoo"},"content":"| `*`      | disorganized person                        | view a calendar                          | see all tasks in the coming month                              |"},{"lineNumber":283,"author":{"gitId":"nickyfoo"},"content":"| `*`      | disorganized person                        | set recurring tasks                      | have the same periodic reminder without keying it in manually  |"},{"lineNumber":284,"author":{"gitId":"nickyfoo"},"content":"| `*`      | reflective person                          | look at completed tasks/an archive       | reminisce on the past semester and feel accomplished           |"},{"lineNumber":285,"author":{"gitId":"nickyfoo"},"content":"| `* *`    | student with many modules and activities   | color code tags                          | differentiate tasks easily                                     |"},{"lineNumber":286,"author":{"gitId":"Ellevy"},"content":"| `* * *`  | returning user                             | sort/search through contacts based on organisation/module  | contact the relevant people to set up a meeting     |"},{"lineNumber":287,"author":{"gitId":"Ellevy"},"content":"| `*`      | returning user                             | edit a deadline/meeting that was pushed back               | properly reflect the updated times                  |"},{"lineNumber":288,"author":{"gitId":"Ellevy"},"content":"| `*`      | returning user                             | change the task description of an existing task            | reflect the changed task                            |"},{"lineNumber":289,"author":{"gitId":"Ellevy"},"content":"| `* *`    | returning user                             | mark tasks as complete                                     | review my productivity                              |"},{"lineNumber":290,"author":{"gitId":"Ellevy"},"content":"| `* *`    | returning user                             | delete completed/irrelevant tasks                          | reduce clutter on HippoCampus                       |"},{"lineNumber":291,"author":{"gitId":"Ellevy"},"content":"| `*`      | returning user                             | delete all tasks/deadlines related to a tag                | reduce clutter and prepare for subsequent modules   |"},{"lineNumber":292,"author":{"gitId":"Ellevy"},"content":"| `*`      | returning user                             | replace tags (e.g. all cs2103 to cs3203)                   | transfer contacts                                   |"},{"lineNumber":293,"author":{"gitId":"nickyfoo"},"content":"| `*` | potential user exploring the app | import existing data from similar apps | compare features between apps to decide whether I’d like to use the app |"},{"lineNumber":294,"author":{"gitId":"garyljj"},"content":"| `*` | student | add my Modules | easily organise my contacts and tasks based on module |"},{"lineNumber":295,"author":{"gitId":"garyljj"},"content":"| `*` | user starting to use the app | tag meetings to an organisation/module | know what organisation/module the meeting is for |"},{"lineNumber":296,"author":{"gitId":"garyljj"},"content":"| `* *` | user starting to use the app | add tasks/deliverables along with an optional deadline | see what tasks need to be done |"},{"lineNumber":297,"author":{"gitId":"zhengruoxin"},"content":"| `* *` | expert user | create shortcuts | run multiple repeated commands at once to save time |"},{"lineNumber":298,"author":{"gitId":"pyuxiang"},"content":"| `* *` | night owl | enable dark mode | use the app safely in dark environments |"},{"lineNumber":299,"author":{"gitId":"pyuxiang"},"content":"| `*` | overworked student | see my tasks/events in as a weekly view / monthly calendar | prioritize todos |"},{"lineNumber":300,"author":{"gitId":"pyuxiang"},"content":"| `*` | tech-savvy student | synchronize my todo list with cloud applications, e.g., Google Calendar | access todos from multiple platforms |"},{"lineNumber":301,"author":{"gitId":"pyuxiang"},"content":"| `*` | satisfied student | share links to the application with my friends and family on social media | encourage close contacts to use the application |"},{"lineNumber":302,"author":{"gitId":"pyuxiang"},"content":"| `*` | efficient student | group and manage multiple todos together | save time processing todos |"},{"lineNumber":303,"author":{"gitId":"pyuxiang"},"content":"| `* *` | efficient student | add priority levels to each todo | prioritize the order of todos |"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"pyuxiang"},"content":"(For all use cases below, the **System** is the `HippoCampus` application while the **Actor** is the `user`,"},{"lineNumber":310,"author":{"gitId":"pyuxiang"},"content":"unless specified otherwise)"},{"lineNumber":311,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":312,"author":{"gitId":"zhengruoxin"},"content":"    Use case: UC1 - Add a contact"},{"lineNumber":313,"author":{"gitId":"zhengruoxin"},"content":"    MSS:"},{"lineNumber":314,"author":{"gitId":"garyljj"},"content":"      1. User enters the details for a contact to be added."},{"lineNumber":315,"author":{"gitId":"garyljj"},"content":"      2. HippoCampus displays the new list of contacts with the added contact."},{"lineNumber":316,"author":{"gitId":"zhengruoxin"},"content":"      Use case ends."},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"zhengruoxin"},"content":"    Extensions:"},{"lineNumber":319,"author":{"gitId":"zhengruoxin"},"content":"      1a. HippoCampus detects an error in the entered data."},{"lineNumber":320,"author":{"gitId":"zhengruoxin"},"content":"        1a1. HippoCampus shows the user an example of correct format."},{"lineNumber":321,"author":{"gitId":"zhengruoxin"},"content":"        1a2. HippoCampus requests for the correct data."},{"lineNumber":322,"author":{"gitId":"zhengruoxin"},"content":"        Use case ends."},{"lineNumber":323,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":324,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":325,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":326,"author":{"gitId":"zhengruoxin"},"content":"    Use case: UC2 - Clear"},{"lineNumber":327,"author":{"gitId":"zhengruoxin"},"content":"    MSS:"},{"lineNumber":328,"author":{"gitId":"garyljj"},"content":"      1. User requests to clear all data."},{"lineNumber":329,"author":{"gitId":"zhengruoxin"},"content":"      2. HippoCampus clears all existing data."},{"lineNumber":330,"author":{"gitId":"zhengruoxin"},"content":"      Use case ends."},{"lineNumber":331,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":332,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":333,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":334,"author":{"gitId":"garyljj"},"content":"    Use case: UC3 - Delete a contact"},{"lineNumber":335,"author":{"gitId":"garyljj"},"content":"    MSS:"},{"lineNumber":336,"author":{"gitId":"garyljj"},"content":"      1. User request for a contact to be deleted."},{"lineNumber":337,"author":{"gitId":"garyljj"},"content":"      2. HippoCampus displays the list of contacts without the deleted contact."},{"lineNumber":338,"author":{"gitId":"garyljj"},"content":"      Use case ends."},{"lineNumber":339,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":340,"author":{"gitId":"garyljj"},"content":"    Extensions:"},{"lineNumber":341,"author":{"gitId":"garyljj"},"content":"      1a. The contact is invalid."},{"lineNumber":342,"author":{"gitId":"garyljj"},"content":"        1a1. HippoCampus shows an error message."},{"lineNumber":343,"author":{"gitId":"pyuxiang"},"content":"        Use case ends."},{"lineNumber":344,"author":{"gitId":"garyljj"},"content":"      1b. HippoCampus detects invalid format."},{"lineNumber":345,"author":{"gitId":"garyljj"},"content":"        1b1. HippoCampus shows the user an example of the correct format."},{"lineNumber":346,"author":{"gitId":"garyljj"},"content":"        1b2. HippoCampus requests for the correct data."},{"lineNumber":347,"author":{"gitId":"garyljj"},"content":"        Use case ends."},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"Ellevy"},"content":"    Use case: UC4 - Edit a contact"},{"lineNumber":352,"author":{"gitId":"Ellevy"},"content":"    MSS:"},{"lineNumber":353,"author":{"gitId":"garyljj"},"content":"      1. User request for a contact to be edited."},{"lineNumber":354,"author":{"gitId":"Ellevy"},"content":"      2. HippoCampus displays the updated details."},{"lineNumber":355,"author":{"gitId":"Ellevy"},"content":"      Use case ends."},{"lineNumber":356,"author":{"gitId":"Ellevy"},"content":"    "},{"lineNumber":357,"author":{"gitId":"Ellevy"},"content":"    Extensions:"},{"lineNumber":358,"author":{"gitId":"garyljj"},"content":"      1a. HippoCampus detects invalid format."},{"lineNumber":359,"author":{"gitId":"Ellevy"},"content":"        1a1. HippoCampus shows the user an example of the correct format."},{"lineNumber":360,"author":{"gitId":"Ellevy"},"content":"        1a2. HippoCampus requests for the correct data."},{"lineNumber":361,"author":{"gitId":"Ellevy"},"content":"        Use case ends."},{"lineNumber":362,"author":{"gitId":"garyljj"},"content":"      1b. The contact is invalid."},{"lineNumber":363,"author":{"gitId":"Ellevy"},"content":"        1b1. HippoCampus requests for the correct data."},{"lineNumber":364,"author":{"gitId":"Ellevy"},"content":"        Use case ends."},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"garyljj"},"content":"    Use case: UC5 - Find a contact"},{"lineNumber":369,"author":{"gitId":"garyljj"},"content":"    MSS:"},{"lineNumber":370,"author":{"gitId":"garyljj"},"content":"      1. User enters the details to search for contacts."},{"lineNumber":371,"author":{"gitId":"garyljj"},"content":"      2. HippoCampus displays a list of contacts that match the input."},{"lineNumber":372,"author":{"gitId":"garyljj"},"content":"      Use case ends."},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"garyljj"},"content":"    Extensions:"},{"lineNumber":375,"author":{"gitId":"garyljj"},"content":"      1a. HippoCampus detects invalid format."},{"lineNumber":376,"author":{"gitId":"garyljj"},"content":"        1a1. HippoCampus shows the user an example of correct format"},{"lineNumber":377,"author":{"gitId":"garyljj"},"content":"        1a2. HippoCampus requests for the correct data."},{"lineNumber":378,"author":{"gitId":"garyljj"},"content":"        Use case ends."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"garyljj"},"content":"    Use case: UC6 - List contacts"},{"lineNumber":383,"author":{"gitId":"garyljj"},"content":"    MSS:"},{"lineNumber":384,"author":{"gitId":"garyljj"},"content":"      1. User chooses to list all contacts "},{"lineNumber":385,"author":{"gitId":"garyljj"},"content":"      2. HippoCampus displays a list of all contacts."},{"lineNumber":386,"author":{"gitId":"garyljj"},"content":"      Use case ends."},{"lineNumber":387,"author":{"gitId":"garyljj"},"content":"    Extensions:"},{"lineNumber":388,"author":{"gitId":"garyljj"},"content":"      1a. User chooses a sort order from a list of possible sort orders."},{"lineNumber":389,"author":{"gitId":"garyljj"},"content":"        1a1. HippoCampus displays the list of all contacts in the given sort order."},{"lineNumber":390,"author":{"gitId":"garyljj"},"content":"        Use case ends."},{"lineNumber":391,"author":{"gitId":"garyljj"},"content":"      1b. User enters an invalid sort order or no sort order after a -f input."},{"lineNumber":392,"author":{"gitId":"garyljj"},"content":"        1b1. HippoCampus displays an error."},{"lineNumber":393,"author":{"gitId":"garyljj"},"content":"        Use case ends."},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"nickyfoo"},"content":"    Use case: UC7 - Find tags"},{"lineNumber":398,"author":{"gitId":"nickyfoo"},"content":"    MSS:"},{"lineNumber":399,"author":{"gitId":"garyljj"},"content":"      1. User enters details to search for tags."},{"lineNumber":400,"author":{"gitId":"nickyfoo"},"content":"      2. HippoCampus displays all tags."},{"lineNumber":401,"author":{"gitId":"nickyfoo"},"content":"      Use case ends."},{"lineNumber":402,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":403,"author":{"gitId":"nickyfoo"},"content":"    Extensions:"},{"lineNumber":404,"author":{"gitId":"nickyfoo"},"content":"      1a. HippoCampus detects wrong parameters."},{"lineNumber":405,"author":{"gitId":"nickyfoo"},"content":"        1a1. HippoCampus displays an error message."},{"lineNumber":406,"author":{"gitId":"nickyfoo"},"content":"        1a2. HippoCampus prompts users to re-enter input."},{"lineNumber":407,"author":{"gitId":"nickyfoo"},"content":"        Use case ends."},{"lineNumber":408,"author":{"gitId":"nickyfoo"},"content":"      1b. HippoCampus detects specific tags supplied."},{"lineNumber":409,"author":{"gitId":"nickyfoo"},"content":"        1b1. HippoCampus displays all tags matching the name of the specified tag."},{"lineNumber":410,"author":{"gitId":"nickyfoo"},"content":"        Use case ends."},{"lineNumber":411,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":412,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":413,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":414,"author":{"gitId":"pyuxiang"},"content":"    Use case: UC8 - Get Help"},{"lineNumber":415,"author":{"gitId":"pyuxiang"},"content":"    MSS:"},{"lineNumber":416,"author":{"gitId":"garyljj"},"content":"      1. User requests for help."},{"lineNumber":417,"author":{"gitId":"pyuxiang"},"content":"      2. HippoCampus displays all available commands."},{"lineNumber":418,"author":{"gitId":"-"},"content":"      Use case ends."},{"lineNumber":419,"author":{"gitId":"-"},"content":"    "},{"lineNumber":420,"author":{"gitId":"pyuxiang"},"content":"    Extensions:"},{"lineNumber":421,"author":{"gitId":"pyuxiang"},"content":"      1a. User supplied a specific command as a parameter."},{"lineNumber":422,"author":{"gitId":"pyuxiang"},"content":"        1a1. HippoCampus displays help for the specific command supplied."},{"lineNumber":423,"author":{"gitId":"-"},"content":"        Use case ends."},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"pyuxiang"},"content":"      1b. User supplied an unrecognised command as a parameter."},{"lineNumber":426,"author":{"gitId":"pyuxiang"},"content":"        1b1. HippoCampus displays an error."},{"lineNumber":427,"author":{"gitId":"pyuxiang"},"content":"        Use case ends."},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"pyuxiang"},"content":"      1c. HippoCampus detects an error in the entered data."},{"lineNumber":430,"author":{"gitId":"pyuxiang"},"content":"        1c1. HippoCampus shows the user an example of correct format"},{"lineNumber":431,"author":{"gitId":"pyuxiang"},"content":"        1c2. HippoCampus requests for the correct data."},{"lineNumber":432,"author":{"gitId":"pyuxiang"},"content":"        Use case ends."},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":435,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":436,"author":{"gitId":"Ellevy"},"content":"    Use case: UC9 - Exit HippoCampus"},{"lineNumber":437,"author":{"gitId":"Ellevy"},"content":"    MSS:"},{"lineNumber":438,"author":{"gitId":"garyljj"},"content":"      1. User request to exit."},{"lineNumber":439,"author":{"gitId":"Ellevy"},"content":"      2. HippoCampus exits and closes the window."},{"lineNumber":440,"author":{"gitId":"Ellevy"},"content":"      Use case ends."},{"lineNumber":441,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"Ellevy"},"content":"1. HippoCampus should be usable by a novice who has never used a CLI address book before."},{"lineNumber":445,"author":{"gitId":"Ellevy"},"content":"2. HippoCampus should work on any _mainstream OS_ with minimally Java `11` installed."},{"lineNumber":446,"author":{"gitId":"Ellevy"},"content":"3. HippoCampus Should be able to hold up to 1000 contacts without a noticeable sluggishness in performance for typical"},{"lineNumber":447,"author":{"gitId":"Ellevy"},"content":"   usage."},{"lineNumber":448,"author":{"gitId":"Ellevy"},"content":"4. HippoCampus should store data _locally only_, in a human editable text file, for privacy reasons."},{"lineNumber":449,"author":{"gitId":"Ellevy"},"content":"5. HippoCampus should only be for a _single user_ and should not require interaction with other users of HippoCampus."},{"lineNumber":450,"author":{"gitId":"Ellevy"},"content":"6. A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"},{"lineNumber":451,"author":{"gitId":"Ellevy"},"content":"    should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":452,"author":{"gitId":"Ellevy"},"content":"7. The source code should be open source."},{"lineNumber":453,"author":{"gitId":"Ellevy"},"content":"8. HippoCampus should work without requiring an installer, the installation of any additional software, or any"},{"lineNumber":454,"author":{"gitId":"Ellevy"},"content":"   external connections."},{"lineNumber":455,"author":{"gitId":"Ellevy"},"content":"9. The total file size should not exceed _100MB_."},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":460,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":469,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":486,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":493,"author":{"gitId":"-"},"content":""},{"lineNumber":494,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":497,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":500,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":503,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"glennljs":2,"zhengruoxin":26,"pyuxiang":25,"nickyfoo":34,"garyljj":51,"-":340,"Ellevy":35}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"HippoCampus is a **desktop app for managing contacts and tasks, optimised for use via a Command Line Interface** (CLI) while still having the benefits of Graphical User Interface (GUI). If you can type fast, HippoCampus can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"2. Download the latest `HippoCampus.jar` from [here](https://github.com/AY2021S2-CS2103-W16-3/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"3. Double-click the file to start the app.\u003cbr\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"  e.g. in `add -n NAME`, `NAME` is a parameter which can be used as `add -n John Doe`."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"  e.g. `-n NAME [-t TAG]` can be used as `-n John Doe -t friend` or as `-n John Doe`."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"  e.g. `[-t TAG]…​` can be used as ` ` (i.e. 0 times), `-t friend`, `-t friend -t family` etc."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"  e.g. if the command specifies `-n NAME -p PHONE_NUMBER`, the alternative `-p PHONE_NUMBER -n NAME` is also acceptable."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"  e.g. if you specify `-p 12341234 -p 56785678`, only `-p 56785678` will be taken."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"  e.g. if the command specifies `exit 123`, it will be interpreted as `exit`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"### Adding contacts : `add`"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"glennljs"},"content":"Adds a person to the HippoCampus\u0027 Contacts List."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"Format: `add NAME [-p PHONE_NUM] [-e EMAIL] [-a ADDRESS] [-t TAG]…​ [-b BIRTHDAY]​`\u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"* The birthday must be in a valid date format, e.g. 13 Jan"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"Examples:"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"* `add James Ho -p 22224444 -e jamesho@example.com -a 123, Clementi Rd, 1234665 -t friend -t colleague -b 1 Jan` Adds a new person James Ho with specified details."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"### Clearing all data : `clear`"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"glennljs"},"content":"Removes all contacts from the HippoCamus\u0027 Contact List."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"Format: `clear`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"### Deleting contacts : `delete`"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"glennljs"},"content":"Deletes the specified person from the HippoCamus\u0027 Contact List."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"Format: `delete INDEX [INDEX…]`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"* The index refers to the index number shown in the displayed person list (without sorting)."},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"* The index must be a positive integer valid in the list."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"Examples:"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"* `delete 3` deletes contact at 3rd index."},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"* `delete 3 4 5` deletes contacts at 3rd, 4th and 5th index."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"### Editing contacts : `edit`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"glennljs"},"content":"Edits an existing person in the HippoCamus\u0027 Contact List."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"Format: `edit INDEX [-n NAME] [-p PHONE_NUMBER] [-e EMAIL] [-a ADDRESS] [-t TAG…​ [-b BIRTHDAY]`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list (not sorted). The index must be a positive integer that is a valid number in the list."},{"lineNumber":87,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"* When editing tags, the existing tags of the person will be removed i.e. adding of tags is not cumulative."},{"lineNumber":89,"author":{"gitId":"zhengruoxin"},"content":"* You can remove all the person’s tags by typing `-t` without specifying any tags after it."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":92,"author":{"gitId":"zhengruoxin"},"content":"*  `edit 2 -n James Lee -e jameslee@example.com` edits the contact name to be “James Lee” and email address to be “jameslee@example.com”."},{"lineNumber":93,"author":{"gitId":"zhengruoxin"},"content":"*  `edit 2 -n Betsy Crower -t` Edits the name of the 2nd person to be Betsy Crower and clears all existing tags."},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"zhengruoxin"},"content":"### Finding contacts : `find`"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"zhengruoxin"},"content":"Finds persons whose names contain the given keywords and/or is associated with the given tag."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"zhengruoxin"},"content":"Format: `find [-n NAME] [-t TAG]`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"* The search is case-insensitive. e.g. `hans` will match `Hans`."},{"lineNumber":102,"author":{"gitId":"zhengruoxin"},"content":"* Partial matches to names are returned, e.g. `lliam` will match `williams`."},{"lineNumber":103,"author":{"gitId":"zhengruoxin"},"content":"* Only full tags will be matched."},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":107,"author":{"gitId":"zhengruoxin"},"content":"* `find -n Bob -t cs2103` Finds contacts where the name contains Bob and the contact contains the tag cs2103."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"zhengruoxin"},"content":"### Listing contacts : `list`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"glennljs"},"content":"Shows a list of all persons in the HippoCamus\u0027 Contact List."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"zhengruoxin"},"content":"Format: `list [-s SORT_ORDER]`"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"* List out all contacts by default."},{"lineNumber":115,"author":{"gitId":"zhengruoxin"},"content":"* `-s` list out all contacts sorted according to `SORT_ORDER`."},{"lineNumber":116,"author":{"gitId":"zhengruoxin"},"content":"* Possible values of `SORT_ORDER`:"},{"lineNumber":117,"author":{"gitId":"zhengruoxin"},"content":"  * `asc`: ascending lexicographical order"},{"lineNumber":118,"author":{"gitId":"zhengruoxin"},"content":"  * `desc`: descending lexicographical order"},{"lineNumber":119,"author":{"gitId":"zhengruoxin"},"content":"  * `bday`: in ascending order from Jan-01 to Dec-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":122,"author":{"gitId":"zhengruoxin"},"content":"* `list` Lists out all the contacts in HippoCampus."},{"lineNumber":123,"author":{"gitId":"zhengruoxin"},"content":"* `list -s asc` Lists out all the contacts in ascending lexicographical order."},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"zhengruoxin"},"content":"### Finding tags : `tags`"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"zhengruoxin"},"content":"Finds all tags or tags that contain the given keywords."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"zhengruoxin"},"content":"Format: `tags [-f KEYWORD]`"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"zhengruoxin"},"content":"Examples:"},{"lineNumber":132,"author":{"gitId":"zhengruoxin"},"content":"* `tags` lists out all tags available."},{"lineNumber":133,"author":{"gitId":"zhengruoxin"},"content":"* `tags -f cs2103` lists out all tags that contain `cs2103`."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"zhengruoxin"},"content":"### Show help : `help`"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"nickyfoo"},"content":"Shows a message explaining a list of available commands."},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"zhengruoxin"},"content":"Format: `help [COMMAND]`"},{"lineNumber":140,"author":{"gitId":"zhengruoxin"},"content":"* List all available commands."},{"lineNumber":141,"author":{"gitId":"zhengruoxin"},"content":"* `[COMMAND]` a single parameter requesting help for a specific command\u0027s syntax."},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"zhengruoxin"},"content":"Examples:"},{"lineNumber":144,"author":{"gitId":"zhengruoxin"},"content":"* `help` lists all available commands."},{"lineNumber":145,"author":{"gitId":"zhengruoxin"},"content":"* `help list` shows the syntax and description for the `list` command."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"zhengruoxin"},"content":"### Leaving app : `exit`"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"zhengruoxin"},"content":"Exits the app."},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"zhengruoxin"},"content":"Format: `exit`"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"glennljs"},"content":"### Coming Soon (Additional Features)"},{"lineNumber":154,"author":{"gitId":"glennljs"},"content":"* Add/Edit/Delete Modules and Tasks/Deliverables"},{"lineNumber":155,"author":{"gitId":"glennljs"},"content":"* Archiving of Data Files"},{"lineNumber":156,"author":{"gitId":"glennljs"},"content":"* Night Mode"},{"lineNumber":157,"author":{"gitId":"glennljs"},"content":"* Mass Operations (e.g. mass delete, mass edit)"},{"lineNumber":158,"author":{"gitId":"glennljs"},"content":"* Calendar View"},{"lineNumber":159,"author":{"gitId":"glennljs"},"content":"* _and much more!_"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"zhengruoxin"},"content":"**Q**: **What is the name of your application?**\u003cbr\u003e"},{"lineNumber":166,"author":{"gitId":"zhengruoxin"},"content":"**A**: HippoCampus"},{"lineNumber":167,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":168,"author":{"gitId":"zhengruoxin"},"content":"**Q**: **How much does it cost?**\u003cbr\u003e"},{"lineNumber":169,"author":{"gitId":"zhengruoxin"},"content":"**A**: Free!"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":176,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":177,"author":{"gitId":"zhengruoxin"},"content":"**Add** | `add NAME [-p PHONE_NUM] [-e EMAIL] [-a ADDRESS] [-t TAG]…​ [-b BIRTHDAY]` \u003cbr\u003e e.g., `add James Ho -p 96280000 -t friend -t colleague`"},{"lineNumber":178,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":179,"author":{"gitId":"zhengruoxin"},"content":"**Delete** | `delete INDEX [INDEX…​]`\u003cbr\u003e e.g., `delete 3 4 5`"},{"lineNumber":180,"author":{"gitId":"zhengruoxin"},"content":"**Edit** | `edit INDEX [-n NAME] [-p PHONE_NUMBER] [-e EMAIL] [-a ADDRESS] [-t TAG]…​ [-b BIRTHDAY]`\u003cbr\u003e e.g.,`edit 2 -n James Lee -e jameslee@example.com`\u003cbr\u003e e.g., `edit 2 -n Betsy Crower -t`"},{"lineNumber":181,"author":{"gitId":"zhengruoxin"},"content":"**Find** | `find [-n NAME] [-t TAG]`\u003cbr\u003e e.g., `find -n Bob -t cs2103`"},{"lineNumber":182,"author":{"gitId":"zhengruoxin"},"content":"**List** | `list [-s SORT_ORDER]`\u003cbr\u003e e.g., `list`\u003cbr\u003e e.g., `list -s asc`"},{"lineNumber":183,"author":{"gitId":"zhengruoxin"},"content":"**Find tags** | `tags [-f KEYWORD]`\u003cbr\u003e e.g.,`tags`\u003cbr\u003e e.g., `tags -f cs2103`"},{"lineNumber":184,"author":{"gitId":"zhengruoxin"},"content":"**Help** | `help [COMMAND]`\u003cbr\u003e e.g., `help`\u003cbr\u003e e.g.,`help list`"},{"lineNumber":185,"author":{"gitId":"zhengruoxin"},"content":"**Exit** | `exit`"}],"authorContributionMap":{"glennljs":14,"zhengruoxin":72,"nickyfoo":6,"-":93}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" *     e.g. {@code some preamble text -t 11.00 -t 12.00 -k -m July}  where prefixes are {@code -t -k -m}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code -k} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code -t}"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"     * {@code argsString} starting from index {@code fromIndex}, including the"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"     * preceding whitespace. An occurrence"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     * is valid if there is both a whitespace preceding and following {@code prefix},"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * or if the following whitespace is replaced by the end of string."},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     * Returns -1 if no such occurrence can be found."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * e.g Assume {@code fromIndex} \u003d 0, {@code prefix} \u003d \"-p\":"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-e abc-d\" returns -1"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-p abc-d\" returns -1"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \" -p abc-d\" returns 1"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \" -pp abc-d\" returns -1"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-e abc-d -p -d\" returns 9"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-e abc-d -p\" returns 9"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"        if (prefixIndex \u003d\u003d -1) {"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"            return -1; // invalid index"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"        int trailingIndex \u003d prefixIndex + 1 + prefix.length(); // index of character after prefix"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"        if (trailingIndex \u003d\u003d argsString.length() || argsString.charAt(trailingIndex) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"            return prefixIndex + 1; // valid trailing character, +1 for leading whitespace"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"        return -1;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code argsString}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"        // Sort prefixes by position to allow calculation of prefix length"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"        // Add PrefixPositions at start and end to represent preamble and end of string"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"        // Create a map of prefixes to argument (if any)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return argMultimap;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return value.trim();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"        private final int startPosition;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        int getStartPosition() {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return startPosition;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return prefix;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pyuxiang":29,"-":128}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"-n\");"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"-p\");"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"-e\");"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"-a\");"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pyuxiang":5,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" * E.g. \u0027-t\u0027 in \u0027add James -t friend\u0027."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pyuxiang":1,"-":38}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_AMY;"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_BOB;"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + \" \" + VALID_PHONE_AMY;"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + \" \" + VALID_PHONE_BOB;"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + \" \" + VALID_EMAIL_AMY;"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + \" \" + VALID_EMAIL_BOB;"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_AMY;"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_BOB;"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_FRIEND;"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_HUSBAND;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" \" + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \" \" + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \" \" + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \" \" + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":107,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pyuxiang":14,"-":114}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        sb.append(PREFIX_NAME + \" \" + person.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        sb.append(PREFIX_PHONE + \" \" + person.getPhone().value + \" \");"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        sb.append(PREFIX_EMAIL + \" \" + person.getEmail().value + \" \");"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        sb.append(PREFIX_ADDRESS + \" \" + person.getAddress().value + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            s -\u003e sb.append(PREFIX_TAG + \" \" + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME + \" \" + name.fullName + \" \"));"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE + \" \" + phone.value + \" \"));"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL + \" \" + email.value + \" \"));"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS + \" \" + address.value + \" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"                sb.append(PREFIX_TAG).append(\" \");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(\" \").append(s.tagName).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pyuxiang":11,"-":51}}]
