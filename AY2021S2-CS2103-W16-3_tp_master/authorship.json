[{"path":".github/ISSUE_TEMPLATE/---add-user-story.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"---","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"name: \"\\U0001F4D6 Add user story\"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"about: Add new user story from existing specifications","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"title: \"\\U0001F4D6 As _____________, I can __________________________\"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"labels: type::feature::story","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"---","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"...so that __________________________________.","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"________________________________________________________________","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"### Describe the feature","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"*Define precisely the desired behavior.*","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"________________________________________________________________","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"### Additional context","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"*What is the current implementation, and the required scope of work?*","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"pyuxiang":19}},{"path":".github/ISSUE_TEMPLATE/---bug-report.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"---","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"name: \"\\U0001F41E Bug report\"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"about: Report a new bug","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"title: \"\\U0001F41E \"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"labels: type::bug","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"---","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"### Describe the issue","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"*What is expected to happen? How can it be reproduced?*","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"e.g. Application shows wrong details upon adding.","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"Steps to reproduce:","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"1. Go to \u0027...\u0027","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"2. Click on \u0027....\u0027","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"3. Scroll down to \u0027....\u0027","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"4. See error","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"________________________________________________________________","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"### Additional context","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"*Suggest possible bug sources (or [reference them](https://docs.github.com/en/github/managing-your-work-on-github/opening-an-issue-from-code)). Add screenshots if applicable.*","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"________________________________________________________________","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"### Environment","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":" - OS: [ macOS (Big Sur) / Windows 10 / Linux (OpenSUSE) ]","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":" - JDK version: 11","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"pyuxiang":30}},{"path":".github/ISSUE_TEMPLATE/---feature-enhancement.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"---","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"name: \"\\U0001F4A1 Feature enhancement\"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"about: Suggest improvements (including internal tests)","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"title: \"\\U0001F4A1 \"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"labels: type::enhancement","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"---","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"### Describe the issue","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"*What is the problem, if any? What is the desired behavior?*","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"________________________________________________________________","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"### Additional context","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"*Describe possible and/or alternative solutions, to highlight required scope of work.*","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"pyuxiang":18}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-W16-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-W16-3/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-02-21"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-W16-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-W16-3/tp)","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"* PartyPlanet is a desktop app for managing contacts, birthdays, and celebration plans\u003cbr\u003e","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"  * Keep track of friends\u0027 contacts/birthdays","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"  * Record down important details to organise birthday celebrations easily","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"  * Quickly access contacts with upcoming birthdays","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-07"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"* It is named `PartyPlanet` because it will help you plan a party that’s **out of this world!**","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"* For new users keen to start using PartyPlanet, check out the **[User Guide](docs/UserGuide.md)**.","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"* For the detailed documentation of this project, see the **[Developer Guide](docs/DeveloperGuide.md)**.","lastModifiedDate":"2021-02-21"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"**Acknowledgements**","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-02-24"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"* Image used: [VectorStock](https://www.vectorstock.com/royalty-free-vector/birthday-hat-cartoon-vector-22619168)","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"zhengruoxin":1,"pyuxiang":2,"nickyfoo":2,"garyljj":11,"-":5}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"mainClassName \u003d \u0027seedu.partyplanet.Main\u0027","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    testLogging {","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        events \"skipped\", \"failed\"","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        showExceptions true","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        showCauses true","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        showStackTraces true","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"    archiveName \u003d \u0027PartyPlanet.jar\u0027","lastModifiedDate":"2021-03-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"run{","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"garyljj":16,"-":70}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"### Glenn Lee","lastModifiedDate":"2021-02-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"\u003cimg src\u003d\"images/glennljs.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"[[github](http://github.com/glennljs)]","lastModifiedDate":"2021-02-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"### Justin Peh Yu Xiang","lastModifiedDate":"2021-02-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"\u003cimg src\u003d\"images/pyuxiang.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"[[homepage](https://pyuxiang.com/)]","lastModifiedDate":"2021-02-21"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"[[github](https://github.com/pyuxiang)]","lastModifiedDate":"2021-02-21"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"[[portfolio](team/justin.md)]","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"### Foo Chuan Le, Nicholas","lastModifiedDate":"2021-02-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"\u003cimg src\u003d\"images/nickyfoo.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"[[github](http://github.com/nickyfoo)]","lastModifiedDate":"2021-02-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"### Gary Lee Jia Jin","lastModifiedDate":"2021-02-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"\u003cimg src\u003d\"images/garyljj.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"[[github](https://github.com/garyljj)]","lastModifiedDate":"2021-02-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"### Zheng Ruoxin","lastModifiedDate":"2021-02-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"\u003cimg src\u003d\"images/zhengruoxin.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"[[github](https://github.com/zhengruoxin)]","lastModifiedDate":"2021-02-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"### Lee Pai Joo Yvelle","lastModifiedDate":"2021-02-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"\u003cimg src\u003d\"images/ellevy.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"[[github](https://github.com/ellevy)]","lastModifiedDate":"2021-02-21"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"[[portfolio](team/ellevy.md)]","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"glennljs":3,"zhengruoxin":3,"pyuxiang":5,"nickyfoo":3,"garyljj":3,"-":30,"Ellevy":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"Refer to the guide [_Setting up and getting started_](developer/SettingUp.md).","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/architecture/index.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/architecture/Ui.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/architecture/Logic.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/architecture/Model.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/architecture/Storage.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/feature/Help.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/feature/UndoRedo.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/feature/Add.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/feature/Edit.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/feature/EventDone.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/feature/Autocomplete.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/feature/SortByDate.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"* [Documentation guide](developer/Documentation.md)","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"* [Testing guide](developer/Testing.md)","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"* [Logging guide](developer/Logging.md)","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"* [Configuration guide](developer/Configuration.md)","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"* [DevOps guide](developer/DevOps.md)","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/requirements/ProductScope.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/requirements/UserStories.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/requirements/UseCases.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/requirements/NonFunctional.md %}","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"{% include_relative developerGuide/testing/index.md %}","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"pyuxiang":23,"-":72}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"PartyPlanet is a **desktop app for managing birthdays of contacts, optimised for use via a Command Line","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"Interface** (CLI) while still having the benefits of Graphical User Interface (GUI). If you can type fast,","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"PartyPlanet can get the planning of your birthday celebrations done faster than traditional GUI apps.","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2021-02-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"2. Download the latest `PartyPlanet.jar` from [here](https://github.com/AY2021S2-CS2103-W16-3/tp/releases).","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"3. Double-click the file to start the app.\u003cbr\u003e","lastModifiedDate":"2021-02-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2021-02-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert-warning\"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"**:warning: PartyPlanet will use its default Address Book and Event Book if it is unable to locate the ","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"JSON files. It will start with an empty Address Book and Event Book if there is an error in the JSON files.**","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"## Glossary of parameters","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"| Parameter | Prefix | Applicable to | Description |","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"|---|---|---|---|","lastModifiedDate":"2021-03-31"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"| `ADDRESS` | `-a`, `--address` | Contact | Any value |","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"| `BIRTHDAY` | `-b`, `--birthday` | Contact | Valid date, with or without a year:{::nomarkdown}\u003cul\u003e\u003cli\u003eYear must be a positive integer between 0001 and 9999 if specified, and birthday must be in the past\u003c/li\u003e\u003cli\u003eIf the day is incompatible with the month and year, the closest valid date may be matched\u003cbr\u003ee.g. \u003ccode\u003e29 Feb 2021\u003c/code\u003e is mapped to \u003ccode\u003e28 Feb 2021\u003c/code\u003e\u003c/li\u003e\u003cli\u003eAccepted date formats are listed below, case-insensitive:\u003cul\u003e\u003cli\u003eISO format: \u003ccode\u003e--01-09\u003c/code\u003e / \u003ccode\u003e1997-01-09\u003c/code\u003e\u003c/li\u003e\u003cli\u003eDot delimited: \u003ccode\u003e9.1\u003c/code\u003e / \u003ccode\u003e9.1.1997\u003c/code\u003e\u003c/li\u003e\u003cli\u003eSlash delimited: \u003ccode\u003e9/1\u003c/code\u003e / \u003ccode\u003e9/1/1997\u003c/code\u003e\u003c/li\u003e\u003cli\u003eLong DMY format: \u003ccode\u003e9 Jan\u003c/code\u003e / \u003ccode\u003e9 Jan 1997\u003c/code\u003e\u003c/li\u003e\u003cli\u003eFull DMY format: \u003ccode\u003e9 January\u003c/code\u003e / \u003ccode\u003e9 January 1997\u003c/code\u003e\u003c/li\u003e\u003cli\u003eLong YMD format: \u003ccode\u003eJan 9\u003c/code\u003e / \u003ccode\u003eJan 9 1997\u003c/code\u003e\u003c/li\u003e\u003cli\u003eFull YMD format: \u003ccode\u003eJanuary 9\u003c/code\u003e / \u003ccode\u003eJanuary 9 1997\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"| `COMMAND` | - | - | Any valid command listed [below](#party-planet-commands) |","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"| `DATE` | `-d`, `--date` | Event | Valid date with a year:{::nomarkdown}\u003cul\u003e\u003cli\u003eYear must be present and a positive integer between 0001 and 9999\u003c/li\u003e\u003cli\u003eSee \u003ccode\u003eBIRTHDAY\u003c/code\u003e parameter above for available date formats\u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-04"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"| `DETAIL` | `-r`, `--remark` | Event | Any value |","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"| `EMAIL` | `-e`, `--email` | Contact | In the format `USER@DOMAIN`:{::nomarkdown}\u003cul\u003e\u003cli\u003e\u003ccode\u003eUSER\u003c/code\u003e can only contain alphanumerics and any of \u003ccode\u003e!#$%\u0026\u0027*+/\u003d?`{\u0026#124;}~^.-\u003c/code\u003e\u003c/li\u003e\u003cli\u003e\u003ccode\u003eDOMAIN\u003c/code\u003e must comprise at least one non-empty label with an optional trailing period.\u003c/li\u003e\u003cli\u003eA label contains at least one of alphanumerics or underscores, with optional hyphens. Labels cannot start with a hyphen.\u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"| `INDEX` | - | any | Positive integer representing the ID present in the filtered list |","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"| `NAME` | `-n`, `--name` | any | Any value containing only alphanumerics and spaces, unique to the contact/event list (case-sensitive) |","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"| `PHONE` | `-p`, `--phone` | Contact | Any number at least three digits long |","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"| `REMARK` | `-r`, `--remark` | Contact | Any value |","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"| `SORT_FIELD` | `-s`, `--sort` | any | Any valid option, specified below in `list` and `elist` commands |","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"| `SORT_ORDER` | `-o`, `--order` | any | Any of the following:{::nomarkdown}\u003cul\u003e\u003cli\u003e\u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003easc\u003c/code\u003e, \u003ccode\u003eascending\u003c/code\u003e (ascending order)\u003c/li\u003e\u003cli\u003e\u003ccode\u003ed\u003c/code\u003e, \u003ccode\u003edesc\u003c/code\u003e, \u003ccode\u003edescending\u003c/code\u003e (descending order)\u003c/li\u003e\u003c/ul\u003e{:/} |","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"| `TAG` | `-t`, `--tag` | Contact | Any value containing only alphanumeric characters |","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"**:information_source: Additional notes on parameter parsing:**\u003cbr\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"* Parameters cannot accept specific syntax that denote a valid prefix within the command.\u003cbr\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"  e.g. `ADDRESS` fields containing `-a` with leading and trailing spaces (such as in `Blk 123 Yishun -a Singapore 760123`)","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"  will not parse fully since the `-a` is marked as a separate prefix.","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"* All parameters will have leading and trailing spaces removed before processing.","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"* All references to alphanumerics in PartyPlanet specifically refer to ASCII alphanumerics only.","lastModifiedDate":"2021-04-04"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"  The character codes are 48-57 (0-9), 65-90 (A-Z), 97-122 (a-z).","lastModifiedDate":"2021-04-04"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"## Party Planet Commands","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"  e.g. in `add -n NAME`, `NAME` is a parameter which can be used as `add -n John Doe`.","lastModifiedDate":"2021-04-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"* Parameters in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"  e.g. `-n NAME [-t TAG]` can be used as `-n John Doe -t friend` or as `-n John Doe`.","lastModifiedDate":"2021-04-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"* Parameters with `...` after them can be used any number of times.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"  e.g. `[-t TAG]...` can be used as ` `, `-t friend`, `-t friend -t family` etc.","lastModifiedDate":"2021-04-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"  e.g. if the command specifies `-n NAME -p PHONE`, the alternative `-p PHONE -n NAME` is also acceptable.","lastModifiedDate":"2021-04-04"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"  e.g. if you specify `-p 12341234 -p 56785678`, only `-p 56785678` will be taken.","lastModifiedDate":"2021-04-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `exit` and `undo`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"  e.g. if the command specifies `exit 123`, it will be interpreted as `exit`.","lastModifiedDate":"2021-04-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"* Parameters in `{}` represents mutually-exclusive parameters.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"  Each mutually-exclusve parameter is separated by a `|`.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"  e.g. `command {foo | bar}` means that either `command foo` or `command bar` are valid commands.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"  However `command foo bar` is an invalid command.","lastModifiedDate":"2021-04-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"### Summary","lastModifiedDate":"2021-03-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"For data specific commands, the unqualified commands operate on the contact list, while","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"commands prepended with `e` operate on the event list.","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"| Action | Command |","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"|---|---|","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"| Adding new | `add` (contact), `eadd` (event) |","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"| Edit existing | `edit` (contact), `eedit` (event) |","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"| Delete existing | `delete` (contact), `edelete` (event) |","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"| List / Search | `list` (contact), `elist` (event) |","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"| Mark as done | no contact-equivalent, `edone` (event) |","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"Other app-wide commands are also available.","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"These commands do not process any additional parameters, including the single-argument `help` command.","lastModifiedDate":"2021-04-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"| Action | Command |","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"|---|---|","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"| Undo / Redo | `undo`, `redo` |","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"| Change theme | `theme` |","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"| Show help | `help` |","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"| Exit the app | `exit` |","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"A special command invoked by pressing the `TAB` key instead of `Enter` exists for `edit` and `eedit` -  details specified","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"in the autocomplete section.","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"### Contact list commands","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"#### Adding contacts : `add`","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"Adds a person to the contact list.","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"Format: `add -n NAME [-p PHONE] [-e EMAIL] [-a ADDRESS] [-t TAG]... [-b BIRTHDAY] [-r REMARK]`","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-02-22"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"* `add -n John Doe`","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"* `add -n James Ho -p 22224444 -e jamesho@example.com -a 123, Clementi Rd, 1234665 -t friend -t colleague -b 1 Jan","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"  -r allergic to nuts` Adds a new person James Ho with specified details","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"#### Deleting contacts : `delete`","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"Deletes person(s) from the contact list.","lastModifiedDate":"2021-03-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"Format: `delete [{INDEX [INDEX]... | [--any] -t TAG [-t TAG]...}]`","lastModifiedDate":"2021-03-25"},{"lineNumber":144,"author":{"gitId":"pyuxiang"},"content":"1. If no parameters supplied, `delete`: Deletes all contacts in the displayed contact list","lastModifiedDate":"2021-03-31"},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"2. If indices supplied, `delete INDEX [INDEX]...`: Deletes the contacts associated with each specified `INDEX`","lastModifiedDate":"2021-03-31"},{"lineNumber":146,"author":{"gitId":"pyuxiang"},"content":"   * Invalid indices are ignored.","lastModifiedDate":"2021-03-31"},{"lineNumber":147,"author":{"gitId":"pyuxiang"},"content":"3. If tags supplied, `delete [--any] -t TAG [-t TAG]...`: Delete the contacts containing all specified tags","lastModifiedDate":"2021-03-31"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"   * If the `--any` flag is supplied, contacts only need to match with any of the specified tags.","lastModifiedDate":"2021-04-04"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"   * Tags specified are case-sensitive.","lastModifiedDate":"2021-04-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"zhengruoxin"},"content":"Examples:","lastModifiedDate":"2021-02-22"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"* `delete` deletes all contacts in current filtered list","lastModifiedDate":"2021-03-16"},{"lineNumber":153,"author":{"gitId":"pyuxiang"},"content":"* `delete 3` deletes contact at the 3rd index","lastModifiedDate":"2021-03-31"},{"lineNumber":154,"author":{"gitId":"pyuxiang"},"content":"* `delete 3 4 5` deletes contacts at the 3rd, 4th and 5th index","lastModifiedDate":"2021-03-31"},{"lineNumber":155,"author":{"gitId":"pyuxiang"},"content":"* `delete -t colleague -t cs2103` deletes contacts that contain both tag \"colleague\" and \"cs2103\".","lastModifiedDate":"2021-03-31"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"* `delete --any -t colleague -t cs2103` deletes contacts with either tag \"colleague\" or tag \"cs2103\"","lastModifiedDate":"2021-03-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"pyuxiang"},"content":"#### Editing contacts : `edit`","lastModifiedDate":"2021-03-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"pyuxiang"},"content":"Edits an existing person in the contact list.","lastModifiedDate":"2021-03-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":162,"author":{"gitId":"zhengruoxin"},"content":"Format: `edit {INDEX [-n NAME] [-p PHONE] [-e EMAIL] [-a ADDRESS] [-t TAG]…​ [-b BIRTHDAY] [-r REMARK] | --remove -t TAG [-t TAG]…​}`","lastModifiedDate":"2021-04-04"},{"lineNumber":163,"author":{"gitId":"pyuxiang"},"content":"1. If index supplied, `edit INDEX [...]`: Edits the person at the specified `INDEX`","lastModifiedDate":"2021-03-31"},{"lineNumber":164,"author":{"gitId":"pyuxiang"},"content":"   * Existing values are replaced by the input values, if specified.","lastModifiedDate":"2021-03-31"},{"lineNumber":165,"author":{"gitId":"pyuxiang"},"content":"   * To retrieve existing values, use the autocompletion workflow specified [below](#autocomplete-tab).","lastModifiedDate":"2021-04-01"},{"lineNumber":166,"author":{"gitId":"pyuxiang"},"content":"   * Tags can be removed from a contact by specifying a standalone `-t` without parameters.","lastModifiedDate":"2021-03-31"},{"lineNumber":167,"author":{"gitId":"pyuxiang"},"content":"2. If `--remove` flag specified, `edit --remove -t TAG [-t TAG]...`: Removes all specified tags from every contact in the displayed list","lastModifiedDate":"2021-03-31"},{"lineNumber":168,"author":{"gitId":"pyuxiang"},"content":"   * All specified tags will be removed from every contact in the displayed list.","lastModifiedDate":"2021-03-31"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"   * Tags specified are case-sensitive.","lastModifiedDate":"2021-04-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"pyuxiang"},"content":"* `edit 2 -n James Lee -e jameslee@example.com` Edits the contact name to be \"James Lee\" and email address to be “jameslee@example.com”.","lastModifiedDate":"2021-03-31"},{"lineNumber":173,"author":{"gitId":"pyuxiang"},"content":"* `edit 2 -n Betsy Crower -t` Edits the name of the 2nd person to be \"Betsy Crower\" and clears all existing tags.","lastModifiedDate":"2021-03-31"},{"lineNumber":174,"author":{"gitId":"pyuxiang"},"content":"* `edit --remove -t friends` Removes the `friends` tag from every contact in the filtered list.","lastModifiedDate":"2021-03-31"},{"lineNumber":175,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"pyuxiang"},"content":"#### Listing contacts : `list`","lastModifiedDate":"2021-03-31"},{"lineNumber":177,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"pyuxiang"},"content":"Displays a list of contacts in the contact list, with optional search criteria.","lastModifiedDate":"2021-03-31"},{"lineNumber":179,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":180,"author":{"gitId":"pyuxiang"},"content":"Format: `list [--exact] [--any] [-n NAME]... [-t TAG]... [-b BIRTHDAY]... [-s SORT_FIELD] [-o SORT_ORDER]`","lastModifiedDate":"2021-04-04"},{"lineNumber":181,"author":{"gitId":"pyuxiang"},"content":"1. If no search parameters specified, `list [-s SORT_FIELD] [-o SORT_ORDER]`: List all contacts in contact list","lastModifiedDate":"2021-03-31"},{"lineNumber":182,"author":{"gitId":"pyuxiang"},"content":"   * `-s` parameter optionally sorts contacts by `SORT_FIELD`:","lastModifiedDate":"2021-03-31"},{"lineNumber":183,"author":{"gitId":"pyuxiang"},"content":"     * `n`, `name`: names in (case-sensitive) lexicographical order (by default, if `-s` not specified)","lastModifiedDate":"2021-03-31"},{"lineNumber":184,"author":{"gitId":"Ellevy"},"content":"     * `b`, `birthday`: day and month of the birthday (Insensitive to year, will not sort by year)","lastModifiedDate":"2021-04-05"},{"lineNumber":185,"author":{"gitId":"pyuxiang"},"content":"     * `u`, `upcoming`: days left to next upcoming birthday","lastModifiedDate":"2021-03-31"},{"lineNumber":186,"author":{"gitId":"pyuxiang"},"content":"   * `-o` parameter optionally determines the direction of sort, according to `SORT_ORDER`:","lastModifiedDate":"2021-03-31"},{"lineNumber":187,"author":{"gitId":"pyuxiang"},"content":"     * `a`, `asc`, `ascending`: ascending (by default, if `-o` not specified)","lastModifiedDate":"2021-03-31"},{"lineNumber":188,"author":{"gitId":"pyuxiang"},"content":"     * `d`, `desc`, `descending`: descending","lastModifiedDate":"2021-03-31"},{"lineNumber":189,"author":{"gitId":"Ellevy"},"content":"     * Sorts by upcoming birthday ignores the sort order parameter and only sorts in `ascending` order","lastModifiedDate":"2021-04-05"},{"lineNumber":190,"author":{"gitId":"pyuxiang"},"content":"2. If search parameters specified, `list [--exact] [--any] [-n NAME]... [-t TAG]... [-b BIRTHDAY]... [-s SORT_FIELD] [-o SORT_ORDER]`: List all contacts matching the search criteria","lastModifiedDate":"2021-04-04"},{"lineNumber":191,"author":{"gitId":"pyuxiang"},"content":"   * Search criteria, case-insensitive:","lastModifiedDate":"2021-03-31"},{"lineNumber":192,"author":{"gitId":"Ellevy"},"content":"     * `-n`, `--name` filters the contacts by name","lastModifiedDate":"2021-04-05"},{"lineNumber":193,"author":{"gitId":"Ellevy"},"content":"     * `-t`, `--tag` filters the contacts by tags","lastModifiedDate":"2021-04-05"},{"lineNumber":194,"author":{"gitId":"Ellevy"},"content":"     * `-b`, `--birthday` filters contacts by birthday month","lastModifiedDate":"2021-04-05"},{"lineNumber":195,"author":{"gitId":"pyuxiang"},"content":"       * If `BIRTHDAY` is \"0\" or unspecified, filtered contacts do not have a birthday.","lastModifiedDate":"2021-03-31"},{"lineNumber":196,"author":{"gitId":"pyuxiang"},"content":"       * Otherwise `BIRTHDAY` must be one of the 12 months, represented either by the month value or string,","lastModifiedDate":"2021-03-31"},{"lineNumber":197,"author":{"gitId":"pyuxiang"},"content":"         i.e. `12`, `Dec`, `December` filters contacts with a birthday in December.","lastModifiedDate":"2021-03-31"},{"lineNumber":198,"author":{"gitId":"pyuxiang"},"content":"  * Partial matches to names and tags are performed by default, unless `--exact` is specified for exact matches.","lastModifiedDate":"2021-03-31"},{"lineNumber":199,"author":{"gitId":"pyuxiang"},"content":"  * All specified search criteria must be fulfilled by each contact by default, unless `--any` is specified for any match.","lastModifiedDate":"2021-03-31"},{"lineNumber":200,"author":{"gitId":"pyuxiang"},"content":"  * The filtered contacts can be additionally sorted using the `-s` and `-o` prefixes, as above.","lastModifiedDate":"2021-03-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"pyuxiang"},"content":"* `list` Lists out all the contacts in the contact list.","lastModifiedDate":"2021-03-31"},{"lineNumber":204,"author":{"gitId":"Ellevy"},"content":"* `list -s n -o desc` Lists out all the contacts in descending lexicographical order.","lastModifiedDate":"2021-04-05"},{"lineNumber":205,"author":{"gitId":"Ellevy"},"content":"* `list -t friend` Lists out all contacts who has tags containing the word \"friend\"","lastModifiedDate":"2021-04-05"},{"lineNumber":206,"author":{"gitId":"Ellevy"},"content":"* `list -n alice -t friend` Lists out all contacts whose name contains the word \"alice\" and tag contains the word ","lastModifiedDate":"2021-04-05"},{"lineNumber":207,"author":{"gitId":"Ellevy"},"content":"  \"friend\"","lastModifiedDate":"2021-04-05"},{"lineNumber":208,"author":{"gitId":"Ellevy"},"content":"* `list --any -n alice -t friend` Lists out all contacts whose name contains \"alice\" or tag contains the word ","lastModifiedDate":"2021-04-05"},{"lineNumber":209,"author":{"gitId":"Ellevy"},"content":"  \"friend\"","lastModifiedDate":"2021-04-05"},{"lineNumber":210,"author":{"gitId":"Ellevy"},"content":"* `list --exact -n alice -t friend` Lists out all contacts whose name is exactly \"alice\" and who have tags that is ","lastModifiedDate":"2021-04-05"},{"lineNumber":211,"author":{"gitId":"Ellevy"},"content":"  exactly \"friend\"","lastModifiedDate":"2021-04-05"},{"lineNumber":212,"author":{"gitId":"Ellevy"},"content":"* `list --exact --any -n alice -t friend` Lists out all contacts whose name is \"alice\" or who have tags that is exactly ","lastModifiedDate":"2021-04-05"},{"lineNumber":213,"author":{"gitId":"Ellevy"},"content":"  \"friend\"","lastModifiedDate":"2021-04-05"},{"lineNumber":214,"author":{"gitId":"pyuxiang"},"content":"* `list --any -n alice -n bob` Lists out all contacts whose name contain either \"alice\" or \"bob\"","lastModifiedDate":"2021-04-04"},{"lineNumber":215,"author":{"gitId":"pyuxiang"},"content":"* `list --any -b 8 -b 9` Lists out all contacts whose birthdays are either in August or September","lastModifiedDate":"2021-04-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"pyuxiang"},"content":"### Event List Commands","lastModifiedDate":"2021-03-31"},{"lineNumber":218,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":219,"author":{"gitId":"pyuxiang"},"content":"#### Adding events : `eadd`","lastModifiedDate":"2021-03-31"},{"lineNumber":220,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":221,"author":{"gitId":"zhengruoxin"},"content":"Adds an event to PartyPlanet\u0027s Events list. Similar to `add` for person contacts.","lastModifiedDate":"2021-03-25"},{"lineNumber":222,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":223,"author":{"gitId":"garyljj"},"content":"Format: `eadd -n NAME [-d DATE] [-r DETAIL]`","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":225,"author":{"gitId":"zhengruoxin"},"content":"* The date must be in a valid date format with year, e.g. 2022-05-07, 2 feb 2021","lastModifiedDate":"2021-03-25"},{"lineNumber":226,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":227,"author":{"gitId":"zhengruoxin"},"content":"Examples:","lastModifiedDate":"2021-03-25"},{"lineNumber":228,"author":{"gitId":"zhengruoxin"},"content":"* `eadd -n April Fools -d 2021-04-01 -r Prank the april babies!` Adds a new event April Fools with specified details.","lastModifiedDate":"2021-03-25"},{"lineNumber":229,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":230,"author":{"gitId":"pyuxiang"},"content":"#### Editing events : `eedit`","lastModifiedDate":"2021-03-31"},{"lineNumber":231,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":232,"author":{"gitId":"zhengruoxin"},"content":"Edits an existing event in PartyPlanet\u0027s Events List. Similar to `edit`.","lastModifiedDate":"2021-03-25"},{"lineNumber":233,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":234,"author":{"gitId":"garyljj"},"content":"Format: `eedit INDEX [-n NAME] [-d DATE] [-r DETAIL]`","lastModifiedDate":"2021-03-30"},{"lineNumber":235,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":236,"author":{"gitId":"garyljj"},"content":"* Edits the event at the specified `INDEX`.","lastModifiedDate":"2021-03-30"},{"lineNumber":237,"author":{"gitId":"garyljj"},"content":"  * The index refers to the index number shown in the displayed events list.","lastModifiedDate":"2021-03-30"},{"lineNumber":238,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-03-25"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-25"},{"lineNumber":241,"author":{"gitId":"zhengruoxin"},"content":"* `eedit 3 -r Celebrate during first combined practice` Edits the remark of the 3rd event to specified remark.","lastModifiedDate":"2021-03-25"},{"lineNumber":242,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":243,"author":{"gitId":"pyuxiang"},"content":"#### Listing events: `elist`","lastModifiedDate":"2021-03-31"},{"lineNumber":244,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":245,"author":{"gitId":"zhengruoxin"},"content":"Shows a list of all events in PartyPlanet\u0027s Event List. Similar to `list`.","lastModifiedDate":"2021-03-25"},{"lineNumber":246,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":247,"author":{"gitId":"zhengruoxin"},"content":"Format: `elist [--exact] [--any] [-n NAME] [-r DETAIL]... [-s SORT] [-o ORDER]`","lastModifiedDate":"2021-03-25"},{"lineNumber":248,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":249,"author":{"gitId":"Ellevy"},"content":"1. If no search parameters specified, `elist [-s SORT_FIELD] [-o SORT_ORDER]`: List out all events in event list.","lastModifiedDate":"2021-04-05"},{"lineNumber":250,"author":{"gitId":"Ellevy"},"content":"    * `-s` parameter optionally sorts events by `SORT_FIELD`. Possible values of ","lastModifiedDate":"2021-04-05"},{"lineNumber":251,"author":{"gitId":"Ellevy"},"content":"      `SORT_FIELD`:","lastModifiedDate":"2021-04-05"},{"lineNumber":252,"author":{"gitId":"Ellevy"},"content":"      * `n`, `name`: names (case-sensitive) in lexicographical order (by default, if `-s` not specified)","lastModifiedDate":"2021-04-05"},{"lineNumber":253,"author":{"gitId":"Ellevy"},"content":"      * `d`, `date`: event dates (Sensitive to year, will sort according to date with respect to year)","lastModifiedDate":"2021-04-05"},{"lineNumber":254,"author":{"gitId":"Ellevy"},"content":"      * `u`, `upcoming`: days left to next upcoming event (All events marked as `done` will appear at the bottom of the list regardless of the date)","lastModifiedDate":"2021-04-05"},{"lineNumber":255,"author":{"gitId":"Ellevy"},"content":"    * `-o` parameter optionally determines the direction of sort, according to `SORT_ORDER`. Possible values of SORT_ORDER:","lastModifiedDate":"2021-04-05"},{"lineNumber":256,"author":{"gitId":"Ellevy"},"content":"      * `a`, `asc`, `ascending`: ascending (by default, if `-o` not specified)","lastModifiedDate":"2021-04-05"},{"lineNumber":257,"author":{"gitId":"Ellevy"},"content":"      * `d`, `desc`, `descending`: descending","lastModifiedDate":"2021-04-05"},{"lineNumber":258,"author":{"gitId":"Ellevy"},"content":"      * Sorts by upcoming birthday ignores the sort order parameter and only sorts in `ascending` order","lastModifiedDate":"2021-04-05"},{"lineNumber":259,"author":{"gitId":"Ellevy"},"content":"2. If search parameters specified, `elist [--exact] [--any] [-n NAME]... [-r DETAIL]... [-s SORT_FIELD] [-o ","lastModifiedDate":"2021-04-05"},{"lineNumber":260,"author":{"gitId":"Ellevy"},"content":"   SORT_ORDER]`: List all events matching the search criteria","lastModifiedDate":"2021-04-05"},{"lineNumber":261,"author":{"gitId":"Ellevy"},"content":"    * Search criteria, case-insensitive: ","lastModifiedDate":"2021-04-05"},{"lineNumber":262,"author":{"gitId":"Ellevy"},"content":"        * `-n`, `--name` filters the events by event name","lastModifiedDate":"2021-04-05"},{"lineNumber":263,"author":{"gitId":"Ellevy"},"content":"        * `-r`, `--remark` filters the events by event details","lastModifiedDate":"2021-04-05"},{"lineNumber":264,"author":{"gitId":"zhengruoxin"},"content":"    * Search is case-insensitive, e.g. `cHriStmAs` will match `Christmas`.","lastModifiedDate":"2021-03-25"},{"lineNumber":265,"author":{"gitId":"Ellevy"},"content":"    * Partial matches to event names and details are performed by default, e.g. `key` will match `turkey`.","lastModifiedDate":"2021-04-05"},{"lineNumber":266,"author":{"gitId":"zhengruoxin"},"content":"    * If exact match is desired, specify an additional `--exact` flag.","lastModifiedDate":"2021-03-25"},{"lineNumber":267,"author":{"gitId":"Ellevy"},"content":"    * If multiple names/tags are specified, all specified search criteria must be fulfilled by each event by ","lastModifiedDate":"2021-04-05"},{"lineNumber":268,"author":{"gitId":"Ellevy"},"content":"      default, unless `--any` is specified for any match. ","lastModifiedDate":"2021-04-05"},{"lineNumber":269,"author":{"gitId":"Ellevy"},"content":"    * The filtered events can be additionally sorted using the `-s` and `-o` prefixes, as above.","lastModifiedDate":"2021-04-05"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":271,"author":{"gitId":"zhengruoxin"},"content":"Examples:","lastModifiedDate":"2021-03-25"},{"lineNumber":272,"author":{"gitId":"zhengruoxin"},"content":"* `elist --exact -n Graduation party -r Get job` Lists out all events whose name is exactly \"Graduation party\" and remark is exactly \"Get job\"","lastModifiedDate":"2021-03-25"},{"lineNumber":273,"author":{"gitId":"zhengruoxin"},"content":"* `elist --any -n Christmas -r tarts` Lists out all events whose name contains \"Christmas\" or whose remarks contain \"tarts\"","lastModifiedDate":"2021-03-25"},{"lineNumber":274,"author":{"gitId":"Ellevy"},"content":"* `elist -s d` Lists out all events in chronological order (ascending event date)","lastModifiedDate":"2021-04-05"},{"lineNumber":275,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":276,"author":{"gitId":"pyuxiang"},"content":"#### Marking events as done : `edone`","lastModifiedDate":"2021-03-31"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":278,"author":{"gitId":"zhengruoxin"},"content":"Marks event(s) in PartyPlanet\u0027s Events List as done.","lastModifiedDate":"2021-03-25"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":280,"author":{"gitId":"zhengruoxin"},"content":"Format: `edone INDEX [INDEX]…​`","lastModifiedDate":"2021-03-25"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":282,"author":{"gitId":"zhengruoxin"},"content":"* `INDEX` must be a positive integer within the number of events in Events List.","lastModifiedDate":"2021-03-25"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-25"},{"lineNumber":285,"author":{"gitId":"zhengruoxin"},"content":"* `edone 2 3 5` Marks the 2nd, 3rd and 5th events as done.","lastModifiedDate":"2021-03-25"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":287,"author":{"gitId":"pyuxiang"},"content":"#### Deleting events : `edelete`","lastModifiedDate":"2021-03-31"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":289,"author":{"gitId":"zhengruoxin"},"content":"Deletes event(s) from PartyPlanet\u0027s Events List. Similar to `delete`.","lastModifiedDate":"2021-03-25"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":291,"author":{"gitId":"nickyfoo"},"content":"Format: `edelete [INDEX [INDEX]...]`","lastModifiedDate":"2021-03-28"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":293,"author":{"gitId":"garyljj"},"content":"* If no parameters: `edelete`","lastModifiedDate":"2021-03-30"},{"lineNumber":294,"author":{"gitId":"zhengruoxin"},"content":"  * Deletes all events in the current events list.","lastModifiedDate":"2021-03-25"},{"lineNumber":295,"author":{"gitId":"garyljj"},"content":"* If provided with index(es): `edelete INDEX [INDEX]...`","lastModifiedDate":"2021-03-30"},{"lineNumber":296,"author":{"gitId":"zhengruoxin"},"content":"  * Deletes the event(s) at the specified `INDEX`.","lastModifiedDate":"2021-03-25"},{"lineNumber":297,"author":{"gitId":"zhengruoxin"},"content":"  * All indexes must be a positive integer valid in the list.","lastModifiedDate":"2021-03-25"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-25"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":301,"author":{"gitId":"zhengruoxin"},"content":"* `edelete` deletes all events in the current Events List.","lastModifiedDate":"2021-03-25"},{"lineNumber":302,"author":{"gitId":"zhengruoxin"},"content":"* `edelete 1 2 3` deletes events at 1st, 2nd and 3rd indexes.","lastModifiedDate":"2021-03-25"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":304,"author":{"gitId":"Ellevy"},"content":"### General Commands","lastModifiedDate":"2021-04-05"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":306,"author":{"gitId":"pyuxiang"},"content":"#### Showing help : `help`","lastModifiedDate":"2021-03-31"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"nickyfoo"},"content":"Shows a message explaining a list of available commands.","lastModifiedDate":"2021-02-28"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"zhengruoxin"},"content":"Format: `help [COMMAND]`","lastModifiedDate":"2021-02-22"},{"lineNumber":311,"author":{"gitId":"zhengruoxin"},"content":"* List all available commands.","lastModifiedDate":"2021-02-22"},{"lineNumber":312,"author":{"gitId":"zhengruoxin"},"content":"* `[COMMAND]` a single parameter requesting help for a specific command\u0027s syntax.","lastModifiedDate":"2021-02-22"},{"lineNumber":313,"author":{"gitId":"nickyfoo"},"content":"* Any additional parameters will be ignored.","lastModifiedDate":"2021-03-08"},{"lineNumber":314,"author":{"gitId":"nickyfoo"},"content":"* If command is not understood then all available commands will be listed.","lastModifiedDate":"2021-03-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"zhengruoxin"},"content":"Examples:","lastModifiedDate":"2021-02-22"},{"lineNumber":317,"author":{"gitId":"zhengruoxin"},"content":"* `help` lists all available commands.","lastModifiedDate":"2021-02-22"},{"lineNumber":318,"author":{"gitId":"zhengruoxin"},"content":"* `help list` shows the syntax and description for the `list` command.","lastModifiedDate":"2021-02-22"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"pyuxiang"},"content":"#### Autocomplete: `TAB`","lastModifiedDate":"2021-03-31"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":322,"author":{"gitId":"glennljs"},"content":"The Autocomplete feature helps autocomplete when editing a Person or an Event to save the user time from retyping details. Currently, the feature only works for commands `edit` and `eedit`.","lastModifiedDate":"2021-03-30"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":324,"author":{"gitId":"glennljs"},"content":"Format:","lastModifiedDate":"2021-03-30"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":326,"author":{"gitId":"glennljs"},"content":"Edit: `edit INDEX [-n NAME] [-p PHONE] [-e EMAIL] [-a ADDRESS] [-t TAG]…​ [-b BIRTHDAY] [-r REMARK] TAB`","lastModifiedDate":"2021-03-30"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":328,"author":{"gitId":"glennljs"},"content":"EEdit: `eedit INDEX [-n NAME] [-d DATE] [-r DETAIL] TAB`","lastModifiedDate":"2021-03-30"},{"lineNumber":329,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":330,"author":{"gitId":"glennljs"},"content":"Note: Valid INDEX must be used in order for Autocomplete to function.","lastModifiedDate":"2021-03-30"},{"lineNumber":331,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":332,"author":{"gitId":"glennljs"},"content":"Below are the respective behaviors of Autocomplete for various prefixes.","lastModifiedDate":"2021-04-05"},{"lineNumber":333,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":334,"author":{"gitId":"glennljs"},"content":"All Prefixes except Tag: For any valid and empty prefix that the user inputs, the relevant details will be autocompleted on `TAB` keypress down.","lastModifiedDate":"2021-04-05"},{"lineNumber":335,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":336,"author":{"gitId":"glennljs"},"content":"Tags: Due to the plural nature of Tags, the Tag Autocomplete will always add all remaining existing tags belonging to the user. ","lastModifiedDate":"2021-04-05"},{"lineNumber":337,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":338,"author":{"gitId":"glennljs"},"content":"Below are some examples for example Person 1 with Tags \"Hello\" and \"World\".","lastModifiedDate":"2021-04-05"},{"lineNumber":339,"author":{"gitId":"glennljs"},"content":"1. Empty Tag Prefix, e.g. `edit 1 -t`","lastModifiedDate":"2021-04-05"},{"lineNumber":340,"author":{"gitId":"glennljs"},"content":"      * Expected Behavior: Autocompletes all tags from Person 1.","lastModifiedDate":"2021-04-05"},{"lineNumber":341,"author":{"gitId":"glennljs"},"content":"      * Example Output: `edit 1 -t Hello -t World`","lastModifiedDate":"2021-04-05"},{"lineNumber":342,"author":{"gitId":"glennljs"},"content":"2. Tag Prefix(es) containing valid existing Tags, e.g. `edit 1 -t World`","lastModifiedDate":"2021-04-05"},{"lineNumber":343,"author":{"gitId":"glennljs"},"content":"      * Expected Behavior: Autocompletes remaining valid tags from Person 1.","lastModifiedDate":"2021-04-05"},{"lineNumber":344,"author":{"gitId":"glennljs"},"content":"      * Example Output: `edit 1 -t World -t Hello`","lastModifiedDate":"2021-04-05"},{"lineNumber":345,"author":{"gitId":"glennljs"},"content":"3. Tag Prefix(es) that do not currently belong to Person, `edit 1 -t Foo`","lastModifiedDate":"2021-04-05"},{"lineNumber":346,"author":{"gitId":"glennljs"},"content":"      * Expected Behavior: Autocompletes and adds all tags from Person 1.","lastModifiedDate":"2021-04-05"},{"lineNumber":347,"author":{"gitId":"glennljs"},"content":"      * Example Output: `edit 1 -t Foo -t Hello -t World`","lastModifiedDate":"2021-04-05"},{"lineNumber":348,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":349,"author":{"gitId":"glennljs"},"content":"Note: Autocompleted Tags will be returned in alphabetical order and is case-sensitive.","lastModifiedDate":"2021-04-05"},{"lineNumber":350,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":351,"author":{"gitId":"pyuxiang"},"content":"#### Undoing actions : `undo`","lastModifiedDate":"2021-03-31"},{"lineNumber":352,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":353,"author":{"gitId":"garyljj"},"content":"Undoes the most recent action that changed PartyPlanet\u0027s Contact or Event List.","lastModifiedDate":"2021-04-04"},{"lineNumber":354,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":355,"author":{"gitId":"garyljj"},"content":"Note: This means that only commands such, as `add`, `delete` etc.., can be undoed.\u003cbr\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":356,"author":{"gitId":"garyljj"},"content":"Other command that only changes display, such as `theme`, `list` etc.., will not be affected.","lastModifiedDate":"2021-04-04"},{"lineNumber":357,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":358,"author":{"gitId":"nickyfoo"},"content":"Can be invoked repeatedly until there is no more history from the current session.","lastModifiedDate":"2021-03-28"},{"lineNumber":359,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":360,"author":{"gitId":"nickyfoo"},"content":"Format: `undo`","lastModifiedDate":"2021-03-28"},{"lineNumber":361,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":362,"author":{"gitId":"nickyfoo"},"content":"Shortcuts: ","lastModifiedDate":"2021-04-05"},{"lineNumber":363,"author":{"gitId":"nickyfoo"},"content":"PC: `CTRL + Z` ","lastModifiedDate":"2021-04-05"},{"lineNumber":364,"author":{"gitId":"nickyfoo"},"content":"Mac: `CMD + Z`","lastModifiedDate":"2021-04-05"},{"lineNumber":365,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":366,"author":{"gitId":"pyuxiang"},"content":"#### Redoing actions : `redo`","lastModifiedDate":"2021-03-31"},{"lineNumber":367,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":368,"author":{"gitId":"nickyfoo"},"content":"Redoes the previous action that changed PartyPlanet\u0027s Contact or Event List.","lastModifiedDate":"2021-03-28"},{"lineNumber":369,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":370,"author":{"gitId":"nickyfoo"},"content":"Can be invoked repeatedly until there are no more previously executed actions from the current session.","lastModifiedDate":"2021-03-28"},{"lineNumber":371,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":372,"author":{"gitId":"nickyfoo"},"content":"Format: `redo`","lastModifiedDate":"2021-03-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":374,"author":{"gitId":"nickyfoo"},"content":"Shortcut: ","lastModifiedDate":"2021-04-05"},{"lineNumber":375,"author":{"gitId":"nickyfoo"},"content":"PC: `CTRL + SHIFT + Z` or `CTRL + Y` ","lastModifiedDate":"2021-04-05"},{"lineNumber":376,"author":{"gitId":"nickyfoo"},"content":"Mac: `CMD + SHIFT + Z` or `CMD + Y`","lastModifiedDate":"2021-04-05"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":378,"author":{"gitId":"pyuxiang"},"content":"#### Toggle theme : `theme`","lastModifiedDate":"2021-03-31"},{"lineNumber":379,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":380,"author":{"gitId":"pyuxiang"},"content":"Toggles between Dark and Pastel theme","lastModifiedDate":"2021-03-26"},{"lineNumber":381,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":382,"author":{"gitId":"garyljj"},"content":"Format: `theme`","lastModifiedDate":"2021-03-25"},{"lineNumber":383,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":384,"author":{"gitId":"pyuxiang"},"content":"#### Leaving app : `exit`","lastModifiedDate":"2021-03-31"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":386,"author":{"gitId":"zhengruoxin"},"content":"Exits the app.","lastModifiedDate":"2021-02-22"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":388,"author":{"gitId":"zhengruoxin"},"content":"Format: `exit`","lastModifiedDate":"2021-02-22"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":390,"author":{"gitId":"pyuxiang"},"content":"#### InputHistory / Keyboard shortcuts :","lastModifiedDate":"2021-03-31"},{"lineNumber":391,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":392,"author":{"gitId":"garyljj"},"content":"Retrieves previously entered input.","lastModifiedDate":"2021-03-13"},{"lineNumber":393,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":394,"author":{"gitId":"garyljj"},"content":"* Entering new command adds new entry to InputHistory.","lastModifiedDate":"2021-03-13"},{"lineNumber":395,"author":{"gitId":"garyljj"},"content":"* InputHistory will save last 20 inputs.","lastModifiedDate":"2021-03-13"},{"lineNumber":396,"author":{"gitId":"garyljj"},"content":"* Pressing `Up` arrow key in the text input panel reverts to earlier input.","lastModifiedDate":"2021-03-13"},{"lineNumber":397,"author":{"gitId":"garyljj"},"content":"* Pressing `Down` arrow key undoes the history revert.","lastModifiedDate":"2021-03-13"},{"lineNumber":398,"author":{"gitId":"garyljj"},"content":"* At the most recent input, pressing `Down` arrow key once more clears the text box.","lastModifiedDate":"2021-03-13"},{"lineNumber":399,"author":{"gitId":"garyljj"},"content":"* `ESC` key clears the text box.","lastModifiedDate":"2021-03-13"},{"lineNumber":400,"author":{"gitId":"nickyfoo"},"content":"* `CTRL + Z`(PC) or `CMD + Z` (Mac) key combination undoes the last change to the address or event books.","lastModifiedDate":"2021-04-05"},{"lineNumber":401,"author":{"gitId":"nickyfoo"},"content":"* `CTRL + SHIFT + Z` or `CTRL + Y` (PC) or `CMD + SHIFT + Z` or `CMD + Y` (Mac) key combinations redo the last undone change to the address or event books.","lastModifiedDate":"2021-04-05"},{"lineNumber":402,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":403,"author":{"gitId":"glennljs"},"content":"### Coming Soon (Additional Features)","lastModifiedDate":"2021-02-24"},{"lineNumber":404,"author":{"gitId":"glennljs"},"content":"* Archiving of Data Files","lastModifiedDate":"2021-02-24"},{"lineNumber":405,"author":{"gitId":"garyljj"},"content":"* Custom fonts","lastModifiedDate":"2021-03-30"},{"lineNumber":406,"author":{"gitId":"garyljj"},"content":"* Even more themes","lastModifiedDate":"2021-03-30"},{"lineNumber":407,"author":{"gitId":"garyljj"},"content":"* Mass Operations (e.g. mass edit)","lastModifiedDate":"2021-03-30"},{"lineNumber":408,"author":{"gitId":"glennljs"},"content":"* Calendar View","lastModifiedDate":"2021-02-24"},{"lineNumber":409,"author":{"gitId":"glennljs"},"content":"* _and much more!_","lastModifiedDate":"2021-02-24"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"zhengruoxin"},"content":"**Q**: **What is the name of your application?**\u003cbr\u003e","lastModifiedDate":"2021-02-22"},{"lineNumber":416,"author":{"gitId":"Ellevy"},"content":"**A**: PartyPlanet","lastModifiedDate":"2021-03-12"},{"lineNumber":417,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":418,"author":{"gitId":"zhengruoxin"},"content":"**Q**: **How much does it cost?**\u003cbr\u003e","lastModifiedDate":"2021-02-22"},{"lineNumber":419,"author":{"gitId":"zhengruoxin"},"content":"**A**: Free!","lastModifiedDate":"2021-02-22"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"garyljj"},"content":"**Add** | `add -n NAME [-p PHONE] [-e EMAIL] [-a ADDRESS] [-t TAG]…​ [-b BIRTHDAY] [-r REMARK]` \u003cbr\u003e e.g., `add -n James Ho -p 96280000 -t friend -t colleague -r allergic to nuts`","lastModifiedDate":"2021-03-30"},{"lineNumber":428,"author":{"gitId":"zhengruoxin"},"content":"**EAdd** | `eadd -n NAME [-d DATE] [-r REMARK]` \u003cbr\u003e e.g. `eadd -n April Fools -d 2021-04-01 -r Prank the april babies!`","lastModifiedDate":"2021-03-25"},{"lineNumber":429,"author":{"gitId":"garyljj"},"content":"**Delete** | `delete [{INDEX [INDEX]…​ | [--any] -t TAG [-t TAG]...}]`\u003cbr\u003e e.g. `delete` \u003cbr\u003e e.g. `delete 3 4 5` \u003cbr\u003e e.g., `delete -t colleague`","lastModifiedDate":"2021-03-25"},{"lineNumber":430,"author":{"gitId":"nickyfoo"},"content":"**EDelete** | `edelete [INDEX [INDEX]...]` \u003cbr\u003e e.g. `edelete 1 2 3`","lastModifiedDate":"2021-03-28"},{"lineNumber":431,"author":{"gitId":"zhengruoxin"},"content":"**EDone** | `edone INDEX [INDEX]…​` \u003cbr\u003e e.g. `edone 2 3 5`","lastModifiedDate":"2021-03-25"},{"lineNumber":432,"author":{"gitId":"zhengruoxin"},"content":"**Edit** | `edit {INDEX [-n NAME] [-p PHONE] [-e EMAIL] [-a ADDRESS] [-t TAG]…​ [-b BIRTHDAY] [-r DETAIL] | --remove -t TAG [-t TAG]…​}`\u003cbr\u003e e.g.,`edit 2 -n James Lee -e jameslee@example.com`\u003cbr\u003e e.g., `edit --remove -t colleague`","lastModifiedDate":"2021-04-04"},{"lineNumber":433,"author":{"gitId":"garyljj"},"content":"**EEdit** | `eedit INDEX [-n NAME] [-d DATE] [-r DETAIL]` \u003cbr\u003e e.g. `eedit 3 -r Celebrate during first combined practice`","lastModifiedDate":"2021-03-30"},{"lineNumber":434,"author":{"gitId":"pyuxiang"},"content":"**List** | `list [--exact] [--any] [-n NAME]... [-t TAG]... [-b BIRTHDAY] [-s SORT_FIELD] [-o SORT_ORDER]`\u003cbr\u003e e.g., `list`\u003cbr\u003e e.g., `list -s asc`","lastModifiedDate":"2021-03-31"},{"lineNumber":435,"author":{"gitId":"zhengruoxin"},"content":"**EList** | `elist [--exact] [--any] [-n NAME] [-r DETAIL] ... [-s SORT] [-o ORDER]` \u003cbr\u003e e.g. `elist --any -n Christmas -r tarts`","lastModifiedDate":"2021-03-25"},{"lineNumber":436,"author":{"gitId":"zhengruoxin"},"content":"**Undo** | `undo`","lastModifiedDate":"2021-03-25"},{"lineNumber":437,"author":{"gitId":"nickyfoo"},"content":"**Redo** | `redo`","lastModifiedDate":"2021-03-28"},{"lineNumber":438,"author":{"gitId":"zhengruoxin"},"content":"**Help** | `help [COMMAND]`\u003cbr\u003e e.g., `help`\u003cbr\u003e e.g.,`help list`","lastModifiedDate":"2021-02-22"},{"lineNumber":439,"author":{"gitId":"garyljj"},"content":"**Toggle theme** | `theme`","lastModifiedDate":"2021-03-25"},{"lineNumber":440,"author":{"gitId":"zhengruoxin"},"content":"**Exit** | `exit`","lastModifiedDate":"2021-02-22"},{"lineNumber":441,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":442,"author":{"gitId":"zhengruoxin"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-29"},{"lineNumber":443,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":444,"author":{"gitId":"zhengruoxin"},"content":"**Acknowledgements**","lastModifiedDate":"2021-03-29"},{"lineNumber":445,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":446,"author":{"gitId":"zhengruoxin"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-03-29"},{"lineNumber":447,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":448,"author":{"gitId":"zhengruoxin"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2021-03-29"},{"lineNumber":449,"author":{"gitId":"zhengruoxin"},"content":"* Image used: [VectorStock](https://www.vectorstock.com/royalty-free-vector/birthday-hat-cartoon-vector-22619168)","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"glennljs":30,"zhengruoxin":67,"pyuxiang":116,"nickyfoo":26,"garyljj":56,"-":108,"Ellevy":46}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"garyljj"},"content":"    content: \"PartyPlanet\";","lastModifiedDate":"2021-04-02"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"garyljj":1,"-":294}},{"path":"docs/developer/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"   1. Run the `seedu.partyplanet.Main` and try a few commands.","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](../DeveloperGuide.md#architecture).","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"   * [Tracing code](../tutorials/TracingCode.md)","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"   * [Removing fields](../tutorials/RemovingFields.md)","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"   * [Adding a new command](../tutorials/AddRemark.md)","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"pyuxiang":5,"-":50}},{"path":"docs/developer/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"   e.g. `seedu.partyplanet.commons.StringUtilTest`","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"   e.g. `seedu.partyplanet.storage.StorageManagerTest`","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"   e.g. `seedu.partyplanet.logic.LogicManagerTest`","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"pyuxiang":3,"-":33}},{"path":"docs/developerGuide/architecture/Logic.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"### Logic component","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"**API** :","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"1. The command execution can affect the `Model` (e.g. adding a person).","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"glennljs":19}},{"path":"docs/developerGuide/architecture/Model.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"### Model component","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"The `Model`,","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"* stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"* stores the address book data.","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"* stores the event book data.","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"* exposes an unmodifiable `ObservableList\u003cEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"glennljs":20}},{"path":"docs/developerGuide/architecture/Storage.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"### Storage component","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"The `Storage` component,","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"* can save the address book data in json format and read it back.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"* can save the event book data in json format and read it back.","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"zhengruoxin":10}},{"path":"docs/developerGuide/architecture/Ui.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"### UI component","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"**API** :","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"The `UI` component,","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"zhengruoxin":15}},{"path":"docs/developerGuide/architecture/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"Each of the four components,","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point).","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"Ellevy":37}},{"path":"docs/developerGuide/feature/Add.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"### [Feature] Adding Persons","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"The Persons stored inside PartyPlanet should not have any compulsory fields except for name. This is to allow","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"for addition of contacts where the user is unable to, or does not need to fill up all fields.","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"One example of such case is a vendor\u0027s contact. The user does not need to store information on a vendor\u0027s birthday.","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"Additionally, the user should also be able to store remarks for that contact.","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"#### Implementation","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"* The remark is a new class that stores a String containing the specific remark","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"* Each `Person` class contains fields `Name`, `Address`, `Phone`, `Birthday`, `Email` , `Tag` and `Remark`","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    * To allow for optional fields `Address`, `Phone`, `Birthday`, `Email`, `Tag` and `Remark`, each class has an attribute","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"      `isEmpty` that indicates whether the field in the person is empty.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    * The empty fields will then be stored as an empty string `\"\"` in the `addressbook.json` folder and be read as an","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"      empty field accordingly.","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"* Syntax for adding Person: `add -n NAME [-a ADDRESS] [-p PHONE] [-b BIRTHDAY] [-e EMAIL] [-t TAG]... [-r REMARK]`","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"Given below is an example usage scenario and how the `add` mechanism behaves at each step.","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"1. The user executes `add -n James -r Loves sweets` command to add a person with name `James` and remark `Loves","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"   sweets`, represented by `execute(\"add -n James -r Loves sweets\"\")`. Note that fields `Address`, `Phone`,","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"   `Birthday`, `Tag` and `Email` are not specified and hence are empty fields.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"2. `LogicManager` uses the `AddressBookParser` class to parse the user command, represented by `parseCommand(\"add -n","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"   James -r Loves sweets\")`","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"Below is the partial sequence diagram for steps 1 and 2.","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"![Interactions Inside the Logic Component for the `add -n James -r Loves sweets` Command p1](images/AddSequenceDiagram1.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"3. `AddressBookParser` creates an `AddCommandParser` which is used to parse the arguments provided by the user. This","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"   is represented by `parse(\"-n James -r Loves sweets\")`.","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"4. `AddCommandParser` calls the constructor of a `Person` with the given arguments as input and creates a `Person`","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"   This is represented by `Person(\"James\", \"\", \"\", \"\", \"\", \"Loves sweets\", [])`. Note empty","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"   string `\"\"` and `[]` represent empty fields.","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"5. The `AddCommandParser` then passes this newly created `Person` as input to create an `AddCommand` which will be","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"   returned to the `LogicManager`. This is represented by `AddCommand(p)`","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"Below is the partial sequence diagram for steps 3, 4 and 5.","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"![Interactions Inside the Logic Component for the `add -n James -r Loves sweets` Command p2](images/AddSequenceDiagram2.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"6. The `LogicManager` executes the `AddCommand` by calling `AddCommand#execute()` and passes the `CommandResult`","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"   back to the `UI`.","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"![Interactions Inside the Logic Component for the `add -n James -r Loves sweets` Command p3](images/AddSequenceDiagram3.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"Given below is the full Sequence Diagram for interactions within the `Logic` component for the `execute(\"add -n","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"James -r Loves sweets\")` API call.","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"![Interactions Inside the Logic Component for the `add -n James -r Loves sweets` Command](images/AddSequenceDiagram.png)","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"Ellevy":52}},{"path":"docs/developerGuide/feature/Autocomplete.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"### [Feature] Autocompleting `Edit` Command (Remark)","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"Since `Remark`s are intended to be capable of containing long sentences or paragraphs,","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"it brings an unintended chore of a User having to retype an entire `Remark` in order to edit it.","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"The Autocomplete feature allows the user to autocomplete a current `Person`\u0027s remark into the","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"command box once the correct `Person` id and remark prefix has been keyed.","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"#### Implementation","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"* Syntax for EditAutocomplete: `edit INDEX -r` + `TAB`","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"* The user is expected to keypress the TAB key after typing the command in order to activate the autocomplete feature.","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"* The feature is implemented with the help of a new `EditAutocompleteUtil` class that handles parsing and retrieving the","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"  relavant remark from the `Model`.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"Given below is an example usage scenario and how `EditAutocomplete` will work.","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"1. The user executes `edit 1 -r` + `TAB` command to autocomplete `Person` 1\u0027s Remark.","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"2. `UI` calls `autocomplete(\"edit 1 -r\")` of `LogicManager` to handle the input.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"3. `LogicManager` calls `parseEditCommand(\"edit 1 -r\", model)` of `EditAutocompleteUtil` to parse the input.","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"4. `EditAutocompleteUtil` processes the input and retrieves the relevant `Person`\u0027s `Remark` from the `Model`.","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"glennljs"},"content":"5. `EditAutocompleteUtil` creates the autocompleted output String and returns it to `LogicManager`.","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"glennljs"},"content":"7. `LogicManger` returns the autocompleted output String to `UI`.","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"8. `UI` updates `CommandBox` to reflect the autocompleted command input.","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"glennljs"},"content":"Given below is the full Sequence Diagram for interactions for the `edit 1 -r` + `TAB` API call.","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":"![Sequence Diagram for Autocomplete Edit Remark](images/AutocompleteSequenceDiagram.png)","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"glennljs":33}},{"path":"docs/developerGuide/feature/DataArchiving.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"Ellevy":3}},{"path":"docs/developerGuide/feature/Edit.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"### [Feature] Editing Persons","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"Information about a person can change overtime, and user can edit contacts without having to delete and add a new replacement.","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"Edit allows modification of any target field and thus requires just one input parameter to work.","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"The updated contact is then displayed in-place of the old one.","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"Coupled with flag `--remove`, edit can remove all specified tags from all contacts in displayed list.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"#### Implementation","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"* Syntax for editing individual Persons:","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"  `edit INDEX [-n NAME] [-a ADDRESS] [-p PHONE] [-b BIRTHDAY] [-e EMAIL] [-t TAG]... [-r REMARK]`","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"* Syntax for removing tags for all Persons in displayed list:","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"  `edit --remove -t TAG [-t TAG]...`","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"Given below is an example usage scenario and how the `edit` mechanism behaves.","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"1. The user executes `edit --remove -t friends -t pilot` command to edit all persons with `friends` and/ or `pilot` tags by removing it from their list of tags.","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"2. `LogicManager` calls `parseCommand(\"edit --remove -t friends -t pilot\")` of `AddressBookParser` to parse this user command.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"3. `AddressBookParser` recognises the command word `edit` and creates an `EditCommandParser`.","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"4. `AddressBookParser` calls `parse(--remove -t friends -t pilot)` of `EditCommandParser`.","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"5. `EditCommandParser` detects flag `--remove` and calls `parseTags(argMultimap.getAllValues(PREFIX_TAG)` of `ParserUtil`","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"   to processes the input tags into a `Set\u003cTag\u003e`.","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"6. `EditCommandParser` then passes this `Set\u003cTag\u003e` as input to create an `EditToRemoveTagCommand` which is returned to the `LogicManager`.","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"7. `LogicManager` executes the `EditToRemoveTagCommand` by calling `execute(model)`.","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"8. `EditToRemoveTagCommand` loops through the set of tags and persons in displayed list to remove the `friends` and `pilot` tags from each person in the displayed list.","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"9. `EditToRemoveTagCommand` creates a `CommandResult` with the success output message and returns it to `LogicManager`.","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"Given below is the full Sequence Diagram for interactions for the `edit --remove -t friends -t pilot` API call.","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"![Sequence Diagram for Edit Remove](images/EditRemoveSequenceDiagram.png)","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"zhengruoxin":41}},{"path":"docs/developerGuide/feature/EventDone.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"### [Feature] Marking `Event` as Done","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"We want to allow `Event` to be marked as done. So that the user can easily keep track of what events have been completed,","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"and what events are upcoming.","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"`Event` titles could include a tick to represent completion.","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"#### Implementation","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"* Syntax for EDoneCommand: `edone INDEX [INDEX]...`","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"* Modification to `Event` class","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    * New attribute `isDone` should be added to represent a done and not done event.","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    * A `setDone()` method to return a new `Event` object that is done.","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    * A `getStatus()` method that returns a tick if the `Event` is done (for UI display).","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"Given below is an example usage scenario and how `edone` will work.","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"1. The user executes `edone 1 2 3` command to mark event at index 1, 2 and 3 as done.","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"2. `LogicManager` calls `parseCommand(\"edone 1 2 3\")` of `AddressBookParser` to parse the input.","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"3. `AddressBookParser` detects command word `edone` and creates an `EDoneCommandParser`.","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"4. `AddressBookParser` calls `parse(\"1 2 3\")` of `EDoneCommandParser`.","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"5. `EDoneCommandParser` processes the input and compiles the valid indexes into a list `List\u003cIndex\u003e`.","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"6. `EDoneCommandParser` creates an `EDoneCommand(List\u003cIndex\u003e)` and returns it to `LogicManager`.","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"7. `LogicManger` executes the `EDoneCommand`.","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"8. `EDoneCommand` loops through the list of index, and set the events, at the given index, as a done event.","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"9. `EDoneCommand` creates a `CommandResult` containing the output message and returns it to `LogicManager`.","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"Given below is the full Sequence Diagram for interactions for the `execute(\"edone 1 2 3\")` API call.","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"![Sequence Diagram for EDone](images/EDoneSequenceDiagram.png)","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"zhengruoxin":1,"garyljj":36}},{"path":"docs/developerGuide/feature/Help.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"### [Feature] Help","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"#### Implementation","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"When called as `help`, the user will be given the concise command-line syntax of all implemented commands and their arguments following the conventions listed in https://developers.google.com/style/code-syntax","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"This is facilitated by `MESSAGE_USAGE_CONCISE` in each `Command` that the user is able to use.","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"When called as `help [COMMAND]`, the user will be given the detailed description of the usage of the specified `COMMAND`.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"This is facilitated by `MESSAGE_USAGE` in each `Command`.","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"Given below is an example usage scenario and how the `HelpCommand` mechanism behaves at each step.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"Step 1. The user launches the application for the first time. The user is unsure of the syntax and attempts to type","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"in the CLI a command that is unlikely to fit the syntax of implemented commands. `AddressBookParser#ParseCommand()` throws a `ParseException` and the user receives a prompt \"Unknown command, try the command: help\".","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"Step 2. The user executes `help`. `AddressBookParser#ParseCommand()` instantiates a `HelpCommandParser` to parse the arguments for `help`. Since there are no arguments, the default constructor for `HelpCommand` is called, and the user receives a concise description of the complete set of implemented commands.","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"Step 3. The user executes `help add`. `AddressBookParser#ParseCommand()` instantiates a `HelpCommandParser` to parse the arguments for `help add`. The constructor taking in a `commandWord` is called, and when `HelpCommand#execute` is run, the `MESSAGE_USAGE` of the `Command` matching the `commandWord` is shown to the user.","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the subsequent arguments are not successfully parsed, `help` is called instead. If multiple arguments are found, only the first one is parsed.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"#### Design consideration:","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"##### Aspect: How HelpCommand executes","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"* **Alternative 1 (current choice):** Entire help message is composed of `MESSAGE_USAGE_CONCISE` of the various commands in `SHOWING_HELP_MESSAGE`, which is printed.","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    * Pros: Each `Command` takes care of its own syntax, only needs to be updated at one place for changes to take effect.","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    * Cons: The list of commands is still hard coded into `SHOWING_HELP_MESSAGE`, and needs to be manually updated every time a new `Command` is implemented.","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"* **Alternative 2:** Maintain a list of Commands, which `HelpCommand` will iterate over to print the concise syntax for each command when printing the help message.","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    * Pros: Need not hard code the possible commands, only have to update the list of commands","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    * Cons: Possible reduced performance, especially later if a large number of commands is added.","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"nickyfoo":36}},{"path":"docs/developerGuide/feature/SortByDate.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"### [Feature] Sorting of contacts by date","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"From user perspective, typically want to get birthdays of contacts in chronological order.","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"#### Implementation","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"* Syntax for sorting `list [...] --sort birthday --order ascending`. // Five lines","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"pyuxiang":6,"nickyfoo":1}},{"path":"docs/developerGuide/feature/UndoRedo.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"### [Feature] Undo/redo","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"#### Implementation","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"The undo/redo mechanism is facilitated by `StateHistory` and `State`. It extends `PartyPlanet` with an undo/redo history, stored internally as an `ArrayList\u003cState\u003e` with a `currentStatePointer`, where a `State` stores the `AddressBook` and `EventBook` at any given point in time. Additionally, it implements the following operations:","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"* `StateHistory#addState()` —  Saves the current book state in its history.","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"* `StateHistory#previousState()` — Restores the previous state from its history.","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"* `StateHistory#nextState()` — Restores a previously undone state from its history.","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"These operations are exposed in the `Model` interface as `Model#addState()`, `Model#undo()` and `Model#redo()` respectively.","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"Step 1. The user launches the application for the first time. The `StateHistory` will be initialized with the initial address and event book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#addState()`, causing the modified state of the address book after the `delete 5` command executes to be saved in a new `State`, which is stored in `StateHistory`, and the `currentStatePointer` is shifted to the newly inserted state.","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"Step 3. The user executes `add n/David` to add a new person. The `add` command also calls `Model#addState()`, causing another state to be saved into the `StateHistory`.","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#addState()`, so the state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undo()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous state, and restores the address and event books to that state.","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial state, then there are no previous states to restore. The `undo` command catches an `IndexOutOfBoundsException` thrown by `Model#undo()` if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"than attempting to perform the undo.","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"The `redo` command does the opposite — it calls `Model#redo()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command catches an `IndexOutOfBoundsException` thrown by `Model#redo()` if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#addState()`, `Model#undo()` or `Model#redo()`. Thus, the `StateHistory` remains unchanged.","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"Step 6. The user executes `clear`, which calls `Model#addState()`. Since the `currentStatePointer` is not pointing at the end of the `StateHistory`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"![CommitActivityDiagram](images/AddStateActivityDiagram.png)","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"#### Design consideration:","lastModifiedDate":"2021-04-01"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"##### Aspect: How undo \u0026 redo executes","lastModifiedDate":"2021-04-01"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"* **Alternative 1 (current choice):** Saves the entire address and event books.","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"  itself.","lastModifiedDate":"2021-04-01"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2021-04-01"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"nickyfoo":77}},{"path":"docs/developerGuide/requirements/NonFunctional.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"### Non-Functional Requirements","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"1. PartyPlanet should be usable by a novice who has never used a CLI address book before.","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"2. PartyPlanet should work on any _mainstream OS_ with minimally Java `11` installed.","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"3. PartyPlanet Should be able to hold up to 1000 contacts without a noticeable sluggishness in performance for typical","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"   usage.","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"4. PartyPlanet should store data _locally only_, in a human editable text file, for privacy reasons.","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"5. PartyPlanet should only be for a _single user_ and should not require interaction with other users of PartyPlanet.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"6. A user with above average typing speed for regular English text (i.e. not code, not system admin commands)","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"   should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"7. The source code should be open source.","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"8. PartyPlanet should work without requiring an installer, the installation of any additional software, or any","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"   external connections.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"9. The total file size should not exceed _100MB_.","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"nickyfoo":14}},{"path":"docs/developerGuide/requirements/ProductScope.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"### Product scope","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"**Target user profile**:","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"* has a need to manage a significant number of contacts within CCA","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"* has a need to keep track of all the birthdays of CCA members to plan celebrations","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"* has a need to store contacts of favourite vendors to contact for birthday celebrations","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"* can type fast","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"**Value proposition**:","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"* manage planning of birthdays faster than a typical mouse/GUI driven app","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"* group and access CCA members by information such as matriculation batch/sub-committees","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"* track upcoming birthdays to plan for","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"nickyfoo":16}},{"path":"docs/developerGuide/requirements/UseCases.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"### Use cases","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"(For all use cases below, the **System** is the `PartyPlanet` application while the **Actor** is the `User`,","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"unless specified otherwise)","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"\u003cpre\u003e","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"Use case: UC1 - Add a contact","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"  1. User requests to add a new contact.","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the new list of contacts with the added contact.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"Use case: UC2 - Delete a contact","lastModifiedDate":"2021-04-04"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"  1. User requests for a contact/contacts to be deleted.","lastModifiedDate":"2021-04-04"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the list of contacts without the deleted contact.","lastModifiedDate":"2021-04-04"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-04"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"Use case: UC3 - Edit a contact","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"  1. User request for a contact/contacts to be edited.","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the updated details.","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"Use case: UC4 - List contacts","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"  1. User requests to list out all contacts.","lastModifiedDate":"2021-04-04"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays a list of all contacts.","lastModifiedDate":"2021-04-04"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"  1a. User chooses a sort order from a list of possible sort orders.","lastModifiedDate":"2021-04-04"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"      1a1. PartyPlanet displays the list of all contacts in the given sort order.","lastModifiedDate":"2021-04-04"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"           Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"  1b. User chooses a searching criteria from a list of possible criteria.","lastModifiedDate":"2021-04-04"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"      1b1. PartyPlanet displays the list of all contacts meeting the given criteria.","lastModifiedDate":"2021-04-04"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"           Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"  1c. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"Use case: UC5 - Add an event","lastModifiedDate":"2021-04-04"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"  1. User requests to add a new event.","lastModifiedDate":"2021-04-04"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the new list of events with the added event.","lastModifiedDate":"2021-04-04"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"Use case: UC6 - Delete an event","lastModifiedDate":"2021-04-04"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"  1. User requests for an event/events to be deleted.","lastModifiedDate":"2021-04-04"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the list of events without the deleted event.","lastModifiedDate":"2021-04-04"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"Use case: UC7 - Edit an event","lastModifiedDate":"2021-04-04"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-04"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"  1. User requests for an event to be edited.","lastModifiedDate":"2021-04-04"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the updated details.","lastModifiedDate":"2021-04-04"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-04"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"Use case: UC8 - Mark an event as done","lastModifiedDate":"2021-04-04"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-04"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"  1. User requests for an event to be marked as done.","lastModifiedDate":"2021-04-04"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the updated status.","lastModifiedDate":"2021-04-04"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-04"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"Use case: UC9 - List events","lastModifiedDate":"2021-04-04"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"  1. User requests to list out all events.","lastModifiedDate":"2021-04-04"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays a list of all events.","lastModifiedDate":"2021-04-04"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-01"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"  1a. User chooses a sort order from a list of possible sort orders.","lastModifiedDate":"2021-04-04"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"      1a1. PartyPlanet displays the list of all events in the given sort order.","lastModifiedDate":"2021-04-04"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"           Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"  1b. User chooses a searching criteria from a list of possible criteria.","lastModifiedDate":"2021-04-04"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"      1b1. PartyPlanet displays the list of all events meeting the given criteria.","lastModifiedDate":"2021-04-04"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"           Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"  1c. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"Use case: UC10 - Get Help","lastModifiedDate":"2021-04-04"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"  1. User requests for help.","lastModifiedDate":"2021-04-01"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays all available commands.","lastModifiedDate":"2021-04-01"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-01"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"  1a. User supplied a specific command as a parameter.","lastModifiedDate":"2021-04-01"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"      1a1. PartyPlanet displays help for the specific command supplied.","lastModifiedDate":"2021-04-01"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"           Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"  1b. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"Use case: UC11 - Erroneous input","lastModifiedDate":"2021-04-04"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-04"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"  1. PartyPlanet detects erroneous input.","lastModifiedDate":"2021-04-04"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays error message.","lastModifiedDate":"2021-04-04"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"Use case: UC12 - Exit PartyPlanet","lastModifiedDate":"2021-04-04"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-01"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"  1. User requests to exit.","lastModifiedDate":"2021-04-01"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet exits and closes the window.","lastModifiedDate":"2021-04-01"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-01"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"Use case: UC13 - Undo an action","lastModifiedDate":"2021-04-04"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-04"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"  1. User requests to undo an action.","lastModifiedDate":"2021-04-04"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the details of the action that was undone and the list of contacts/events after the action is undone.","lastModifiedDate":"2021-04-04"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-04"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"Use case: UC14 - Redo an action","lastModifiedDate":"2021-04-04"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"MSS:","lastModifiedDate":"2021-04-04"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"  1. User requests to redo an action.","lastModifiedDate":"2021-04-04"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"  2. PartyPlanet displays the details of the action that was redone and the list of contacts/events after the action is redone.","lastModifiedDate":"2021-04-04"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"     Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"Extensions:","lastModifiedDate":"2021-04-04"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"  1a. PartyPlanet \u003cins\u003edetects an erroneous input (UC11)\u003c/ins\u003e.","lastModifiedDate":"2021-04-04"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"      Use case ends.","lastModifiedDate":"2021-04-04"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"\u003c/pre\u003e","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"garyljj":166}},{"path":"docs/developerGuide/requirements/UserStories.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"### User stories","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"| Priority | As a … | I want to … | So that I can… |","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"| --- | --- | --- | --- |","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"| `***` | Potential user | See the app populated with sample data | See how the app will look like when it is in use |","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"| `***` | New user | Purge all current data | Get rid of sample data used for exploring the app |","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"| `***` | New user | Record birthdays | Keep track of birthdays of CCA members |","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"| `**` | New user | Add contacts tagged to a subcommittee | Easily organise members in CCA |","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"| `***` | New user | Add vendors tagged to a particular product/service | Easily look for vendors providing a particular service |","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"| `***` | New user | Edit existing details tagged to a person | Append new information without retyping the same details |","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"| `***` | New user | View a help page / use a help command | Know the correct syntax to use the functions/ know what functions the app supports |","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"| `***` | New user | Add remarks to a person | Take note of their preferences (dietary, allergy, etc) |","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"| `**` | Returning user | Sort / search through contacts based on tags | Easily find groups of relevant contacts / members |","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"| `*` | Returning user | Sort / search through contacts based on birthday month | Plan mass celebration for everyone born in the same month |","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"| `***` | Returning user | Change the details of a birthday plan | Reflect the changed plans |","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"| `**` | Returning user | Delete all members belonging to a group | Reduce clutter and prepare for incoming batches of members |","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"| `*` | Returning user | Encrypt application access as well as application data | Protect inadvertent data leak |","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"| `*` | Returning user | Mark celebrations as completed | Know which birthdays are done |","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"| `**` | Returning user | Delete completed/irrelevant contacts | Reduce the clutter on PartyPlanet |","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"| `***` | Retiring welfare IC | Pass down the data to successor | (they) would not need to re-gather and re-enter details |","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"| `*` | Expert user | Create shortcuts | Run multiple repeated commands at once to save time |","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"| `**` | Clumsy user | Edit misspelled commands | Fix typo mistakes in the app |","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"| `**` | Clumsy user | Undo/edit misspelled names/numbers/notes | Fix mistakes |","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"| `*` | Reflective user | Archive past birthday celebrations | Revisit previous birthday celebration and their details for reuse |","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"| `*` | CCA welfare IC with many sub-groups | Color tags | Differentiate contacts easily |","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"| `**` | Welfare IC who plans ahead of time | Search date | See all birthdays on that day |","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"| `**` | Night owl | Enable dark mode | Use the app safely in dark environments |","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"| `*` | Overworked welfare IC | See all upcoming birthdays as a weekly view / monthly calendar | Prioritize birthdays to plan |","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"| `*` | Satisfied user | Share the application with my family and friends | Encourage close contacts to use the application |","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"| `***` | Returning user | Delete events | Reduce clutter on PartyPlanet |","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"| `***` | Welfare IC | Add a birthday plan (event) to the app | Keep track of the celebration planning progress |","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"| `***` | Welfare IC | Set a date for a birthday plan (event) | Ensure details are planned on time |","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"| `**` | Busy Welfare IC | Sort through the list of events | Look at upcoming events  |","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"| `*` | Busy Welfare IC | Search for events by details | Find similar events to refer to for planning |","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"| `**` | Busy Welfare IC | Search for events by title | Filter out particular events with that title  |","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"garyljj":37}},{"path":"docs/developerGuide/testing/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"### Launch and shutdown","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"1. Initial launch","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"    1. Download the jar file and copy into an empty folder","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"1. Saving window preferences","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"### Deleting a person","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"       Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"       Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"### Saving data","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"garyljj":41}},{"path":"docs/diagrams/AddSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"@startuml","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"!include style.puml","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"participant \"p:Person\" as Person LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"participant \"a:AddCommand\" as AddCommand LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"end box","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"end box","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"[-\u003e LogicManager : execute(\"add -n James \\n -r Loves sweets\")","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"activate LogicManager","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"add -n James \\n -r Loves sweets\")","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"activate AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"create AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"AddressBookParser -\u003e AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"activate AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"AddCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"deactivate AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"AddressBookParser -\u003e AddCommandParser : parse(\"-n James \\n -r Loves sweets\")","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"activate AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"create Person","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"AddCommandParser -\u003e Person: Person(\"James\", \" \", \" \", \" \", \" \", \"Loves sweets\", [])","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"activate Person","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"Person --\u003e AddCommandParser: p","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"deactivate Person","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"create AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"AddCommandParser -\u003e AddCommand: AddCommand(p)","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"activate AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"AddCommand --\u003e AddCommandParser : a","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"deactivate AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"AddCommandParser --\u003e AddressBookParser : a","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"deactivate AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"AddCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"destroy AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"AddressBookParser --\u003e LogicManager : a","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"LogicManager -\u003e AddCommand : execute()","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"activate AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"AddCommand -\u003e Model : addPerson(p)","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"activate Model","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"Model --\u003e AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"deactivate Model","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"create CommandResult","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"AddCommand -\u003e CommandResult","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"activate CommandResult","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"CommandResult --\u003e AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"deactivate CommandResult","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"AddCommand --\u003e LogicManager : result","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"deactivate AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"deactivate LogicManager","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"@enduml","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"Ellevy":77}},{"path":"docs/diagrams/AddSequenceDiagram1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"@startuml","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"!include style.puml","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"end box","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"[-\u003e LogicManager : execute(\"add -n James -r Loves sweets\")","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"activate LogicManager","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"add -n James -r Loves sweets\")","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"activate AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"AddressBookParser -\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"AddressBookParser \u003c--","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"LogicManager \u003c-- AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"\u003c-- LogicManager","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"@enduml","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"Ellevy":22}},{"path":"docs/diagrams/AddSequenceDiagram2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"@startuml","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"!include style.puml","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"participant \"p:Person\" as Person LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"participant \"a:AddCommand\" as AddCommand LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"end box","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"activate AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"-\u003e AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"create AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"AddressBookParser -\u003e AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"activate AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"AddCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"deactivate AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"AddressBookParser -\u003e AddCommandParser : parse(\"-n James -r Loves sweets\")","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"activate AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"create Person","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"AddCommandParser -\u003e Person: Person(\"James\", \" \", \" \", \" \", \" \", \"Loves sweets\", [])","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"activate Person","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"Person --\u003e AddCommandParser: p","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"deactivate Person","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"create AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"AddCommandParser -\u003e AddCommand: AddCommand(p)","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"activate AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"AddCommand --\u003e AddCommandParser : a","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"deactivate AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"AddCommandParser --\u003e AddressBookParser : a","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"deactivate AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"AddCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"destroy AddCommandParser","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"\u003c-- AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"@enduml","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"Ellevy":52}},{"path":"docs/diagrams/AddSequenceDiagram3.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"@startuml","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"!include style.puml","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"participant \"a:AddCommand\" as AddCommand LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"end box","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"end box","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"[-\u003e LogicManager :","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"activate LogicManager","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"LogicManager -\u003e AddCommand : execute()","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"activate AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"AddCommand -\u003e Model : addPerson(p)","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"activate Model","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"Model --\u003e AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"deactivate Model","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"create CommandResult","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"AddCommand -\u003e CommandResult","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"activate CommandResult","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"CommandResult --\u003e AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"deactivate CommandResult","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"AddCommand --\u003e LogicManager : result","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"deactivate AddCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"deactivate LogicManager","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"@enduml","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"Ellevy":39}},{"path":"docs/diagrams/AddStateActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"start","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":":User executes command;","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"if () then ([command adds State to StateHistory])","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    :Purge redundant states;","lastModifiedDate":"2020-12-12"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    :Save State to","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    StateHistory;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"else ([else])","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"endif","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"stop","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nickyfoo":3,"-":12}},{"path":"docs/diagrams/AutocompleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"@startuml AutocompleteSequenceDiagram","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"!include style.puml","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"box UI UI_COLOR_T1","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"participant \":UI\" as UI UI_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"end box","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"participant \":EditAutocompleteUtil\" as EditAutocompleteUtil LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"end box","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"end box","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"[-\u003e UI : \"edit 1 -r TAB\"","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"activate UI","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":"UI-\u003e LogicManager : autoComplete(\"edit 1 -r\")","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"activate LogicManager","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"LogicManager -\u003e EditAutocompleteUtil : parseEditCommand(\"edit 1 -r\")","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"glennljs"},"content":"activate EditAutocompleteUtil","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"glennljs"},"content":"EditAutocompleteUtil -\u003e Model","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"glennljs"},"content":"activate Model","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"Model -\u003e EditAutocompleteUtil : result","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"deactivate Model","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":"EditAutocompleteUtil -\u003e LogicManager : result","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":"deactivate EditAutocompleteUtil","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"glennljs"},"content":"LogicManager -\u003e UI : result","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"glennljs"},"content":"deactivate LogicManager","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"glennljs"},"content":"UI -\u003e[ : result","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"glennljs"},"content":"deactivate UI","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"glennljs"},"content":"@enduml","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"glennljs":40}},{"path":"docs/diagrams/EDoneSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"@startuml","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"!include style.puml","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"box UI","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"participant \":UI\" as UI UI_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"end box","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"participant \":EDoneCommandParser\" as EDoneCommandParser LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"participant \":EDoneCommand\" as EDoneCommand LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"end box","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"end box","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"[-\u003e UI : \"edone 1 2 3\"","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"activate UI","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"UI -\u003e LogicManager : execute(\"edone 1 2 3\")","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"activate LogicManager","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"edone 1 2 3\")","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"activate AddressBookParser","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"create EDoneCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"AddressBookParser -\u003e EDoneCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"activate EDoneCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"EDoneCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"deactivate EDoneCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"AddressBookParser -\u003e EDoneCommandParser : parse(\"1 2 3\")","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"activate EDoneCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"create EDoneCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"EDoneCommandParser -\u003e EDoneCommand : EDoneCommand(List\u003cIndex\u003e)","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"activate EDoneCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"EDoneCommand --\u003e EDoneCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"deactivate EDoneCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"EDoneCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"deactivate EDoneCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"AddressBookParser --\u003e LogicManager","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"LogicManager -\u003e EDoneCommand : execute(model)","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"activate EDoneCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"loop for each index","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"EDoneCommand -\u003e Model : setEvent(event, event.done())","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"activate Model","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"Model --\u003e EDoneCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"deactivate Model","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"end","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"create CommandResult","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"EDoneCommand -\u003e CommandResult","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"activate CommandResult","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"CommandResult --\u003e EDoneCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"deactivate CommandResult","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"EDoneCommand --\u003e LogicManager","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"deactivate EDoneCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"LogicManager --\u003e UI","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"deactivate LogicManager","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"[\u003c-- UI","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"deactivate UI","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"@enduml","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"garyljj":77}},{"path":"docs/diagrams/EditRemoveSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"@startuml","lastModifiedDate":"2021-04-01"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"!include style.puml","lastModifiedDate":"2021-04-01"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"box UI UI_COLOR_T1","lastModifiedDate":"2021-04-01"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"participant \":UI\" as UI UI_COLOR","lastModifiedDate":"2021-04-01"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"end box","lastModifiedDate":"2021-04-01"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-04-01"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-04-01"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR","lastModifiedDate":"2021-04-01"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"participant \":EditToRemoveTagCommand\" as EditToRemoveTagCommand LOGIC_COLOR","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-04-01"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"end box","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-04-01"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-04-01"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"end box","lastModifiedDate":"2021-04-01"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"[-\u003e UI : \"edit --remove -t friends -t pilot\"","lastModifiedDate":"2021-04-01"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"activate UI","lastModifiedDate":"2021-04-01"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"UI -\u003e LogicManager : execute(\"edit --remove -t friends -t pilot\")","lastModifiedDate":"2021-04-01"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"activate LogicManager","lastModifiedDate":"2021-04-01"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"edit --remove -t friends -t pilot\")","lastModifiedDate":"2021-04-01"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"activate AddressBookParser","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"create EditCommandParser","lastModifiedDate":"2021-04-01"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"AddressBookParser -\u003e EditCommandParser","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"activate EditCommandParser","lastModifiedDate":"2021-04-01"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"EditCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-04-01"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"deactivate EditCommandParser","lastModifiedDate":"2021-04-01"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"AddressBookParser -\u003e EditCommandParser : parse(\"--remove -t friends -t pilot\")","lastModifiedDate":"2021-04-01"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"activate EditCommandParser","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"create EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"EditCommandParser -\u003e EditToRemoveTagCommand : EditToRemoveTagCommand(Set\u003cTag\u003e)","lastModifiedDate":"2021-04-01"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"activate EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"EditToRemoveTagCommand --\u003e EditCommandParser","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"deactivate EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"EditCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-04-01"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"deactivate EditCommandParser","lastModifiedDate":"2021-04-01"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"AddressBookParser --\u003e LogicManager","lastModifiedDate":"2021-04-01"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"LogicManager -\u003e EditToRemoveTagCommand : execute(model)","lastModifiedDate":"2021-04-01"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"activate EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"EditToRemoveTagCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"activate Model","lastModifiedDate":"2021-04-01"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"Model --\u003e EditToRemoveTagCommand : lastShownList","lastModifiedDate":"2021-04-01"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"deactivate Model","lastModifiedDate":"2021-04-01"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"loop for each person","lastModifiedDate":"2021-04-01"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"EditToRemoveTagCommand -\u003e EditToRemoveTagCommand : hasTags(person)","lastModifiedDate":"2021-04-01"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"activate EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"EditToRemoveTagCommand --\u003e EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"deactivate EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"end","lastModifiedDate":"2021-04-01"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"loop for each person with tags","lastModifiedDate":"2021-04-01"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"EditToRemoveTagCommand -\u003e Model : setPerson(person, removeTagFromPerson(person))","lastModifiedDate":"2021-04-01"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"activate Model","lastModifiedDate":"2021-04-01"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"Model --\u003e EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"deactivate Model","lastModifiedDate":"2021-04-01"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"end","lastModifiedDate":"2021-04-01"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"create CommandResult","lastModifiedDate":"2021-04-01"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"EditToRemoveTagCommand -\u003e CommandResult","lastModifiedDate":"2021-04-01"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"activate CommandResult","lastModifiedDate":"2021-04-01"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"CommandResult --\u003e EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"deactivate CommandResult","lastModifiedDate":"2021-04-01"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"EditToRemoveTagCommand --\u003e LogicManager","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"deactivate EditToRemoveTagCommand","lastModifiedDate":"2021-04-01"},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":85,"author":{"gitId":"zhengruoxin"},"content":"LogicManager --\u003e UI","lastModifiedDate":"2021-04-01"},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"deactivate LogicManager","lastModifiedDate":"2021-04-01"},{"lineNumber":87,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-01"},{"lineNumber":88,"author":{"gitId":"zhengruoxin"},"content":"[\u003c-- UI","lastModifiedDate":"2021-04-01"},{"lineNumber":89,"author":{"gitId":"zhengruoxin"},"content":"deactivate UI","lastModifiedDate":"2021-04-01"},{"lineNumber":90,"author":{"gitId":"zhengruoxin"},"content":"@enduml","lastModifiedDate":"2021-04-01"}],"authorContributionMap":{"zhengruoxin":90}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"Interface ReadOnlyEventBook \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Interface ObservableList \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"Class EventBook","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"Class ReadOnlyEventBook","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class Model","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"Class Date","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Package Person {","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"Class Birthday","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"Class Remark","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"Package Event {","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"Class Event","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"Class EventDate","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"Class Title","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"Class Detail","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"Class Email","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"Class UniqueEventList","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Package Tag {","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"Model .right.\u003e ObservableList","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"ModelManager o--\u003e \"1\" AddressBook","lastModifiedDate":"2019-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"ModelManager o-left-\u003e \"1\" UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"EventBook .up.|\u003e ReadOnlyEventBook","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"ModelManager o--\u003e \"1\" EventBook","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"AddressBook *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2019-07-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"UniquePersonList o--\u003e \"*\" Person","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"Person *--\u003e \"1\" Name","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"Person *--\u003e \"0..1\" Phone","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"Person *--\u003e \"0..1\" Email","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"Person *--\u003e \"0..1\" Birthday","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"Person *--\u003e \"0..1\" Address","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"Person *--\u003e \"0..1\" Remark","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"EventBook *--\u003e \"1\" UniqueEventList","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"UniqueEventList o--\u003e \"*\" Event","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"Event *--\u003e \"1\" Title","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"Event *--\u003e \"0..1\" Detail","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"Event *--\u003e \"0..1\" EventDate","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"Birthday --|\u003e Date","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"EventDate --|\u003e Date","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"Email -[hidden]right-\u003e Remark","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"Remark -[hidden]right-\u003e Birthday","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"EventDate -[hidden]right-\u003e Detail","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"Detail -[hidden]right-\u003e Title","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"ModelManager ------\u003e\" ~* filtered list\" Person","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"ModelManager ------\u003e\" ~* filtered list\" Event","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":51,"Ellevy":41}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"Interface EventBookStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"Class JsonEventBookStorage","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"StorageManager .left.|\u003e Storage","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"StorageManager o-right-\u003e UserPrefsStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"StorageManager o--\u003e AddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"StorageManager o--\u003e EventBookStorage","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Storage -|\u003e UserPrefsStorage","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Storage -|\u003e AddressBookStorage","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"Storage -|\u003e EventBookStorage","lastModifiedDate":"2021-04-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .left.|\u003e UserPrefsStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"JsonAddressBookStorage .down.\u003e JsonSerializableAddressBook","lastModifiedDate":"2021-04-02"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"JsonSerializableAddressBook .down.\u003e JsonAdaptedPerson","lastModifiedDate":"2021-04-02"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"JsonAdaptedPerson .right.\u003e JsonAdaptedTag","lastModifiedDate":"2021-04-02"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"JsonEventBookStorage .up.|\u003e EventBookStorage","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"JsonEventBookStorage .down.\u003e JsonSerializableEventBook","lastModifiedDate":"2021-04-02"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"JsonSerializableEventBook .down.\u003e JsonAdaptedEvent","lastModifiedDate":"2021-04-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"garyljj":6,"-":23,"Ellevy":6}},{"path":"docs/diagrams/UndoRedoState0.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title Initial state","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"package StateHistory {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    class State1 as \"__s0:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    class State2 as \"__s1:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    class State3 as \"__s2:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"hide State2","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State1","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nickyfoo":6,"-":15}},{"path":"docs/diagrams/UndoRedoState1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"delete 5\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"package StateHistory \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    class State1 as \"__s0:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    class State2 as \"__s1:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    class State3 as \"__s2:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nickyfoo":5,"-":17}},{"path":"docs/diagrams/UndoRedoState2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"title After command \"add -n David\"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"package StateHistory \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    class State1 as \"__s0:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    class State2 as \"__s1:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    class State3 as \"__s2:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nickyfoo":6,"-":14}},{"path":"docs/diagrams/UndoRedoState3.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"undo\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"package StateHistory \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    class State1 as \"__s0:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    class State2 as \"__s1:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    class State3 as \"__s2:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nickyfoo":5,"-":15}},{"path":"docs/diagrams/UndoRedoState4.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"list\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"package StateHistory \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    class State1 as \"__s0:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    class State2 as \"__s1:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    class State3 as \"__s2:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nickyfoo":5,"-":15}},{"path":"docs/diagrams/UndoRedoState5.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"clear\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"package StateHistory \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    class State1 as \"__s0:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    class State2 as \"__s1:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    class State3 as \"__s3:State__\"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"class Pointer as \"Current State\" #FFFFFF","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"note right on link: State s2 deleted.","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nickyfoo":6,"-":15}},{"path":"docs/diagrams/UndoSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"participant \":StateHistory\" as StateHistory MODEL_COLOR","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"participant \":AddressBook\" as AddressBook MODEL_COLOR","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"participant \":EventBook\" as EventBook MODEL_COLOR","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"[-\u003e LogicManager : execute(\"undo\")","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"undo\")","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"activate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"create UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"UndoCommand --\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"deactivate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : u","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"deactivate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"LogicManager -\u003e UndoCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"activate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"UndoCommand -\u003e Model : undo()","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"Model -\u003e StateHistory : previousState()","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"activate StateHistory","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"StateHistory --\u003e Model : previousState","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"deactivate StateHistory","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"Model -\u003e AddressBook : setAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"activate AddressBook","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"AddressBook -\u003e AddressBook : resetData(ReadOnlyAddressBook)","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"AddressBook --\u003e Model","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"deactivate AddressBook","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"Model -\u003e EventBook : setEventBook((ReadOnlyEventBook)","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"activate EventBook","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"EventBook -\u003e EventBook : resetData(ReadOnlyEventBook)","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"EventBook --\u003e Model","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"deactivate EventBook","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"Model --\u003e UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"UndoCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"deactivate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"UndoCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"destroy UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nickyfoo":30,"-":44}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"title: PartyPlanet","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-W16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-W16-3/tp/actions)","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-W16-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-W16-3/tp)","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"**PartyPlanet is a desktop app for managing contacts, birthdays, and celebration plans** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"  Example usages:","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"  * Keep track of friends\u0027 contacts/birthdays","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"  * Record down important details to organise birthday celebrations easily","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"  * Quickly access contacts with upcoming birthdays","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"* It is named `PartyPlanet` because it will help you plan a party that’s **out of this world!**","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"* If you are interested in using PartyPlanet, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"* If you are interested about developing PartyPlanet, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"* Image used: [VectorStock](https://www.vectorstock.com/royalty-free-vector/birthday-hat-cartoon-vector-22619168)","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"zhengruoxin":1,"garyljj":13,"-":13}},{"path":"docs/team/ellevy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"---","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"layout: page","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"title: Yvelle\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"---","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"## Project: PartyPlanet","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"PartyPlanet is a cross-platform desktop application that helps users plan birthday celebrations.","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"The user primarily interacts with it using a command-line interface, inside a GUI created with JavaFX.","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"It is written in Java with around 10k LOC.","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"A full list of code contribution can be found here:","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"[RepoSense](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003dellevy\u0026breakdown\u003dtrue)","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"### New features","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"- Added feature to delete event (`edelete` command):","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"  [\\#122](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/122)","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"  * What it does: Allows the user to delete events that they do not want to store. Users are able to delete multiple ","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    events in a single command.","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"  * Justification: This feature improves the product significantly because a user might want to clear the clutter ","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    on the app and remove some events that he no longer wants to store.","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"  * Credits: Code used is referenced from the `delete` command [Gary\u0027s PR: \\#82](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/82) ","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"  ","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"- Added storage for event:","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"  [\\#123](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/123)","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"  * What it does: Allows the user to read from existing events stored in the data file and store all events back ","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    into the data file.","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"  * Justification: This feature improves the product significantly because a user will want to be able to store and ","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    update all changes to the events done in PartyPlanet in a data file and be able to read in the file the next ","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    time they open PartyPlanet.  ","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"  * Credits: Code used is referenced from the AddressBook Storage from AB3","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"- Added feature to search for event by name and detail (`elist` command):","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"  [\\#156](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/156)","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"  * What it does: Allows the user to search for events in the event list by the event name and detail. The user is ","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    able to do partial search (default) or exact search, and all search (default) or any search. Partial search ","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    finds partial matches, exact search finds exact matches. All search requires all specified criteria to be met ","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"    while any search requires at least 1 specified criteria to be met. ","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"  * Justification: This feature improves the product significantly because a user might have many events stored in ","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    the event list and might want to filter out events by event name or by details of the event.","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"  * Credits: Code used is referenced from the `list` command [Justin\u0027s PR: \\#116](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/116)","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"### Feature enhancements","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"- Changed compulsory fields to optional fields for `add` command:","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"  [\\#80](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/80)","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"- Added optional `remark` field for contacts:","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"  [\\#110](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/110)","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"- Wrote tests for event storage:","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"  [\\#148](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/148)","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"- More detailed result message for `elist` and `list`:","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"  [\\#196](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/196)","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"- Fixed bug (throw error) in `list` and `elist` commands when flags `--any` or `--exact` are specified without any ","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"  other predicates to filter the list by:","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"  [\\#201](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/201)","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"- Fixed bug for `undo` and `redo`:","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"  [\\#203](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/203) (Credits: Code used is taken from [Gary](https://github.com/garyljj))","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"### Documentation","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"- UserGuide: ","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"  * Changed introduction and application name to suit PartyPlanet: [\\#95](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/95)","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"  ","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"- DeveloperGuide: ","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"  * Added NFRs: [\\#38](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/38)","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"  * Changed DeveloperGuide from AddressBook to PartyPlanet: [\\#95](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/95)","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"  * Updated UML diagrams for `Logic` and `Model` components to match with PartyPlanet implementation [\\#146](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/146)","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"  * Added sequence diagrams for `add` command [\\#146](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/146)","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"### Community","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"- PRs reviewed (with non-trivial comments): ","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"  [\\#116](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/116), ","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"  [\\#128](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/128),","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"  [\\#190](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/190)","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"  ","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"Ellevy":79}},{"path":"docs/team/justin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"---","lastModifiedDate":"2021-04-03"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"layout: page","lastModifiedDate":"2021-04-03"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"title: Justin\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-03"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"---","lastModifiedDate":"2021-04-03"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"To be distilled and summarized during v1.4.","lastModifiedDate":"2021-04-03"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"## Project: PartyPlanet","lastModifiedDate":"2021-04-03"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"PartyPlanet is a cross-platform desktop application that helps users plan birthday celebrations.","lastModifiedDate":"2021-04-03"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"The user primarily interacts with it using a command-line interface, inside a GUI created with JavaFX.","lastModifiedDate":"2021-04-03"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"It is written in Java with around 10k LOC.","lastModifiedDate":"2021-04-03"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"A full list of code contribution can be found here:","lastModifiedDate":"2021-04-03"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"[RepoSense](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003dpyuxiang\u0026breakdown\u003dtrue)","lastModifiedDate":"2021-04-03"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"### New features","lastModifiedDate":"2021-04-03"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    Description","lastModifiedDate":"2021-04-03"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    Why implement? Use case.","lastModifiedDate":"2021-04-03"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    What was special about this? For judging effort....","lastModifiedDate":"2021-04-03"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"- Searching of contacts by partial, exact, any, all:","lastModifiedDate":"2021-04-03"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"  [\\#116](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/116),","lastModifiedDate":"2021-04-03"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"  note avoid glenn portion on find","lastModifiedDate":"2021-04-03"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"- Refactor Date class:","lastModifiedDate":"2021-04-03"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"  [\\#180](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/180)","lastModifiedDate":"2021-04-03"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"- Search by birthday month:","lastModifiedDate":"2021-04-03"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"  [\\#183](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/183)","lastModifiedDate":"2021-04-03"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"### Feature enhancements","lastModifiedDate":"2021-04-03"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"- Add sort by upcoming comparator for list and elist:","lastModifiedDate":"2021-04-03"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"  [\\#180](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/180)","lastModifiedDate":"2021-04-03"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"- Add sorting by birthday, separated order from sort criteria:","lastModifiedDate":"2021-04-03"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"  [\\#126](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/126)","lastModifiedDate":"2021-04-03"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"- Add Date formats:","lastModifiedDate":"2021-04-03"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"  [\\#119](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/119)","lastModifiedDate":"2021-04-03"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"- Overhaul prefix syntax:","lastModifiedDate":"2021-04-03"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"  [\\#73](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/73)","lastModifiedDate":"2021-04-03"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"  , long form prefixes:","lastModifiedDate":"2021-04-03"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"  [\\#111](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/111)","lastModifiedDate":"2021-04-03"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"- Proposed command list consolidation to remove `tags`, `find`, `clear`.","lastModifiedDate":"2021-04-03"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"- Update GUI visuals, usability feature:","lastModifiedDate":"2021-04-03"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"  [\\#198](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/198)","lastModifiedDate":"2021-04-03"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"- Refactor theme toggling command to use enumeration instead, add GUI option to toggle theme:","lastModifiedDate":"2021-04-03"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"  [\\#184](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/184)","lastModifiedDate":"2021-04-03"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"  builds on","lastModifiedDate":"2021-04-03"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"  [\\#176](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/176)","lastModifiedDate":"2021-04-03"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"- Added initial GUI changes to support event list display, commit","lastModifiedDate":"2021-04-03"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"  [02452dd](https://github.com/AY2021S2-CS2103-W16-3/tp/commit/02452dd58c89a77c79a7f3b2597eb2580a845a65)","lastModifiedDate":"2021-04-03"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"### Other proposed features","lastModifiedDate":"2021-04-03"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"- Proposed tags column GUI, not used due to real estate,","lastModifiedDate":"2021-04-03"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"  [\\#99](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/99)","lastModifiedDate":"2021-04-03"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"### Documentation","lastModifiedDate":"2021-04-03"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"- UserGuide: Generate table format of parameter glossary","lastModifiedDate":"2021-04-03"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"- DeveloperGuide: 5 lines :\u003e","lastModifiedDate":"2021-04-03"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"### Team workflow","lastModifiedDate":"2021-04-03"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"- Milestone management","lastModifiedDate":"2021-04-03"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"- Improve team workflow by sending telegram notifications (open, close, sync)","lastModifiedDate":"2021-04-03"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"  [\\#52](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/52),","lastModifiedDate":"2021-04-03"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"  [\\#64](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/64)","lastModifiedDate":"2021-04-03"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"- Add issue tracker templates to include description prompts:","lastModifiedDate":"2021-04-03"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"  [\\#75](https://github.com/AY2021S2-CS2103-W16-3/tp/pull/75)","lastModifiedDate":"2021-04-03"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"- Organize repo [labels](https://github.com/AY2021S2-CS2103-W16-3/tp/labels)","lastModifiedDate":"2021-04-03"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"### Community","lastModifiedDate":"2021-04-03"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"    PR reviews","lastModifiedDate":"2021-04-03"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"    Forum discussion","lastModifiedDate":"2021-04-03"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"    Bug reports / suggestions","lastModifiedDate":"2021-04-03"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"- Wrote [script](https://github.com/nus-cs2103-AY2021S2/forum/issues/29)","lastModifiedDate":"2021-04-03"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"  to generate direct links to video quizzes, 10 hoorays :\u003e","lastModifiedDate":"2021-04-03"}],"authorContributionMap":{"pyuxiang":80}},{"path":"src/main/java/seedu/partyplanet/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.FileUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"garyljj":3,"-":61}},{"path":"src/main/java/seedu/partyplanet/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"garyljj":1,"-":24}},{"path":"src/main/java/seedu/partyplanet/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.Config;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.Version;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.ConfigUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.StringUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.Logic;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.LogicManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.AddressBookStorage;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.storage.EventBookStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.storage.JsonEventBookStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.Storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.StorageManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.UserPrefsStorage;","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.ui.Ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.ui.UiManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 1, true);","lastModifiedDate":"2021-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PartyPlanet ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        EventBookStorage eventBookStorage \u003d new JsonEventBookStorage(userPrefs.getEventBookFilePath());","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        ReadOnlyAddressBook initialAddress;","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"            logger.info(\"Loading saved AddressBook\");","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"            initialAddress \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"            initialAddress \u003d new AddressBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"            initialAddress \u003d new AddressBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"        Optional\u003cReadOnlyEventBook\u003e eventBookOptional;","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        ReadOnlyEventBook initialEvent;","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        try {","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"            eventBookOptional \u003d storage.readEventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"zhengruoxin"},"content":"            logger.info(\"Loading saved EventBook\");","lastModifiedDate":"2021-03-23"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"            if (!eventBookOptional.isPresent()) {","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"                logger.info(\"Data file not found. Will be starting with a sample EventBook\");","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-19"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"            initialEvent \u003d eventBookOptional.orElseGet(SampleDataUtil::getSampleEventBook);","lastModifiedDate":"2021-03-19"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty EventBook\");","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"            initialEvent \u003d new EventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-19"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty EventBook\");","lastModifiedDate":"2021-03-19"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"            initialEvent \u003d new EventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"        return new ModelManager(initialAddress, initialEvent, userPrefs);","lastModifiedDate":"2021-03-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"garyljj"},"content":"        logger.info(\"Starting PartyPlanet \" + MainApp.VERSION);","lastModifiedDate":"2021-03-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PartyPlanet ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zhengruoxin":2,"garyljj":28,"-":149,"Ellevy":27}},{"path":"src/main/java/seedu/partyplanet/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":1,"-":62}},{"path":"src/main/java/seedu/partyplanet/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.ui.Theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    private static final double DEFAULT_WIDTH \u003d 1000;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    private final Theme theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        this(Theme.PASTEL);","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * Constructs a {@code GuiSettings} with the default height, width, position, and theme.","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    public GuiSettings(Theme theme) {","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        this.theme \u003d theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width, position, and theme","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition, Theme theme) {","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        this.theme \u003d theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    public Theme getTheme() {","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        return theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"pyuxiang":19,"garyljj":1,"-":75}},{"path":"src/main/java/seedu/partyplanet/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    private static final String LOG_FILE \u003d \"PartyPlanet.log\";","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":2,"-":110}},{"path":"src/main/java/seedu/partyplanet/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command, try the command: help\";","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d person(s) listed! \";","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    public static final String MESSAGE_PERSONS_LISTED_TAGS \u003d \"\\n\\nAll existing tags: %s\";","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d event(s) listed! \";","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_NONE_INDEX_VALID \u003d \"None of the indexes provided are valid\";","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhengruoxin":1,"nickyfoo":1,"garyljj":4,"-":10,"Ellevy":1}},{"path":"src/main/java/seedu/partyplanet/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":1,"-":115}},{"path":"src/main/java/seedu/partyplanet/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core.index;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"garyljj":1,"-":53}},{"path":"src/main/java/seedu/partyplanet/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.exceptions;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":1,"-":10}},{"path":"src/main/java/seedu/partyplanet/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.exceptions;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"garyljj":1,"-":20}},{"path":"src/main/java/seedu/partyplanet/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.MainApp;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"garyljj":2,"-":40}},{"path":"src/main/java/seedu/partyplanet/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"garyljj":1,"-":34}},{"path":"src/main/java/seedu/partyplanet/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.Config;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"garyljj":3,"-":20}},{"path":"src/main/java/seedu/partyplanet/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":1,"-":82}},{"path":"src/main/java/seedu/partyplanet/commons/util/InputHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * InputHistory records and retrieves user\u0027s GUI input history.","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"public class InputHistory {","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    private static final int MAXSIZE \u003d 20;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    // TODO Can optimise internal list to a linkedlist structure for efficiency","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    private List\u003cString\u003e lst;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    private int current;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"     * Initialise InputHistory","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    public InputHistory() {","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        lst \u003d new ArrayList\u003c\u003e(MAXSIZE);","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        current \u003d 0;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     * Add new input to history, given it is different from the previous input.","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     * If lst have reached maxsize, remove earliest entry.","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     * @param s User input.","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    public void add(String s) {","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        if (lst.isEmpty() || isDifferentFromLatest(s)) {","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"            if (lst.size() \u003d\u003d MAXSIZE) {","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"                lst.remove(0);","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"            lst.add(s);","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        current \u003d lst.size();","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    private boolean isDifferentFromLatest(String s) {","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        String latest \u003d lst.get(lst.size() - 1);","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        return !s.equals(latest);","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"     * Retrieve the previous input in history.","lastModifiedDate":"2021-03-12"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"     * @return Input from history.","lastModifiedDate":"2021-03-12"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"    public String getPrevious() {","lastModifiedDate":"2021-03-12"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        if (lst.isEmpty()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"            return \"\";","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        } else if (current \u003d\u003d 0) {","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"            return lst.get(current);","lastModifiedDate":"2021-03-12"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        } else {","lastModifiedDate":"2021-03-12"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"            return lst.get(--current);","lastModifiedDate":"2021-03-12"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     * Retrieve the next input in history.","lastModifiedDate":"2021-03-12"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     * The latest entry will always be an empty string.","lastModifiedDate":"2021-03-12"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     * @return Input from history.","lastModifiedDate":"2021-03-12"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    public String getNext() {","lastModifiedDate":"2021-03-12"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        if (lst.isEmpty()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"            return \"\";","lastModifiedDate":"2021-03-12"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        } else if (current \u003d\u003d lst.size()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"            return \"\";","lastModifiedDate":"2021-03-12"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        } else if (current \u003d\u003d lst.size() - 1) {","lastModifiedDate":"2021-03-12"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"            current++;","lastModifiedDate":"2021-03-12"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"            return \"\";","lastModifiedDate":"2021-03-12"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"        } else {","lastModifiedDate":"2021-03-12"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"            return lst.get(++current);","lastModifiedDate":"2021-03-12"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     * Return currrent number of input in InputHistory","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"    public int size() {","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        return lst.size();","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"garyljj":86}},{"path":"src/main/java/seedu/partyplanet/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":3,"-":140}},{"path":"src/main/java/seedu/partyplanet/commons/util/State.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * Represents the state of PartyPlanet at a particular instance of time, and the command leading to this state.","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class State {","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private String command;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    private ReadOnlyAddressBook addressBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    private ReadOnlyEventBook eventBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * Constructs a {@code State}.","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param command the command leading to this state","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @param addressBook the addressBook after the command is run","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * @param eventBook the eventBook after the command is run","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    public State(String command, ReadOnlyAddressBook addressBook, ReadOnlyEventBook eventBook) {","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        requireAllNonNull(command, addressBook, eventBook);","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        this.command \u003d command;","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"        this.eventBook \u003d new EventBook(eventBook);","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * Gets the command leading to this State","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @return the command leading to this State","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    public String getCommand() {","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        return this.command;","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"     * Gets the addressBook in this State","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"     * @return the addressBook in this State","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"        return this.addressBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"     * Gets the eventBook in this State","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"     * @return the eventBook in this State","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"    public ReadOnlyEventBook getEventBook() {","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"        return this.eventBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"nickyfoo":56}},{"path":"src/main/java/seedu/partyplanet/commons/util/StateHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":" * StateHistory records and retrieves the AddressBook state history","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"public class StateHistory {","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    private ArrayList\u003cState\u003e states;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    private int currentStatePointer;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(StateHistory.class);","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     * Initialises StateHistory with the saved AddressBook","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    public StateHistory(State savedState) {","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"        this.states \u003d new ArrayList\u003cState\u003e();","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        this.states.add(savedState);","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"        this.currentStatePointer \u003d 0;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        logger.info(\"Initialised stateHistory.\" + \" Current number of states is: \" + states.size()","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"                + \". Currently on state: \" + currentStatePointer);","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * Adds a new State to the history","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @param newState the state to be added","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    public void addState(State newState) {","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        if (currentStatePointer !\u003d states.size() - 1) {","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"            clearStatesAfterCurrent();","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        states.add(newState);","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        currentStatePointer++;","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        logger.info(\"Added state to stateHistory.\" + \" Current number of states is: \" + states.size()","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"                + \". Currently on state: \" + currentStatePointer);","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"     * Retrieves the previous state","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"     * @return the previous state","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * @throws IndexOutOfBoundsException when there is no valid previous state","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"    public State previousState() throws IndexOutOfBoundsException {","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"        currentStatePointer--;","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        State previousState;","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"            previousState \u003d states.get(currentStatePointer);","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"            currentStatePointer++;","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"            throw e;","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"        logger.info(\"Went to previous state.\" + \" Current number of states is: \" + states.size()","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"                + \". Currently on state: \" + currentStatePointer);","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"        return previousState;","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"     * Retrieves the current state","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"     * @return the current state","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"    public State currentState() {","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"        return states.get(currentStatePointer);","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"     * Retrieves the next state","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"     * @return the next state","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"     * @throws IndexOutOfBoundsException when there is no valid next state","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"    public State nextState() {","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"        currentStatePointer++;","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"        State nextState;","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"            nextState \u003d states.get(currentStatePointer);","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"            currentStatePointer--;","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"            throw e;","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"        logger.info(\"Went to previous state.\" + \" Current number of states is: \" + states.size()","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"                + \". Currently on state: \" + currentStatePointer);","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"        return nextState;","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"    private void clearStatesAfterCurrent() {","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"        logger.info(\"Clearing subsequent states\");","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"        states.subList(currentStatePointer + 1, states.size()).clear();","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"nickyfoo":92,"garyljj":1}},{"path":"src/main/java/seedu/partyplanet/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":2,"-":66}},{"path":"src/main/java/seedu/partyplanet/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.CommandResult;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"     * Parses the command and returns the autocompleted command.","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"glennljs"},"content":"     * @return The result of the autocompletion.","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"glennljs"},"content":"    String autoComplete(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     * @see seedu.partyplanet.model.Model#getAddressBook()","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"     * Returns the EventBook.","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"     * @see seedu.partyplanet.model.Model#getEventBook()","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"    ReadOnlyEventBook getEventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"    /** Returns an unmodifiable view of the filtered list of events */","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"     * Returns the user prefs\u0027 event book file path.","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"    Path getEventBookFilePath();","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"glennljs":9,"nickyfoo":12,"garyljj":8,"-":42,"Ellevy":5}},{"path":"src/main/java/seedu/partyplanet/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.autocomplete.AutocompleteParser;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.Command;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.CommandResult;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.AddressBookParser;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.Storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":"    private final AutocompleteParser autocompleteParser;","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":42,"author":{"gitId":"glennljs"},"content":"        autocompleteParser \u003d new AutocompleteParser();","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        //Logging","lastModifiedDate":"2021-02-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2021-02-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2021-02-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"            storage.saveEventBook(model.getEventBook());","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"glennljs"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"glennljs"},"content":"    public String autoComplete(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"glennljs"},"content":"        logger.info(\"----------------[USER REQUEST AUTOCOMPLETE][\" + commandText + \"]\");","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"glennljs"},"content":"        return autocompleteParser.parse(commandText, model);","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"    public ReadOnlyEventBook getEventBook() {","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"        return model.getEventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"        return model.getFilteredEventList();","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"    public Path getEventBookFilePath() {","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        return model.getEventBookFilePath();","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"glennljs":9,"nickyfoo":12,"garyljj":12,"-":73,"Ellevy":6}},{"path":"src/main/java/seedu/partyplanet/logic/autocomplete/AutocompleteParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"package seedu.partyplanet.logic.autocomplete;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"public class AutocompleteParser {","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"     * Parses input string and retrieves the relevant Autocomplete Util.","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":"    public String parse(String input, Model model) throws ParseException, CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"glennljs"},"content":"            return input;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"glennljs"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"        if (commandWord.equals(\"edit\")) {","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"glennljs"},"content":"            return new EditAutocompleteUtil().parseCommand(arguments, model);","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"glennljs"},"content":"        if (commandWord.equals(\"eedit\")) {","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"glennljs"},"content":"            return new EEditAutocompleteUtil().parseCommand(arguments, model);","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"glennljs"},"content":"        return input;","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"glennljs":41}},{"path":"src/main/java/seedu/partyplanet/logic/autocomplete/EEditAutocompleteUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"package seedu.partyplanet.logic.autocomplete;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"import java.util.List;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.Prefix;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"public class EEditAutocompleteUtil {","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"glennljs"},"content":"    private static final String INDEX_NOT_SPECIFIED_OR_INVALID_MESSAGE \u003d \"Index not specified!\";","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":"     * Parses an edit command to autocomplete remark.","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"     * @param arguments User\u0027s input command.","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"     * @param model Model instance containing address book.","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"glennljs"},"content":"     * @return String of new autocompleted command.","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":"     * @throws ParseException If the input command does not follow requirements.","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":"     * @throws CommandException If the input command is out of bounds.","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"glennljs"},"content":"    public String parseCommand(String arguments, Model model) throws ParseException, CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"glennljs"},"content":"        requireNonNull(arguments);","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"glennljs"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"glennljs"},"content":"                ArgumentTokenizer.tokenize(arguments, PREFIX_NAME, PREFIX_DATE, PREFIX_REMARK);","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"glennljs"},"content":"        Index index;","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"glennljs"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"glennljs"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble().split(\" \")[0]);","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"glennljs"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"glennljs"},"content":"            throw new ParseException(INDEX_NOT_SPECIFIED_OR_INVALID_MESSAGE);","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"glennljs"},"content":"        ObservableList\u003cEvent\u003e filteredEventsList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"glennljs"},"content":"        if (index.getZeroBased() \u003e\u003d filteredEventsList.size()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"glennljs"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"glennljs"},"content":"        Event event \u003d filteredEventsList.get(index.getZeroBased());","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"glennljs"},"content":"        // Create a Map of Prefix to the relevant getter method","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"glennljs"},"content":"        Map\u003cPrefix, String\u003e prefixMethodMap \u003d Map.of(","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"            PREFIX_DATE, event.getEventDate().value,","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"glennljs"},"content":"            PREFIX_NAME, event.getName().fullName,","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"glennljs"},"content":"            PREFIX_REMARK, event.getDetails().value","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"glennljs"},"content":"        );","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"glennljs"},"content":"        String output \u003d \"eedit \" + argMultimap.getPreamble();","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"glennljs"},"content":"        // Here we can assume Prefixes are sorted in the order they are entered.","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"glennljs"},"content":"        for (Prefix prefix: argMultimap.getPrefixPositionOrders()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"glennljs"},"content":"            List\u003cString\u003e values \u003d argMultimap.getAllValues(prefix);","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"glennljs"},"content":"            // Remove Preamble","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"glennljs"},"content":"            if (prefix.getPrefix().equals(\"\")) {","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"glennljs"},"content":"                continue;","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"glennljs"},"content":"            // If Prefix is not a relevant/correct Prefix, ignore.","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"glennljs"},"content":"            if (!prefixMethodMap.keySet().contains(prefix)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"glennljs"},"content":"                output +\u003d \" \" + prefix;","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"glennljs"},"content":"                continue;","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"glennljs"},"content":"            boolean hasOutput \u003d false;","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"glennljs"},"content":"            if (values.size() \u003e 0) {","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"glennljs"},"content":"                for (String value: values) {","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"glennljs"},"content":"                    if (value.length() \u003e 0) {","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"glennljs"},"content":"                        output +\u003d \" \" + prefix + \" \" + value;","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"glennljs"},"content":"                        hasOutput \u003d true;","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"glennljs"},"content":"                    }","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"glennljs"},"content":"                }","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"glennljs"},"content":"            if (!hasOutput) {","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"glennljs"},"content":"                output +\u003d \" \" + prefix + \" \" + prefixMethodMap.get(prefix);","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"glennljs"},"content":"        return output;","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":96,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":97,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"glennljs":96,"pyuxiang":1}},{"path":"src/main/java/seedu/partyplanet/logic/autocomplete/EditAutocompleteUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"package seedu.partyplanet.logic.autocomplete;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"import java.util.List;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.Prefix;","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"glennljs"},"content":"public class EditAutocompleteUtil {","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":"    private static final String INDEX_NOT_SPECIFIED_OR_INVALID_MESSAGE \u003d \"Index not specified or invalid!\";","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"glennljs"},"content":"     * Used to convert Set of {@code Tag}s into a String with Tag Prefixes.","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"glennljs"},"content":"    private static String getTagsAsAutocompletedString(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"glennljs"},"content":"        return tags","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"glennljs"},"content":"            .stream()","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"glennljs"},"content":"            .map(t -\u003e t.tagName)","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"glennljs"},"content":"            .sorted()","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"glennljs"},"content":"            .map(t -\u003e \"-t \" + t)","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"glennljs"},"content":"            .collect(Collectors.joining(\" \"));","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"glennljs"},"content":"     * Parses an edit command to autocomplete remark.","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"glennljs"},"content":"     * @param arguments User\u0027s input command.","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"glennljs"},"content":"     * @param model Model instance containing address book.","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"glennljs"},"content":"     * @return String of new autocompleted command.","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"glennljs"},"content":"     * @throws ParseException If the input command does not follow requirements.","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"glennljs"},"content":"     * @throws CommandException If the input command is out of bounds.","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"glennljs"},"content":"    public String parseCommand(String arguments, Model model) throws ParseException, CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"glennljs"},"content":"        requireNonNull(arguments);","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"glennljs"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"glennljs"},"content":"                ArgumentTokenizer.tokenize(arguments, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"glennljs"},"content":"                        PREFIX_BIRTHDAY, PREFIX_ADDRESS, PREFIX_REMARK, PREFIX_TAG);","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"glennljs"},"content":"        Index index;","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"glennljs"},"content":"        try {","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"glennljs"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble().split(\" \")[0]);","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"glennljs"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"glennljs"},"content":"            throw new ParseException(INDEX_NOT_SPECIFIED_OR_INVALID_MESSAGE);","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"glennljs"},"content":"        ObservableList\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"glennljs"},"content":"        if (index.getZeroBased() \u003e\u003d filteredPersonList.size()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"glennljs"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"glennljs"},"content":"        Person person \u003d filteredPersonList.get(index.getZeroBased());","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"glennljs"},"content":"        // Create a Map of Prefix to the relevant getter method","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"glennljs"},"content":"        Map\u003cPrefix, String\u003e prefixMethodMap \u003d Map.of(","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"glennljs"},"content":"            PREFIX_ADDRESS, person.getAddress().value,","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"glennljs"},"content":"            PREFIX_BIRTHDAY, person.getBirthday().value,","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"glennljs"},"content":"            PREFIX_EMAIL, person.getEmail().value,","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"glennljs"},"content":"            PREFIX_NAME, person.getName().fullName,","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"glennljs"},"content":"            PREFIX_PHONE, person.getPhone().value,","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"glennljs"},"content":"            PREFIX_REMARK, person.getRemark().value,","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"glennljs"},"content":"            PREFIX_TAG, \"\"","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"glennljs"},"content":"        );","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"glennljs"},"content":"        String output \u003d \"edit \" + argMultimap.getPreamble();","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"glennljs"},"content":"        // Here we can assume Prefixes are sorted in the order they are entered.","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"glennljs"},"content":"        for (Prefix prefix: argMultimap.getPrefixPositionOrders()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"glennljs"},"content":"            List\u003cString\u003e values \u003d argMultimap.getAllValues(prefix);","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"glennljs"},"content":"            // Remove Preamble","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"glennljs"},"content":"            if (prefix.getPrefix().equals(\"\")) {","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"glennljs"},"content":"                continue;","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"glennljs"},"content":"            // If Prefix is not a relevant/correct Prefix, ignore.","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"glennljs"},"content":"            if (!prefixMethodMap.keySet().contains(prefix)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"glennljs"},"content":"                output +\u003d \" \" + prefix;","lastModifiedDate":"2021-03-27"},{"lineNumber":100,"author":{"gitId":"glennljs"},"content":"                continue;","lastModifiedDate":"2021-03-27"},{"lineNumber":101,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"glennljs"},"content":"            if (prefix.equals(PREFIX_TAG)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":104,"author":{"gitId":"glennljs"},"content":"                Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(person.getTags());","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"glennljs"},"content":"                Set\u003cTag\u003e inputTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":107,"author":{"gitId":"glennljs"},"content":"                boolean hasExtraPrefix \u003d false;","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"glennljs"},"content":"                for (String value: values) {","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"glennljs"},"content":"                    if (value.equals(\"\")) {","lastModifiedDate":"2021-03-27"},{"lineNumber":111,"author":{"gitId":"glennljs"},"content":"                        hasExtraPrefix \u003d true;","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"glennljs"},"content":"                        continue;","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"glennljs"},"content":"                    }","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"glennljs"},"content":"                    try {","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"glennljs"},"content":"                        Tag tag \u003d new Tag(value);","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"glennljs"},"content":"                        if (tags.contains(tag)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"glennljs"},"content":"                            inputTags.add(tag);","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"glennljs"},"content":"                        }","lastModifiedDate":"2021-03-27"},{"lineNumber":120,"author":{"gitId":"glennljs"},"content":"                    } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":121,"author":{"gitId":"glennljs"},"content":"                        // If tag input is invalid, dont need to check if tags set contains it.","lastModifiedDate":"2021-03-27"},{"lineNumber":122,"author":{"gitId":"glennljs"},"content":"                    }","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":124,"author":{"gitId":"glennljs"},"content":"                    output +\u003d \" -t \" + value;","lastModifiedDate":"2021-03-27"},{"lineNumber":125,"author":{"gitId":"glennljs"},"content":"                }","lastModifiedDate":"2021-03-27"},{"lineNumber":126,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":127,"author":{"gitId":"glennljs"},"content":"                // Get tags that aren\u0027t input by User","lastModifiedDate":"2021-03-27"},{"lineNumber":128,"author":{"gitId":"glennljs"},"content":"                tags.removeAll(inputTags);","lastModifiedDate":"2021-03-27"},{"lineNumber":129,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"glennljs"},"content":"                // Only add space if there are tags to add in","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"glennljs"},"content":"                // Else add prefix only","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"glennljs"},"content":"                String tagsString \u003d getTagsAsAutocompletedString(tags);","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"glennljs"},"content":"                if (!tagsString.equals(\"\")) {","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"glennljs"},"content":"                    output +\u003d \" \" + getTagsAsAutocompletedString(tags);","lastModifiedDate":"2021-03-27"},{"lineNumber":135,"author":{"gitId":"glennljs"},"content":"                } else if (hasExtraPrefix) {","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"glennljs"},"content":"                    output +\u003d \" -t\";","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"glennljs"},"content":"                }","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"glennljs"},"content":"                continue;","lastModifiedDate":"2021-03-27"},{"lineNumber":139,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":140,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":141,"author":{"gitId":"glennljs"},"content":"            boolean hasOutput \u003d false;","lastModifiedDate":"2021-03-27"},{"lineNumber":142,"author":{"gitId":"glennljs"},"content":"            if (values.size() \u003e 0) {","lastModifiedDate":"2021-03-27"},{"lineNumber":143,"author":{"gitId":"glennljs"},"content":"                for (String value: values) {","lastModifiedDate":"2021-03-27"},{"lineNumber":144,"author":{"gitId":"glennljs"},"content":"                    if (value.length() \u003e 0) {","lastModifiedDate":"2021-03-27"},{"lineNumber":145,"author":{"gitId":"glennljs"},"content":"                        output +\u003d \" \" + prefix + \" \" + value;","lastModifiedDate":"2021-03-27"},{"lineNumber":146,"author":{"gitId":"glennljs"},"content":"                        hasOutput \u003d true;","lastModifiedDate":"2021-03-27"},{"lineNumber":147,"author":{"gitId":"glennljs"},"content":"                    }","lastModifiedDate":"2021-03-27"},{"lineNumber":148,"author":{"gitId":"glennljs"},"content":"                }","lastModifiedDate":"2021-03-27"},{"lineNumber":149,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":150,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"glennljs"},"content":"            if (!hasOutput) {","lastModifiedDate":"2021-03-27"},{"lineNumber":152,"author":{"gitId":"glennljs"},"content":"                output +\u003d \" \" + prefix + \" \" + prefixMethodMap.get(prefix);","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":154,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":155,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":156,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":157,"author":{"gitId":"glennljs"},"content":"        return output;","lastModifiedDate":"2021-03-27"},{"lineNumber":158,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":159,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":160,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"glennljs":160}},{"path":"src/main/java/seedu/partyplanet/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":" * Adds a person to PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to PartyPlanet.\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \" NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"            + \"[\" + PREFIX_PHONE + \" PHONE] \"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            + \"[\" + PREFIX_EMAIL + \" EMAIL] \"","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            + \"[\" + PREFIX_ADDRESS + \" ADDRESS] \"","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"            + \"[\" + PREFIX_TAG + \" TAG]... \"","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \" BIRTHDAY] \"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"            + \"[\" + PREFIX_REMARK + \" REMARK] \\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \" John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \" 98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \" johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \" 311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \" friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"            + PREFIX_TAG + \" owesMoney \"","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"            + PREFIX_BIRTHDAY + \" 1999-06-01 \"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            + PREFIX_REMARK + \" hates vegetables\";","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"            COMMAND_WORD + \" -n NAME [-p PHONE] [-e EMAIL] [-a ADDRESS] [-t TAG]... [-b BIRTHDAY] [-r REMARK]\";","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in PartyPlanet\";","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"        model.addState(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhengruoxin":2,"nickyfoo":5,"garyljj":12,"-":50,"Ellevy":8}},{"path":"src/main/java/seedu/partyplanet/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"garyljj":3,"-":17}},{"path":"src/main/java/seedu/partyplanet/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.ui.Theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    /** The application should switch to this theme */","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    private final Theme theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public CommandResult(String feedbackToUser, boolean exit) {","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        theme \u003d null;","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     * Constructs a {@code CommandResult} including the theme.","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public CommandResult(String feedbackToUser, boolean exit, Theme theme) {","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        this.theme \u003d theme;","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"        this(feedbackToUser, false);","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    public boolean isToggleTheme() {","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        return theme !\u003d null;","lastModifiedDate":"2021-03-25"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    public Theme getTheme() {","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        return theme;","lastModifiedDate":"2021-03-25"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"        return Objects.hash(feedbackToUser, exit);","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"pyuxiang":5,"nickyfoo":3,"garyljj":19,"-":58}},{"path":"src/main/java/seedu/partyplanet/logic/commands/DeleteClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" * Deletes all person currently displayed.","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"public class DeleteClearCommand extends DeleteCommand {","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e lastShownList \u003d new ArrayList\u003c\u003e(model.getFilteredPersonList());","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e deletedPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        for (Person p : lastShownList) {","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"            deletedPersons.add(p);","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"            model.deletePerson(p);","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        // Only save state if there are changes (person deleted)","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        if (!deletedPersons.isEmpty()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            model.addState(String.format(MESSAGE_DELETE_PERSON_SUCCESS, displayPersons(deletedPersons)));","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, displayPersons(deletedPersons)));","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"     * Returns list of persons in the form \"a, b, c,...\"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    private String displayPersons(List\u003cPerson\u003e deletedPersons) {","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        return deletedPersons.stream()","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"                .orElse(\"None!\");","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"                || (other instanceof DeleteClearCommand); // instanceof handles nulls","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"nickyfoo":1,"garyljj":49}},{"path":"src/main/java/seedu/partyplanet/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Represents a deletion command.","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"public abstract class DeleteCommand extends Command {","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"            + \": Deletes all contacts in the displayed person list\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"            + \"Example: \" + COMMAND_WORD + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"            + \"OR Deletes the person identified by the index number used in the displayed person list\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"            + \"Parameters: INDEX [INDEX]...\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"            + \"OR Delete the person with all / any (if specified) of the provided tags in the displayed person list\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"            + \"Parameters: [--any] -t TAG [-t TAG]...\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"            + \"Example: \" + COMMAND_WORD + \" -t friends\";","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"            COMMAND_WORD + \" [{INDEX [INDEX]... | [--any] -t TAG [-t TAG]...}]\";","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted the following person(s): %s\";","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_INVALID_PERSON_INDEX \u003d \"Invalid person index(es): %s\";","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nickyfoo":6,"garyljj":10,"-":9}},{"path":"src/main/java/seedu/partyplanet/logic/commands/DeleteContactCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":" * Deletes a person or persons identified using it\u0027s displayed index from PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"public class DeleteContactCommand extends DeleteCommand {","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    private final List\u003cIndex\u003e targetIndexes;","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    private final List\u003cString\u003e invalidIndexes;","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     * Creates an DeleteContactCommand to delete the {@code Person} at specified indexes.","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    public DeleteContactCommand(List\u003cIndex\u003e targetIndexes, List\u003cString\u003e invalidIndexes) {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        this.targetIndexes \u003d targetIndexes;","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        this.invalidIndexes \u003d invalidIndexes;","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e deletedPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        for (Index idx : targetIndexes) {","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"            if (idx.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"                invalidIndexes.add(\"\" + idx.getOneBased());","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"                continue;","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"            Person personToDelete \u003d lastShownList.get(idx.getZeroBased());","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"            deletedPersons.add(personToDelete);","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        for (Person personToDelete : deletedPersons) {","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        String output;","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        if (deletedPersons.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"            throw new CommandException(Messages.MESSAGE_NONE_INDEX_VALID);","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        } else if (invalidIndexes.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"            output \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, displayPersons(deletedPersons));","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"            model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"            output \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS + \"\\n\" + MESSAGE_INVALID_PERSON_INDEX,","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"                    displayPersons(deletedPersons), String.join(\", \", invalidIndexes));","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"            model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"     * Returns list of persons in the form \"a, b, c,...\"","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    private String displayPersons(List\u003cPerson\u003e deletedPersons) {","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"        return deletedPersons.stream()","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"                .orElse(\"\");","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"                || (other instanceof DeleteContactCommand // instanceof handles nulls","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 targetIndexes.equals(((DeleteContactCommand) other).targetIndexes)); // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"garyljj":86}},{"path":"src/main/java/seedu/partyplanet/logic/commands/DeleteContactWithTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.predicates.TagsContainsExactCaseTagPredicate;","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":" * Deletes all persons, that is tagged with the target tags, from PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"public class DeleteContactWithTagCommand extends DeleteCommand {","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_PERSON_NOT_REMOVED_ANY \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"            \"These tags do not exist in persons listed. No person removed.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_PERSON_NOT_REMOVED_ALL \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"            \"These combination of tags do not exist in persons listed. No person removed.\";","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    private final Set\u003cTag\u003e targetTags;","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    private final List\u003cPerson\u003e deletedPersons;","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    private final boolean isAny;","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     * Creates an DeleteContactWithTagCommand to delete the {@code Person} with specified {@code Tag}","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    public DeleteContactWithTagCommand(Set\u003cTag\u003e targetTags, boolean isAny) {","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        assert targetTags.size() \u003e 0;","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        this.targetTags \u003d targetTags;","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        deletedPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        this.isAny \u003d isAny;","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        if (isAny) {","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"            for (Person person : personList) {","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"                if (containsAnyTags(person)) {","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"                    deletedPersons.add(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"                }","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        } else {","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"            for (Person person : personList) {","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"                if (containsAllTags(person)) {","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"                    deletedPersons.add(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"                }","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        for (Person person : deletedPersons) {","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"            model.deletePerson(person);","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        // Only save state if there are changes (person deleted)","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        if (!deletedPersons.isEmpty()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"            String output \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, displayPersons());","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"            model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        } else {","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(isAny ? MESSAGE_PERSON_NOT_REMOVED_ANY : MESSAGE_PERSON_NOT_REMOVED_ALL);","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     * Return true only if the person contains all of the tags","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    private boolean containsAllTags(Person person) {","lastModifiedDate":"2021-03-25"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        for (Tag t : targetTags) {","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"            Predicate\u003cPerson\u003e predicate \u003d new TagsContainsExactCaseTagPredicate(t.tagName);","lastModifiedDate":"2021-04-04"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"            if (!predicate.test(person)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"                return false;","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        return true;","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"     * Return true only if the person contains any of the tags","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"    private boolean containsAnyTags(Person person) {","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        for (Tag t : targetTags) {","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"            Predicate\u003cPerson\u003e predicate \u003d new TagsContainsExactCaseTagPredicate(t.tagName);","lastModifiedDate":"2021-04-04"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"            if (predicate.test(person)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"                return true;","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        return false;","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"     * Returns list of persons in the form \"a, b, c,...\"","lastModifiedDate":"2021-03-08"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"    private String displayPersons() {","lastModifiedDate":"2021-03-08"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"        return deletedPersons.stream()","lastModifiedDate":"2021-03-08"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-03-08"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-03-08"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"                .orElse(\"\");","lastModifiedDate":"2021-03-08"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-08"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"                || (other instanceof DeleteContactWithTagCommand // instanceof handles nulls","lastModifiedDate":"2021-03-16"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 targetTags.equals(((DeleteContactWithTagCommand) other).targetTags)) // state check","lastModifiedDate":"2021-04-05"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 isAny \u003d\u003d (((DeleteContactWithTagCommand) other).isAny); // state check","lastModifiedDate":"2021-04-05"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"garyljj":118}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" * Adds a event to PartyPlanet.","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"public class EAddCommand extends Command {","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public static final String COMMAND_WORD \u003d \"eadd\";","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to PartyPlanet. \"","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"            + PREFIX_NAME + \" NAME \"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"            + \"[\" + PREFIX_DATE + \" DATE] \"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"            + \"[\" + PREFIX_REMARK + \" DETAIL] \\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"            + PREFIX_NAME + \" Jan Celebration \"","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"            + PREFIX_DATE + \" 2020-01-01 \"","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            + PREFIX_REMARK + \" 1. Check everyone\u0027s availability\";","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD + \" -n NAME [-d DATE] [-r DETAIL]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in PartyPlanet\";","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    private final Event toAdd;","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    public EAddCommand(Event event) {","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        toAdd \u003d event;","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"        if (model.hasEvent(toAdd)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"        model.addEvent(toAdd);","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        String output \u003d String.format(MESSAGE_SUCCESS, toAdd);","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"                || (other instanceof EAddCommand // instanceof handles nulls","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"                \u0026\u0026 toAdd.equals(((EAddCommand) other).toAdd));","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":57,"garyljj":6,"Ellevy":2}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EDeleteClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":" * Deletes all events currently displayed.","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"public class EDeleteClearCommand extends EDeleteCommand {","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        List\u003cEvent\u003e lastShownList \u003d new ArrayList\u003c\u003e(model.getFilteredEventList());","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        List\u003cEvent\u003e deletedEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        for (Event e : lastShownList) {","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"            deletedEvents.add(e);","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"            model.deleteEvent(e);","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        String output \u003d String.format(MESSAGE_DELETE_EVENT_SUCCESS, displayEvents(deletedEvents));","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        // Only save state if there are changes (event deleted)","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        if (!deletedEvents.isEmpty()) {","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"            model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     * Returns list of events in the form \"a, b, c,...\"","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    private String displayEvents(List\u003cEvent\u003e deletedEvents) {","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        return deletedEvents.stream()","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"                .map(e -\u003e e.getName().toString())","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"                .orElse(\"None!\");","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"                || (other instanceof EDeleteClearCommand); // instanceof handles nulls","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"garyljj":3,"Ellevy":49}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" * Represents an event deletion command.","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public abstract class EDeleteCommand extends Command {","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public static final String COMMAND_WORD \u003d \"edelete\";","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"            + \": Deletes all events in currently filtered list\\n\"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"            + \"OR Deletes the event identified by the index number used in the displayed event list\\n\"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"            + \"Parameters: [INDEX [INDEX]...]\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted the following event(s): %s\";","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_INVALID_EVENT_INDEX \u003d \"Invalid event index(es): %s\";","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD + \" [INDEX [INDEX]...]\";","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":2,"garyljj":2,"Ellevy":15}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EDeleteEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":" * Deletes an event or events identified using it\u0027s displayed index from PartyPlanet.","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"public class EDeleteEventCommand extends EDeleteCommand {","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    private final List\u003cIndex\u003e targetIndexes;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    private final List\u003cString\u003e invalidIndexes;","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     * Creates an EDeleteEventCommand to delete the {@code Event} at specified indexes.","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    public EDeleteEventCommand(List\u003cIndex\u003e targetIndexes, List\u003cString\u003e invalidIndexes) {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        this.targetIndexes \u003d targetIndexes;","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        this.invalidIndexes \u003d invalidIndexes;","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        List\u003cEvent\u003e deletedEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        for (Index idx : targetIndexes) {","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"            if (idx.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"                invalidIndexes.add(\"\" + idx.getOneBased());","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"                continue;","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            assert idx.getZeroBased() \u003e\u003d 0;","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"            assert idx.getZeroBased() \u003c lastShownList.size();","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"            Event eventToDelete \u003d lastShownList.get(idx.getZeroBased());","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            deletedEvents.add(eventToDelete);","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        for (Event eventToDelete : deletedEvents) {","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"            model.deleteEvent(eventToDelete);","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        String output;","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        if (deletedEvents.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"            throw new CommandException(Messages.MESSAGE_NONE_INDEX_VALID);","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        } else if (invalidIndexes.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"            output \u003d String.format(MESSAGE_DELETE_EVENT_SUCCESS, displayEvents(deletedEvents));","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"            model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"            output \u003d String.format(MESSAGE_DELETE_EVENT_SUCCESS + \"\\n\" + MESSAGE_INVALID_EVENT_INDEX,","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"                    displayEvents(deletedEvents),","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"                    String.join(\", \", invalidIndexes));","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"            model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"     * Returns list of events in the form \"a, b, c,...\"","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"    private String displayEvents(List\u003cEvent\u003e deletedEvents) {","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        return deletedEvents.stream()","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"                .map(e -\u003e e.getName().toString())","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"                .orElse(\"\");","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"                || (other instanceof EDeleteEventCommand // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 targetIndexes.equals(((EDeleteEventCommand) other).targetIndexes)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"garyljj":29,"Ellevy":60}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EDoneCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" * Marks Event, identified using it\u0027s displayed index from PartyPlanet, as done.","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"public class EDoneCommand extends Command {","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    public static final String COMMAND_WORD \u003d \"edone\";","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_EVENT_DONE_SUCCESS \u003d \"Event(s) marked as completed: %s\";","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_INVALID_EVENT_INDEX \u003d \"Invalid/Already completed event index(es): %s\";","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_NONE_EVENT_INDEX_VALID \u003d","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"            \"All indexes provided are either invalid or references events that are already completed\";","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"            + \": Mark the event identified by the index number as done\\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"            + \"Parameters: INDEX [INDEX]...\\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD + \" INDEX [INDEX]...\";","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    private final List\u003cIndex\u003e targetIndexes;","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    private final List\u003cString\u003e invalidIndexes;","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"     * Creates an EDoneCommand to mark done {@code Event} at specified indexes.","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    public EDoneCommand(List\u003cIndex\u003e targetIndexes, List\u003cString\u003e invalidIndexes) {","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        this.targetIndexes \u003d targetIndexes;","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        this.invalidIndexes \u003d invalidIndexes;","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e doneEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        for (Index idx : targetIndexes) {","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"            if (idx.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"                invalidIndexes.add(\"\" + idx.getOneBased());","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"                continue;","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            Event event \u003d lastShownList.get(idx.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"            if (event.isDone()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"                invalidIndexes.add(\"\" + idx.getOneBased());","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"                continue;","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"            doneEvents.add(event);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        for (Event e : doneEvents) {","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"            model.setEvent(e, e.setDone());","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        String output;","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        if (doneEvents.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"            throw new CommandException(MESSAGE_NONE_EVENT_INDEX_VALID);","lastModifiedDate":"2021-04-04"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        } else if (invalidIndexes.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"            output \u003d String.format(MESSAGE_EVENT_DONE_SUCCESS, displayEvents(doneEvents));","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"            model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"            output \u003d String.format(MESSAGE_EVENT_DONE_SUCCESS + \"\\n\" + MESSAGE_INVALID_EVENT_INDEX,","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"                    displayEvents(doneEvents),","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"                    String.join(\", \", invalidIndexes));","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"            model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"     * Returns list of events in the form \"a, b, c,...\"","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"    private String displayEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"        return events.stream()","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"                .orElse(\"\");","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"                || (other instanceof EDoneCommand // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 targetIndexes.equals(((EDoneCommand) other).targetIndexes) // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 invalidIndexes.equals(((EDoneCommand) other).invalidIndexes)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"nickyfoo":1,"garyljj":102}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EEditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import java.util.List;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.event.EventDate;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":" * Edits the details of an existing event in PartyPlanet.","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"public class EEditCommand extends Command {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    public static final String COMMAND_WORD \u003d \"eedit\";","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"            + \"by the index number used in the displayed event list. \"","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"            + \"Parameters: INDEX \"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"            + \"[\" + PREFIX_NAME + \" NAME] \"","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"            + \"[\" + PREFIX_DATE + \" DATE] \"","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"            + \"[\" + PREFIX_REMARK + \" DETAIL]\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"            + PREFIX_DATE + \" 01 Apr 2019 \"","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"            + PREFIX_REMARK + \" Prank the april babies ;)\";","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD + \" INDEX [-n NAME] [-d DATE] [-r DETAIL]\";","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited event: %1$s\";","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in PartyPlanet.\";","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"    private final Index index;","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"    private final EditEventDescriptor editEventDescriptor;","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"     * @param index of the event in the filtered event list to edit","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"     * @param editEventDescriptor details to edit the event with","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"    public EEditCommand(Index index, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"        requireNonNull(editEventDescriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"        assert index.getZeroBased() \u003e\u003d 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"        assert index.getZeroBased() \u003c lastShownList.size();","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"        model.setEvent(eventToEdit, editedEvent);","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"        model.addState(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"     * Creates and returns an {@code Event} with the details of {@code eventToEdit}","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"zhengruoxin"},"content":"     * edited with {@code editEventDescriptor}.","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"zhengruoxin"},"content":"    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"zhengruoxin"},"content":"        assert eventToEdit !\u003d null;","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"zhengruoxin"},"content":"        Name updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getName());","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"zhengruoxin"},"content":"        EventDate updatedDate \u003d editEventDescriptor.getDate().orElse(eventToEdit.getEventDate());","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"zhengruoxin"},"content":"        Remark updatedDetail \u003d editEventDescriptor.getDetail().orElse(eventToEdit.getDetails());","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"zhengruoxin"},"content":"        boolean isDone \u003d eventToEdit.isDone();","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":95,"author":{"gitId":"zhengruoxin"},"content":"        return new Event(updatedName, updatedDate, updatedDetail, isDone);","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"zhengruoxin"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":99,"author":{"gitId":"zhengruoxin"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":100,"author":{"gitId":"zhengruoxin"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"zhengruoxin"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"zhengruoxin"},"content":"            return true;","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":104,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":105,"author":{"gitId":"zhengruoxin"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"zhengruoxin"},"content":"        if (!(other instanceof EEditCommand)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":107,"author":{"gitId":"zhengruoxin"},"content":"            return false;","lastModifiedDate":"2021-03-22"},{"lineNumber":108,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"zhengruoxin"},"content":"        // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":111,"author":{"gitId":"zhengruoxin"},"content":"        EEditCommand e \u003d (EEditCommand) other;","lastModifiedDate":"2021-03-22"},{"lineNumber":112,"author":{"gitId":"zhengruoxin"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-22"},{"lineNumber":113,"author":{"gitId":"zhengruoxin"},"content":"                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":114,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":115,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":116,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":117,"author":{"gitId":"zhengruoxin"},"content":"     * Stores the details to edit the event with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"zhengruoxin"},"content":"     * corresponding field value of the event.","lastModifiedDate":"2021-03-23"},{"lineNumber":119,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":120,"author":{"gitId":"zhengruoxin"},"content":"    public static class EditEventDescriptor {","lastModifiedDate":"2021-03-22"},{"lineNumber":121,"author":{"gitId":"zhengruoxin"},"content":"        private Name name;","lastModifiedDate":"2021-03-22"},{"lineNumber":122,"author":{"gitId":"zhengruoxin"},"content":"        private EventDate date;","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"zhengruoxin"},"content":"        private Remark details;","lastModifiedDate":"2021-03-22"},{"lineNumber":124,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":125,"author":{"gitId":"zhengruoxin"},"content":"        public EditEventDescriptor() {}","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"zhengruoxin"},"content":"        /**","lastModifiedDate":"2021-03-22"},{"lineNumber":128,"author":{"gitId":"zhengruoxin"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-22"},{"lineNumber":129,"author":{"gitId":"zhengruoxin"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-22"},{"lineNumber":130,"author":{"gitId":"zhengruoxin"},"content":"         */","lastModifiedDate":"2021-03-22"},{"lineNumber":131,"author":{"gitId":"zhengruoxin"},"content":"        public EditEventDescriptor(EditEventDescriptor toCopy) {","lastModifiedDate":"2021-03-22"},{"lineNumber":132,"author":{"gitId":"zhengruoxin"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-03-22"},{"lineNumber":133,"author":{"gitId":"zhengruoxin"},"content":"            setDate(toCopy.date);","lastModifiedDate":"2021-03-22"},{"lineNumber":134,"author":{"gitId":"zhengruoxin"},"content":"            setDetail(toCopy.details);","lastModifiedDate":"2021-03-22"},{"lineNumber":135,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":136,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":137,"author":{"gitId":"zhengruoxin"},"content":"        /**","lastModifiedDate":"2021-03-22"},{"lineNumber":138,"author":{"gitId":"zhengruoxin"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-22"},{"lineNumber":139,"author":{"gitId":"zhengruoxin"},"content":"         */","lastModifiedDate":"2021-03-22"},{"lineNumber":140,"author":{"gitId":"zhengruoxin"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-22"},{"lineNumber":141,"author":{"gitId":"zhengruoxin"},"content":"            return CollectionUtil.isAnyNonNull(name, date, details);","lastModifiedDate":"2021-03-22"},{"lineNumber":142,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":143,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":144,"author":{"gitId":"zhengruoxin"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-03-22"},{"lineNumber":145,"author":{"gitId":"zhengruoxin"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-03-22"},{"lineNumber":146,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":147,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":148,"author":{"gitId":"zhengruoxin"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2021-03-22"},{"lineNumber":149,"author":{"gitId":"zhengruoxin"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-03-22"},{"lineNumber":150,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":151,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":152,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":153,"author":{"gitId":"zhengruoxin"},"content":"        public Optional\u003cEventDate\u003e getDate() {","lastModifiedDate":"2021-03-23"},{"lineNumber":154,"author":{"gitId":"zhengruoxin"},"content":"            return Optional.ofNullable(date);","lastModifiedDate":"2021-03-22"},{"lineNumber":155,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":156,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":157,"author":{"gitId":"zhengruoxin"},"content":"        public void setDate(EventDate date) {","lastModifiedDate":"2021-03-23"},{"lineNumber":158,"author":{"gitId":"zhengruoxin"},"content":"            this.date \u003d date;","lastModifiedDate":"2021-03-22"},{"lineNumber":159,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":160,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":161,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":162,"author":{"gitId":"zhengruoxin"},"content":"        public void setDetail(Remark details) {","lastModifiedDate":"2021-03-22"},{"lineNumber":163,"author":{"gitId":"zhengruoxin"},"content":"            this.details \u003d details;","lastModifiedDate":"2021-03-22"},{"lineNumber":164,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":165,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":166,"author":{"gitId":"zhengruoxin"},"content":"        public Optional\u003cRemark\u003e getDetail() {","lastModifiedDate":"2021-03-22"},{"lineNumber":167,"author":{"gitId":"zhengruoxin"},"content":"            return Optional.ofNullable(details);","lastModifiedDate":"2021-03-22"},{"lineNumber":168,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":169,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":170,"author":{"gitId":"zhengruoxin"},"content":"        @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":171,"author":{"gitId":"zhengruoxin"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":172,"author":{"gitId":"zhengruoxin"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":173,"author":{"gitId":"zhengruoxin"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-22"},{"lineNumber":174,"author":{"gitId":"zhengruoxin"},"content":"                return true;","lastModifiedDate":"2021-03-22"},{"lineNumber":175,"author":{"gitId":"zhengruoxin"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":176,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":177,"author":{"gitId":"zhengruoxin"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":178,"author":{"gitId":"zhengruoxin"},"content":"            if (!(other instanceof EditEventDescriptor)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":179,"author":{"gitId":"zhengruoxin"},"content":"                return false;","lastModifiedDate":"2021-03-22"},{"lineNumber":180,"author":{"gitId":"zhengruoxin"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":181,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":182,"author":{"gitId":"zhengruoxin"},"content":"            // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":183,"author":{"gitId":"zhengruoxin"},"content":"            EditEventDescriptor e \u003d (EditEventDescriptor) other;","lastModifiedDate":"2021-03-22"},{"lineNumber":184,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":185,"author":{"gitId":"zhengruoxin"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-03-22"},{"lineNumber":186,"author":{"gitId":"zhengruoxin"},"content":"                    \u0026\u0026 getDate().equals(e.getDate())","lastModifiedDate":"2021-03-22"},{"lineNumber":187,"author":{"gitId":"zhengruoxin"},"content":"                    \u0026\u0026 getDetail().equals(e.getDetail());","lastModifiedDate":"2021-03-22"},{"lineNumber":188,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":189,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":190,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"zhengruoxin":186,"nickyfoo":4}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.model.Model.PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":" * Lists all events in PartyPlanet to the user.","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"public class EListCommand extends Command {","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    public static final String COMMAND_WORD \u003d \"elist\";","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all events! \";","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists event in PartyPlanet \"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"            + \"according to specified prefix combinations, with optional sort order.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"            + \"Parameters: [--exact] [--any] [-n NAME] [-r DETAIL] ... [-s SORT] [-o ORDER]\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"            + \"Sort fields: \u0027n\u0027 (name, default), \u0027d\u0027 (date), \u0027u\u0027 (upcoming)\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"            + \"Sort orders: \u0027asc\u0027 (ascending, default), \u0027desc\u0027 (descending)\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            + \"Example: elist --any -n CNY -n Feb -r turkey -s name -o desc\\n\";","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            + \" [--exact] [--any] [-n NAME] [-r DETAIL] ... [-s SORT] [-o ORDER]\";","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    public static final Comparator\u003cEvent\u003e SORT_NAME \u003d Comparator.comparing(x -\u003e x.getName().fullName.toLowerCase());","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    public static final Comparator\u003cEvent\u003e SORT_EVENTDATE \u003d Comparator.comparing(Event::getEventDate);","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public static final Comparator\u003cEvent\u003e SORT_EVENTDATE_UPCOMING \u003d (Event x, Event y) -\u003e {","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        Long xDaysLeft \u003d x.getEventDate().getDaysLeft();","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        Long yDaysLeft \u003d y.getEventDate().getDaysLeft();","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        // For pairs of events that are upcoming and not done, sort by date","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        if (!x.isDone() \u0026\u0026 !y.isDone() \u0026\u0026 xDaysLeft \u003e\u003d 0 \u0026\u0026 yDaysLeft \u003e\u003d 0) {","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            return xDaysLeft.compareTo(yDaysLeft);","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        // If event is upcoming and not done, sort in front","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        if (!x.isDone() \u0026\u0026 xDaysLeft \u003e\u003d 0) {","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            return -1;","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        if (!y.isDone() \u0026\u0026 yDaysLeft \u003e\u003d 0) {","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"            return 1;","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        // Sort the rest of events by date","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        return xDaysLeft.compareTo(yDaysLeft);","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"    };","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    private final Comparator\u003cEvent\u003e comparator;","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    private final Predicate\u003cEvent\u003e predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    private String parseArguments;","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    private String parseCriteria;","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"     * Default empty EListCommand.","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"     * Shows the whole list.","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    public EListCommand() {","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        this(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"     * More general EListCommand accepting a single filtering predicate.","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"     * Default in ascending order, and the ANY flag is not applicable.","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    public EListCommand(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        this(predicate, SORT_NAME, \"\");","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"     * Most general EListCommand.","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"     * @param predicate Predicate to filter people by","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"     * @param comparator Sorting comparator","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"    public EListCommand(Predicate\u003cEvent\u003e predicate, Comparator\u003cEvent\u003e comparator, String parseArguments) {","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        this.comparator \u003d comparator;","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"        this.parseArguments \u003d parseArguments;","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"        model.sortEventList(comparator);","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"        model.updateFilteredEventList(predicate);","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"        if (model.getEventListCopy().size() \u003d\u003d model.getFilteredEventList().size()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"            return new CommandResult(EListCommand.MESSAGE_SUCCESS + parseArguments); // No event","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"            // filtered out","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"        if (model.getFilteredEventList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"            return new CommandResult(String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW,","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"                model.getFilteredEventList().size()) + \"No events met the requirements.\");","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, model.getFilteredEventList().size())","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"                    + parseArguments);","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"            return true;","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"        if (!(other instanceof EListCommand)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"            return false;","lastModifiedDate":"2021-03-22"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"        EListCommand command \u003d (EListCommand) other;","lastModifiedDate":"2021-03-22"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"        return comparator.equals(command.comparator)","lastModifiedDate":"2021-03-22"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 predicate.equals(((EListCommand) other).predicate); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"pyuxiang":22,"nickyfoo":3,"Ellevy":93}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.FLAG_REMOVE;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" * Edits the details of an existing person in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"public abstract class EditCommand extends Command {","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"            + \"INDEX \"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \" NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \" PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \" EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \" ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"            + \"[\" + PREFIX_TAG + \" TAG]... \"","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \" BIRTHDAY] \"","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"            + \"[\" + PREFIX_REMARK + \" REMARK]\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \" 91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"            + PREFIX_EMAIL + \" johndoe@example.com\\n\"","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"            + \"OR \" + COMMAND_WORD + \" \" + FLAG_REMOVE + \": Removes specified tags from all people in filtered list.\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"            + \"Parameters: -t TAG [-t TAG]... \\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + FLAG_REMOVE + \" \" + PREFIX_TAG + \" vegetarian\";","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"            COMMAND_WORD + \" {INDEX [-n NAME] [-p PHONE] [-e EMAIL] [-a ADDRESS] [-t TAG]… [-b BIRTHDAY] \"","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"            + \"| --remove -t TAG [-t TAG]...}\";","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"zhengruoxin":5,"nickyfoo":7,"garyljj":9,"-":19,"Ellevy":3}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EditFieldCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Birthday;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"public class EditFieldCommand extends EditCommand {","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in PartyPlanet.\";","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    public EditFieldCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        String output \u003d String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        model.addState(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        return new CommandResult(output);","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedBirthday, updatedAddress, updatedRemark,","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"                updatedTags);","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"zhengruoxin"},"content":"        EditFieldCommand e \u003d (EditFieldCommand) other;","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2021-03-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2021-03-20"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2021-03-20"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2021-03-20"},{"lineNumber":112,"author":{"gitId":"zhengruoxin"},"content":"        private Birthday birthday;","lastModifiedDate":"2021-03-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2021-03-20"},{"lineNumber":114,"author":{"gitId":"zhengruoxin"},"content":"        private Remark remark;","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-03-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2021-03-20"},{"lineNumber":120,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2021-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-03-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2021-03-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2021-03-20"},{"lineNumber":127,"author":{"gitId":"zhengruoxin"},"content":"            setBirthday(toCopy.birthday);","lastModifiedDate":"2021-03-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2021-03-20"},{"lineNumber":129,"author":{"gitId":"zhengruoxin"},"content":"            setRemark(toCopy.remark);","lastModifiedDate":"2021-03-20"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2021-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2021-03-20"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2021-03-20"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-20"},{"lineNumber":137,"author":{"gitId":"zhengruoxin"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, birthday, address, remark, tags);","lastModifiedDate":"2021-03-20"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-03-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-03-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2021-03-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-03-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2021-03-20"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2021-03-20"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2021-03-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2021-03-20"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2021-03-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2021-03-20"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2021-03-20"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":164,"author":{"gitId":"zhengruoxin"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {","lastModifiedDate":"2021-03-20"},{"lineNumber":165,"author":{"gitId":"zhengruoxin"},"content":"            return Optional.ofNullable(birthday);","lastModifiedDate":"2021-03-20"},{"lineNumber":166,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":167,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":168,"author":{"gitId":"zhengruoxin"},"content":"        public void setBirthday(Birthday birthday) {","lastModifiedDate":"2021-03-20"},{"lineNumber":169,"author":{"gitId":"zhengruoxin"},"content":"            this.birthday \u003d birthday;","lastModifiedDate":"2021-03-20"},{"lineNumber":170,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":171,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2021-03-20"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2021-03-20"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2021-03-20"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2021-03-20"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":180,"author":{"gitId":"zhengruoxin"},"content":"        public void setRemark(Remark remark) {","lastModifiedDate":"2021-03-20"},{"lineNumber":181,"author":{"gitId":"zhengruoxin"},"content":"            this.remark \u003d remark;","lastModifiedDate":"2021-03-20"},{"lineNumber":182,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":183,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":184,"author":{"gitId":"zhengruoxin"},"content":"        public Optional\u003cRemark\u003e getRemark() {","lastModifiedDate":"2021-03-20"},{"lineNumber":185,"author":{"gitId":"zhengruoxin"},"content":"            return Optional.ofNullable(remark);","lastModifiedDate":"2021-03-20"},{"lineNumber":186,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":187,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2021-03-20"},{"lineNumber":189,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2021-03-20"},{"lineNumber":190,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-20"},{"lineNumber":191,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2021-03-20"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-20"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-03-20"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2021-03-20"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-20"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-03-20"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-03-20"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2021-03-20"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2021-03-20"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2021-03-20"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-20"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-20"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-20"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2021-03-20"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-03-20"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-20"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2021-03-20"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-03-20"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2021-03-20"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2021-03-20"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-03-20"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2021-03-20"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-03-20"},{"lineNumber":223,"author":{"gitId":"zhengruoxin"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())","lastModifiedDate":"2021-03-20"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2021-03-20"},{"lineNumber":225,"author":{"gitId":"zhengruoxin"},"content":"                    \u0026\u0026 getRemark().equals(e.getRemark())","lastModifiedDate":"2021-03-20"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2021-03-20"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"zhengruoxin":46,"garyljj":4,"-":179}},{"path":"src/main/java/seedu/partyplanet/logic/commands/EditToRemoveTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import java.util.List;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"public class EditToRemoveTagCommand extends EditCommand {","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public static final String MESSAGE_REMOVE_TAGS_SUCCESS \u003d \"Removed tag from: %1$s\";","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    public static final String MESSAGE_TAGS_NOT_REMOVED \u003d \"These tags do not exist in persons listed. No tags removed.\";","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    private final Set\u003cTag\u003e targetTags;","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    private final List\u003cPerson\u003e editedPersons \u003d new ArrayList\u003cPerson\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"     * Creates an EditToRemoveTagCommand to edit the {@code Person} with specified {@code Tag}","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    public EditToRemoveTagCommand(Set\u003cTag\u003e targetTags) {","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"        this.targetTags \u003d targetTags;","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"        for (Person person : lastShownList) {","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"            if (hasTags(person)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"                editedPersons.add(person);","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"            }","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"        if (editedPersons.isEmpty()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"            return new CommandResult(MESSAGE_TAGS_NOT_REMOVED);","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"        for (Person personToEdit : editedPersons) {","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"            removeTagFromPerson(model, personToEdit);","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        model.addState(String.format(MESSAGE_REMOVE_TAGS_SUCCESS,","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"                editedPersons.isEmpty() ? \"\" : displayPersons(editedPersons)));","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_TAGS_SUCCESS,","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"                editedPersons.isEmpty() ? \"\" : displayPersons(editedPersons)));","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"    private boolean hasTags(Person personToCheck) {","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"        Set\u003cTag\u003e personTags \u003d personToCheck.getTags();","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"        for (Tag targetTag : targetTags) {","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"            if (personTags.contains(targetTag)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"                return true;","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"        return false;","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"    private void removeTagFromPerson(Model model, Person personToEdit) {","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"        Set\u003cTag\u003e personTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"        for (Tag targetTag: targetTags) {","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"            personTags.remove(targetTag);","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"                personToEdit.getBirthday(), personToEdit.getAddress(), personToEdit.getRemark(), personTags);","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"     * Returns names of edited persons in the form \"a, b, c,...\"","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"    private String displayPersons(List\u003cPerson\u003e editedPersons) {","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"zhengruoxin"},"content":"        assert editedPersons.size() \u003e 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"        return editedPersons.stream()","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"zhengruoxin"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"zhengruoxin"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"zhengruoxin"},"content":"                .get();","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"zhengruoxin"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"zhengruoxin"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"zhengruoxin"},"content":"                || (other instanceof EditToRemoveTagCommand // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"zhengruoxin"},"content":"                \u0026\u0026 targetTags.equals(((EditToRemoveTagCommand) other).targetTags)); // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"zhengruoxin":96,"nickyfoo":2}},{"path":"src/main/java/seedu/partyplanet/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PartyPlanet as requested ...\";","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the application. \";","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true);","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"nickyfoo":5,"garyljj":3,"-":15}},{"path":"src/main/java/seedu/partyplanet/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"            + \"Example: \" + COMMAND_WORD + \"\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"            + \"OR Shows program usage instructions for a specified command\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"            + \"Parameters: COMMAND\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + AddCommand.COMMAND_WORD;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD + \" [COMMAND]\";","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Here is a list of commands available, \"","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"            + \"for more information refer to https://ay2021s2-cs2103-w16-3.github.io/tp/UserGuide.html\\n\"","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"            + \"Showing help: \" + HelpCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"            + \"\\n*****ADDRESSBOOK*****\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"            + \"Adding contacts: \" + AddCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"            + \"Deleting contacts: \" + DeleteCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"            + \"Editing contacts: \" + EditCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"            + \"Listing contacts: \" + ListCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":"            + \"\\n*****EVENTBOOK*****\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"            + \"Adding events: \" + EAddCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            + \"Deleting events: \" + EDeleteCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"            + \"Editing events: \" + EEditCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"            + \"Marking events as done: \" + EDoneCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"            + \"Listing events: \" + EListCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"glennljs"},"content":"            + \"\\n*****GENERAL*****\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"            + \"Undoing mistakes: \" + UndoCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"            + \"Redoing commands: \" + RedoCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"            + \"Toggle theme: \" + ToggleThemeCommand.MESSAGE_USAGE_CONCISE + \"\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"            + \"Leaving app: \" + ExitCommand.MESSAGE_USAGE_CONCISE;","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    private final String commandWord;","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"     * Creates a HelpCommand to give syntax details for all possible commands","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    public HelpCommand() {","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"        this.commandWord \u003d \"\";","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"     * Creates a HelpCommand to give syntax details for a specified {@code commandWord}","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"    public HelpCommand(String commandWord) {","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"        this.commandWord \u003d commandWord;","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(HelpCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"        // AddressBook Commands","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(AddCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(DeleteCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(EditCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(ListCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"        // EventBook Commands","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        case EAddCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"            return new CommandResult(EAddCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        case EDeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"            return new CommandResult(EDeleteCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"        case EEditCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(EEditCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        case EDoneCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"            return new CommandResult(EDoneCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"        case EListCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"            return new CommandResult(EListCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-22"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"        // General Commands","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"        case UndoCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-23"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(UndoCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"        case RedoCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(RedoCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-28"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"        case ToggleThemeCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-25"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"            return new CommandResult(ToggleThemeCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-25"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":107,"author":{"gitId":"nickyfoo"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(ExitCommand.MESSAGE_USAGE, false);","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"        default:","lastModifiedDate":"2021-03-08"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"            return new CommandResult(SHOWING_HELP_MESSAGE, false);","lastModifiedDate":"2021-03-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":115,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"glennljs":5,"nickyfoo":77,"garyljj":6,"-":16,"Ellevy":12}},{"path":"src/main/java/seedu/partyplanet/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import java.util.List;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.date.Date;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":" * Lists all persons in PartyPlanet to the user.","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons! \";","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists people in PartyPlanet \"","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            + \"according to specified prefix combinations, with optional sort order.\\n\"","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            + \"Parameters: [--exact] [--any] [-n NAME]... [-t TAG]... [-b MONTH]... [-s SORT_FIELD] [-o SORT_ORDER]\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"            + \"Sort fields: \u0027n\u0027 (name, default), \u0027b\u0027 (birthday), \u0027u\u0027 (upcoming)\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            + \"Sort orders: \u0027asc\u0027 (ascending, default), \u0027desc\u0027 (descending)\\n\"","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            + \"Example: list --exact -n alice -t friend -b 1 -s n -o desc\\n\";","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            COMMAND_WORD + \" [--exact] [--any] [-n NAME]... [-t TAG]... [-b MONTH]... [-s SORT_FIELD] [-o SORT_ORDER]\";","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    public static final Comparator\u003cPerson\u003e SORT_NAME \u003d Comparator.comparing(x -\u003e x.getName().fullName.toLowerCase());","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    public static final Comparator\u003cPerson\u003e SORT_BIRTHDAY \u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            Comparator.comparing(x -\u003e Date.getDateWithoutYear(x.getBirthday()));","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    public static final Comparator\u003cPerson\u003e SORT_BIRTHDAY_UPCOMING \u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            Comparator.comparing(x -\u003e x.getBirthday().getDaysLeft(true));","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"glennljs"},"content":"    private final Comparator\u003cPerson\u003e comparator;","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"    private final Predicate\u003cPerson\u003e predicate;","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"    private String parseArguments;","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    private String parseCriteria;","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     * Default empty ListCommand.","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     * Shows the whole list.","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"    public ListCommand() {","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        this(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     * More general ListCommand accepting a single filtering predicate.","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"     * Default in ascending order, and the ANY flag is not applicable.","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    public ListCommand(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-03-18"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        this(predicate, SORT_NAME, \"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * Most general ListCommand.","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     *","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"     * @param predicate Predicate to filter people by","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * @param comparator Sorting comparator","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"    public ListCommand(Predicate\u003cPerson\u003e predicate, Comparator\u003cPerson\u003e comparator, String parseArguments) {","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"glennljs"},"content":"        this.comparator \u003d comparator;","lastModifiedDate":"2021-03-09"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        this.parseArguments \u003d parseArguments;","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"glennljs"},"content":"        model.sortPersonList(comparator);","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"        String tagsRepresentation \u003d displayTags(model.getFilteredPersonList())","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"                .replace(\"[\", \"\").replace(\"]\", \"\");","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"        if (model.getPersonListCopy().size() \u003d\u003d model.getFilteredPersonList().size()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"            return new CommandResult(ListCommand.MESSAGE_SUCCESS + parseArguments // No person filtered out","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"                    + String.format(Messages.MESSAGE_PERSONS_LISTED_TAGS, tagsRepresentation));","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"        if (model.getFilteredPersonList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"            return new CommandResult(String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"                    model.getFilteredPersonList().size())","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"                    + \"Nobody met the requirements.\"","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"                    + String.format(Messages.MESSAGE_PERSONS_LISTED_TAGS, tagsRepresentation));","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-18"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"            String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size())","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"                    + parseArguments","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"                    + String.format(Messages.MESSAGE_PERSONS_LISTED_TAGS, tagsRepresentation));","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":99,"author":{"gitId":"zhengruoxin"},"content":"    private String displayTags(List\u003cPerson\u003e personsToDisplay) {","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"zhengruoxin"},"content":"        Map\u003cTag, Integer\u003e count \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"zhengruoxin"},"content":"        personsToDisplay.forEach(p -\u003e p.getTags()","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"zhengruoxin"},"content":"              .forEach(t -\u003e count.compute(t, (k, v) -\u003e v \u003d\u003d null ? 1 : v + 1)));","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":104,"author":{"gitId":"zhengruoxin"},"content":"        String output \u003d count.entrySet().stream()","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"zhengruoxin"},"content":"                .sorted((x, y) -\u003e x.getKey().tagName.compareTo(y.getKey().tagName))","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"zhengruoxin"},"content":"                .map(t -\u003e String.format(\"%s (%d)\", t.getKey(), t.getValue()))","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"zhengruoxin"},"content":"                .reduce((x, y) -\u003e x + \", \" + y)","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"                .orElse(\"None!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"zhengruoxin"},"content":"        return output;","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-18"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-18"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"            return true;","lastModifiedDate":"2021-03-18"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"        if (!(other instanceof ListCommand)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"            return false;","lastModifiedDate":"2021-03-18"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d (ListCommand) other;","lastModifiedDate":"2021-03-18"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"        return comparator.equals(command.comparator)","lastModifiedDate":"2021-03-20"},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"                \u0026\u0026 predicate.equals(((ListCommand) other).predicate); // state check","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"glennljs":8,"zhengruoxin":20,"pyuxiang":56,"nickyfoo":2,"garyljj":6,"-":17,"Ellevy":16}},{"path":"src/main/java/seedu/partyplanet/logic/commands/RedoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" * Redoes the previous command that changes the address or event books","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"public class RedoCommand extends Command {","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"            + \": Redoes the last command that changes the address or event books.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Completed redo for the change: \";","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_INVALID_REDO \u003d \"There\u0027s nothing left to redo!\";","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     * Creates a RedoCommand to redo the last command that changes the address or event books","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    public RedoCommand() {","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        String command;","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        try {","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"            command \u003d model.redo();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(MESSAGE_INVALID_REDO);","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        return new CommandResult(MESSAGE_SUCCESS + command);","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"nickyfoo":45}},{"path":"src/main/java/seedu/partyplanet/logic/commands/ToggleThemeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.ui.Theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" * Toggles the theme of PartyPlanet between Dark and Pastel.","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"public class ToggleThemeCommand extends Command {","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Changed to %s theme!\";","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles PartyPlanet\u0027s theme between Dark and Pastel.\";","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD;","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        CommandResult commandResult;","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        Theme theme \u003d model.getGuiSettings().getTheme();","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        switch (theme) {","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        case PASTEL:","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"            commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, \"Dark\"), false, Theme.DARK);","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"            break;","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        case DARK: // fallthrough","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        default:","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"            commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, \"Pastel\"), false, Theme.PASTEL);","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            break;","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        return commandResult;","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"pyuxiang":14,"garyljj":18}},{"path":"src/main/java/seedu/partyplanet/logic/commands/UndoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" * Undoes the previous command that changes the address or event books","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"            + \": Undoes the last command that changes the address or event books.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_USAGE_CONCISE \u003d COMMAND_WORD;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Completed undo for the change: \";","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_INVALID_UNDO \u003d \"There\u0027s nothing left to undo!\";","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     * Creates an UndoCommand to undo the last command that changes the address or event books","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    public UndoCommand() {","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        String command;","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        try {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"            command \u003d model.undo();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(MESSAGE_INVALID_UNDO);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        return new CommandResult(MESSAGE_SUCCESS + command);","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"nickyfoo":45}},{"path":"src/main/java/seedu/partyplanet/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands.exceptions;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"garyljj":1,"-":16}},{"path":"src/main/java/seedu/partyplanet/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.AddCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Birthday;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"                        PREFIX_BIRTHDAY, PREFIX_ADDRESS, PREFIX_REMARK, PREFIX_TAG);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(Phone.EMPTY_PHONE_STRING));","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(Email.EMPTY_EMAIL_STRING));","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"        Birthday birthday \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"                ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).orElse(Birthday.EMPTY_DATE_STRING));","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        Address address \u003d","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"                ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(Address.EMPTY_ADDRESS_STRING));","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"        Remark remark \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"            ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(Remark.EMPTY_REMARK_STRING));","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        Person person \u003d new Person(name, phone, email, birthday, address, remark, tagList);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"zhengruoxin":2,"nickyfoo":1,"garyljj":17,"-":39,"Ellevy":11}},{"path":"src/main/java/seedu/partyplanet/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.AddCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.Command;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.commands.EAddCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.commands.EDeleteCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.EDoneCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EEditCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.commands.EListCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.EditCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.ListCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.commands.RedoCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.ToggleThemeCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.commands.UndoCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"        // AddressBook Commands","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"glennljs"},"content":"            return new ListCommandParser().parse(arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"        // EventBook Commands","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"        case EAddCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"            return new EAddCommandParser().parse(arguments);","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"        case EEditCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"            return new EEditCommandParser().parse(arguments);","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        case EDeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"            return new EDeleteCommandParser().parse(arguments);","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        case EDoneCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"            return new EDoneCommandParser().parse(arguments);","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        case EListCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"            return new EListCommandParser().parse(arguments);","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"        // General Commands","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"            return new HelpCommandParser().parse(arguments);","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"        case UndoCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"            return new UndoCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"        case RedoCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"            return new RedoCommand();","lastModifiedDate":"2021-03-28"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"        case ToggleThemeCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-25"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"            return new ToggleThemeCommand();","lastModifiedDate":"2021-03-25"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"glennljs":1,"zhengruoxin":4,"nickyfoo":24,"garyljj":19,"-":51,"Ellevy":8}},{"path":"src/main/java/seedu/partyplanet/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"    /** Stores the order of prefixes */","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"    private final List\u003cPrefix\u003e prefixPositionOrder \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        if (!contains(prefix)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        return getValue(new Prefix()).orElse(\"\");","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * Returns true if {@code prefix} exists inside the map, else false.","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     * Typically for flag checking, where the values are not semantically meaningful.","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    public boolean contains(Prefix prefix) {","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"        return argMultimap.containsKey(prefix);","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":71,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"glennljs"},"content":"     * Insert an ordered list containing the {@code Prefix}es.","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"glennljs"},"content":"    public void putOrder(List\u003cPrefix\u003e prefixPositionOrder) {","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"glennljs"},"content":"        this.prefixPositionOrder.addAll(prefixPositionOrder);","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"glennljs"},"content":"     * Get {@code Prefix} order list.","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"glennljs"},"content":"    public List\u003cPrefix\u003e getPrefixPositionOrders() {","lastModifiedDate":"2021-03-27"},{"lineNumber":83,"author":{"gitId":"glennljs"},"content":"        return this.prefixPositionOrder;","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"glennljs":17,"pyuxiang":10,"garyljj":1,"-":58}},{"path":"src/main/java/seedu/partyplanet/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" *     e.g. {@code some preamble text -t 11.00 -t 12.00 -k -m July}  where prefixes are {@code -t -k -m}.\u003cbr\u003e","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code -k} in the above example.\u003cbr\u003e","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code -t}","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        PrefixPosition extendedPrefix \u003d findPrefixPosition(argsString, prefix, 0);","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        while (extendedPrefix !\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            extendedPrefix \u003d findPrefixPosition(argsString, prefix, extendedPrefix.getStartPosition());","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"     * Returns the index of the first occurrence of any prefix string from {@code prefix} in","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"     * {@code argsString} starting from index {@code fromIndex}, including the","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"     * preceding whitespace. An occurrence","lastModifiedDate":"2021-03-07"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"     * is valid if there is both a whitespace preceding and following {@code prefix},","lastModifiedDate":"2021-03-07"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     * or if the following whitespace is replaced by the end of string.","lastModifiedDate":"2021-03-07"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * Returns null if no such occurrence can be found.","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"     * e.g Assume {@code fromIndex} \u003d 0, {@code prefix} \u003d \"-p, --prefix\":","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     *","lastModifiedDate":"2021-03-07"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-e abc-d\" returns -1","lastModifiedDate":"2021-03-07"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-p abc-d\" returns -1","lastModifiedDate":"2021-03-07"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \" -p abc-d\" returns 1","lastModifiedDate":"2021-03-07"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \" -pp abc-d\" returns -1","lastModifiedDate":"2021-03-07"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-e abc-d -p -d\" returns 9","lastModifiedDate":"2021-03-07"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-e abc-d -p\" returns 9","lastModifiedDate":"2021-03-07"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"     * - {@code argsString} \u003d \"-e abc-d --prefix\" returns 9","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"    private static PrefixPosition findPrefixPosition(String argsString, Prefix prefix, int fromIndex) {","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"        int minPrefixIndex \u003d argsString.length();","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"        String minPrefixString \u003d null;","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"        // Inevitable loop over possible prefixes due to recursive nature of search in `findPrefixPositions`.","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"        // Since spaces between prefixes are required, to change to split -\u003e iterative find method.","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"        for (String prefixString: prefix.getPrefixes()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"            int prefixIndex \u003d argsString.indexOf(\" \" + prefixString, fromIndex);","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"            if (prefixIndex !\u003d -1 \u0026\u0026 prefixIndex \u003c minPrefixIndex) {","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"                minPrefixIndex \u003d prefixIndex;","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"                minPrefixString \u003d prefixString;","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"        if (minPrefixString \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"            return null; // invalid index","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"        int trailingIndex \u003d minPrefixIndex + 1 + minPrefixString.length(); // index of character after prefix","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"        if (trailingIndex \u003d\u003d argsString.length() || argsString.charAt(trailingIndex) \u003d\u003d \u0027 \u0027) {","lastModifiedDate":"2021-03-07"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"            // valid trailing character, +1 for leading whitespace","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"            return new PrefixPosition(minPrefixString, prefix, minPrefixIndex + 1);","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"        return null;","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"        // Sort prefixes by position to allow calculation of prefix length","lastModifiedDate":"2021-03-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"        // Add PrefixPositions at start and end to represent preamble and end of string","lastModifiedDate":"2021-03-07"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(\"\", new Prefix(), 0);","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(\"\", new Prefix(), argsString.length());","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"        // Create a map of prefixes to argument (if any)","lastModifiedDate":"2021-03-07"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":130,"author":{"gitId":"glennljs"},"content":"        // Pass prefix order to argMultimap","lastModifiedDate":"2021-03-27"},{"lineNumber":131,"author":{"gitId":"glennljs"},"content":"        List\u003cPrefix\u003e prefixPositionOrder \u003d prefixPositions","lastModifiedDate":"2021-03-27"},{"lineNumber":132,"author":{"gitId":"glennljs"},"content":"                .stream()","lastModifiedDate":"2021-03-27"},{"lineNumber":133,"author":{"gitId":"glennljs"},"content":"                .map(p -\u003e p.prefix)","lastModifiedDate":"2021-03-27"},{"lineNumber":134,"author":{"gitId":"glennljs"},"content":"                .distinct()","lastModifiedDate":"2021-03-27"},{"lineNumber":135,"author":{"gitId":"glennljs"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-03-27"},{"lineNumber":136,"author":{"gitId":"glennljs"},"content":"        argMultimap.putOrder(prefixPositionOrder);","lastModifiedDate":"2021-03-27"},{"lineNumber":137,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"pyuxiang"},"content":"        String prefixString \u003d currentPrefixPosition.getPrefixString();","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"pyuxiang"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefixString.length();","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":160,"author":{"gitId":"pyuxiang"},"content":"        private final int startPosition;","lastModifiedDate":"2021-03-07"},{"lineNumber":161,"author":{"gitId":"pyuxiang"},"content":"        private final String prefixString;","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":164,"author":{"gitId":"pyuxiang"},"content":"        PrefixPosition(String prefixString, Prefix prefix, int startPosition) {","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"pyuxiang"},"content":"            this.prefixString \u003d prefixString;","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":174,"author":{"gitId":"pyuxiang"},"content":"        String getPrefixString() {","lastModifiedDate":"2021-03-15"},{"lineNumber":175,"author":{"gitId":"pyuxiang"},"content":"            return prefixString;","lastModifiedDate":"2021-03-15"},{"lineNumber":176,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":177,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"glennljs":8,"pyuxiang":59,"garyljj":1,"-":115}},{"path":"src/main/java/seedu/partyplanet/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"-n\", \"--name\");","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"-p\", \"--phone\");","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"-e\", \"--email\");","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"-b\", \"--birthday\");","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"-d\", \"--date\");","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"-a\", \"--address\");","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"-r\", \"--remark\");","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t\", \"--tag\");","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_FIND \u003d new Prefix(\"-f\", \"--find\");","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_SORT \u003d new Prefix(\"-s\", \"--sort\");","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"-o\", \"--order\");","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    /* Flag definitions */","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    public static final Prefix FLAG_REMOVE \u003d new Prefix(\"--remove\");","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix FLAG_ANY \u003d new Prefix(\"--any\");","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix FLAG_APPEND \u003d new Prefix(\"--append\");","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix FLAG_DELETE \u003d new Prefix(\"--delete\");","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    public static final Prefix FLAG_EXACT \u003d new Prefix(\"--exact\");","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"zhengruoxin":2,"pyuxiang":14,"nickyfoo":1,"garyljj":1,"-":9}},{"path":"src/main/java/seedu/partyplanet/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.FLAG_ANY;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteClearCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteContactCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteContactWithTagCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, FLAG_ANY);","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        boolean tagIsPresent \u003d argMultimap.getValue(PREFIX_TAG).isPresent();","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        boolean idxIsPresent \u003d !argMultimap.getPreamble().isEmpty();","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        boolean isAny \u003d argMultimap.contains(FLAG_ANY);","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        // 1. Do not allow both tag and index to exist","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        // 2. \"any\" flag can only appear with tags","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        if (tagIsPresent \u0026\u0026 idxIsPresent || isAny \u0026\u0026 !tagIsPresent) {","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        if (!(tagIsPresent || idxIsPresent)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"            return new DeleteClearCommand();","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"            if (tagIsPresent) {","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"                return createDeleteContactWithTagCommand(argMultimap.getAllValues(PREFIX_TAG), isAny);","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            return createDeleteContactCommand(argMultimap.getPreamble());","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    private DeleteContactWithTagCommand createDeleteContactWithTagCommand(List\u003cString\u003e tags, boolean isAny)","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"            throws ParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(tags);","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        return new DeleteContactWithTagCommand(tagList, isAny);","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"    private DeleteContactCommand createDeleteContactCommand(String args) throws ParseException {","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        String[] strIndexes \u003d args.split(\"\\\\s+\");","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        List\u003cIndex\u003e validIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e invalidIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        for (String s : strIndexes) {","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"            try {","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"                Index index \u003d ParserUtil.parseIndex(s);","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"                if (!validIndexes.contains(index)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"                    validIndexes.add(index);","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"                if (!invalidIndexes.contains(s)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"                    invalidIndexes.add(s);","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        if (validIndexes.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        return new DeleteContactCommand(validIndexes, invalidIndexes);","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"pyuxiang":1,"garyljj":68,"-":22}},{"path":"src/main/java/seedu/partyplanet/logic/parser/EAddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.commands.EAddCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.EventDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":" * Parses input arguments and creates a new EAddCommand object","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"public class EAddCommandParser implements Parser\u003cEAddCommand\u003e {","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     * Parses the given {@code String} of arguments in the context of the EAddCommand","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     * and returns an EAddCommand object for execution.","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    public EAddCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_REMARK);","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        EventDate eventDate \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).orElse(EventDate.EMPTY_DATE_STRING));","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        Remark remark \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"            ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(Remark.EMPTY_REMARK_STRING));","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        Event event \u003d new Event(name, eventDate, remark);","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"        return new EAddCommand(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":52,"Ellevy":3}},{"path":"src/main/java/seedu/partyplanet/logic/parser/EDeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.commands.EDeleteClearCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.commands.EDeleteCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.EDeleteEventCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":" * Parses input arguments and creates a new EDeleteCommand object","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"public class EDeleteCommandParser implements Parser\u003cEDeleteCommand\u003e {","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     * Parses the given {@code String} of arguments in the context of the EDeleteCommand","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * and returns a EDeleteCommand object for execution.","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    public EDeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        boolean idxIsPresent \u003d !argMultimap.getPreamble().isEmpty();","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        if (!(idxIsPresent)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"            return new EDeleteClearCommand();","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        try {","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            return createEDeleteEventCommand(argMultimap.getPreamble());","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EDeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    private EDeleteEventCommand createEDeleteEventCommand(String args) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        String[] strIndexes \u003d args.split(\"\\\\s+\");","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        List\u003cIndex\u003e validIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e invalidIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        for (String s : strIndexes) {","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            try {","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"                Index index \u003d ParserUtil.parseIndex(s);","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"                if (!validIndexes.contains(index)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"                    validIndexes.add(index);","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"                if (!invalidIndexes.contains(s)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"                    invalidIndexes.add(s);","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        if (validIndexes.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EDeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        return new EDeleteEventCommand(validIndexes, invalidIndexes);","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"garyljj":20,"Ellevy":50}},{"path":"src/main/java/seedu/partyplanet/logic/parser/EDoneCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.EDoneCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" * Parses input arguments and creates a new EDoneCommand object","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"public class EDoneCommandParser implements Parser\u003cEDoneCommand\u003e {","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     * Parses the given {@code String} of arguments in the context of the EDoneCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"     * and returns a EDoneCommand object for execution.","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    public EDoneCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        if (argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EDoneCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        return createEDoneCommand(argMultimap.getPreamble());","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    private EDoneCommand createEDoneCommand(String args) throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        String[] strIndexes \u003d args.split(\"\\\\s+\");","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        List\u003cIndex\u003e validIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e invalidIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        for (String s : strIndexes) {","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"            try {","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"                Index index \u003d ParserUtil.parseIndex(s);","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"                if (!validIndexes.contains(index)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"                    validIndexes.add(index);","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"                if (!invalidIndexes.contains(s)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"                    invalidIndexes.add(s);","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"                }","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        if (validIndexes.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EDoneCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        return new EDoneCommand(validIndexes, invalidIndexes);","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"garyljj":58}},{"path":"src/main/java/seedu/partyplanet/logic/parser/EEditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EEditCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EEditCommand.EditEventDescriptor;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":" * Parses input arguments and creates a new EEditCommand object","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"public class EEditCommandParser implements Parser\u003cEEditCommand\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     * Parses the given {@code String} of arguments in the context of the EEditCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"     * and returns an EEditCommand object for execution.","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    public EEditCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_REMARK);","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"        Index index;","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"        try {","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EEditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"            editEventDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"            editEventDescriptor.setDate(ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get()));","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"            editEventDescriptor.setDetail(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"        if (!editEventDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"            throw new ParseException(EEditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"        return new EEditCommand(index, editEventDescriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"zhengruoxin":55}},{"path":"src/main/java/seedu/partyplanet/logic/parser/EListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.EListCommand.SORT_EVENTDATE;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.commands.EListCommand.SORT_EVENTDATE_UPCOMING;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.EListCommand.SORT_NAME;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.FLAG_ANY;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.FLAG_EXACT;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.model.Model.PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"import java.util.List;","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.commands.EListCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.predicates.EventDetailContainsExactKeywordsPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.predicates.EventDetailContainsKeywordsPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.predicates.EventNameContainsExactKeywordsPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.predicates.EventNameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":" * Parses input arguments and creates a new ListCommand object","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"public class EListCommandParser implements Parser\u003cEListCommand\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    private String stringFind \u003d \"\";","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    private String stringCriteria \u003d \"\";","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    private String stringSort \u003d \"\";","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"     * Parses the given {@code String} of arguments in the context of the EListCommand","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     * and returns an EListCommand object for execution.","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    public EListCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        ArgumentMultimap argMap \u003d ArgumentTokenizer.tokenize(","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"                args, PREFIX_NAME, PREFIX_REMARK, PREFIX_SORT, PREFIX_ORDER, FLAG_EXACT, FLAG_ANY);","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        if (!argMap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        Predicate\u003cEvent\u003e predicate \u003d getPredicate(argMap);","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"        Comparator\u003cEvent\u003e comparator \u003d getComparator(argMap);","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"        return new EListCommand(predicate, comparator, stringCriteria + stringSort + stringFind);","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"     * Returns the overall filtering predicate.","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    private Predicate\u003cEvent\u003e getPredicate(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        List\u003cPredicate\u003cEvent\u003e\u003e predicates \u003d getPredicates(argMap);","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        return mergePredicates(predicates, argMap);","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"     * Returns a list of filtering predicates depending on whether partial search is disabled.","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    private List\u003cPredicate\u003cEvent\u003e\u003e getPredicates(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"        boolean isExactSearch \u003d argMap.contains(FLAG_EXACT);","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        List\u003cPredicate\u003cEvent\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e allNames \u003d ListCommandUtil.getParsedNames(argMap);","lastModifiedDate":"2021-04-04"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e allRemarks \u003d ListCommandUtil.getParsedRemarks(argMap);","lastModifiedDate":"2021-04-04"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        if (isExactSearch) {","lastModifiedDate":"2021-04-04"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"            if (!allNames.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"                stringFind +\u003d \"\\n\\u2022 Requires exact event name: \" + String.join(\", \", allNames);","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"            for (String name : allNames) {","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"                predicates.add(new EventNameContainsExactKeywordsPredicate(name));","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"            if (!allRemarks.isEmpty()) {","lastModifiedDate":"2021-04-04"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"                stringFind +\u003d \"\\n\\u2022 Requires exact event remark: \" + String.join(\", \", allRemarks);","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"            for (String remark : allRemarks) {","lastModifiedDate":"2021-04-04"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"                predicates.add(new EventDetailContainsExactKeywordsPredicate(remark));","lastModifiedDate":"2021-04-04"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"            if (!allNames.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"                stringFind +\u003d \"\\n\\u2022 Requires partial event name: \" + String.join(\", \", allNames);","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"            for (String name : allNames) {","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"                predicates.add(new EventNameContainsKeywordsPredicate(name));","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"            if (!allRemarks.isEmpty()) {","lastModifiedDate":"2021-04-04"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"                stringFind +\u003d \"\\n\\u2022 Requires partial event remark: \" + String.join(\", \", allRemarks);","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"            for (String remark : allRemarks) {","lastModifiedDate":"2021-04-04"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"                predicates.add(new EventDetailContainsKeywordsPredicate(remark));","lastModifiedDate":"2021-04-04"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"        if (isExactSearch \u0026\u0026 predicates.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"        return predicates;","lastModifiedDate":"2021-03-22"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"     * Returns combines a list of filtering predicates depending on whether search is performed for any predicate.","lastModifiedDate":"2021-03-22"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"    private Predicate\u003cEvent\u003e mergePredicates(List\u003cPredicate\u003cEvent\u003e\u003e predicates, ArgumentMultimap argMap)","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"        throws ParseException {","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"        boolean isAnySearch \u003d argMap.contains(FLAG_ANY);","lastModifiedDate":"2021-03-22"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"        Predicate\u003cEvent\u003e overallPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"        if (isAnySearch \u0026\u0026 predicates.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"        if (predicates.isEmpty()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"            overallPredicate \u003d PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2021-03-22"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"        } else if (isAnySearch) {","lastModifiedDate":"2021-03-22"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"            stringCriteria +\u003d \"Each event meets at least 1 requirement stated. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"            overallPredicate \u003d x -\u003e false;","lastModifiedDate":"2021-03-22"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"            for (Predicate\u003cEvent\u003e predicate : predicates) {","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"                overallPredicate \u003d overallPredicate.or(predicate);","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"            stringCriteria +\u003d \"Each event meets all requirements stated. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"            overallPredicate \u003d x -\u003e true;","lastModifiedDate":"2021-03-22"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"            for (Predicate\u003cEvent\u003e predicate : predicates) {","lastModifiedDate":"2021-03-22"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"                overallPredicate \u003d overallPredicate.and(predicate);","lastModifiedDate":"2021-03-22"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":"        return overallPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":"     * Returns the comparator used to sort the filtered list.","lastModifiedDate":"2021-03-22"},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"    private Comparator\u003cEvent\u003e getComparator(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":142,"author":{"gitId":"Ellevy"},"content":"        Comparator\u003cEvent\u003e comparator \u003d getSortOrder(argMap);","lastModifiedDate":"2021-03-22"},{"lineNumber":143,"author":{"gitId":"Ellevy"},"content":"        return applySortDirection(comparator, argMap);","lastModifiedDate":"2021-03-22"},{"lineNumber":144,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":145,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":146,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":147,"author":{"gitId":"Ellevy"},"content":"     * Returns the comparator depending on the specified field to be sorted.","lastModifiedDate":"2021-03-22"},{"lineNumber":148,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":149,"author":{"gitId":"Ellevy"},"content":"    private Comparator\u003cEvent\u003e getSortOrder(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":150,"author":{"gitId":"Ellevy"},"content":"        Optional\u003cString\u003e sortType \u003d argMap.getValue(PREFIX_SORT);","lastModifiedDate":"2021-03-22"},{"lineNumber":151,"author":{"gitId":"Ellevy"},"content":"        if (sortType.isEmpty()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":152,"author":{"gitId":"Ellevy"},"content":"            return SORT_NAME; // default","lastModifiedDate":"2021-03-22"},{"lineNumber":153,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":154,"author":{"gitId":"Ellevy"},"content":"            switch (sortType.get().toLowerCase()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":155,"author":{"gitId":"Ellevy"},"content":"            case \"n\": // fallthrough","lastModifiedDate":"2021-03-22"},{"lineNumber":156,"author":{"gitId":"Ellevy"},"content":"            case \"name\":","lastModifiedDate":"2021-03-22"},{"lineNumber":157,"author":{"gitId":"Ellevy"},"content":"                stringSort +\u003d \"Sorted event names \";","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"Ellevy"},"content":"                return SORT_NAME;","lastModifiedDate":"2021-03-22"},{"lineNumber":159,"author":{"gitId":"Ellevy"},"content":"            case \"d\": // fallthrough","lastModifiedDate":"2021-03-22"},{"lineNumber":160,"author":{"gitId":"Ellevy"},"content":"            case \"date\":","lastModifiedDate":"2021-03-22"},{"lineNumber":161,"author":{"gitId":"Ellevy"},"content":"                stringSort +\u003d \"Sorted event dates \";","lastModifiedDate":"2021-03-30"},{"lineNumber":162,"author":{"gitId":"Ellevy"},"content":"                return SORT_EVENTDATE;","lastModifiedDate":"2021-03-22"},{"lineNumber":163,"author":{"gitId":"pyuxiang"},"content":"            case \"u\": // fallthrough","lastModifiedDate":"2021-03-26"},{"lineNumber":164,"author":{"gitId":"pyuxiang"},"content":"            case \"upcoming\":","lastModifiedDate":"2021-03-26"},{"lineNumber":165,"author":{"gitId":"Ellevy"},"content":"                stringSort +\u003d \"Sorted on upcoming event dates. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"pyuxiang"},"content":"                return SORT_EVENTDATE_UPCOMING;","lastModifiedDate":"2021-03-26"},{"lineNumber":167,"author":{"gitId":"Ellevy"},"content":"            default:","lastModifiedDate":"2021-03-22"},{"lineNumber":168,"author":{"gitId":"Ellevy"},"content":"                throw new ParseException(","lastModifiedDate":"2021-03-22"},{"lineNumber":169,"author":{"gitId":"Ellevy"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-22"},{"lineNumber":170,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":171,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":172,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":173,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":174,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":175,"author":{"gitId":"Ellevy"},"content":"     * Returns a comparator that is reversed if reverse order is specified.","lastModifiedDate":"2021-03-22"},{"lineNumber":176,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":177,"author":{"gitId":"Ellevy"},"content":"    private Comparator\u003cEvent\u003e applySortDirection(","lastModifiedDate":"2021-03-22"},{"lineNumber":178,"author":{"gitId":"Ellevy"},"content":"            Comparator\u003cEvent\u003e comparator, ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":179,"author":{"gitId":"Ellevy"},"content":"        Optional\u003cString\u003e orderType \u003d argMap.getValue(PREFIX_ORDER);","lastModifiedDate":"2021-03-22"},{"lineNumber":180,"author":{"gitId":"Ellevy"},"content":"        if (orderType.isEmpty() || comparator \u003d\u003d SORT_EVENTDATE_UPCOMING) {","lastModifiedDate":"2021-03-30"},{"lineNumber":181,"author":{"gitId":"Ellevy"},"content":"            if (!stringSort.isEmpty() \u0026\u0026 comparator !\u003d SORT_EVENTDATE_UPCOMING) {","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"Ellevy"},"content":"                stringSort +\u003d \"in ascending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"Ellevy"},"content":"            return comparator; // default","lastModifiedDate":"2021-03-22"},{"lineNumber":185,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":186,"author":{"gitId":"Ellevy"},"content":"            switch (orderType.get().toLowerCase()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":187,"author":{"gitId":"Ellevy"},"content":"            case \"a\": // fallthrough","lastModifiedDate":"2021-03-22"},{"lineNumber":188,"author":{"gitId":"Ellevy"},"content":"            case \"asc\":","lastModifiedDate":"2021-03-22"},{"lineNumber":189,"author":{"gitId":"Ellevy"},"content":"            case \"ascending\":","lastModifiedDate":"2021-03-22"},{"lineNumber":190,"author":{"gitId":"Ellevy"},"content":"                if (stringSort.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"Ellevy"},"content":"                    stringSort +\u003d \"Sorted event names in ascending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"Ellevy"},"content":"                } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"Ellevy"},"content":"                    stringSort +\u003d \"in ascending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":194,"author":{"gitId":"Ellevy"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"Ellevy"},"content":"                return comparator;","lastModifiedDate":"2021-03-22"},{"lineNumber":196,"author":{"gitId":"Ellevy"},"content":"            case \"d\": // fallthrough","lastModifiedDate":"2021-03-22"},{"lineNumber":197,"author":{"gitId":"Ellevy"},"content":"            case \"des\":","lastModifiedDate":"2021-03-22"},{"lineNumber":198,"author":{"gitId":"Ellevy"},"content":"            case \"desc\":","lastModifiedDate":"2021-03-22"},{"lineNumber":199,"author":{"gitId":"Ellevy"},"content":"            case \"descending\":","lastModifiedDate":"2021-03-22"},{"lineNumber":200,"author":{"gitId":"Ellevy"},"content":"                if (stringSort.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"Ellevy"},"content":"                    stringSort +\u003d \"Sorted event names in descending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"Ellevy"},"content":"                } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":203,"author":{"gitId":"Ellevy"},"content":"                    stringSort +\u003d \"in descending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"Ellevy"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":205,"author":{"gitId":"Ellevy"},"content":"                return comparator.reversed();","lastModifiedDate":"2021-03-22"},{"lineNumber":206,"author":{"gitId":"Ellevy"},"content":"            default:","lastModifiedDate":"2021-03-22"},{"lineNumber":207,"author":{"gitId":"Ellevy"},"content":"                throw new ParseException(","lastModifiedDate":"2021-03-22"},{"lineNumber":208,"author":{"gitId":"Ellevy"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-22"},{"lineNumber":209,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":210,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":211,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":212,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"pyuxiang":15,"garyljj":7,"Ellevy":190}},{"path":"src/main/java/seedu/partyplanet/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.FLAG_REMOVE;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.EditCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditToRemoveTagCommand;","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"                ArgumentTokenizer.tokenize(args, FLAG_REMOVE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"                        PREFIX_BIRTHDAY, PREFIX_ADDRESS, PREFIX_REMARK, PREFIX_TAG);","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"        boolean hasIndex \u003d !argMultimap.getPreamble().isEmpty();","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"        boolean mentionsRemove \u003d argMultimap.getValue(FLAG_REMOVE).isPresent();","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"        if (hasIndex \u0026\u0026 mentionsRemove) {","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"        if (hasIndex) {","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-07-10"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"            if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"                editPersonDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));","lastModifiedDate":"2021-03-09"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"            }","lastModifiedDate":"2021-03-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"            if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"                editPersonDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"                throw new ParseException(EditFieldCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"            return new EditFieldCommand(index, editPersonDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"zhengruoxin"},"content":"        } else if (mentionsRemove) {","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"zhengruoxin"},"content":"            if (!argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"zhengruoxin"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"zhengruoxin"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"            Set\u003cTag\u003e targetTags;","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"zhengruoxin"},"content":"            targetTags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"zhengruoxin"},"content":"            return new EditToRemoveTagCommand(targetTags);","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"zhengruoxin"},"content":"        } else {","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"zhengruoxin"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"zhengruoxin":35,"garyljj":12,"-":67,"Ellevy":5}},{"path":"src/main/java/seedu/partyplanet/logic/parser/HelpCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" * Parses input arguments and creates a new HelpCommand object","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"     * Parses the given {@code String} of arguments in the context of the HelpCommand","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * and returns a HelpCommand object for execution.","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    public HelpCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"        } else {","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"            String[] commandWords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"            return new HelpCommand(commandWords[0]);","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"nickyfoo":23,"garyljj":3}},{"path":"src/main/java/seedu/partyplanet/logic/parser/ListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.commands.ListCommand.SORT_BIRTHDAY;","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.commands.ListCommand.SORT_BIRTHDAY_UPCOMING;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.commands.ListCommand.SORT_NAME;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.FLAG_ANY;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.FLAG_EXACT;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"import java.util.List;","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.ListCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.BirthdayContainsMonthPredicate;","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.NameContainsExactKeywordsPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.TagsContainsExactTagPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.TagsContainsTagPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"glennljs"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":" * Parses input arguments and creates a new ListCommand object","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"glennljs"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    private String stringFind \u003d \"\";","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    private String stringCriteria \u003d \"\";","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    private String stringSort \u003d \"\";","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"glennljs"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"glennljs"},"content":"     * and returns a ListCommand object for execution.","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"glennljs"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"glennljs"},"content":"    public ListCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        ArgumentMultimap argMap \u003d ArgumentTokenizer.tokenize(","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"                args, PREFIX_NAME, PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_SORT, PREFIX_ORDER, FLAG_EXACT, FLAG_ANY);","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        if (!argMap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e predicate \u003d getPredicate(argMap);","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getComparator(argMap);","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"        return new ListCommand(predicate, comparator, stringCriteria + stringSort + stringFind);","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"     * Returns the overall filtering predicate.","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    private Predicate\u003cPerson\u003e getPredicate(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        List\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d getPredicates(argMap);","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        return mergePredicates(predicates, argMap);","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * Returns a list of filtering predicates depending on whether partial search is disabled.","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"    private List\u003cPredicate\u003cPerson\u003e\u003e getPredicates(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        boolean isExactSearch \u003d argMap.contains(FLAG_EXACT);","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        List\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e allNames \u003d ListCommandUtil.getParsedNames(argMap);","lastModifiedDate":"2021-04-04"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e allTags \u003d ListCommandUtil.getParsedTags(argMap);","lastModifiedDate":"2021-04-04"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        if (isExactSearch) {","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"            if (!allNames.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"                stringFind +\u003d \"\\n\\u2022 Requires exact name: \" + String.join(\", \", allNames);","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"            for (String name : allNames) {","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"                predicates.add(new NameContainsExactKeywordsPredicate(name));","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"            if (!allTags.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"                stringFind +\u003d \"\\n\\u2022 Requires exact tag: \" + String.join(\", \", allTags);","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"            for (String tag : allTags) {","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"                predicates.add(new TagsContainsExactTagPredicate(tag));","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"            if (!allNames.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"                stringFind +\u003d \"\\n\\u2022 Requires partial name: \" + String.join(\", \", allNames);","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"            for (String name : allNames) {","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"                predicates.add(new NameContainsKeywordsPredicate(name));","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"            if (!allTags.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"                stringFind +\u003d \"\\n\\u2022 Requires partial tag: \" + String.join(\", \", allTags);","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"            for (String tag : allTags) {","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"                predicates.add(new TagsContainsTagPredicate(tag));","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"        List\u003cString\u003e allMonths \u003d argMap.getAllValues(PREFIX_BIRTHDAY);","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"        if (!allMonths.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"            stringFind +\u003d \"\\n\\u2022 Requires birthday month: \" + String.join(\", \", allMonths);","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"        for (String month : allMonths) {","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"            predicates.add(new BirthdayContainsMonthPredicate(month));","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"        if (isExactSearch \u0026\u0026 predicates.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"        return predicates;","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":116,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"     * Returns combines a list of filtering predicates depending on whether search is performed for any predicate.","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"    private Predicate\u003cPerson\u003e mergePredicates(List\u003cPredicate\u003cPerson\u003e\u003e predicates, ArgumentMultimap argMap)","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"        throws ParseException {","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"        boolean isAnySearch \u003d argMap.contains(FLAG_ANY);","lastModifiedDate":"2021-03-20"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"        if (isAnySearch \u0026\u0026 predicates.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-30"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e overallPredicate;","lastModifiedDate":"2021-03-20"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"        if (predicates.isEmpty()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"            overallPredicate \u003d PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-20"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"        } else if (isAnySearch) {","lastModifiedDate":"2021-03-20"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"            stringCriteria +\u003d \"Each person meets at least 1 requirement stated. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"            overallPredicate \u003d x -\u003e false;","lastModifiedDate":"2021-03-20"},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":"            for (Predicate\u003cPerson\u003e predicate : predicates) {","lastModifiedDate":"2021-03-20"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"                overallPredicate \u003d overallPredicate.or(predicate);","lastModifiedDate":"2021-03-20"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-20"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"        } else {","lastModifiedDate":"2021-03-20"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"            stringCriteria +\u003d \"Each person meets all requirements stated. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"            overallPredicate \u003d x -\u003e true;","lastModifiedDate":"2021-03-20"},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"            for (Predicate\u003cPerson\u003e predicate : predicates) {","lastModifiedDate":"2021-03-20"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"                overallPredicate \u003d overallPredicate.and(predicate);","lastModifiedDate":"2021-03-20"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-20"},{"lineNumber":142,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":143,"author":{"gitId":"pyuxiang"},"content":"        return overallPredicate;","lastModifiedDate":"2021-03-20"},{"lineNumber":144,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":146,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":147,"author":{"gitId":"pyuxiang"},"content":"     * Returns the comparator used to sort the filtered list.","lastModifiedDate":"2021-03-20"},{"lineNumber":148,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":149,"author":{"gitId":"pyuxiang"},"content":"    private Comparator\u003cPerson\u003e getComparator(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-20"},{"lineNumber":150,"author":{"gitId":"pyuxiang"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getSortOrder(argMap);","lastModifiedDate":"2021-03-20"},{"lineNumber":151,"author":{"gitId":"pyuxiang"},"content":"        return applySortDirection(comparator, argMap);","lastModifiedDate":"2021-03-20"},{"lineNumber":152,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":153,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":154,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":155,"author":{"gitId":"pyuxiang"},"content":"     * Returns the comparator depending on the specified field to be sorted.","lastModifiedDate":"2021-03-20"},{"lineNumber":156,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":157,"author":{"gitId":"pyuxiang"},"content":"    private Comparator\u003cPerson\u003e getSortOrder(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-20"},{"lineNumber":158,"author":{"gitId":"pyuxiang"},"content":"        Optional\u003cString\u003e sortType \u003d argMap.getValue(PREFIX_SORT);","lastModifiedDate":"2021-03-20"},{"lineNumber":159,"author":{"gitId":"glennljs"},"content":"        if (sortType.isEmpty()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":160,"author":{"gitId":"pyuxiang"},"content":"            return SORT_NAME; // default","lastModifiedDate":"2021-03-20"},{"lineNumber":161,"author":{"gitId":"pyuxiang"},"content":"        } else {","lastModifiedDate":"2021-03-20"},{"lineNumber":162,"author":{"gitId":"pyuxiang"},"content":"            switch (sortType.get().toLowerCase()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":163,"author":{"gitId":"pyuxiang"},"content":"            case \"n\": // fallthrough","lastModifiedDate":"2021-03-20"},{"lineNumber":164,"author":{"gitId":"pyuxiang"},"content":"            case \"name\":","lastModifiedDate":"2021-03-20"},{"lineNumber":165,"author":{"gitId":"Ellevy"},"content":"                stringSort +\u003d \"Sorted names \";","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"pyuxiang"},"content":"                return SORT_NAME;","lastModifiedDate":"2021-03-20"},{"lineNumber":167,"author":{"gitId":"pyuxiang"},"content":"            case \"b\": // fallthrough","lastModifiedDate":"2021-03-20"},{"lineNumber":168,"author":{"gitId":"pyuxiang"},"content":"            case \"birthday\":","lastModifiedDate":"2021-03-20"},{"lineNumber":169,"author":{"gitId":"Ellevy"},"content":"                stringSort +\u003d \"Sorted birthdays \";","lastModifiedDate":"2021-03-30"},{"lineNumber":170,"author":{"gitId":"pyuxiang"},"content":"                return SORT_BIRTHDAY;","lastModifiedDate":"2021-03-20"},{"lineNumber":171,"author":{"gitId":"pyuxiang"},"content":"            case \"u\": // fallthrough","lastModifiedDate":"2021-03-26"},{"lineNumber":172,"author":{"gitId":"pyuxiang"},"content":"            case \"upcoming\":","lastModifiedDate":"2021-03-26"},{"lineNumber":173,"author":{"gitId":"Ellevy"},"content":"                stringSort +\u003d \"Sorted by upcoming birthdays. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":174,"author":{"gitId":"pyuxiang"},"content":"                return SORT_BIRTHDAY_UPCOMING;","lastModifiedDate":"2021-03-26"},{"lineNumber":175,"author":{"gitId":"glennljs"},"content":"            default:","lastModifiedDate":"2021-03-09"},{"lineNumber":176,"author":{"gitId":"glennljs"},"content":"                throw new ParseException(","lastModifiedDate":"2021-03-09"},{"lineNumber":177,"author":{"gitId":"glennljs"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-09"},{"lineNumber":178,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-09"},{"lineNumber":179,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":180,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":181,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":182,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":183,"author":{"gitId":"pyuxiang"},"content":"     * Returns a comparator that is reversed if reverse order is specified.","lastModifiedDate":"2021-03-20"},{"lineNumber":184,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":185,"author":{"gitId":"pyuxiang"},"content":"    private Comparator\u003cPerson\u003e applySortDirection(","lastModifiedDate":"2021-03-20"},{"lineNumber":186,"author":{"gitId":"pyuxiang"},"content":"            Comparator\u003cPerson\u003e comparator, ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-03-20"},{"lineNumber":187,"author":{"gitId":"pyuxiang"},"content":"        Optional\u003cString\u003e orderType \u003d argMap.getValue(PREFIX_ORDER);","lastModifiedDate":"2021-03-20"},{"lineNumber":188,"author":{"gitId":"Ellevy"},"content":"        if (orderType.isEmpty() || comparator \u003d\u003d SORT_BIRTHDAY_UPCOMING) {","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"Ellevy"},"content":"            if (!stringSort.isEmpty() \u0026\u0026 comparator !\u003d SORT_BIRTHDAY_UPCOMING) {","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"Ellevy"},"content":"                stringSort +\u003d \"in ascending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"pyuxiang"},"content":"            return comparator; // default","lastModifiedDate":"2021-03-20"},{"lineNumber":193,"author":{"gitId":"pyuxiang"},"content":"        } else {","lastModifiedDate":"2021-03-20"},{"lineNumber":194,"author":{"gitId":"pyuxiang"},"content":"            switch (orderType.get().toLowerCase()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":195,"author":{"gitId":"pyuxiang"},"content":"            case \"a\": // fallthrough","lastModifiedDate":"2021-03-20"},{"lineNumber":196,"author":{"gitId":"pyuxiang"},"content":"            case \"asc\":","lastModifiedDate":"2021-03-20"},{"lineNumber":197,"author":{"gitId":"pyuxiang"},"content":"            case \"ascending\":","lastModifiedDate":"2021-03-20"},{"lineNumber":198,"author":{"gitId":"Ellevy"},"content":"                if (stringSort.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"Ellevy"},"content":"                    stringSort +\u003d \"Sorted names in ascending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"Ellevy"},"content":"                } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"Ellevy"},"content":"                    stringSort +\u003d \"in ascending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"Ellevy"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":203,"author":{"gitId":"pyuxiang"},"content":"                return comparator;","lastModifiedDate":"2021-03-20"},{"lineNumber":204,"author":{"gitId":"pyuxiang"},"content":"            case \"d\": // fallthrough","lastModifiedDate":"2021-03-20"},{"lineNumber":205,"author":{"gitId":"pyuxiang"},"content":"            case \"des\":","lastModifiedDate":"2021-03-20"},{"lineNumber":206,"author":{"gitId":"pyuxiang"},"content":"            case \"desc\":","lastModifiedDate":"2021-03-20"},{"lineNumber":207,"author":{"gitId":"pyuxiang"},"content":"            case \"descending\":","lastModifiedDate":"2021-03-20"},{"lineNumber":208,"author":{"gitId":"Ellevy"},"content":"                if (stringSort.isEmpty()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"Ellevy"},"content":"                    stringSort +\u003d \"Sorted names in descending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":210,"author":{"gitId":"Ellevy"},"content":"                } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":211,"author":{"gitId":"Ellevy"},"content":"                    stringSort +\u003d \"in descending order. \";","lastModifiedDate":"2021-03-30"},{"lineNumber":212,"author":{"gitId":"Ellevy"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":213,"author":{"gitId":"pyuxiang"},"content":"                return comparator.reversed();","lastModifiedDate":"2021-03-20"},{"lineNumber":214,"author":{"gitId":"pyuxiang"},"content":"            default:","lastModifiedDate":"2021-03-20"},{"lineNumber":215,"author":{"gitId":"pyuxiang"},"content":"                throw new ParseException(","lastModifiedDate":"2021-03-20"},{"lineNumber":216,"author":{"gitId":"pyuxiang"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-20"},{"lineNumber":217,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-20"},{"lineNumber":218,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":219,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":220,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"glennljs":27,"pyuxiang":133,"garyljj":6,"Ellevy":54}},{"path":"src/main/java/seedu/partyplanet/logic/parser/ListCommandUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-04-04"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.util.List;","lastModifiedDate":"2021-04-04"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-04-04"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"public class ListCommandUtil {","lastModifiedDate":"2021-04-04"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * Returns a list of parsed name strings from the argument map.","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public static List\u003cString\u003e getParsedNames(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-04-04"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e names \u003d argMap.getAllValues(PREFIX_NAME);","lastModifiedDate":"2021-04-04"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        for (int i \u003d 0; i \u003c names.size(); i++) {","lastModifiedDate":"2021-04-04"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"            String name \u003d names.get(i);","lastModifiedDate":"2021-04-04"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"            names.set(i, ParserUtil.parseName(name).fullName);","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        return names;","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * Returns a list of parsed tag strings from the argument map.","lastModifiedDate":"2021-04-04"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    public static List\u003cString\u003e getParsedTags(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-04-04"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e tags \u003d argMap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2021-04-04"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        return ParserUtil.parseTags(tags)","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"                .stream()","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"                .map(x -\u003e x.tagName)","lastModifiedDate":"2021-04-04"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-04-04"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     * Returns a list of parsed remarks from the argument map.","lastModifiedDate":"2021-04-04"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    public static List\u003cString\u003e getParsedRemarks(ArgumentMultimap argMap) throws ParseException {","lastModifiedDate":"2021-04-04"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e remarks \u003d argMap.getAllValues(PREFIX_REMARK);","lastModifiedDate":"2021-04-04"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        for (int i \u003d 0; i \u003c remarks.size(); i++) {","lastModifiedDate":"2021-04-04"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            String remark \u003d remarks.get(i);","lastModifiedDate":"2021-04-04"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            remarks.set(i, ParserUtil.parseRemark(remark).value);","lastModifiedDate":"2021-04-04"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-04-04"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        return remarks;","lastModifiedDate":"2021-04-04"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"pyuxiang":48}},{"path":"src/main/java/seedu/partyplanet/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.Command;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"garyljj":3,"-":13}},{"path":"src/main/java/seedu/partyplanet/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.model.date.Date.EMPTY_MONTH;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.model.date.Date.MONTH_NAME_MAPPING;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.StringUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.date.Date;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.EventDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Birthday;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_INVALID_MONTH \u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            \"Number is not a valid month, or an integer ranging from [0, 12].\";","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     * Parses {@code input} into an {@code int} month value and returns it.","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     * If no input is specified (or 0 is specified), the method will return an empty month value.","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     * @throws ParseException if the specified number is not a valid month nor integer in [0, 12].","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    public static int parseMonthInteger(String input) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        String trimmedInput \u003d input.trim().toLowerCase();","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        if (trimmedInput.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"            return Date.EMPTY_MONTH;","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        // Check if is month name","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        if (MONTH_NAME_MAPPING.containsKey(trimmedInput)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"            return MONTH_NAME_MAPPING.get(trimmedInput);","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"        // Most general, check if is integer","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"        int monthValue;","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        try {","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"            monthValue \u003d Integer.parseInt(trimmedInput);","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"            if (monthValue \u003d\u003d 0) {","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"                return EMPTY_MONTH;","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"            throw new ParseException(MESSAGE_INVALID_MONTH);","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"        if (!((1 \u003c\u003d monthValue) \u0026\u0026 (monthValue \u003c\u003d 12))) {","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"            throw new ParseException(MESSAGE_INVALID_MONTH);","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"        return monthValue;","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"     * Returns default empty phone if phone is not specified.","lastModifiedDate":"2021-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"        if (phone \u003d\u003d Phone.EMPTY_PHONE_STRING) {","lastModifiedDate":"2021-03-08"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"            return Phone.EMPTY_PHONE;","lastModifiedDate":"2021-03-08"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        } else if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"     * Returns default empty address if address is not specified.","lastModifiedDate":"2021-03-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"        if (address \u003d\u003d Address.EMPTY_ADDRESS_STRING) {","lastModifiedDate":"2021-03-08"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"            return Address.EMPTY_ADDRESS;","lastModifiedDate":"2021-03-08"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"        } else if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"     * Parses a {@code String remark} into a {@code Remark}.","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"     * Returns default empty remark if remark is not specified.","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"     * @throws ParseException if the given {@code Remark} is invalid.","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":"    public static Remark parseRemark(String remark) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(remark);","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"        String trimmedRemark \u003d remark.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"Ellevy"},"content":"        if (remark \u003d\u003d Remark.EMPTY_REMARK_STRING) {","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"Ellevy"},"content":"            return Remark.EMPTY_REMARK;","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"Ellevy"},"content":"        } else if (!Remark.isValidRemark(trimmedRemark)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"Ellevy"},"content":"            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"Ellevy"},"content":"        return new Remark(trimmedRemark);","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"Ellevy"},"content":"     * Returns default empty email if email is not specified.","lastModifiedDate":"2021-03-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"Ellevy"},"content":"        if (email \u003d\u003d Email.EMPTY_EMAIL_STRING) {","lastModifiedDate":"2021-03-08"},{"lineNumber":161,"author":{"gitId":"Ellevy"},"content":"            return Email.EMPTY_EMAIL;","lastModifiedDate":"2021-03-08"},{"lineNumber":162,"author":{"gitId":"Ellevy"},"content":"        } else if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":169,"author":{"gitId":"nickyfoo"},"content":"     * Parses a {@code String eventDate} into an {@code Date}.","lastModifiedDate":"2021-03-22"},{"lineNumber":170,"author":{"gitId":"nickyfoo"},"content":"     * Returns default empty eventDate if eventDate is not specified.","lastModifiedDate":"2021-03-22"},{"lineNumber":171,"author":{"gitId":"nickyfoo"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-21"},{"lineNumber":172,"author":{"gitId":"nickyfoo"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":173,"author":{"gitId":"nickyfoo"},"content":"     * @throws ParseException if the given {@code eventDate} is invalid.","lastModifiedDate":"2021-03-22"},{"lineNumber":174,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":175,"author":{"gitId":"nickyfoo"},"content":"    public static EventDate parseEventDate(String eventDate) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":176,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(eventDate);","lastModifiedDate":"2021-03-22"},{"lineNumber":177,"author":{"gitId":"nickyfoo"},"content":"        String trimmedDate \u003d eventDate.trim();","lastModifiedDate":"2021-03-22"},{"lineNumber":178,"author":{"gitId":"nickyfoo"},"content":"        if (eventDate \u003d\u003d EventDate.EMPTY_DATE_STRING) {","lastModifiedDate":"2021-03-22"},{"lineNumber":179,"author":{"gitId":"nickyfoo"},"content":"            return EventDate.EMPTY_EVENT_DATE;","lastModifiedDate":"2021-03-21"},{"lineNumber":180,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":181,"author":{"gitId":"nickyfoo"},"content":"        try {","lastModifiedDate":"2021-03-21"},{"lineNumber":182,"author":{"gitId":"nickyfoo"},"content":"            return new EventDate(trimmedDate);","lastModifiedDate":"2021-03-21"},{"lineNumber":183,"author":{"gitId":"nickyfoo"},"content":"        } catch (DateTimeException err) { // eventDate in wrong format","lastModifiedDate":"2021-03-22"},{"lineNumber":184,"author":{"gitId":"nickyfoo"},"content":"            throw new ParseException(EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":185,"author":{"gitId":"nickyfoo"},"content":"        } catch (IllegalArgumentException err) { // no year field;","lastModifiedDate":"2021-03-22"},{"lineNumber":186,"author":{"gitId":"nickyfoo"},"content":"            throw new ParseException(EventDate.MESSAGE_YEAR_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":187,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":188,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":189,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":190,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":191,"author":{"gitId":"zhengruoxin"},"content":"     * Parses a {@code String birthday} into an {@code Birthday}.","lastModifiedDate":"2021-03-09"},{"lineNumber":192,"author":{"gitId":"zhengruoxin"},"content":"     * Returns default empty birthday if birthday is not specified.","lastModifiedDate":"2021-03-09"},{"lineNumber":193,"author":{"gitId":"zhengruoxin"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":194,"author":{"gitId":"zhengruoxin"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":195,"author":{"gitId":"zhengruoxin"},"content":"     * @throws ParseException if the given {@code birthday} is invalid.","lastModifiedDate":"2021-03-09"},{"lineNumber":196,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":197,"author":{"gitId":"zhengruoxin"},"content":"    public static Birthday parseBirthday(String birthday) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":198,"author":{"gitId":"zhengruoxin"},"content":"        requireNonNull(birthday);","lastModifiedDate":"2021-03-09"},{"lineNumber":199,"author":{"gitId":"zhengruoxin"},"content":"        String trimmedBirthday \u003d birthday.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":200,"author":{"gitId":"nickyfoo"},"content":"        if (birthday \u003d\u003d Birthday.EMPTY_DATE_STRING) {","lastModifiedDate":"2021-03-22"},{"lineNumber":201,"author":{"gitId":"zhengruoxin"},"content":"            return Birthday.EMPTY_BIRTHDAY;","lastModifiedDate":"2021-03-09"},{"lineNumber":202,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":203,"author":{"gitId":"zhengruoxin"},"content":"        try {","lastModifiedDate":"2021-03-09"},{"lineNumber":204,"author":{"gitId":"zhengruoxin"},"content":"            return new Birthday(trimmedBirthday);","lastModifiedDate":"2021-03-09"},{"lineNumber":205,"author":{"gitId":"zhengruoxin"},"content":"        } catch (DateTimeException err) { // date in wrong format","lastModifiedDate":"2021-03-12"},{"lineNumber":206,"author":{"gitId":"zhengruoxin"},"content":"            throw new ParseException((Birthday.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2021-03-15"},{"lineNumber":207,"author":{"gitId":"pyuxiang"},"content":"        } catch (IllegalArgumentException err) { // birthday is in the future","lastModifiedDate":"2021-03-19"},{"lineNumber":208,"author":{"gitId":"nickyfoo"},"content":"            throw new ParseException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":209,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":210,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":211,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"zhengruoxin":20,"pyuxiang":40,"nickyfoo":25,"garyljj":10,"-":112,"Ellevy":31}},{"path":"src/main/java/seedu/partyplanet/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" * E.g. \u0027-t\u0027 in \u0027add James -t friend\u0027.","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    private static final Set\u003cString\u003e allPrefixes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    private final String representativePrefix;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    private final HashSet\u003cString\u003e prefixes;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * Empty constructor for placeholder prefixes.","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * Used for placeholders, when a generic prefix is needed.","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public Prefix() {","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        this.representativePrefix \u003d \"\";","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        this.prefixes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * Basic Prefix constructor.","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * Should never be initialized by user / user routine, due to checks on prefix duplicates","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * for developer safety. Where a generic Prefix is required, use the empty constructor {@code Prefix()} instead.","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     * @param prefix The prefix string representing the Prefix","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     * @param altPrefixes Array of alternate prefix aliases","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    public Prefix(String prefix, String... altPrefixes) {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        requireNonNull(prefix);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        assert !prefix.equals(\"\"); // ensure default value of empty constructor never initialized","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        this.representativePrefix \u003d prefix;","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        this.prefixes \u003d new HashSet\u003c\u003e(Arrays.asList(altPrefixes));","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        this.prefixes.add(prefix);","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        assertNoDuplicatePrefixes(this.prefixes);","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     * Raises runtime assertion if initialization of prefixes contain duplicates, for developer safety.","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     * @param prefixes Set of new prefix strings.","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"    private static void assertNoDuplicatePrefixes(Set\u003cString\u003e prefixes) {","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        int previousSize \u003d allPrefixes.size();","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        allPrefixes.addAll(prefixes);","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        assert allPrefixes.size() \u003d\u003d previousSize + prefixes.size();","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     * Returns the representative prefix representing the set of prefixes.","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        return representativePrefix;","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     * Returns all equivalent forms of the same prefix.","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    public Set\u003cString\u003e getPrefixes() {","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        return this.prefixes;","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        return representativePrefix.hashCode();","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"pyuxiang":59,"garyljj":1,"-":32}},{"path":"src/main/java/seedu/partyplanet/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser.exceptions;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"garyljj":2,"-":15}},{"path":"src/main/java/seedu/partyplanet/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.UniquePersonList;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":97,"author":{"gitId":"glennljs"},"content":"     * Sorts the {@code AddressBook} by the given {@code comparator}","lastModifiedDate":"2021-03-09"},{"lineNumber":98,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":99,"author":{"gitId":"glennljs"},"content":"    public void sort(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-03-09"},{"lineNumber":100,"author":{"gitId":"glennljs"},"content":"        persons.sort(comparator);","lastModifiedDate":"2021-03-09"},{"lineNumber":101,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":102,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"glennljs":8,"garyljj":3,"-":116}},{"path":"src/main/java/seedu/partyplanet/model/EventBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.UniqueEventList;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":" * Wraps all data at the event-book level","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":" * Duplicates are not allowed (by .isSameEvent comparison)","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"public class EventBook implements ReadOnlyEventBook {","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(EventBook.class);","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    private final UniqueEventList events;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    /*","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     *   among constructors.","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    {","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"        events \u003d new UniqueEventList();","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    public EventBook() {}","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * Creates an AddressBook using the Events in the {@code toBeCopied}","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    public EventBook(ReadOnlyEventBook toBeCopied) {","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        this();","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    //// list overwrite operations","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     * Replaces the contents of the event list with {@code events}.","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"        this.events.setEvents(events);","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"     * Resets the existing data of this {@code EventBook} with {@code newData}.","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"    public void resetData(ReadOnlyEventBook newData) {","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"        setEvents(newData.getEventList());","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"    //// event-level operations","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"     * Returns true if a event with the same identity as {@code event} exists in the event book.","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"        return events.contains(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"     * Adds a event to the event book.","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"     * The event must not already exist in the event book.","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"    public void addEvent(Event e) {","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"        events.add(e);","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"     * Replaces the given event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2021-03-19"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"     * {@code target} must exist in the event book.","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"     * The event name of {@code editedEvent} must not be the same as another existing event in the event book.","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(editedEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"        events.setEvent(target, editedEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-03-19"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"     * {@code key} must exist in the event book.","lastModifiedDate":"2021-03-19"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"    public void removeEvent(Event key) {","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"        events.remove(key);","lastModifiedDate":"2021-03-19"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"     * Sorts the {@code AddressBook} by the given {@code comparator}","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"    public void sort(Comparator\u003cEvent\u003e comparator) {","lastModifiedDate":"2021-03-19"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"        events.sort(comparator);","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":107,"author":{"gitId":"nickyfoo"},"content":"    //// util methods","lastModifiedDate":"2021-03-19"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {","lastModifiedDate":"2021-03-19"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"        return events.asUnmodifiableObservableList().size() + \" events\";","lastModifiedDate":"2021-03-19"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"        // TODO: refine later","lastModifiedDate":"2021-03-19"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":115,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2021-03-19"},{"lineNumber":117,"author":{"gitId":"nickyfoo"},"content":"        return events.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-19"},{"lineNumber":118,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":119,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":120,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":121,"author":{"gitId":"nickyfoo"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-19"},{"lineNumber":122,"author":{"gitId":"nickyfoo"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-19"},{"lineNumber":123,"author":{"gitId":"nickyfoo"},"content":"                || (other instanceof EventBook // instanceof handles nulls","lastModifiedDate":"2021-03-19"},{"lineNumber":124,"author":{"gitId":"nickyfoo"},"content":"                \u0026\u0026 events.equals(((EventBook) other).events));","lastModifiedDate":"2021-03-19"},{"lineNumber":125,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":126,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":127,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":128,"author":{"gitId":"nickyfoo"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-19"},{"lineNumber":129,"author":{"gitId":"nickyfoo"},"content":"        return events.hashCode();","lastModifiedDate":"2021-03-19"},{"lineNumber":130,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":131,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":131}},{"path":"src/main/java/seedu/partyplanet/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     * Returns true if a person with the same identity as {@code person} exists in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     * The person must exist in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"     * {@code person} must not already exist in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"     * {@code target} must exist in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"    /** Returns a copy of the person list */","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"    List\u003cPerson\u003e getPersonListCopy();","lastModifiedDate":"2021-03-08"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":97,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":98,"author":{"gitId":"glennljs"},"content":"     * Sorts the filtered person list to be sorted by the given {@code comparator}.","lastModifiedDate":"2021-03-09"},{"lineNumber":99,"author":{"gitId":"glennljs"},"content":"     * @throws NullPointerException if {@code comparator} is null.","lastModifiedDate":"2021-03-09"},{"lineNumber":100,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":101,"author":{"gitId":"glennljs"},"content":"    void sortPersonList(Comparator\u003cPerson\u003e comparator);","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"     * Returns the user prefs\u0027 event book file path.","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"    Path getEventBookFilePath();","lastModifiedDate":"2021-03-19"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"     * Sets the user prefs\u0027 event book file path.","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"    void setEventBookFilePath(Path eventBookFilePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"     * Replaces event book data with the data in {@code eventbook}.","lastModifiedDate":"2021-03-19"},{"lineNumber":115,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"    void setEventBook(ReadOnlyEventBook eventBook);","lastModifiedDate":"2021-03-19"},{"lineNumber":117,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":118,"author":{"gitId":"nickyfoo"},"content":"    /** Returns the EventBook */","lastModifiedDate":"2021-03-19"},{"lineNumber":119,"author":{"gitId":"nickyfoo"},"content":"    ReadOnlyEventBook getEventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":120,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":121,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":122,"author":{"gitId":"nickyfoo"},"content":"     * Returns true if a event with the same identity as {@code event} exists in PartyPlanet.","lastModifiedDate":"2021-03-19"},{"lineNumber":123,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":124,"author":{"gitId":"nickyfoo"},"content":"    boolean hasEvent(Event event);","lastModifiedDate":"2021-03-19"},{"lineNumber":125,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":126,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":127,"author":{"gitId":"nickyfoo"},"content":"     * Deletes the given event.","lastModifiedDate":"2021-03-19"},{"lineNumber":128,"author":{"gitId":"nickyfoo"},"content":"     * The event must exist in PartyPlanet.","lastModifiedDate":"2021-03-19"},{"lineNumber":129,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":130,"author":{"gitId":"nickyfoo"},"content":"    void deleteEvent(Event target);","lastModifiedDate":"2021-03-19"},{"lineNumber":131,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":132,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":133,"author":{"gitId":"nickyfoo"},"content":"     * Adds the given event.","lastModifiedDate":"2021-03-19"},{"lineNumber":134,"author":{"gitId":"nickyfoo"},"content":"     * {@code event} must not already exist in PartyPlanet.","lastModifiedDate":"2021-03-19"},{"lineNumber":135,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":136,"author":{"gitId":"nickyfoo"},"content":"    void addEvent(Event event);","lastModifiedDate":"2021-03-19"},{"lineNumber":137,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":138,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":139,"author":{"gitId":"nickyfoo"},"content":"     * Replaces the given event {@code target} with {@code editedEvent}.","lastModifiedDate":"2021-03-19"},{"lineNumber":140,"author":{"gitId":"nickyfoo"},"content":"     * {@code target} must exist in PartyPlanet.","lastModifiedDate":"2021-03-19"},{"lineNumber":141,"author":{"gitId":"nickyfoo"},"content":"     * The event name of {@code editedEvent} must not be the same as another existing event in PartyPlanet.","lastModifiedDate":"2021-03-19"},{"lineNumber":142,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":143,"author":{"gitId":"nickyfoo"},"content":"    void setEvent(Event target, Event editedEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":144,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":145,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":146,"author":{"gitId":"nickyfoo"},"content":"    /** Returns an unmodifiable view of the filtered event list */","lastModifiedDate":"2021-03-19"},{"lineNumber":147,"author":{"gitId":"nickyfoo"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();","lastModifiedDate":"2021-03-19"},{"lineNumber":148,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":149,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":150,"author":{"gitId":"nickyfoo"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-19"},{"lineNumber":151,"author":{"gitId":"nickyfoo"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-03-19"},{"lineNumber":152,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":153,"author":{"gitId":"nickyfoo"},"content":"    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);","lastModifiedDate":"2021-03-19"},{"lineNumber":154,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":155,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":156,"author":{"gitId":"nickyfoo"},"content":"     * Sorts the filtered event list to be sorted by the given {@code comparator}.","lastModifiedDate":"2021-03-19"},{"lineNumber":157,"author":{"gitId":"nickyfoo"},"content":"     * @throws NullPointerException if {@code comparator} is null.","lastModifiedDate":"2021-03-19"},{"lineNumber":158,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":159,"author":{"gitId":"nickyfoo"},"content":"    void sortEventList(Comparator\u003cEvent\u003e comparator);","lastModifiedDate":"2021-03-19"},{"lineNumber":160,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":161,"author":{"gitId":"nickyfoo"},"content":"    /** Returns a copy of the person list */","lastModifiedDate":"2021-03-19"},{"lineNumber":162,"author":{"gitId":"nickyfoo"},"content":"    List\u003cEvent\u003e getEventListCopy();","lastModifiedDate":"2021-03-19"},{"lineNumber":163,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":164,"author":{"gitId":"nickyfoo"},"content":"    /** Adds the current state to the StateHistory","lastModifiedDate":"2021-03-28"},{"lineNumber":165,"author":{"gitId":"nickyfoo"},"content":"     * @param command the command leading to this state.","lastModifiedDate":"2021-03-28"},{"lineNumber":166,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":167,"author":{"gitId":"nickyfoo"},"content":"    void addState(String command);","lastModifiedDate":"2021-03-28"},{"lineNumber":168,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":169,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"nickyfoo"},"content":"     * Undoes the last change made to the address or event book.","lastModifiedDate":"2021-03-29"},{"lineNumber":171,"author":{"gitId":"nickyfoo"},"content":"     * @return information about the command being undone.","lastModifiedDate":"2021-03-29"},{"lineNumber":172,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":173,"author":{"gitId":"nickyfoo"},"content":"    String undo();","lastModifiedDate":"2021-03-29"},{"lineNumber":174,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":175,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"nickyfoo"},"content":"     * Redoes the last undid change made to the address or event book.","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"nickyfoo"},"content":"     * @return information about the command being redone.","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"nickyfoo"},"content":"    String redo();","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"glennljs":7,"nickyfoo":73,"garyljj":11,"-":79,"Ellevy":10}},{"path":"src/main/java/seedu/partyplanet/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.commons.util.State;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.commons.util.StateHistory;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":" * Represents the in-memory model of PartyPlanet data.","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    private final EventBook eventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    private final StateHistory stateHistory;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvents;","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * Initializes a ModelManager with the given addressBook, eventBook and userPrefs.","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyEventBook eventBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \", event book: \" + eventBook","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        this.eventBook \u003d new EventBook(eventBook);","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"        State savedState \u003d new State(\"Loading from saved data\", addressBook, eventBook);","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"        this.stateHistory \u003d new StateHistory(savedState);","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.eventBook.getEventList());","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"        this(new AddressBook(), new EventBook(), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"    public Path getEventBookFilePath() {","lastModifiedDate":"2021-03-19"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"        return userPrefs.getEventBookFilePath();","lastModifiedDate":"2021-03-19"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"    public void setEventBookFilePath(Path eventBookFilePath) {","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(eventBookFilePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        userPrefs.setEventBookFilePath(eventBookFilePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"        return this.addressBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":118,"author":{"gitId":"nickyfoo"},"content":"        return this.addressBook.hasPerson(person);","lastModifiedDate":"2021-03-28"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":138,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"nickyfoo"},"content":"    public void addState(String command) {","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"nickyfoo"},"content":"        stateHistory.addState(new State(command, addressBook, eventBook));","lastModifiedDate":"2021-03-28"},{"lineNumber":141,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"nickyfoo"},"content":"    public String undo() throws IndexOutOfBoundsException {","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"nickyfoo"},"content":"        State previousState;","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"nickyfoo"},"content":"        String command \u003d stateHistory.currentState().getCommand();","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"nickyfoo"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":148,"author":{"gitId":"nickyfoo"},"content":"            previousState \u003d stateHistory.previousState();","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"nickyfoo"},"content":"            setAddressBook(previousState.getAddressBook());","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"nickyfoo"},"content":"            setEventBook(previousState.getEventBook());","lastModifiedDate":"2021-03-29"},{"lineNumber":151,"author":{"gitId":"nickyfoo"},"content":"            return command;","lastModifiedDate":"2021-03-29"},{"lineNumber":152,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":153,"author":{"gitId":"nickyfoo"},"content":"            throw e;","lastModifiedDate":"2021-03-29"},{"lineNumber":154,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":156,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":158,"author":{"gitId":"nickyfoo"},"content":"    public String redo() throws IndexOutOfBoundsException {","lastModifiedDate":"2021-03-29"},{"lineNumber":159,"author":{"gitId":"nickyfoo"},"content":"        State nextState;","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"nickyfoo"},"content":"        String command;","lastModifiedDate":"2021-03-29"},{"lineNumber":161,"author":{"gitId":"nickyfoo"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":162,"author":{"gitId":"nickyfoo"},"content":"            nextState \u003d stateHistory.nextState();","lastModifiedDate":"2021-03-29"},{"lineNumber":163,"author":{"gitId":"nickyfoo"},"content":"            command \u003d nextState.getCommand();","lastModifiedDate":"2021-03-29"},{"lineNumber":164,"author":{"gitId":"nickyfoo"},"content":"            setAddressBook(nextState.getAddressBook());","lastModifiedDate":"2021-03-29"},{"lineNumber":165,"author":{"gitId":"nickyfoo"},"content":"            setEventBook(nextState.getEventBook());","lastModifiedDate":"2021-03-29"},{"lineNumber":166,"author":{"gitId":"nickyfoo"},"content":"            return command;","lastModifiedDate":"2021-03-29"},{"lineNumber":167,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":168,"author":{"gitId":"nickyfoo"},"content":"            throw e;","lastModifiedDate":"2021-03-29"},{"lineNumber":169,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":171,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":172,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":191,"author":{"gitId":"glennljs"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":192,"author":{"gitId":"glennljs"},"content":"    public void sortPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-03-10"},{"lineNumber":193,"author":{"gitId":"glennljs"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2021-03-09"},{"lineNumber":194,"author":{"gitId":"glennljs"},"content":"        addressBook.sort(comparator);","lastModifiedDate":"2021-03-09"},{"lineNumber":195,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":196,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":197,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":198,"author":{"gitId":"garyljj"},"content":"    public List\u003cPerson\u003e getPersonListCopy() {","lastModifiedDate":"2021-03-08"},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"        return new ArrayList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2021-03-08"},{"lineNumber":200,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":201,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":202,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":203,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":204,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":205,"author":{"gitId":"nickyfoo"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":206,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":207,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":208,"author":{"gitId":"nickyfoo"},"content":"    public void setEventBook(ReadOnlyEventBook eventBook) {","lastModifiedDate":"2021-03-19"},{"lineNumber":209,"author":{"gitId":"nickyfoo"},"content":"        this.eventBook.resetData(eventBook);","lastModifiedDate":"2021-03-19"},{"lineNumber":210,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":211,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":212,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":213,"author":{"gitId":"nickyfoo"},"content":"    public ReadOnlyEventBook getEventBook() {","lastModifiedDate":"2021-03-19"},{"lineNumber":214,"author":{"gitId":"nickyfoo"},"content":"        return eventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":215,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":216,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":217,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":218,"author":{"gitId":"nickyfoo"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2021-03-19"},{"lineNumber":219,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":220,"author":{"gitId":"nickyfoo"},"content":"        return eventBook.hasEvent(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":221,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":222,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":223,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":224,"author":{"gitId":"nickyfoo"},"content":"    public void deleteEvent(Event target) {","lastModifiedDate":"2021-03-19"},{"lineNumber":225,"author":{"gitId":"nickyfoo"},"content":"        eventBook.removeEvent(target);","lastModifiedDate":"2021-03-19"},{"lineNumber":226,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":227,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":228,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":229,"author":{"gitId":"nickyfoo"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2021-03-19"},{"lineNumber":230,"author":{"gitId":"nickyfoo"},"content":"        eventBook.addEvent(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":231,"author":{"gitId":"nickyfoo"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-03-19"},{"lineNumber":232,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":233,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":234,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":235,"author":{"gitId":"nickyfoo"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-03-19"},{"lineNumber":236,"author":{"gitId":"nickyfoo"},"content":"        requireAllNonNull(target, editedEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":237,"author":{"gitId":"nickyfoo"},"content":"        eventBook.setEvent(target, editedEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":238,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":239,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":240,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":241,"author":{"gitId":"nickyfoo"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":242,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":243,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":244,"author":{"gitId":"nickyfoo"},"content":"     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of","lastModifiedDate":"2021-03-19"},{"lineNumber":245,"author":{"gitId":"nickyfoo"},"content":"     * {@code versionedEventBook}","lastModifiedDate":"2021-03-19"},{"lineNumber":246,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":247,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":248,"author":{"gitId":"nickyfoo"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-03-19"},{"lineNumber":249,"author":{"gitId":"nickyfoo"},"content":"        return filteredEvents;","lastModifiedDate":"2021-03-19"},{"lineNumber":250,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":251,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":252,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":253,"author":{"gitId":"nickyfoo"},"content":"    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-03-19"},{"lineNumber":254,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-19"},{"lineNumber":255,"author":{"gitId":"nickyfoo"},"content":"        filteredEvents.setPredicate(predicate);","lastModifiedDate":"2021-03-19"},{"lineNumber":256,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":257,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":258,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":259,"author":{"gitId":"nickyfoo"},"content":"    public void sortEventList(Comparator\u003cEvent\u003e comparator) {","lastModifiedDate":"2021-03-19"},{"lineNumber":260,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2021-03-19"},{"lineNumber":261,"author":{"gitId":"nickyfoo"},"content":"        eventBook.sort(comparator);","lastModifiedDate":"2021-03-19"},{"lineNumber":262,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":263,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":264,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":265,"author":{"gitId":"nickyfoo"},"content":"    public List\u003cEvent\u003e getEventListCopy() {","lastModifiedDate":"2021-03-19"},{"lineNumber":266,"author":{"gitId":"nickyfoo"},"content":"        return new ArrayList\u003c\u003e(this.eventBook.getEventList());","lastModifiedDate":"2021-03-19"},{"lineNumber":267,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":268,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":269,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":285,"author":{"gitId":"nickyfoo"},"content":"                \u0026\u0026 eventBook.equals(other.eventBook)","lastModifiedDate":"2021-03-19"},{"lineNumber":286,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":287,"author":{"gitId":"nickyfoo"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2021-03-19"},{"lineNumber":288,"author":{"gitId":"nickyfoo"},"content":"                \u0026\u0026 filteredEvents.equals(other.filteredEvents);","lastModifiedDate":"2021-03-19"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"glennljs":7,"nickyfoo":118,"garyljj":13,"-":136,"Ellevy":17}},{"path":"src/main/java/seedu/partyplanet/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":2,"-":15}},{"path":"src/main/java/seedu/partyplanet/model/ReadOnlyEventBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" * Unmodifiable view of an event book","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"public interface ReadOnlyEventBook {","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":17}},{"path":"src/main/java/seedu/partyplanet/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"garyljj":2,"-":14}},{"path":"src/main/java/seedu/partyplanet/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    private Path eventBookFilePath \u003d Paths.get(\"data\" , \"eventbook.json\");","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    public Path getEventBookFilePath() {","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        return eventBookFilePath;","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    public void setEventBookFilePath(Path eventBookFilePath) {","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(eventBookFilePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        this.eventBookFilePath \u003d eventBookFilePath;","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 eventBookFilePath.equals(o.eventBookFilePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, eventBookFilePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        sb.append(\"\\nLocal data file location : \" + eventBookFilePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":2,"-":83,"Ellevy":14}},{"path":"src/main/java/seedu/partyplanet/model/date/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.model.date;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static java.util.Map.entry;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import java.time.MonthDay;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"/** Represents a Date in PartyPlanet.","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":" * Guarantees: immutable; is always valid.","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"public class Date implements Comparable\u003cDate\u003e {","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_YEAR_FORMATS \u003d \"    - yyyy-mm-dd (ISO format)\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"            + \"    - dd.mm.yyyy\\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"            + \"    - dd/mm/yyyy\\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"            + \"    - dd mmm yyyy\\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"            + \"    - mmm dd yyyy\";","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_NOYEAR_FORMATS \u003d \"    - --mm-dd (ISO format)\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"            + \"    - dd.mm\\n\"","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"            + \"    - dd/mm\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"            + \"    - dd mmm\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            + \"    - mmm dd\";","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be in one of the following formats:\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"            + MESSAGE_YEAR_FORMATS + \"\\n\" + MESSAGE_NOYEAR_FORMATS;","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    public static final String EMPTY_DATE_STRING \u003d \"\";","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    public static final Map\u003cString, Integer\u003e MONTH_NAME_MAPPING \u003d Map.ofEntries(","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            entry(\"jan\", 1),","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            entry(\"january\", 1),","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            entry(\"feb\", 2),","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"            entry(\"february\", 2),","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"            entry(\"mar\", 3),","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            entry(\"march\", 3),","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            entry(\"apr\", 4),","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            entry(\"april\", 4),","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            entry(\"may\", 5),","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            entry(\"jun\", 6),","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            entry(\"june\", 6),","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            entry(\"jul\", 7),","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            entry(\"july\", 7),","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            entry(\"aug\", 8),","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            entry(\"august\", 8),","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"            entry(\"sep\", 9),","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"            entry(\"september\", 9),","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"            entry(\"oct\", 10),","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            entry(\"october\", 10),","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            entry(\"nov\", 11),","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            entry(\"november\", 11),","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            entry(\"dec\", 12),","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"            entry(\"december\", 12)","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    );","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    public static final int EMPTY_MONTH \u003d 0;","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"    protected static final int MIN_YEAR \u003d 1;","lastModifiedDate":"2021-04-04"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    protected static final int NON_YEAR \u003d 0;","lastModifiedDate":"2021-04-04"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"    protected static final DateTimeFormatter[] VALID_FORMATS \u003d new DateTimeFormatter[] {","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"d.M.yyyy\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"d/M/yyyy\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM yyyy\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"MMM d yyyy\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"MMMM d yyyy\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"    };","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"    protected static final DateTimeFormatter[] VALID_FORMATS_WITHOUT_YEAR \u003d new DateTimeFormatter[] {","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"--MM-dd\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d.M\"),","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"d/M\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"d MMM\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"MMM d\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"            DateTimeFormatter.ofPattern(\"MMMM d\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"    };","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"    protected static final DateTimeFormatter READABLE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"    protected static final DateTimeFormatter READABLE_FORMAT_WITHOUT_YEAR \u003d DateTimeFormatter.ofPattern(\"d MMM\");","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"    /** In \"dd mmm yyyy\" formatted string for human-readable display */","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"    public final String value;","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"    protected LocalDate dateValue;","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"    protected boolean isEmpty \u003d false;","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"     * Constructs an empty date.","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"    public Date() {","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"        value \u003d EMPTY_DATE_STRING;","lastModifiedDate":"2021-03-26"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"        isEmpty \u003d true;","lastModifiedDate":"2021-03-26"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"     * Constructs a {@code Date}.","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"     * Date can optionally contain a year.","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"     * Some invalid dates are mapped to the nearest valid date, e.g. 29 Feb 2021 -\u003e 28 Feb 2021.","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"     * @param inputDate A valid date string.","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"    public Date(String inputDate) {","lastModifiedDate":"2021-03-26"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(inputDate);","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"        dateValue \u003d parseDate(inputDate);","lastModifiedDate":"2021-03-26"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"        if (dateValue.getYear() \u003d\u003d NON_YEAR) {","lastModifiedDate":"2021-03-26"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"            value \u003d READABLE_FORMAT_WITHOUT_YEAR.format(dateValue);","lastModifiedDate":"2021-03-26"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"        } else {","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"            value \u003d READABLE_FORMAT.format(dateValue);","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"     * Returns true if a given string is a valid date, otherwise false.","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"     * Implemented for unit testing.","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"    public static boolean isValidDate(String test) {","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"        try {","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"            parseDate(test);","lastModifiedDate":"2021-03-26"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"            return true;","lastModifiedDate":"2021-03-26"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2021-03-26"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"            return false;","lastModifiedDate":"2021-03-26"},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":124,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":126,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":127,"author":{"gitId":"nickyfoo"},"content":"     * Attempts to match {@code date} to any parsing rule.","lastModifiedDate":"2021-03-21"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"     * If valid, a LocalDate is returned, otherwise a DateTimeException will be thrown.","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"    public static LocalDate parseDate(String date) throws DateTimeException {","lastModifiedDate":"2021-03-26"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"        date \u003d toTitleCase(date);","lastModifiedDate":"2021-03-26"},{"lineNumber":132,"author":{"gitId":"nickyfoo"},"content":"        for (DateTimeFormatter dateFormat: VALID_FORMATS) {","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"nickyfoo"},"content":"            try {","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"                LocalDate parsedDate \u003d LocalDate.parse(date, dateFormat);","lastModifiedDate":"2021-03-26"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"                if (parsedDate.getYear() \u003c MIN_YEAR) {","lastModifiedDate":"2021-03-26"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"                    continue;","lastModifiedDate":"2021-03-26"},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"                }","lastModifiedDate":"2021-03-26"},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"                return parsedDate;","lastModifiedDate":"2021-03-26"},{"lineNumber":139,"author":{"gitId":"nickyfoo"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2021-03-21"},{"lineNumber":140,"author":{"gitId":"nickyfoo"},"content":"                continue;","lastModifiedDate":"2021-03-21"},{"lineNumber":141,"author":{"gitId":"nickyfoo"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":142,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":143,"author":{"gitId":"nickyfoo"},"content":"        for (DateTimeFormatter dateFormat: VALID_FORMATS_WITHOUT_YEAR) {","lastModifiedDate":"2021-03-21"},{"lineNumber":144,"author":{"gitId":"nickyfoo"},"content":"            try {","lastModifiedDate":"2021-03-21"},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"                return MonthDay.parse(date, dateFormat).atYear(NON_YEAR);","lastModifiedDate":"2021-03-26"},{"lineNumber":146,"author":{"gitId":"nickyfoo"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2021-03-21"},{"lineNumber":147,"author":{"gitId":"nickyfoo"},"content":"                continue;","lastModifiedDate":"2021-03-21"},{"lineNumber":148,"author":{"gitId":"nickyfoo"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":149,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":150,"author":{"gitId":"nickyfoo"},"content":"        throw new DateTimeException(MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":151,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":152,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":153,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":154,"author":{"gitId":"nickyfoo"},"content":"     * Returns title case for strings.","lastModifiedDate":"2021-03-21"},{"lineNumber":155,"author":{"gitId":"nickyfoo"},"content":"     * Required for user inputs in arbitrary case, which DateTimeFormatter does not support parsing for.","lastModifiedDate":"2021-03-21"},{"lineNumber":156,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":157,"author":{"gitId":"pyuxiang"},"content":"    public static String toTitleCase(String date) {","lastModifiedDate":"2021-03-26"},{"lineNumber":158,"author":{"gitId":"nickyfoo"},"content":"        StringBuilder titleCase \u003d new StringBuilder(date.length());","lastModifiedDate":"2021-03-21"},{"lineNumber":159,"author":{"gitId":"nickyfoo"},"content":"        boolean nextCapitalize \u003d true;","lastModifiedDate":"2021-03-21"},{"lineNumber":160,"author":{"gitId":"nickyfoo"},"content":"        for (char c: date.toCharArray()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":161,"author":{"gitId":"nickyfoo"},"content":"            if (!Character.isLetter(c)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":162,"author":{"gitId":"nickyfoo"},"content":"                nextCapitalize \u003d true;","lastModifiedDate":"2021-03-21"},{"lineNumber":163,"author":{"gitId":"nickyfoo"},"content":"            } else if (nextCapitalize) {","lastModifiedDate":"2021-03-21"},{"lineNumber":164,"author":{"gitId":"nickyfoo"},"content":"                c \u003d Character.toUpperCase(c);","lastModifiedDate":"2021-03-21"},{"lineNumber":165,"author":{"gitId":"nickyfoo"},"content":"                nextCapitalize \u003d false;","lastModifiedDate":"2021-03-21"},{"lineNumber":166,"author":{"gitId":"nickyfoo"},"content":"            } else {","lastModifiedDate":"2021-03-21"},{"lineNumber":167,"author":{"gitId":"nickyfoo"},"content":"                c \u003d Character.toLowerCase(c);","lastModifiedDate":"2021-03-21"},{"lineNumber":168,"author":{"gitId":"nickyfoo"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":169,"author":{"gitId":"nickyfoo"},"content":"            titleCase.append(c);","lastModifiedDate":"2021-03-21"},{"lineNumber":170,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":171,"author":{"gitId":"nickyfoo"},"content":"        return titleCase.toString();","lastModifiedDate":"2021-03-21"},{"lineNumber":172,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":173,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":174,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":175,"author":{"gitId":"pyuxiang"},"content":"     * Returns date with year removed for pure monthDay comparison.","lastModifiedDate":"2021-03-26"},{"lineNumber":176,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":177,"author":{"gitId":"pyuxiang"},"content":"    public static Date getDateWithoutYear(Date date) {","lastModifiedDate":"2021-03-26"},{"lineNumber":178,"author":{"gitId":"pyuxiang"},"content":"        if (isEmptyDate(date)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":179,"author":{"gitId":"pyuxiang"},"content":"            return new Date();","lastModifiedDate":"2021-03-26"},{"lineNumber":180,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":181,"author":{"gitId":"pyuxiang"},"content":"        return new Date(READABLE_FORMAT_WITHOUT_YEAR.format(date.dateValue));","lastModifiedDate":"2021-03-26"},{"lineNumber":182,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":183,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":184,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":185,"author":{"gitId":"nickyfoo"},"content":"     * Returns true if a given Date is an empty date.","lastModifiedDate":"2021-03-21"},{"lineNumber":186,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":187,"author":{"gitId":"nickyfoo"},"content":"    public static boolean isEmptyDate(Date date) {","lastModifiedDate":"2021-03-21"},{"lineNumber":188,"author":{"gitId":"nickyfoo"},"content":"        return date.isEmpty;","lastModifiedDate":"2021-03-21"},{"lineNumber":189,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":190,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":191,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":192,"author":{"gitId":"pyuxiang"},"content":"     * Returns the number of days left till the date, relative to current date.","lastModifiedDate":"2021-03-26"},{"lineNumber":193,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":194,"author":{"gitId":"pyuxiang"},"content":"    public long getDaysLeft() {","lastModifiedDate":"2021-03-26"},{"lineNumber":195,"author":{"gitId":"pyuxiang"},"content":"        return getDaysLeft(false);","lastModifiedDate":"2021-03-26"},{"lineNumber":196,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":197,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":198,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":199,"author":{"gitId":"pyuxiang"},"content":"     * Returns the number of days left till the date, relative to current date.","lastModifiedDate":"2021-03-26"},{"lineNumber":200,"author":{"gitId":"pyuxiang"},"content":"     * If {@code ignoreYear} is set to \u0027true\u0027, the number of days to the next month and day","lastModifiedDate":"2021-03-26"},{"lineNumber":201,"author":{"gitId":"pyuxiang"},"content":"     * is returned, i.e. the date is treated as a yearly event.","lastModifiedDate":"2021-03-26"},{"lineNumber":202,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":203,"author":{"gitId":"pyuxiang"},"content":"    public long getDaysLeft(boolean ignoreYear) {","lastModifiedDate":"2021-03-26"},{"lineNumber":204,"author":{"gitId":"pyuxiang"},"content":"        return getDaysLeft(ignoreYear, LocalDate.now());","lastModifiedDate":"2021-03-26"},{"lineNumber":205,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":206,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":207,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":208,"author":{"gitId":"pyuxiang"},"content":"     * Returns the number of days left till the date, relative to {@code reference}.","lastModifiedDate":"2021-03-26"},{"lineNumber":209,"author":{"gitId":"pyuxiang"},"content":"     * If {@code ignoreYear} is set to \u0027true\u0027, the number of days to the next month and day","lastModifiedDate":"2021-03-26"},{"lineNumber":210,"author":{"gitId":"pyuxiang"},"content":"     * is returned, i.e. the date is treated as a yearly event.","lastModifiedDate":"2021-03-26"},{"lineNumber":211,"author":{"gitId":"pyuxiang"},"content":"     * If date is empty, the maximum possible days remaining value is returned (LONG_MAX).","lastModifiedDate":"2021-03-26"},{"lineNumber":212,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":213,"author":{"gitId":"pyuxiang"},"content":"    public long getDaysLeft(boolean ignoreYear, LocalDate reference) {","lastModifiedDate":"2021-03-26"},{"lineNumber":214,"author":{"gitId":"pyuxiang"},"content":"        if (isEmpty) {","lastModifiedDate":"2021-03-26"},{"lineNumber":215,"author":{"gitId":"pyuxiang"},"content":"            return Long.MAX_VALUE;","lastModifiedDate":"2021-03-26"},{"lineNumber":216,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":217,"author":{"gitId":"pyuxiang"},"content":"        if (!ignoreYear) {","lastModifiedDate":"2021-03-26"},{"lineNumber":218,"author":{"gitId":"pyuxiang"},"content":"            return ChronoUnit.DAYS.between(reference, dateValue);","lastModifiedDate":"2021-03-26"},{"lineNumber":219,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":220,"author":{"gitId":"pyuxiang"},"content":"        LocalDate upcomingDate \u003d dateValue.withYear(reference.getYear());","lastModifiedDate":"2021-03-26"},{"lineNumber":221,"author":{"gitId":"pyuxiang"},"content":"        if (reference.isAfter(upcomingDate)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":222,"author":{"gitId":"pyuxiang"},"content":"            upcomingDate \u003d dateValue.withYear(reference.getYear() + 1);","lastModifiedDate":"2021-03-26"},{"lineNumber":223,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":224,"author":{"gitId":"pyuxiang"},"content":"        return ChronoUnit.DAYS.between(reference, upcomingDate);","lastModifiedDate":"2021-03-26"},{"lineNumber":225,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":226,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":227,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":228,"author":{"gitId":"pyuxiang"},"content":"     * Returns the month value of the date, in the range [1-12] if the month exists,","lastModifiedDate":"2021-03-26"},{"lineNumber":229,"author":{"gitId":"pyuxiang"},"content":"     * otherwise 0 is returned if no month is available.","lastModifiedDate":"2021-03-26"},{"lineNumber":230,"author":{"gitId":"nickyfoo"},"content":"     * Required for feature to filter contact dates by month.","lastModifiedDate":"2021-03-21"},{"lineNumber":231,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":232,"author":{"gitId":"nickyfoo"},"content":"    public int getMonth() {","lastModifiedDate":"2021-03-21"},{"lineNumber":233,"author":{"gitId":"nickyfoo"},"content":"        if (isEmpty) {","lastModifiedDate":"2021-03-21"},{"lineNumber":234,"author":{"gitId":"pyuxiang"},"content":"            return EMPTY_MONTH;","lastModifiedDate":"2021-03-26"},{"lineNumber":235,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":236,"author":{"gitId":"pyuxiang"},"content":"        return dateValue.getMonthValue();","lastModifiedDate":"2021-03-26"},{"lineNumber":237,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":238,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":239,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":240,"author":{"gitId":"pyuxiang"},"content":"     * Returns true if date contains a year, false otherwise.","lastModifiedDate":"2021-03-26"},{"lineNumber":241,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":242,"author":{"gitId":"pyuxiang"},"content":"    public boolean hasYear() {","lastModifiedDate":"2021-03-26"},{"lineNumber":243,"author":{"gitId":"pyuxiang"},"content":"        if (isEmpty) {","lastModifiedDate":"2021-03-26"},{"lineNumber":244,"author":{"gitId":"pyuxiang"},"content":"            return false;","lastModifiedDate":"2021-03-26"},{"lineNumber":245,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":246,"author":{"gitId":"pyuxiang"},"content":"        return dateValue.getYear() !\u003d NON_YEAR;","lastModifiedDate":"2021-03-26"},{"lineNumber":247,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":248,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":249,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":250,"author":{"gitId":"pyuxiang"},"content":"     * Returns 0 if equal, otherwise positive (negative) integer if date is earlier (later).","lastModifiedDate":"2021-03-26"},{"lineNumber":251,"author":{"gitId":"pyuxiang"},"content":"     * Empty dates are always treated as later dates.","lastModifiedDate":"2021-03-26"},{"lineNumber":252,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":253,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":254,"author":{"gitId":"nickyfoo"},"content":"    public int compareTo(Date other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":255,"author":{"gitId":"pyuxiang"},"content":"        if (isEmpty \u0026\u0026 isEmptyDate(other)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":256,"author":{"gitId":"pyuxiang"},"content":"            return 0;","lastModifiedDate":"2021-03-26"},{"lineNumber":257,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":258,"author":{"gitId":"nickyfoo"},"content":"        if (isEmpty) {","lastModifiedDate":"2021-03-21"},{"lineNumber":259,"author":{"gitId":"pyuxiang"},"content":"            return 1;","lastModifiedDate":"2021-03-26"},{"lineNumber":260,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":261,"author":{"gitId":"pyuxiang"},"content":"        if (isEmptyDate(other)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":262,"author":{"gitId":"pyuxiang"},"content":"            return -1;","lastModifiedDate":"2021-03-26"},{"lineNumber":263,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":264,"author":{"gitId":"pyuxiang"},"content":"        return dateValue.compareTo(other.dateValue);","lastModifiedDate":"2021-03-26"},{"lineNumber":265,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":266,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":267,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":268,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {","lastModifiedDate":"2021-03-21"},{"lineNumber":269,"author":{"gitId":"pyuxiang"},"content":"        return value;","lastModifiedDate":"2021-03-26"},{"lineNumber":270,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":271,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":272,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":273,"author":{"gitId":"nickyfoo"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":274,"author":{"gitId":"nickyfoo"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-21"},{"lineNumber":275,"author":{"gitId":"nickyfoo"},"content":"            return true;","lastModifiedDate":"2021-03-21"},{"lineNumber":276,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":277,"author":{"gitId":"nickyfoo"},"content":"        if (!(other instanceof Date)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":278,"author":{"gitId":"nickyfoo"},"content":"            return false;","lastModifiedDate":"2021-03-21"},{"lineNumber":279,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":280,"author":{"gitId":"pyuxiang"},"content":"        if (isEmpty \u0026\u0026 isEmptyDate((Date) other)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":281,"author":{"gitId":"nickyfoo"},"content":"            return true;","lastModifiedDate":"2021-03-21"},{"lineNumber":282,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":283,"author":{"gitId":"nickyfoo"},"content":"        return value.equals(((Date) other).value);","lastModifiedDate":"2021-03-21"},{"lineNumber":284,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":285,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":286,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":287,"author":{"gitId":"nickyfoo"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-21"},{"lineNumber":288,"author":{"gitId":"nickyfoo"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-21"},{"lineNumber":289,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":290,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":291,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"pyuxiang":138,"nickyfoo":153}},{"path":"src/main/java/seedu/partyplanet/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.model.event;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" * Represents a Event in PartyPlanet.","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"public class Event {","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    // Identity fields","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    private Name name;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    // Data fields","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private EventDate eventDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    private Remark details;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    private boolean isDone;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * Default Event constructor","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    public Event(Name name, EventDate eventDate, Remark details) {","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        this.eventDate \u003d eventDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        this.details \u003d details;","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     * Event constructor with a field for isDone","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    public Event(Name name, EventDate eventDate, Remark details, boolean isDone) {","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        this.eventDate \u003d eventDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        this.details \u003d details;","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"     * Returns name of event","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    public Name getName() {","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        return name;","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     * Returns date of event","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"    public EventDate getEventDate() {","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"        return eventDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"     * Returns details of event","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"    public Remark getDetails() {","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        return details;","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     * Returns whether Event is done.","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        return isDone;","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"     * Returns event status.","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"     * Tick represents done, empty string represents not done.","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    public String getStatus() {","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"        return isDone ? \"\\u2713\" : \"\";","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     * Returns an Event object that is done.","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    public Event setDone() {","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"        return new Event(getName(), getEventDate(), getDetails(), true);","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"     * Returns true if both events have the same name.","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"     * This defines a weaker notion of equality between two events.","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"    public boolean isSameEvent(Event otherEvent) {","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"        if (otherEvent \u003d\u003d this) {","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"            return true;","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"        return otherEvent !\u003d null","lastModifiedDate":"2021-03-19"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"                \u0026\u0026 otherEvent.getName().equals(getName());","lastModifiedDate":"2021-03-19"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"            return true;","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"            return false;","lastModifiedDate":"2021-03-19"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"        // state check","lastModifiedDate":"2021-03-19"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"        Event event \u003d (Event) other;","lastModifiedDate":"2021-03-19"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"        return getName().equals(event.getName())","lastModifiedDate":"2021-03-19"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"                \u0026\u0026 getEventDate().equals(event.getEventDate())","lastModifiedDate":"2021-03-22"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 getDetails().equals(event.getDetails())","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 isDone \u003d\u003d event.isDone;","lastModifiedDate":"2021-03-21"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":119,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":120,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {","lastModifiedDate":"2021-03-19"},{"lineNumber":121,"author":{"gitId":"nickyfoo"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-19"},{"lineNumber":122,"author":{"gitId":"nickyfoo"},"content":"        builder.append(getName());","lastModifiedDate":"2021-03-19"},{"lineNumber":123,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":124,"author":{"gitId":"nickyfoo"},"content":"        if (!EventDate.isEmptyDate(getEventDate())) {","lastModifiedDate":"2021-03-22"},{"lineNumber":125,"author":{"gitId":"nickyfoo"},"content":"            builder.append((\"; Date: \"))","lastModifiedDate":"2021-03-19"},{"lineNumber":126,"author":{"gitId":"nickyfoo"},"content":"                    .append(getEventDate());","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":128,"author":{"gitId":"nickyfoo"},"content":"        if (!Remark.isEmptyRemark(getDetails())) {","lastModifiedDate":"2021-03-19"},{"lineNumber":129,"author":{"gitId":"nickyfoo"},"content":"            builder.append(\"; Details: \")","lastModifiedDate":"2021-03-19"},{"lineNumber":130,"author":{"gitId":"nickyfoo"},"content":"                    .append(getDetails());","lastModifiedDate":"2021-03-19"},{"lineNumber":131,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"pyuxiang":53,"nickyfoo":45,"garyljj":35,"Ellevy":1}},{"path":"src/main/java/seedu/partyplanet/model/event/EventDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.model.event;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.date.Date;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * Represents an Event\u0027s date in PartyPlanet.","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" * Guarantees: immutable; is always valid.","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"public class EventDate extends Date {","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Event dates should be in one of the following formats:\\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"            + \"[with positive year]\\n\" + MESSAGE_YEAR_FORMATS;","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d \"Event date must contain a year\\n\";","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    public static final EventDate EMPTY_EVENT_DATE \u003d new EventDate();","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * Constructs a {@code EventDate}.","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * EventDate must contain a year.","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * Some invalid dates are mapped to the nearest valid date, e.g. 29 Feb 2021 -\u003e 28 Feb 2021.","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @param eventDate A valid eventDate.","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public EventDate(String eventDate) {","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        super(eventDate);","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        checkArgument(hasYear(), MESSAGE_YEAR_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * Constructs an empty eventDate.","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    public EventDate() {","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        super();","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * Returns true if a given event date string is a valid date.","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    public static boolean isValidEventDate(String test) {","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        return isValidDate(test);","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"pyuxiang":6,"nickyfoo":37}},{"path":"src/main/java/seedu/partyplanet/model/event/UniqueEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.model.event;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.exceptions.DuplicateEventException;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":" * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":" * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":" * unique in terms of identity in the UniqueEventList. However, the removal of a event uses Event#equals(Object) so","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":" * as to ensure that the event with exactly the same fields will be removed.","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":" *","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":" *","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":" * @see Event#isSameEvent(Event)","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * Returns true if the list contains an equivalent event as the given argument.","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    public boolean contains(Event toCheck) {","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"     * Adds a event to the list.","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"     * The event must not already exist in the list.","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    public void add(Event toAdd) {","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list.","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"        requireAllNonNull(target, editedEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"        internalList.set(index, editedEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"     * Removes the equivalent event from the list.","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"     * The event must exist in the list.","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"    public void remove(Event toRemove) {","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"    public void setEvents(UniqueEventList replacement) {","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"     * Replaces the contents of this list with {@code events}.","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"        requireAllNonNull(events);","lastModifiedDate":"2021-03-19"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"        if (!eventsAreUnique(events)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"        internalList.setAll(events);","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"    public void sort(Comparator\u003cEvent\u003e comparator) {","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"        internalList.sort(comparator);","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"nickyfoo"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-19"},{"lineNumber":107,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"nickyfoo"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"    public Iterator\u003cEvent\u003e iterator() {","lastModifiedDate":"2021-03-19"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-19"},{"lineNumber":115,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":117,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":118,"author":{"gitId":"nickyfoo"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-19"},{"lineNumber":119,"author":{"gitId":"nickyfoo"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-19"},{"lineNumber":120,"author":{"gitId":"nickyfoo"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls","lastModifiedDate":"2021-03-19"},{"lineNumber":121,"author":{"gitId":"nickyfoo"},"content":"                        \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));","lastModifiedDate":"2021-03-19"},{"lineNumber":122,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":123,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":124,"author":{"gitId":"nickyfoo"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":125,"author":{"gitId":"nickyfoo"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-19"},{"lineNumber":126,"author":{"gitId":"nickyfoo"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-19"},{"lineNumber":127,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":128,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":129,"author":{"gitId":"nickyfoo"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":130,"author":{"gitId":"nickyfoo"},"content":"     * Returns true if {@code events} contains only unique events.","lastModifiedDate":"2021-03-19"},{"lineNumber":131,"author":{"gitId":"nickyfoo"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":132,"author":{"gitId":"nickyfoo"},"content":"    private boolean eventsAreUnique(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-03-19"},{"lineNumber":133,"author":{"gitId":"nickyfoo"},"content":"        for (int i \u003d 0; i \u003c events.size() - 1; i++) {","lastModifiedDate":"2021-03-19"},{"lineNumber":134,"author":{"gitId":"nickyfoo"},"content":"            for (int j \u003d i + 1; j \u003c events.size(); j++) {","lastModifiedDate":"2021-03-19"},{"lineNumber":135,"author":{"gitId":"nickyfoo"},"content":"                if (events.get(i).isSameEvent(events.get(j))) {","lastModifiedDate":"2021-03-19"},{"lineNumber":136,"author":{"gitId":"nickyfoo"},"content":"                    return false;","lastModifiedDate":"2021-03-19"},{"lineNumber":137,"author":{"gitId":"nickyfoo"},"content":"                }","lastModifiedDate":"2021-03-19"},{"lineNumber":138,"author":{"gitId":"nickyfoo"},"content":"            }","lastModifiedDate":"2021-03-19"},{"lineNumber":139,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":140,"author":{"gitId":"nickyfoo"},"content":"        return true;","lastModifiedDate":"2021-03-19"},{"lineNumber":141,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":142,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":142}},{"path":"src/main/java/seedu/partyplanet/model/event/exceptions/DuplicateEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.model.event.exceptions;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" * name).","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"public class DuplicateEventException extends RuntimeException {","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    public DuplicateEventException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"        super(\"Operation would result in duplicate events\");","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":11}},{"path":"src/main/java/seedu/partyplanet/model/event/exceptions/EventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.model.event.exceptions;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * Signals that the operation is unable to find the specified event.","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class EventNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":6}},{"path":"src/main/java/seedu/partyplanet/model/event/predicates/EventDetailContainsExactKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.model.event.predicates;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" * Tests that a {@code Event}\u0027s {@code Remark} matches all of the keywords given.","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":" * Match is case-insensitive to account for fact that two names stored in alternate","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":" * case are semantically the same to the user.","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"public class EventDetailContainsExactKeywordsPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    private final String keywords;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    public EventDetailContainsExactKeywordsPredicate(String keywords) {","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        this.keywords \u003d keywords.toLowerCase();","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        return event.getDetails().value.toLowerCase().equals(this.keywords);","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"                || (other instanceof EventDetailContainsExactKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 keywords.equals(((EventDetailContainsExactKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":31}},{"path":"src/main/java/seedu/partyplanet/model/event/predicates/EventDetailContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.model.event.predicates;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" * Tests that a {@code Event}\u0027s {@code Remark} matches any of the keywords given.","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"public class EventDetailContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    private final String keywords;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    public EventDetailContainsKeywordsPredicate(String keywords) {","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        this.keywords \u003d keywords.toLowerCase();","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        return event.getDetails().value.toLowerCase().contains(this.keywords);","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"                || (other instanceof EventDetailContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 keywords.equals(((EventDetailContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":29}},{"path":"src/main/java/seedu/partyplanet/model/event/predicates/EventNameContainsExactKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.model.event.predicates;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" * Tests that a {@code Event}\u0027s {@code Name} matches all of the keywords given.","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":" * Match is case-insensitive to account for fact that two names stored in alternate","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":" * case are semantically the same to the user.","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"public class EventNameContainsExactKeywordsPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    private final String keywords;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    public EventNameContainsExactKeywordsPredicate(String keywords) {","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        this.keywords \u003d keywords.toLowerCase();","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        return event.getName().fullName.toLowerCase().equals(this.keywords);","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"                || (other instanceof EventNameContainsExactKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 keywords.equals(((EventNameContainsExactKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":31}},{"path":"src/main/java/seedu/partyplanet/model/event/predicates/EventNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.model.event.predicates;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" * Tests that a {@code Event}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"public class EventNameContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    private final String keywords;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    public EventNameContainsKeywordsPredicate(String keywords) {","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        this.keywords \u003d keywords.toLowerCase();","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        return event.getName().fullName.toLowerCase().contains(this.keywords);","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"                || (other instanceof EventNameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 keywords.equals(((EventNameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":29}},{"path":"src/main/java/seedu/partyplanet/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Represents a Person\u0027s address in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public static final String EMPTY_ADDRESS_STRING \u003d \"\";","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    public static final Address EMPTY_ADDRESS \u003d new Address();","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    private boolean isEmpty \u003d false;","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     * Constructs an empty Address.","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    private Address() {","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        value \u003d EMPTY_ADDRESS_STRING;","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        isEmpty \u003d true;","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     * Returns true if a given string is a valid address.","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"     * Returns true if a given address is an empty address.","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    public static boolean isEmptyAddress(Address address) {","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"        return address.isEmpty;","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 value.equals(((Address) other).value)) // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 isEmpty \u003d\u003d ((Address) other).isEmpty; // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"garyljj":3,"-":53,"Ellevy":20}},{"path":"src/main/java/seedu/partyplanet/model/person/Birthday.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.date.Date;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"/** Represents a Person\u0027s birthday in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":" * Guarantees: immutable; is always valid.","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"public class Birthday extends Date {","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Birthdays should be valid and in one of the following formats:\\n\"","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"            + \"[with positive year]\\n\" + MESSAGE_YEAR_FORMATS + \"\\n[without year]\\n\" + MESSAGE_NOYEAR_FORMATS;","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d \"Birthday should not be a date in the future\";","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public static final Birthday EMPTY_BIRTHDAY \u003d new Birthday();","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     * Constructs a {@code Birthday}.","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * Birthdate should not be in the future, and can optionally contain a year.","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * Some invalid dates are mapped to the nearest valid date, e.g. 29 Feb 2021 -\u003e 28 Feb 2021.","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     * @param birthdate A valid birthdate.","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    public Birthday(String birthdate) {","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        super(birthdate);","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        checkArgument(isValidBirthdayDate(birthdate), MESSAGE_BIRTHDAY_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"     * Constructs an empty birthday.","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"    public Birthday() {","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        super();","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * Returns true if a given date string is a valid date not in the future.","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    public static boolean isFuture(String test) {","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        return isFuture(test, LocalDate.now());","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     * Returns true if a given date string is a valid date not after {@code reference}.","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"     * Exposes {@reference} date as a parameter for unit testing.","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     * Note: Dates without years which are parsed successfully are always considered not from the future.","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"    public static boolean isFuture(String test, LocalDate reference) {","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        assert isValidDate(test);","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        LocalDate date \u003d parseDate(test);","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        return reference.isBefore(date);","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     * Returns true if a given birthday string is a valid date not in the future.","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"    public static boolean isValidBirthdayDate(String test) {","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        return isValidBirthdayDate(test, LocalDate.now());","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     * Returns true if a given birthday string is a valid date not after {@code reference}.","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * Exposes {@reference} date as a parameter for unit testing.","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     * Note: Dates without years which are parsed successfully are always considered valid.","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    public static boolean isValidBirthdayDate(String test, LocalDate reference) {","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"        return isValidDate(test) \u0026\u0026 !isFuture(test, reference);","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"zhengruoxin":31,"pyuxiang":31,"nickyfoo":6,"garyljj":3}},{"path":"src/main/java/seedu/partyplanet/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Represents a Person\u0027s email in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    public static final String EMPTY_EMAIL_STRING \u003d \"\";","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    public static final Email EMPTY_EMAIL \u003d new Email();","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"_!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format USER@DOMAIN \"","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"            + \"1. USER can only contain alphanumerics and any of these special characters, excluding \"","lastModifiedDate":"2021-04-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"            + \"2. DOMAIN must comprise at least one non-empty label with an optional trailing period.\\n\"","lastModifiedDate":"2021-04-04"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"            + \"3. A label contains at least one of alphanumerics or underscores, with optional hyphens. \"","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"            + \"Labels cannot start with a hyphen.\";","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\\\\w[\\\\w-]*\\\\.?)+$\";","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-04-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    private boolean isEmpty \u003d false;","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"     * Constructs an empty Email.","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"    private Email() {","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        value \u003d EMPTY_EMAIL_STRING;","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        isEmpty \u003d true;","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"     * Returns true if a given email is an empty email.","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    public static boolean isEmptyEmail(Email email) {","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        return email.isEmpty;","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 value.equals(((Email) other).value)) // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 isEmpty \u003d\u003d ((Email) other).isEmpty; // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"pyuxiang":8,"garyljj":3,"-":50,"Ellevy":21}},{"path":"src/main/java/seedu/partyplanet/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Represents a Person\u0027s name in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"garyljj":3,"-":56}},{"path":"src/main/java/seedu/partyplanet/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" * Represents a Person in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    private final Birthday birthday;","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    private final Remark remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    public Person(Name name, Phone phone, Email email, Birthday birthday, Address address, Remark remark,","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"                  Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        requireAllNonNull(name, phone, email, address, remark, tags);","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"    public Birthday getBirthday() {","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"        return birthday;","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    public Remark getRemark() {","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        return remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":107,"author":{"gitId":"zhengruoxin"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(getBirthday())","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 otherPerson.getRemark().equals(getRemark())","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"        return Objects.hash(name, phone, email, birthday, address, remark, tags);","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"        builder.append(getName());","lastModifiedDate":"2021-03-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"        if (!Phone.isEmptyPhone(getPhone())) {","lastModifiedDate":"2021-03-08"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"            builder.append(\"; Phone: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"                   .append(getPhone());","lastModifiedDate":"2021-03-08"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"        if (!Email.isEmptyEmail(getEmail())) {","lastModifiedDate":"2021-03-08"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"            builder.append(\"; Email: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"                    .append(getEmail());","lastModifiedDate":"2021-03-08"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":132,"author":{"gitId":"nickyfoo"},"content":"        if (!Birthday.isEmptyDate(getBirthday())) {","lastModifiedDate":"2021-03-22"},{"lineNumber":133,"author":{"gitId":"zhengruoxin"},"content":"            builder.append((\"; Birthday: \"))","lastModifiedDate":"2021-03-09"},{"lineNumber":134,"author":{"gitId":"zhengruoxin"},"content":"                    .append(getBirthday());","lastModifiedDate":"2021-03-09"},{"lineNumber":135,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"        if (!Address.isEmptyAddress(getAddress())) {","lastModifiedDate":"2021-03-08"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"            builder.append(\"; Address: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"                    .append(getAddress());","lastModifiedDate":"2021-03-08"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":"        if (!Remark.isEmptyRemark(getRemark())) {","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"            builder.append(\"; Remark: \")","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"Ellevy"},"content":"                .append(getRemark());","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zhengruoxin":11,"nickyfoo":1,"garyljj":4,"-":109,"Ellevy":27}},{"path":"src/main/java/seedu/partyplanet/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Represents a Person\u0027s phone number in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    public static final String EMPTY_PHONE_STRING \u003d \"\";","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    public static final Phone EMPTY_PHONE \u003d new Phone();","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    private boolean isEmpty \u003d false;","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * Constructs an empty Phone.","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    private Phone() {","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        value \u003d EMPTY_PHONE_STRING;","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        isEmpty \u003d true;","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     * Returns true if a given phone is an empty phone.","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public static boolean isEmptyPhone(Phone phone) {","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        return phone.isEmpty;","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)) // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"                \u0026\u0026 isEmpty \u003d\u003d ((Phone) other).isEmpty; // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"garyljj":3,"-":48,"Ellevy":20}},{"path":"src/main/java/seedu/partyplanet/model/person/Remark.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":" * Represents a Person\u0027s remark in PartyPlanet.","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"public class Remark {","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Remark can take any values, and it should not be blank\";","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /*","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * The first character of the remark must not be a whitespace,","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public static final String EMPTY_REMARK_STRING \u003d \"\";","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    public static final Remark EMPTY_REMARK \u003d new Remark();","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public final String value;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    private boolean isEmpty \u003d false;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"     * Constructs a {@code Remark}.","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     * @param remark A valid remark.","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    public Remark(String remark) {","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(remark);","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        value \u003d remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     * Constructs an empty Remark.","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    private Remark() {","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        value \u003d EMPTY_REMARK_STRING;","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        isEmpty \u003d true;","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     * Returns true if a given string is a valid remark.","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"    public static boolean isValidRemark(String test) {","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"     * Returns true if a given remark is an empty remark.","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    public static boolean isEmptyRemark(Remark remark) {","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"        return remark.isEmpty;","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"    public String toString() {","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        return value;","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            || (other instanceof Remark // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"            \u0026\u0026 value.equals(((Remark) other).value)) // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"            \u0026\u0026 isEmpty \u003d\u003d ((Remark) other).isEmpty; // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Ellevy":76}},{"path":"src/main/java/seedu/partyplanet/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"glennljs"},"content":"    public void sort(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-03-09"},{"lineNumber":102,"author":{"gitId":"glennljs"},"content":"        internalList.sort(comparator);","lastModifiedDate":"2021-03-09"},{"lineNumber":103,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":104,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"glennljs":5,"garyljj":4,"-":133}},{"path":"src/main/java/seedu/partyplanet/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person.exceptions;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"garyljj":1,"-":10}},{"path":"src/main/java/seedu/partyplanet/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person.exceptions;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"garyljj":1,"-":5}},{"path":"src/main/java/seedu/partyplanet/model/person/predicates/BirthdayContainsMonthPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.model.person.predicates;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.logic.parser.ParserUtil.parseMonthInteger;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" * Tests that a {@code Person}\u0027s {@code Birthday} matches the birthday month given.","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"public class BirthdayContainsMonthPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    private final int month;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    public BirthdayContainsMonthPredicate(String keywords) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"        this.month \u003d parseMonthInteger(keywords);","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        return person.getBirthday().getMonth() \u003d\u003d month;","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"                || (other instanceof BirthdayContainsMonthPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"                \u0026\u0026 month \u003d\u003d ((BirthdayContainsMonthPredicate) other).month); // state check","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"pyuxiang":32}},{"path":"src/main/java/seedu/partyplanet/model/person/predicates/NameContainsExactKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.model.person.predicates;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"/**","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches all of the keywords given.","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * Match is case-insensitive to account for fact that two names stored in alternate","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * case are semantically the same to the user.","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" */","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"public class NameContainsExactKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    private final String keywords;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    public NameContainsExactKeywordsPredicate(String keywords) {","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"        this.keywords \u003d keywords.toLowerCase();","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        return person.getName().fullName.toLowerCase().equals(this.keywords);","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"                || (other instanceof NameContainsExactKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"                \u0026\u0026 keywords.equals(((NameContainsExactKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"pyuxiang":31}},{"path":"src/main/java/seedu/partyplanet/model/person/predicates/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person.predicates;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"    private final String keywords;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"    public NameContainsKeywordsPredicate(String keywords) {","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"        this.keywords \u003d keywords.toLowerCase();","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"        return person.getName().fullName.toLowerCase().contains(this.keywords);","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"glennljs":4,"garyljj":2,"-":23}},{"path":"src/main/java/seedu/partyplanet/model/person/predicates/TagsContainsExactCaseTagPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person.predicates;","lastModifiedDate":"2021-04-04"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-04-04"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Tests that a {@code Person}\u0027s {@code Tag}s contains an exact, case-sensitive match of the tag given.","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"public class TagsContainsExactCaseTagPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-04-04"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    private final String tag;","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    public TagsContainsExactCaseTagPredicate(String tag) {","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        this.tag \u003d tag;","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-04-04"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-04-04"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        return person.getTags().stream().anyMatch(tag -\u003e tag.tagName.equals(this.tag));","lastModifiedDate":"2021-04-04"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    @Override","lastModifiedDate":"2021-04-04"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"                || (other instanceof TagsContainsExactCaseTagPredicate // instanceof handles nulls","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"                \u0026\u0026 tag.equals(((TagsContainsExactCaseTagPredicate) other).tag)); // state check","lastModifiedDate":"2021-04-04"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"garyljj":29}},{"path":"src/main/java/seedu/partyplanet/model/person/predicates/TagsContainsExactTagPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.model.person.predicates;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"/**","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Tests that a {@code Person}\u0027s {@code Tag}s contains an exact match of the tag given.","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" */","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"public class TagsContainsExactTagPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    private final String tag;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    public TagsContainsExactTagPredicate(String tag) {","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"        this.tag \u003d tag.toLowerCase();","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        return person.getTags().stream().anyMatch(tag -\u003e tag.tagName.toLowerCase().equals(this.tag));","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"                || (other instanceof TagsContainsExactTagPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"                \u0026\u0026 tag.equals(((TagsContainsExactTagPredicate) other).tag)); // state check","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"pyuxiang":29}},{"path":"src/main/java/seedu/partyplanet/model/person/predicates/TagsContainsTagPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person.predicates;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":" * Tests that a {@code Person}\u0027s {@code Tag}s matches the tag given.","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"public class TagsContainsTagPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"    private final String tag;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"    public TagsContainsTagPredicate(String tag) {","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"        this.tag \u003d tag.toLowerCase();","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        return person.getTags().stream().anyMatch(tag -\u003e tag.tagName.toLowerCase().contains(this.tag));","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"glennljs"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"glennljs"},"content":"                || (other instanceof TagsContainsTagPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"glennljs"},"content":"                \u0026\u0026 tag.equals(((TagsContainsTagPredicate) other).tag)); // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"glennljs":25,"pyuxiang":2,"garyljj":2}},{"path":"src/main/java/seedu/partyplanet/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Represents a Tag in PartyPlanet.","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"garyljj":3,"-":51}},{"path":"src/main/java/seedu/partyplanet/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.EventDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Birthday;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"                    new Birthday(\"1995-02-01\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"                    new Remark(\"hates vegetables\"), getTagSet(\"friends\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"                    new Birthday(\"1997-03-07\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"                    new Remark(\"likes red\"), getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"                    new Birthday(\"1998-05-20\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"                    new Remark(\"hates pink\"), getTagSet(\"neighbours\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"                    new Birthday(\"1999-11-21\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"                    new Remark(\"loves meat\"), getTagSet(\"family\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"                    new Birthday(\"2000-08-23\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"                    new Remark(\"hates blue\"), getTagSet(\"classmates\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"                    new Birthday(\"2002-10-27\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"                    new Remark(\"hates black\"), getTagSet(\"colleagues\"))","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public static Event[] getSampleEvents() {","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        return new Event[] {","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"            new Event(new Name(\"Jan celebration\"), new EventDate(\"2022-01-01\"), new Remark(\"10 people\")),","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"            new Event(new Name(\"CNY celebration\"), new EventDate(\"2022-02-01\"), new Remark(\"get pineapple tarts\")),","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"            new Event(new Name(\"Feb celebration\"), new EventDate(\"2022-02-01\"), new Remark(\"2 people\")),","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"            new Event(new Name(\"March celebration\"), new EventDate(\"2022-03-01\"), new Remark(\"do outside school\")),","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"            new Event(new Name(\"Christmas celebration\"), new EventDate(\"2021-12-01\"), new Remark(\"get turkey\")),","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"            new Event(new Name(\"Graduation party\"), new EventDate(\"2022-05-31\"), new Remark(\"Get job\"))","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        };","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    public static ReadOnlyEventBook getSampleEventBook() {","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"        EventBook sampleEb \u003d new EventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        for (Event sampleEvent : getSampleEvents()) {","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"            sampleEb.addEvent(sampleEvent);","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        return sampleEb;","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"zhengruoxin":6,"nickyfoo":2,"garyljj":10,"-":39,"Ellevy":28}},{"path":"src/main/java/seedu/partyplanet/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":" * Represents a storage for {@link seedu.partyplanet.model.AddressBook}.","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"garyljj":4,"-":41}},{"path":"src/main/java/seedu/partyplanet/storage/EventBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":" * Represents a storage for {@link seedu.partyplanet.model.EventBook}.","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"public interface EventBookStorage {","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    Path getEventBookFilePath();","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     * Returns EventBook data as a {@link ReadOnlyEventBook}.","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * @see #getEventBookFilePath()","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * Saves the given {@link ReadOnlyEventBook} to the storage.","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * @param eventBook cannot be null.","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook) throws IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     * @see #saveEventBook(ReadOnlyEventBook)","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"Ellevy":45}},{"path":"src/main/java/seedu/partyplanet/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.EventDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":" * Jackson-friendly version of {@link Event}.","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"class JsonAdaptedEvent {","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    private final String name;","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    private final String eventDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    private final String detail;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    private final String isDone;","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     * Constructs a {@code JsonAdaptedEvent} with the given event details.","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"name\") String name, @JsonProperty(\"eventDate\") String eventDate,","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"                            @JsonProperty(\"remark\") String detail, @JsonProperty(\"isDone\") String isDone) {","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        this.eventDate \u003d eventDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        this.detail \u003d detail;","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     * Converts a given {@code Event} into this class for Jackson use.","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    public JsonAdaptedEvent(Event source) {","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"        eventDate \u003d source.getEventDate().value;","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        detail \u003d source.getDetails().value;","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        isDone \u003d source.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object.","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event.","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    public Event toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"        EventDate modelDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"        if (eventDate \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, EventDate.class.getSimpleName()));","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"        if (eventDate.equals(EventDate.EMPTY_DATE_STRING)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"            modelDate \u003d EventDate.EMPTY_EVENT_DATE;","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"            try {","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"                modelDate \u003d new EventDate(eventDate);","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"            } catch (DateTimeException err) { // date in wrong format","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"                throw new ParseException(EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"            } catch (IllegalArgumentException err) { // no year field;","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"                throw new ParseException(EventDate.MESSAGE_YEAR_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        Remark modelDetail;","lastModifiedDate":"2021-03-19"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        if (detail \u003d\u003d null) {","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));","lastModifiedDate":"2021-03-19"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        if (detail.equals(Remark.EMPTY_REMARK_STRING)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"            modelDetail \u003d Remark.EMPTY_REMARK;","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"        } else if (!Remark.isValidRemark(detail)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"            modelDetail \u003d new Remark(detail);","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        boolean modelIsDone;","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        if (isDone \u003d\u003d null) {","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isDone\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"        if (isDone.equals(\"1\")) {","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"            modelIsDone \u003d true;","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        } else if (isDone.equals(\"0\")) {","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"            modelIsDone \u003d false;","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"        } else {","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"            throw new IllegalValueException(\"isDone should be either \\\"1\\\" or \\\"0\\\"\");","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"        return new Event(modelName, modelDate, modelDetail, modelIsDone);","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"pyuxiang":1,"nickyfoo":14,"garyljj":17,"Ellevy":75}},{"path":"src/main/java/seedu/partyplanet/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Birthday;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"    private final String birthday;","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    private final String remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"birthday\") String birthday,","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"            @JsonProperty(\"address\") String address, @JsonProperty(\"remark\") String remark,","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"        birthday \u003d source.getBirthday().value;","lastModifiedDate":"2021-03-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        remark \u003d source.getRemark().value;","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"        Phone modelPhone;","lastModifiedDate":"2021-03-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        if (phone.equals(Phone.EMPTY_PHONE_STRING)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"            modelPhone \u003d Phone.EMPTY_PHONE;","lastModifiedDate":"2021-03-08"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"        } else if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"            modelPhone \u003d new Phone(phone);","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"        Email modelEmail;","lastModifiedDate":"2021-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"        if (email.equals(Email.EMPTY_EMAIL_STRING)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"            modelEmail \u003d Email.EMPTY_EMAIL;","lastModifiedDate":"2021-03-08"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"        } else if (!Email.isValidEmail(email)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-08"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"            modelEmail \u003d new Email(email);","lastModifiedDate":"2021-03-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"zhengruoxin"},"content":"        Birthday modelBirthday;","lastModifiedDate":"2021-03-09"},{"lineNumber":116,"author":{"gitId":"zhengruoxin"},"content":"        if (birthday \u003d\u003d null) {","lastModifiedDate":"2021-03-09"},{"lineNumber":117,"author":{"gitId":"zhengruoxin"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2021-03-11"},{"lineNumber":118,"author":{"gitId":"zhengruoxin"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName()));","lastModifiedDate":"2021-03-11"},{"lineNumber":119,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":120,"author":{"gitId":"nickyfoo"},"content":"        if (birthday.equals(Birthday.EMPTY_DATE_STRING)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":121,"author":{"gitId":"zhengruoxin"},"content":"            modelBirthday \u003d Birthday.EMPTY_BIRTHDAY;","lastModifiedDate":"2021-03-09"},{"lineNumber":122,"author":{"gitId":"zhengruoxin"},"content":"        } else {","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"zhengruoxin"},"content":"            try {","lastModifiedDate":"2021-03-12"},{"lineNumber":124,"author":{"gitId":"zhengruoxin"},"content":"                modelBirthday \u003d new Birthday(birthday);","lastModifiedDate":"2021-03-09"},{"lineNumber":125,"author":{"gitId":"zhengruoxin"},"content":"            } catch (DateTimeException err) { // date in wrong format","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"zhengruoxin"},"content":"                throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-12"},{"lineNumber":127,"author":{"gitId":"zhengruoxin"},"content":"            } catch (IllegalArgumentException err) { // birthday year exceeds current year","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"nickyfoo"},"content":"                throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":129,"author":{"gitId":"zhengruoxin"},"content":"            }","lastModifiedDate":"2021-03-09"},{"lineNumber":130,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":131,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"        Address modelAddress;","lastModifiedDate":"2021-03-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"        if (address.equals(Address.EMPTY_ADDRESS_STRING)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"            modelAddress \u003d Address.EMPTY_ADDRESS;","lastModifiedDate":"2021-03-08"},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"        } else if (!Address.isValidAddress(address)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-08"},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"            modelAddress \u003d new Address(address);","lastModifiedDate":"2021-03-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":144,"author":{"gitId":"Ellevy"},"content":"        Remark modelRemark;","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"Ellevy"},"content":"        if (remark \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"Ellevy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"Ellevy"},"content":"        if (remark.equals(Remark.EMPTY_REMARK_STRING)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"Ellevy"},"content":"            modelRemark \u003d Remark.EMPTY_REMARK;","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"Ellevy"},"content":"        } else if (!Remark.isValidRemark(remark)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"Ellevy"},"content":"            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"Ellevy"},"content":"        } else {","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"Ellevy"},"content":"            modelRemark \u003d new Remark(remark);","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":157,"author":{"gitId":"Ellevy"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelBirthday, modelAddress, modelRemark, modelTags);","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"zhengruoxin":20,"nickyfoo":2,"garyljj":9,"-":95,"Ellevy":34}},{"path":"src/main/java/seedu/partyplanet/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"garyljj":3,"-":45}},{"path":"src/main/java/seedu/partyplanet/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.FileUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.JsonUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"garyljj":7,"-":73}},{"path":"src/main/java/seedu/partyplanet/storage/JsonEventBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.util.FileUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.util.JsonUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"public class JsonEventBookStorage implements EventBookStorage {","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonEventBookStorage.class);","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    private Path filePath;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    public JsonEventBookStorage(Path filePath) {","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    public Path getEventBookFilePath() {","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        return filePath;","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException {","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        return readEventBook(filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     * Similar to {@link #readEventBook()}.","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        Optional\u003cJsonSerializableEventBook\u003e jsonEventBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"                filePath, JsonSerializableEventBook.class);","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        if (!jsonEventBook.isPresent()) {","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"        try {","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"            return Optional.of(jsonEventBook.get().toModelType());","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook) throws IOException {","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        saveEventBook(eventBook, filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"     * Similar to {@link #saveEventBook(ReadOnlyEventBook)}.","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException {","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(eventBook);","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableEventBook(eventBook), filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"Ellevy":80}},{"path":"src/main/java/seedu/partyplanet/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"garyljj":5,"-":55}},{"path":"src/main/java/seedu/partyplanet/storage/JsonSerializableEventBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":" * An Immutable EventBook that is serializable to JSON format.","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"@JsonRootName(value \u003d \"eventbook\")","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"class JsonSerializableEventBook {","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"     * Constructs a {@code JsonSerializableEventBook} with the given events.","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    public JsonSerializableEventBook(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        this.events.addAll(events);","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * Converts a given {@code ReadOnlyEventBook} into this class for Jackson use.","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableEventBook}.","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    public JsonSerializableEventBook(ReadOnlyEventBook source) {","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"     * Converts this event book into the model\u0027s {@code EventBook} object.","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    public EventBook toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        EventBook eventBook \u003d new EventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"            if (eventBook.hasEvent(event)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"            }","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"            eventBook.addEvent(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        return eventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":1,"Ellevy":59}},{"path":"src/main/java/seedu/partyplanet/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.JsonUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"garyljj":5,"-":42}},{"path":"src/main/java/seedu/partyplanet/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"public interface Storage extends AddressBookStorage, EventBookStorage, UserPrefsStorage {","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    Path getEventBookFilePath();","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook) throws IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"garyljj":5,"-":26,"Ellevy":11}},{"path":"src/main/java/seedu/partyplanet/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    private EventBookStorage eventBookStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    public StorageManager(AddressBookStorage addressBookStorage,","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"                          EventBookStorage eventBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        this.eventBookStorage \u003d eventBookStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"    public Path getEventBookFilePath() {","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"        return eventBookStorage.getEventBookFilePath();","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"        return readEventBook(eventBookStorage.getEventBookFilePath());","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"        return eventBookStorage.readEventBook(filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook) throws IOException {","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"        saveEventBook(eventBook, eventBookStorage.getEventBookFilePath());","lastModifiedDate":"2021-03-19"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook, Path filePath) throws IOException {","lastModifiedDate":"2021-03-19"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"        eventBookStorage.saveEventBook(eventBook, filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":6,"-":72,"Ellevy":34}},{"path":"src/main/java/seedu/partyplanet/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":" * Represents a storage for {@link seedu.partyplanet.model.UserPrefs}.","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * Saves the given {@link seedu.partyplanet.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"garyljj":6,"-":30}},{"path":"src/main/java/seedu/partyplanet/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.InputHistory;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.CommandResult;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"    private final AutoCompleter autoCompleter;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    private InputHistory history;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":"    public CommandBox(CommandExecutor commandExecutor, AutoCompleter autoCompleter) {","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"glennljs"},"content":"        this.autoCompleter \u003d autoCompleter;","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        commandTextField.setOnKeyPressed(e -\u003e handleUserKey(e));","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        history \u003d new InputHistory();","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        history.add(commandText);","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"            // As input is not cleared, history begins at 2nd last (which is the current input, instead of blank)","lastModifiedDate":"2021-04-04"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"            history.getPrevious();","lastModifiedDate":"2021-04-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"    private void handleUserKey(KeyEvent event) {","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"        switch(event.getCode()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        case UP:","lastModifiedDate":"2021-03-12"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"            commandTextField.setText(history.getPrevious());","lastModifiedDate":"2021-03-12"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"            commandTextField.end();","lastModifiedDate":"2021-03-12"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"            break;","lastModifiedDate":"2021-03-12"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        case DOWN:","lastModifiedDate":"2021-03-12"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"            commandTextField.setText(history.getNext());","lastModifiedDate":"2021-03-12"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"            commandTextField.end();","lastModifiedDate":"2021-03-12"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"            break;","lastModifiedDate":"2021-03-12"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        case ESCAPE:","lastModifiedDate":"2021-03-12"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"            commandTextField.clear();","lastModifiedDate":"2021-03-12"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"            break;","lastModifiedDate":"2021-03-12"},{"lineNumber":80,"author":{"gitId":"glennljs"},"content":"        case TAB:","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"glennljs"},"content":"            String command \u003d commandTextField.getText();","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"glennljs"},"content":"            try {","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"glennljs"},"content":"                String output \u003d autoCompleter.autoComplete(command);","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"glennljs"},"content":"                commandTextField.setText(output);","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"glennljs"},"content":"            } catch (CommandException | ParseException e) {","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"glennljs"},"content":"                setStyleToIndicateCommandFailure();","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"glennljs"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"glennljs"},"content":"            commandTextField.requestFocus();","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"glennljs"},"content":"            commandTextField.end();","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"glennljs"},"content":"            break;","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"        case Z:","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"            try {","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"                if (event.isShiftDown() \u0026\u0026 event.isShortcutDown()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"                    commandTextField.clear();","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"                    commandExecutor.execute(\"redo\");","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"                } else if (event.isShortcutDown()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"                    commandTextField.clear();","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"                    commandExecutor.execute(\"undo\");","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"            } catch (CommandException | ParseException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"                setStyleToIndicateCommandFailure();","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"            break;","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"        case Y:","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"nickyfoo"},"content":"            try {","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"nickyfoo"},"content":"                if (event.isShortcutDown()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"                    commandTextField.clear();","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":"                    commandExecutor.execute(\"redo\");","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"nickyfoo"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"            } catch (CommandException | ParseException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"                setStyleToIndicateCommandFailure();","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"            break;","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"        default:","lastModifiedDate":"2021-03-12"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"            break;","lastModifiedDate":"2021-03-12"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"         * @see seedu.partyplanet.logic.Logic#execute(String)","lastModifiedDate":"2021-03-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":153,"author":{"gitId":"glennljs"},"content":"     * Represents a function that can parse input and return autocompletes.","lastModifiedDate":"2021-03-22"},{"lineNumber":154,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":155,"author":{"gitId":"glennljs"},"content":"    @FunctionalInterface","lastModifiedDate":"2021-03-22"},{"lineNumber":156,"author":{"gitId":"glennljs"},"content":"    public interface AutoCompleter {","lastModifiedDate":"2021-03-22"},{"lineNumber":157,"author":{"gitId":"glennljs"},"content":"        /**","lastModifiedDate":"2021-03-22"},{"lineNumber":158,"author":{"gitId":"glennljs"},"content":"         * Parses the command and returns the autocompleted result.","lastModifiedDate":"2021-03-22"},{"lineNumber":159,"author":{"gitId":"glennljs"},"content":"         *","lastModifiedDate":"2021-03-22"},{"lineNumber":160,"author":{"gitId":"glennljs"},"content":"         * @see seedu.partyplanet.logic.Logic#execute(String)","lastModifiedDate":"2021-03-22"},{"lineNumber":161,"author":{"gitId":"glennljs"},"content":"         */","lastModifiedDate":"2021-03-22"},{"lineNumber":162,"author":{"gitId":"glennljs"},"content":"        String autoComplete(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":163,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":164,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"glennljs":27,"nickyfoo":26,"garyljj":29,"-":79,"Ellevy":4}},{"path":"src/main/java/seedu/partyplanet/ui/EventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.EventDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" * An UI component that displays information of a {@code Event}.","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    public final Event event;","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    @FXML","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    @FXML","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    private VBox details;","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    @FXML","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    private Label name;","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    @FXML","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    private Label id;","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     * Creates a {@code EventCard} with the given {@code Event} and index to display.","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    public EventCard(Event event, int displayedIndex) {","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        super(FXML);","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        this.event \u003d event;","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        id.setText(\"⟨ \" + displayedIndex + \" ⟩\");","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        name.setText(getTitle(event));","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"        if (!EventDate.isEmptyDate(event.getEventDate())) {","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"            addDetail(event.getEventDate().value);","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        if (!Remark.isEmptyRemark(event.getDetails())) {","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            addDetail(event.getDetails().value);","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    private String getTitle(Event event) {","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        String name \u003d event.getName().toString();","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        return name + \" \" + event.getStatus();","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     * Adds a new label to the contact with the following detail","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"    private void addDetail(String detail) {","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        Label label \u003d new Label();","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        label.setText(\"\\u2022\" + detail);","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        label.setWrapText(true);","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        label.getStyleClass().add(\"cell_small_label\");","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        details.getChildren().add(label);","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"    @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"            return true;","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"        if (!(other instanceof EventCard)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"            return false;","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"        // state check","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        EventCard card \u003d (EventCard) other;","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"                \u0026\u0026 event.equals(card.event);","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"pyuxiang":62,"nickyfoo":2,"garyljj":25}},{"path":"src/main/java/seedu/partyplanet/ui/EventListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" * Panel containing the list of events.","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    @FXML","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    private ListView\u003cEvent\u003e eventListView;","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * Creates a {@code EventListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        super(FXML);","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"        eventListView.setItems(eventList);","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}.","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    class EventListViewCell extends ListCell\u003cEvent\u003e {","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        protected void updateItem(Event event, boolean empty) {","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            super.updateItem(event, empty);","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            if (empty || event \u003d\u003d null) {","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"                setText(null);","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            } else {","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"                setGraphic(new EventCard(event, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            }","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"pyuxiang":50}},{"path":"src/main/java/seedu/partyplanet/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103-w16-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    public static final String HELP_MESSAGE \u003d HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"    private ListView\u003cString\u003e helpBox;","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":39,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"glennljs"},"content":"        copyButton.setPrefWidth(910);","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"glennljs"},"content":"        helpBox.setMinWidth(910);","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"glennljs"},"content":"        helpBox.setMinHeight(500);","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"glennljs"},"content":"        helpBox.setItems(FXCollections.observableArrayList(HelpCommand.SHOWING_HELP_MESSAGE.split(\"\\n\")));","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"glennljs":9,"nickyfoo":3,"garyljj":2,"-":95}},{"path":"src/main/java/seedu/partyplanet/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.Logic;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.CommandResult;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    private Theme theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    private EventListPanel eventListPanel;","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"    @FXML","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    private StackPane eventListPanelPlaceholder;","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"    @FXML","lastModifiedDate":"2021-03-25"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    private Scene scene;","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        setUiTheme(logic.getGuiSettings());","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"        // TODO: Insert this once LogicManager implemented.","lastModifiedDate":"2021-03-19"},{"lineNumber":127,"author":{"gitId":"nickyfoo"},"content":"        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());","lastModifiedDate":"2021-03-19"},{"lineNumber":128,"author":{"gitId":"nickyfoo"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());","lastModifiedDate":"2021-03-19"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"        //TODO: Find a way to include eventbook path in footer also","lastModifiedDate":"2021-03-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"glennljs"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand, this::autocomplete);","lastModifiedDate":"2021-03-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":154,"author":{"gitId":"pyuxiang"},"content":"     * Sets the user preference theme based on {@code guiSettings}.","lastModifiedDate":"2021-03-26"},{"lineNumber":155,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":156,"author":{"gitId":"pyuxiang"},"content":"    private void setUiTheme(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-26"},{"lineNumber":157,"author":{"gitId":"pyuxiang"},"content":"        setTheme(guiSettings.getTheme());","lastModifiedDate":"2021-03-26"},{"lineNumber":158,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":159,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":182,"author":{"gitId":"pyuxiang"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY(), theme);","lastModifiedDate":"2021-03-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":192,"author":{"gitId":"pyuxiang"},"content":"    public EventListPanel getEventListPanel() {","lastModifiedDate":"2021-03-19"},{"lineNumber":193,"author":{"gitId":"pyuxiang"},"content":"        return eventListPanel;","lastModifiedDate":"2021-03-19"},{"lineNumber":194,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":195,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"     * @see seedu.partyplanet.logic.Logic#execute(String)","lastModifiedDate":"2021-03-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"garyljj"},"content":"            if (commandResult.isToggleTheme()) {","lastModifiedDate":"2021-03-25"},{"lineNumber":213,"author":{"gitId":"pyuxiang"},"content":"                setTheme(commandResult.getTheme());","lastModifiedDate":"2021-03-26"},{"lineNumber":214,"author":{"gitId":"garyljj"},"content":"            }","lastModifiedDate":"2021-03-25"},{"lineNumber":215,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":224,"author":{"gitId":"glennljs"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":225,"author":{"gitId":"glennljs"},"content":"     * Executes autocomplete and returns the resulting command text.","lastModifiedDate":"2021-03-29"},{"lineNumber":226,"author":{"gitId":"glennljs"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":227,"author":{"gitId":"glennljs"},"content":"    private String autocomplete(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":228,"author":{"gitId":"glennljs"},"content":"        try {","lastModifiedDate":"2021-03-22"},{"lineNumber":229,"author":{"gitId":"glennljs"},"content":"            String completedString \u003d logic.autoComplete(commandText);","lastModifiedDate":"2021-03-22"},{"lineNumber":230,"author":{"gitId":"glennljs"},"content":"            logger.info(\"Autocomplete Result: \" + completedString);","lastModifiedDate":"2021-03-22"},{"lineNumber":231,"author":{"gitId":"glennljs"},"content":"            return completedString;","lastModifiedDate":"2021-03-22"},{"lineNumber":232,"author":{"gitId":"glennljs"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2021-03-22"},{"lineNumber":233,"author":{"gitId":"glennljs"},"content":"            logger.info(\"Invalid autocomplete search: \" + commandText);","lastModifiedDate":"2021-03-22"},{"lineNumber":234,"author":{"gitId":"glennljs"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2021-03-22"},{"lineNumber":235,"author":{"gitId":"glennljs"},"content":"            throw e;","lastModifiedDate":"2021-03-22"},{"lineNumber":236,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":237,"author":{"gitId":"glennljs"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":238,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":239,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":240,"author":{"gitId":"pyuxiang"},"content":"     * Set themes dynamically based on user command.","lastModifiedDate":"2021-03-26"},{"lineNumber":241,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":242,"author":{"gitId":"pyuxiang"},"content":"    private void setTheme(Theme theme) {","lastModifiedDate":"2021-03-26"},{"lineNumber":243,"author":{"gitId":"garyljj"},"content":"        scene.getStylesheets().clear();","lastModifiedDate":"2021-03-25"},{"lineNumber":244,"author":{"gitId":"pyuxiang"},"content":"        scene.getStylesheets().addAll(Theme.getStyleSheets(theme));","lastModifiedDate":"2021-03-26"},{"lineNumber":245,"author":{"gitId":"pyuxiang"},"content":"        logic.setGuiSettings(new GuiSettings(theme));","lastModifiedDate":"2021-03-26"},{"lineNumber":246,"author":{"gitId":"pyuxiang"},"content":"        this.theme \u003d theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":247,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":248,"author":{"gitId":"pyuxiang"},"content":"    @FXML","lastModifiedDate":"2021-03-26"},{"lineNumber":249,"author":{"gitId":"pyuxiang"},"content":"    private void setThemePastel() {","lastModifiedDate":"2021-03-26"},{"lineNumber":250,"author":{"gitId":"pyuxiang"},"content":"        setTheme(Theme.PASTEL);","lastModifiedDate":"2021-03-26"},{"lineNumber":251,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":252,"author":{"gitId":"pyuxiang"},"content":"    @FXML","lastModifiedDate":"2021-03-26"},{"lineNumber":253,"author":{"gitId":"pyuxiang"},"content":"    private void setThemeDark() {","lastModifiedDate":"2021-03-26"},{"lineNumber":254,"author":{"gitId":"pyuxiang"},"content":"        setTheme(Theme.DARK);","lastModifiedDate":"2021-03-26"},{"lineNumber":255,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"glennljs":17,"pyuxiang":36,"nickyfoo":2,"garyljj":17,"-":183,"Ellevy":1}},{"path":"src/main/java/seedu/partyplanet/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.person.Birthday;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    private VBox details;","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    @FXML","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        id.setText(\"⟨ \" + displayedIndex + \" ⟩\");","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"        if (!Phone.isEmptyPhone(person.getPhone())) {","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"            addDetail(person.getPhone().value);","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        if (!Address.isEmptyAddress(person.getAddress())) {","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"            addDetail(person.getAddress().value);","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        if (!Email.isEmptyEmail(person.getEmail())) {","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"            addDetail(person.getEmail().value);","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"        if (!Birthday.isEmptyDate(person.getBirthday())) {","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"            addDetail(person.getBirthday().value);","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        if (!Remark.isEmptyRemark(person.getRemark())) {","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"            addDetail(person.getRemark().value);","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     * Adds a new label to the contact with the following detail","lastModifiedDate":"2021-03-18"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    private void addDetail(String detail) {","lastModifiedDate":"2021-03-18"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        Label label \u003d new Label();","lastModifiedDate":"2021-03-18"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"        label.setText(\"\\u2022\" + detail);","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        label.setWrapText(true);","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        label.getStyleClass().add(\"cell_small_label\");","lastModifiedDate":"2021-03-18"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        details.getChildren().add(label);","lastModifiedDate":"2021-03-18"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"zhengruoxin":1,"pyuxiang":2,"nickyfoo":2,"garyljj":23,"-":65,"Ellevy":10}},{"path":"src/main/java/seedu/partyplanet/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"garyljj":3,"-":46}},{"path":"src/main/java/seedu/partyplanet/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"garyljj":1,"-":27}},{"path":"src/main/java/seedu/partyplanet/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":1,"-":27}},{"path":"src/main/java/seedu/partyplanet/ui/Theme.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * Enumeration of available themes.","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"public enum Theme {","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"    DARK, PASTEL;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"     * Returns a list of filepaths to stylesheets for each theme.","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    public static List\u003cString\u003e getStyleSheets(Theme theme) {","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"        switch (theme) {","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"        case DARK:","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"            return List.of(\"view/DarkTheme.css\", \"view/Extensions.css\");","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        case PASTEL: // fallthrough","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        default:","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"            return List.of(\"view/PinkPastelTheme.css\", \"view/ExtensionsPinkPastel.css\");","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"pyuxiang":23}},{"path":"src/main/java/seedu/partyplanet/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"garyljj":1,"-":12}},{"path":"src/main/java/seedu/partyplanet/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.MainApp;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.LogsCenter;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.StringUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.Logic;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        logger.info(\"Loading PastelPinkTheme\");","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/PinkPastelTheme.css\");","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"zhengruoxin":2,"garyljj":5,"-":83}},{"path":"src/main/java/seedu/partyplanet/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.MainApp;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"garyljj":2,"-":86}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"@import \"./Font.css\";","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"    -fx-font-size: 15px;","lastModifiedDate":"2021-03-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":".cell_id_name_box {","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"    -fx-padding: 0 0 4 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2021-03-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"    -fx-padding: 2 0 0 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":".result-display .corner {","lastModifiedDate":"2021-03-26"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-03-26"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-26"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":313,"author":{"gitId":"pyuxiang"},"content":"    -fx-padding: 1 0 3 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":343,"author":{"gitId":"pyuxiang"},"content":"    -fx-padding: 2 0 4 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":344,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":354,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":355,"author":{"gitId":"glennljs"},"content":".help-box {","lastModifiedDate":"2021-04-05"},{"lineNumber":356,"author":{"gitId":"glennljs"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-04-05"},{"lineNumber":357,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"glennljs":6,"pyuxiang":9,"garyljj":4,"-":338}},{"path":"src/main/resources/view/EventListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    \u003cVBox fx:id \u003d \"details\" alignment\u003d\"TOP_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"cell_id_name_box\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"pyuxiang":31}},{"path":"src/main/resources/view/EventListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"  \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"pyuxiang":8}},{"path":"src/main/resources/view/ExtensionsPinkPastel.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":".error {","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":".list-cell:empty {","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background: derive(rgb(243, 229, 231), -10%);","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":".tag-selector {","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":".tooltip-text {","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"zhengruoxin":20}},{"path":"src/main/resources/view/Font.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"@font-face {","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"    font-family: \u0027Tisa Sans Pro\u0027;","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"    src: url(\u0027../fonts/TisaSansPro-Regular.ttf\u0027);","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"glennljs"},"content":"@font-face {","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"    font-family: \u0027Tisa Sans Pro\u0027;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"glennljs"},"content":"    src: url(\u0027../fonts/TisaSansPro-Medium.ttf\u0027);","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"glennljs"},"content":"@font-face {","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"    font-family: \u0027Tisa Sans Pro\u0027;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"glennljs"},"content":"    src: url(\u0027../fonts/TisaSansPro-Light.ttf\u0027);","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":".label {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Medium\";","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":".label-bright {","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Medium\";","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"glennljs"},"content":".label-header {","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Light\";","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"glennljs"},"content":".text-field {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Medium\";","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"glennljs"},"content":".table-view .column-header .label {","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Light\";","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"glennljs"},"content":".cell_big_label {","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    -fx-font-family: \"Tisa Sans Pro\";","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"glennljs"},"content":".cell_small_label {","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    -fx-font-family: \"Tisa Sans Pro Light\";","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"glennljs"},"content":".result-display {","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Light\";","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"glennljs"},"content":".status-bar .label {","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Light\";","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"glennljs"},"content":".menu-bar .label {","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Light\";","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"glennljs"},"content":"/*","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"glennljs"},"content":" * Metro style Push Button","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"glennljs"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"glennljs"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"glennljs"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"glennljs"},"content":".button {","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Regular\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"glennljs"},"content":"#commandTextField {","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Light\";","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"glennljs"},"content":".help-box {","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"glennljs"},"content":"    -fx-font-family: \"Tisa Sans Pro Light\";","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"glennljs":69,"pyuxiang":2}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"glennljs"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"glennljs"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":9,"author":{"gitId":"glennljs"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"glennljs"},"content":"         \u003cstylesheets\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"glennljs"},"content":"         \u003cURL value\u003d\"@PinkPastelTheme.css\" /\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"glennljs"},"content":"         \u003cURL value\u003d\"@ExtensionsPinkPastel.css\" /\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"glennljs"},"content":"         \u003c/stylesheets\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"glennljs"},"content":"         \u003cVBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":24,"author":{"gitId":"glennljs"},"content":"               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy User Guide URL\"\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"glennljs"},"content":"                  \u003cVBox.margin\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"glennljs"},"content":"                     \u003cInsets bottom\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"glennljs"},"content":"                  \u003c/VBox.margin\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"               \u003c/Button\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"glennljs"},"content":"               \u003cListView fx:id\u003d\"helpBox\" styleClass\u003d\"help-box\" /\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003copaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"glennljs"},"content":"         \u003c/VBox\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"glennljs":14,"-":26}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"         title\u003d\"PartyPlanet\" minWidth\u003d\"1041\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    \u003cScene fx:id\u003d\"scene\"\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"        \u003cURL value\u003d\"@PinkPastelTheme.css\" /\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        \u003cURL value\u003d\"@ExtensionsPinkPastel.css\" /\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Themes\"\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#setThemePastel\" text\u003d\"Pastel\" /\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#setThemeDark\" text\u003d\"Dark\" /\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            \u003c/Menu\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"                   minHeight\u003d\"160\" prefHeight\u003d\"160\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        \u003cHBox minWidth\u003d\"1000\" prefWidth\u003d\"1000\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"          \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"500\" prefWidth\u003d\"500\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"          \u003cVBox fx:id\u003d\"eventList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"500\" prefWidth\u003d\"500\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"            \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"zhengruoxin":2,"pyuxiang":15,"garyljj":2,"-":54}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    \u003cVBox fx:id \u003d \"details\" alignment\u003d\"TOP_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"cell_id_name_box\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"pyuxiang":3,"-":30}},{"path":"src/main/resources/view/PinkPastelTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"glennljs"},"content":"@import \"./Font.css\";","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":".background {","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":".label {","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":".label-bright {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":".label-header {","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":".text-field {","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":".tab-pane {","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":".table-view {","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(rgb(243, 229, 231), -10%);","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 5;","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":".table-view .column-header-background {","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"    -fx-size: 35;","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color:","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"        transparent","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"        transparent","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"        transparent;","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":".table-view .column-header .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":".split-pane {","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"zhengruoxin"},"content":".list-view {","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(rgb(243, 229, 231), -10%);","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"zhengruoxin"},"content":".list-cell {","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"zhengruoxin"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"zhengruoxin"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":99,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":101,"author":{"gitId":"zhengruoxin"},"content":".list-cell:filled:even {","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: rgb(243, 229, 231);","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":104,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":105,"author":{"gitId":"zhengruoxin"},"content":".list-cell:filled:odd {","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: rgb(234, 210, 184);","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"zhengruoxin"},"content":".list-cell:filled:selected {","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: rgb(212, 217, 202);","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"zhengruoxin"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2021-03-23"},{"lineNumber":115,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":116,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":117,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"zhengruoxin"},"content":".list-cell .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":119,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: rgb(68, 45, 44);","lastModifiedDate":"2021-03-23"},{"lineNumber":120,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":121,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":122,"author":{"gitId":"zhengruoxin"},"content":".cell_big_label {","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"    -fx-font-size: 15px;","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-03-23"},{"lineNumber":125,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":126,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":".cell_id_name_box {","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"    -fx-padding: 0 0 4 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":131,"author":{"gitId":"zhengruoxin"},"content":".cell_small_label {","lastModifiedDate":"2021-03-23"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-03-23"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"    -fx-padding: 2 0 0 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":136,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":137,"author":{"gitId":"zhengruoxin"},"content":".stack-pane {","lastModifiedDate":"2021-03-23"},{"lineNumber":138,"author":{"gitId":"zhengruoxin"},"content":"     -fx-background-color: #c7b9ba;","lastModifiedDate":"2021-03-23"},{"lineNumber":139,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":140,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":141,"author":{"gitId":"zhengruoxin"},"content":".pane-with-border {","lastModifiedDate":"2021-03-23"},{"lineNumber":142,"author":{"gitId":"zhengruoxin"},"content":"     -fx-background-color: derive(rgb(243, 229, 231), -10%);","lastModifiedDate":"2021-03-23"},{"lineNumber":143,"author":{"gitId":"zhengruoxin"},"content":"     -fx-border-color: transparent;","lastModifiedDate":"2021-03-23"},{"lineNumber":144,"author":{"gitId":"zhengruoxin"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":146,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":147,"author":{"gitId":"zhengruoxin"},"content":".status-bar {","lastModifiedDate":"2021-03-23"},{"lineNumber":148,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(rgb(243, 229, 231), -10%);","lastModifiedDate":"2021-03-23"},{"lineNumber":149,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":150,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":151,"author":{"gitId":"zhengruoxin"},"content":".result-display {","lastModifiedDate":"2021-03-23"},{"lineNumber":152,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":153,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":154,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-03-23"},{"lineNumber":155,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":156,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":157,"author":{"gitId":"zhengruoxin"},"content":".result-display .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":158,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2021-03-23"},{"lineNumber":159,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":160,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":".result-display .corner {","lastModifiedDate":"2021-03-26"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"    -fx-background-color: rgb(243, 229, 231);","lastModifiedDate":"2021-03-26"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-03-26"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":165,"author":{"gitId":"zhengruoxin"},"content":".status-bar .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":166,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-03-23"},{"lineNumber":167,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2021-03-23"},{"lineNumber":168,"author":{"gitId":"zhengruoxin"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2021-03-23"},{"lineNumber":169,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":170,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":171,"author":{"gitId":"zhengruoxin"},"content":".status-bar-with-border {","lastModifiedDate":"2021-03-23"},{"lineNumber":172,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2021-03-23"},{"lineNumber":173,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2021-03-23"},{"lineNumber":174,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-03-23"},{"lineNumber":175,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":176,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":177,"author":{"gitId":"zhengruoxin"},"content":".status-bar-with-border .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":178,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":179,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":180,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":181,"author":{"gitId":"zhengruoxin"},"content":".grid-pane {","lastModifiedDate":"2021-03-23"},{"lineNumber":182,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2021-03-23"},{"lineNumber":183,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2021-03-23"},{"lineNumber":184,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2021-03-23"},{"lineNumber":185,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":186,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":187,"author":{"gitId":"zhengruoxin"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2021-03-23"},{"lineNumber":188,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2021-03-23"},{"lineNumber":189,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":190,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":191,"author":{"gitId":"zhengruoxin"},"content":".context-menu {","lastModifiedDate":"2021-03-23"},{"lineNumber":192,"author":{"gitId":"pyuxiang"},"content":"    -fx-background-color: derive(rgb(183, 159, 153), 10%);","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":194,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":195,"author":{"gitId":"zhengruoxin"},"content":".context-menu .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":196,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":197,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":198,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":199,"author":{"gitId":"zhengruoxin"},"content":".menu-bar {","lastModifiedDate":"2021-03-23"},{"lineNumber":200,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(rgb(243, 229, 231), -10%);","lastModifiedDate":"2021-03-23"},{"lineNumber":201,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":202,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":203,"author":{"gitId":"zhengruoxin"},"content":".menu-bar .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":204,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":205,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-03-23"},{"lineNumber":206,"author":{"gitId":"zhengruoxin"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2021-03-23"},{"lineNumber":207,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":208,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":209,"author":{"gitId":"zhengruoxin"},"content":".menu .left-container {","lastModifiedDate":"2021-03-23"},{"lineNumber":210,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: black;","lastModifiedDate":"2021-03-23"},{"lineNumber":211,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":212,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":213,"author":{"gitId":"pyuxiang"},"content":".menu:hover, .menu:showing {","lastModifiedDate":"2021-03-30"},{"lineNumber":214,"author":{"gitId":"pyuxiang"},"content":"    -fx-background-color: derive(rgb(183, 159, 153), 30%);","lastModifiedDate":"2021-03-30"},{"lineNumber":215,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":216,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":217,"author":{"gitId":"pyuxiang"},"content":".menu-item:focused {","lastModifiedDate":"2021-03-30"},{"lineNumber":218,"author":{"gitId":"pyuxiang"},"content":"    -fx-background-color: derive(rgb(183, 159, 153), 50%);","lastModifiedDate":"2021-03-30"},{"lineNumber":219,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-30"},{"lineNumber":220,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":221,"author":{"gitId":"zhengruoxin"},"content":"/*","lastModifiedDate":"2021-03-23"},{"lineNumber":222,"author":{"gitId":"zhengruoxin"},"content":" * Metro style Push Button","lastModifiedDate":"2021-03-23"},{"lineNumber":223,"author":{"gitId":"zhengruoxin"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2021-03-23"},{"lineNumber":224,"author":{"gitId":"zhengruoxin"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2021-03-23"},{"lineNumber":225,"author":{"gitId":"zhengruoxin"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":226,"author":{"gitId":"zhengruoxin"},"content":".button {","lastModifiedDate":"2021-03-23"},{"lineNumber":227,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2021-03-23"},{"lineNumber":228,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2021-03-23"},{"lineNumber":229,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2021-03-23"},{"lineNumber":230,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":231,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2021-03-23"},{"lineNumber":232,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":233,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2021-03-23"},{"lineNumber":234,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2021-03-23"},{"lineNumber":235,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":236,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":237,"author":{"gitId":"zhengruoxin"},"content":".button:hover {","lastModifiedDate":"2021-03-23"},{"lineNumber":238,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2021-03-23"},{"lineNumber":239,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":240,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":241,"author":{"gitId":"zhengruoxin"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2021-03-23"},{"lineNumber":242,"author":{"gitId":"zhengruoxin"},"content":"  -fx-background-color: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":243,"author":{"gitId":"zhengruoxin"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2021-03-23"},{"lineNumber":244,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":245,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":246,"author":{"gitId":"zhengruoxin"},"content":".button:focused {","lastModifiedDate":"2021-03-23"},{"lineNumber":247,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2021-03-23"},{"lineNumber":248,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":249,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2021-03-23"},{"lineNumber":250,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":251,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":252,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":253,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":254,"author":{"gitId":"zhengruoxin"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2021-03-23"},{"lineNumber":255,"author":{"gitId":"zhengruoxin"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2021-03-23"},{"lineNumber":256,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2021-03-23"},{"lineNumber":257,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":258,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":259,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":260,"author":{"gitId":"zhengruoxin"},"content":".button:default {","lastModifiedDate":"2021-03-23"},{"lineNumber":261,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2021-03-23"},{"lineNumber":262,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-03-23"},{"lineNumber":263,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":264,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":265,"author":{"gitId":"zhengruoxin"},"content":".button:default:hover {","lastModifiedDate":"2021-03-23"},{"lineNumber":266,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2021-03-23"},{"lineNumber":267,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":268,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":269,"author":{"gitId":"zhengruoxin"},"content":".dialog-pane {","lastModifiedDate":"2021-03-23"},{"lineNumber":270,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2021-03-23"},{"lineNumber":271,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":272,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":273,"author":{"gitId":"zhengruoxin"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2021-03-23"},{"lineNumber":274,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2021-03-23"},{"lineNumber":275,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":276,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":277,"author":{"gitId":"zhengruoxin"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2021-03-23"},{"lineNumber":278,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2021-03-23"},{"lineNumber":279,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2021-03-23"},{"lineNumber":280,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":281,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":282,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":283,"author":{"gitId":"zhengruoxin"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2021-03-23"},{"lineNumber":284,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2021-03-23"},{"lineNumber":285,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":286,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":287,"author":{"gitId":"zhengruoxin"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2021-03-23"},{"lineNumber":288,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2021-03-23"},{"lineNumber":289,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2021-03-23"},{"lineNumber":290,"author":{"gitId":"zhengruoxin"},"content":"    -fx-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":291,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":292,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":293,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":294,"author":{"gitId":"zhengruoxin"},"content":".scroll-bar {","lastModifiedDate":"2021-03-23"},{"lineNumber":295,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: rgb(243, 229, 231);","lastModifiedDate":"2021-03-23"},{"lineNumber":296,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":297,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":298,"author":{"gitId":"zhengruoxin"},"content":".scroll-bar .thumb {","lastModifiedDate":"2021-03-23"},{"lineNumber":299,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: derive(rgb(204, 196, 196), -20%);","lastModifiedDate":"2021-03-23"},{"lineNumber":300,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2021-03-23"},{"lineNumber":301,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":302,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":303,"author":{"gitId":"zhengruoxin"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2021-03-23"},{"lineNumber":304,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-03-23"},{"lineNumber":305,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":306,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":307,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":308,"author":{"gitId":"zhengruoxin"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2021-03-23"},{"lineNumber":309,"author":{"gitId":"zhengruoxin"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2021-03-23"},{"lineNumber":310,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":311,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":312,"author":{"gitId":"zhengruoxin"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2021-03-23"},{"lineNumber":313,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2021-03-23"},{"lineNumber":314,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":315,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":316,"author":{"gitId":"zhengruoxin"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2021-03-23"},{"lineNumber":317,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":318,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":319,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":320,"author":{"gitId":"zhengruoxin"},"content":"#cardPane {","lastModifiedDate":"2021-03-23"},{"lineNumber":321,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-03-23"},{"lineNumber":322,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":323,"author":{"gitId":"pyuxiang"},"content":"    -fx-padding: 1 0 3 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":324,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":325,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":326,"author":{"gitId":"zhengruoxin"},"content":"#commandTypeLabel {","lastModifiedDate":"2021-03-23"},{"lineNumber":327,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2021-03-23"},{"lineNumber":328,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2021-03-23"},{"lineNumber":329,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":330,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":331,"author":{"gitId":"zhengruoxin"},"content":"#commandTextField {","lastModifiedDate":"2021-03-23"},{"lineNumber":332,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2021-03-23"},{"lineNumber":333,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":334,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2021-03-23"},{"lineNumber":335,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":336,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":337,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2021-03-23"},{"lineNumber":338,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-03-23"},{"lineNumber":339,"author":{"gitId":"zhengruoxin"},"content":"    -fx-prompt-text-fill: derive(black, 82%);","lastModifiedDate":"2021-03-23"},{"lineNumber":340,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":341,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":342,"author":{"gitId":"zhengruoxin"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2021-03-23"},{"lineNumber":343,"author":{"gitId":"zhengruoxin"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2021-03-23"},{"lineNumber":344,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":345,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":346,"author":{"gitId":"zhengruoxin"},"content":"#resultDisplay .content {","lastModifiedDate":"2021-03-23"},{"lineNumber":347,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: transparent, #c7b9ba, transparent, #c7b9ba;","lastModifiedDate":"2021-03-23"},{"lineNumber":348,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":349,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":350,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":351,"author":{"gitId":"zhengruoxin"},"content":"#tags {","lastModifiedDate":"2021-03-23"},{"lineNumber":352,"author":{"gitId":"zhengruoxin"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2021-03-23"},{"lineNumber":353,"author":{"gitId":"zhengruoxin"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2021-03-23"},{"lineNumber":354,"author":{"gitId":"pyuxiang"},"content":"    -fx-padding: 2 0 4 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":355,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":356,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":357,"author":{"gitId":"zhengruoxin"},"content":"#tags .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":358,"author":{"gitId":"zhengruoxin"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":359,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-color: rgb(183, 159, 153);","lastModifiedDate":"2021-03-23"},{"lineNumber":360,"author":{"gitId":"zhengruoxin"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2021-03-23"},{"lineNumber":361,"author":{"gitId":"zhengruoxin"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2021-03-23"},{"lineNumber":362,"author":{"gitId":"zhengruoxin"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2021-03-23"},{"lineNumber":363,"author":{"gitId":"zhengruoxin"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2021-03-23"},{"lineNumber":364,"author":{"gitId":"zhengruoxin"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":365,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":366,"author":{"gitId":"glennljs"},"content":".help-box {","lastModifiedDate":"2021-04-05"},{"lineNumber":367,"author":{"gitId":"glennljs"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-04-05"},{"lineNumber":368,"author":{"gitId":"glennljs"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"glennljs":6,"zhengruoxin":340,"pyuxiang":18,"garyljj":4}},{"path":"src/test/data/JsonEventBookStorageTest/invalidAndValidEventEventBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"{","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"  \"events\": [ {","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    \"name\": \"Jan Celebration\",","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"0\",","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"2022-01-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"10 people\"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"  }, {","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    \"name\": \"Event With Invalid Date Field\",","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"0\",","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"2021-13-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"10 people\"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"  } ]","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":13}},{"path":"src/test/data/JsonEventBookStorageTest/invalidEventEventBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"{","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"  \"events\": [ {","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    \"name\": \"Event With Invalid Date Field\",","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"0\",","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"2021-13-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"10 people\"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"  } ]","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":8}},{"path":"src/test/data/JsonEventBookStorageTest/notJsonFormatEventBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"not json format!","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1999-10-27\",","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves snacks\",","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1997-11-28\",","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves snacks\"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"zhengruoxin":2,"-":13,"Ellevy":3}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1999-10-27\",","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves pink\",","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1999-10-27\",","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves pink\",","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1999-10-27\",","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves pink\",","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1999-10-27\",","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves pink\",","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1999-10-27\",","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves pink\",","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1999-10-27\",","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves pink\",","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"    \"birthday\" : \"1999-10-27\",","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    \"remark\": \"loves pink\",","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"zhengruoxin":7,"-":46,"Ellevy":7}},{"path":"src/test/data/JsonSerializableEventBookTest/duplicateEventEventBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"{","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"  \"events\" : [ {","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    \"name\" : \"Jan celebration\",","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"1\",","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"2021-01-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"10 people\"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"  }, {","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"      \"name\" : \"Jan celebration\",","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"      \"isDone\" : \"1\",","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"      \"eventDate\" : \"2021-01-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"      \"detail\" : \"5 people\"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"  } ]","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":14}},{"path":"src/test/data/JsonSerializableEventBookTest/invalidEventEventBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"{","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"  \"events\" : [ {","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    \"name\" : \"Jan celebration\",","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"1\",","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"01-01-2019\",","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"10 people\"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"  } ]","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":8}},{"path":"src/test/data/JsonSerializableEventBookTest/typicalEventsEventBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"{","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"  \"_comment\": \"EventBook save file which contains the same Event values as in TypicalEvents#getTypicalEventBook()\",","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"  \"events\" : [ {","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    \"name\" : \"Jan Celebration\",","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"2022-01-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"10 people\",","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"0\"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"  }, {","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    \"name\" : \"Feb Celebration\",","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"2022-02-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"10 people\",","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"0\"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"  }, {","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    \"name\" : \"Mar Celebration\",","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"2022-03-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"PLAN NOW!\",","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"0\"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"  }, {","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    \"name\" : \"Apr Celebration\",","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    \"eventDate\" : \"2022-04-01\",","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    \"detail\" : \"in school\",","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    \"isDone\" : \"0\"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"  } ]","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":24}},{"path":"src/test/java/seedu/partyplanet/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"garyljj":1,"-":57}},{"path":"src/test/java/seedu/partyplanet/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"garyljj":1,"-":26}},{"path":"src/test/java/seedu/partyplanet/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":2,"-":133}},{"path":"src/test/java/seedu/partyplanet/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.core.index;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"garyljj":2,"-":58}},{"path":"src/test/java/seedu/partyplanet/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"garyljj":2,"-":34}},{"path":"src/test/java/seedu/partyplanet/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"garyljj":3,"-":105}},{"path":"src/test/java/seedu/partyplanet/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.Config;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"garyljj":4,"-":112}},{"path":"src/test/java/seedu/partyplanet/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":2,"-":21}},{"path":"src/test/java/seedu/partyplanet/commons/util/InputHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" * Contains tests for {@code InputHistory}.","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"public class InputHistoryTest {","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    private InputHistory inputHistory;","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    @BeforeEach","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    public void setUp() {","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        // InputHistory contains [a, b, c]","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        inputHistory \u003d new InputHistory();","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        inputHistory.add(\"a\");","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        inputHistory.add(\"b\");","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        inputHistory.add(\"c\");","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    public void getPrevious_previousTest_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"c\", inputHistory.getPrevious());","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"b\", inputHistory.getPrevious());","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"a\", inputHistory.getPrevious());","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        // Once reach start, should always be a","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"a\", inputHistory.getPrevious());","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"a\", inputHistory.getPrevious());","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    public void getNext_nextTest_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        inputHistory.getPrevious();","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        inputHistory.getPrevious();","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        inputHistory.getPrevious();","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"b\", inputHistory.getNext());","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"c\", inputHistory.getNext());","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"\", inputHistory.getNext());","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        // Once reach latest, should always be blank","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"\", inputHistory.getNext());","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"\", inputHistory.getNext());","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    public void getPrevious_previousTestEmptyList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        inputHistory \u003d new InputHistory();","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"\", inputHistory.getPrevious());","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    public void getNext_nextTestEmptyList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        inputHistory \u003d new InputHistory();","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"\", inputHistory.getNext());","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    public void add_doNotAddIfSameAsMostRecent() {","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        assertEquals(3, inputHistory.size());","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        inputHistory.add(\"duplicate\");","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        assertEquals(4, inputHistory.size());","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        inputHistory.add(\"duplicate\");","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        inputHistory.add(\"duplicate\");","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        inputHistory.add(\"duplicate\");","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        assertEquals(4, inputHistory.size()); // duplicates not added","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    public void testMaxSize() {","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        inputHistory \u003d new InputHistory();","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        assertEquals(0, inputHistory.size());","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        for (int c \u003d 0; c \u003c 20; c++) {","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"            inputHistory.add(c + \"\");","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        assertEquals(20, inputHistory.size());","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        inputHistory.add(\"oneMore\");","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        assertEquals(20, inputHistory.size()); // Size unchanged","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"garyljj":87}},{"path":"src/test/java/seedu/partyplanet/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.SerializableTestClass;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.TestUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":3,"-":42}},{"path":"src/test/java/seedu/partyplanet/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.commons.util;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"garyljj":2,"-":141}},{"path":"src/test/java/seedu/partyplanet/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_PERSONS_LISTED_TAGS;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.AddCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.CommandResult;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.ListCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.storage.JsonEventBookStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.storage.StorageManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        JsonEventBookStorage eventBookStorage \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"            new JsonEventBookStorage(temporaryFolder.resolve(\"eventBook.json\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"None!\"), model);","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        JsonEventBookStorage eventBookStorage \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"            new JsonEventBookStorage(temporaryFolder.resolve(\"eventBook.json\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);","lastModifiedDate":"2021-03-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"                + BIRTHDAY_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"zhengruoxin":2,"garyljj":24,"-":128,"Ellevy":10}},{"path":"src/test/java/seedu/partyplanet/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"garyljj":8,"-":34,"Ellevy":4}},{"path":"src/test/java/seedu/partyplanet/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"glennljs"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.commons.util.State;","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.commons.util.StateHistory;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"nickyfoo"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"nickyfoo"},"content":"        public void addState(String command) {","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"nickyfoo"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"nickyfoo"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"nickyfoo"},"content":"        public String undo() {","lastModifiedDate":"2021-03-29"},{"lineNumber":155,"author":{"gitId":"nickyfoo"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"nickyfoo"},"content":"        @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":159,"author":{"gitId":"nickyfoo"},"content":"        public String redo() {","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"nickyfoo"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":161,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":162,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":163,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":174,"author":{"gitId":"glennljs"},"content":"        @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":175,"author":{"gitId":"glennljs"},"content":"        public void sortPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-03-10"},{"lineNumber":176,"author":{"gitId":"glennljs"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-09"},{"lineNumber":177,"author":{"gitId":"glennljs"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":178,"author":{"gitId":"glennljs"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"        @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"        public List\u003cPerson\u003e getPersonListCopy() {","lastModifiedDate":"2021-03-08"},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-08"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":183,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":184,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":185,"author":{"gitId":"Ellevy"},"content":"        public Path getEventBookFilePath() {","lastModifiedDate":"2021-03-19"},{"lineNumber":186,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":187,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":188,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":189,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":190,"author":{"gitId":"Ellevy"},"content":"        public void setEventBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-03-19"},{"lineNumber":191,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":192,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":193,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":194,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":195,"author":{"gitId":"Ellevy"},"content":"        public void setEventBook(ReadOnlyEventBook eventBook) {","lastModifiedDate":"2021-03-19"},{"lineNumber":196,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":197,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":198,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":199,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":200,"author":{"gitId":"Ellevy"},"content":"        public ReadOnlyEventBook getEventBook() {","lastModifiedDate":"2021-03-19"},{"lineNumber":201,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":202,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":203,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":204,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":205,"author":{"gitId":"Ellevy"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2021-03-19"},{"lineNumber":206,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":207,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":208,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":209,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":210,"author":{"gitId":"Ellevy"},"content":"        public void deleteEvent(Event target) {","lastModifiedDate":"2021-03-19"},{"lineNumber":211,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":212,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":213,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":214,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":215,"author":{"gitId":"Ellevy"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2021-03-19"},{"lineNumber":216,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":217,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":218,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":219,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":220,"author":{"gitId":"Ellevy"},"content":"        public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-03-19"},{"lineNumber":221,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":222,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":223,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":224,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":225,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":226,"author":{"gitId":"Ellevy"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-03-19"},{"lineNumber":227,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":228,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":229,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":230,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":231,"author":{"gitId":"Ellevy"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-03-19"},{"lineNumber":232,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":233,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":234,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":235,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":236,"author":{"gitId":"Ellevy"},"content":"        public void sortEventList(Comparator\u003cEvent\u003e comparator) {","lastModifiedDate":"2021-03-19"},{"lineNumber":237,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":238,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":239,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":240,"author":{"gitId":"Ellevy"},"content":"        @Override","lastModifiedDate":"2021-03-19"},{"lineNumber":241,"author":{"gitId":"Ellevy"},"content":"        public List\u003cEvent\u003e getEventListCopy() {","lastModifiedDate":"2021-03-19"},{"lineNumber":242,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":243,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":265,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":270,"author":{"gitId":"nickyfoo"},"content":"        private State savedState \u003d new State(\"Loading from saved data\", getAddressBook(), getEventBook());","lastModifiedDate":"2021-03-28"},{"lineNumber":271,"author":{"gitId":"nickyfoo"},"content":"        final StateHistory stateHistory \u003d new StateHistory(savedState);","lastModifiedDate":"2021-03-28"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":285,"author":{"gitId":"nickyfoo"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":286,"author":{"gitId":"nickyfoo"},"content":"        public void addState(String command) {","lastModifiedDate":"2021-03-28"},{"lineNumber":287,"author":{"gitId":"nickyfoo"},"content":"            stateHistory.addState(new State(command, getAddressBook(), getEventBook()));","lastModifiedDate":"2021-03-28"},{"lineNumber":288,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":289,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":294,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":295,"author":{"gitId":"nickyfoo"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":296,"author":{"gitId":"nickyfoo"},"content":"        public ReadOnlyEventBook getEventBook() {","lastModifiedDate":"2021-03-28"},{"lineNumber":297,"author":{"gitId":"nickyfoo"},"content":"            return new EventBook();","lastModifiedDate":"2021-03-28"},{"lineNumber":298,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"glennljs":7,"nickyfoo":31,"garyljj":15,"-":185,"Ellevy":63}},{"path":"src/test/java/seedu/partyplanet/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false)));","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true)));","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true).hashCode());","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"nickyfoo":3,"garyljj":1,"-":44}},{"path":"src/test/java/seedu/partyplanet/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.event.predicates.EventNameContainsKeywordsPredicate;","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"1990-10-27\";","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"1990-11-15\";","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    public static final String VALID_REMARK_AMY \u003d \"loves purple\";","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    public static final String VALID_REMARK_BOB \u003d \"loves white\";","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    public static final String VALID_NAME_CNY \u003d \"CNY\";","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public static final String VALID_NAME_EASTER \u003d \"Easter\";","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    public static final String VALID_DATE_CNY \u003d \"2022-02-01\";","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    public static final String VALID_DATE_EASTER \u003d \"2022-04-04\";","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"    public static final String VALID_DETAIL_CNY \u003d \"buy oranges\";","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    public static final String VALID_DETAIL_EASTER \u003d \"buy easter eggs\";","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_AMY;","lastModifiedDate":"2021-03-07"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_BOB;","lastModifiedDate":"2021-03-07"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + \" \" + VALID_PHONE_AMY;","lastModifiedDate":"2021-03-07"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + \" \" + VALID_PHONE_BOB;","lastModifiedDate":"2021-03-07"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + \" \" + VALID_EMAIL_AMY;","lastModifiedDate":"2021-03-07"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + \" \" + VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + \" \" + VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + \" \" + VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_AMY;","lastModifiedDate":"2021-03-07"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-07"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + \" \" + VALID_REMARK_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + \" \" + VALID_REMARK_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_FRIEND;","lastModifiedDate":"2021-03-07"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"    public static final String NAME_DESC_CNY \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_CNY;","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    public static final String NAME_DESC_EASTER \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_EASTER;","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"    public static final String DATE_DESC_CNY \u003d \" \" + PREFIX_BIRTHDAY + \" \" + VALID_DATE_CNY;","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    public static final String DATE_DESC_EASTER \u003d \" \" + PREFIX_BIRTHDAY + \" \" + VALID_DATE_EASTER;","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"    public static final String DETAIL_DESC_EASTER \u003d \" \" + PREFIX_REMARK + \" \" + VALID_DETAIL_EASTER;","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" \" + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2021-03-07"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \" \" + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2021-03-07"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \" \" + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2021-03-07"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"            \" \" + PREFIX_BIRTHDAY + \" \" + \"12345678\"; // not in yyyy-mm-dd format","lastModifiedDate":"2021-03-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \" \" + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2021-03-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":88,"author":{"gitId":"zhengruoxin"},"content":"    public static final EditFieldCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"zhengruoxin"},"content":"    public static final EditFieldCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"zhengruoxin"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY)","lastModifiedDate":"2021-03-11"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"zhengruoxin"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withBirthday(VALID_BIRTHDAY_BOB)","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"zhengruoxin"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":152,"author":{"gitId":"glennljs"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(splitName[0]));","lastModifiedDate":"2021-03-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2021-04-05"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-04-05"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"     * Multiple targetIndexes can be provided.","lastModifiedDate":"2021-04-05"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"     * Every targetIndex has to be valid.","lastModifiedDate":"2021-04-05"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"    public static void showPersonAtMultipleIndex(Model model, Index... targetIndexes) {","lastModifiedDate":"2021-04-05"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"        assertTrue(targetIndexes.length \u003e\u003d 1);","lastModifiedDate":"2021-04-05"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e personNames \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"        for (Index i : targetIndexes) {","lastModifiedDate":"2021-04-05"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"            assertTrue(i.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2021-04-05"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"            personNames.add(model.getFilteredPersonList().get(i.getZeroBased()).getName().fullName);","lastModifiedDate":"2021-04-05"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"        Predicate\u003cPerson\u003e allPersons \u003d new NameContainsKeywordsPredicate(personNames.get(0));","lastModifiedDate":"2021-04-05"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"        for (int c \u003d 1; c \u003c personNames.size(); c++) {","lastModifiedDate":"2021-04-05"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"            allPersons \u003d allPersons.or(new NameContainsKeywordsPredicate(personNames.get(c)));","lastModifiedDate":"2021-04-05"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"        model.updateFilteredPersonList(allPersons);","lastModifiedDate":"2021-04-05"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"        assertEquals(targetIndexes.length, model.getFilteredPersonList().size());","lastModifiedDate":"2021-04-05"},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":183,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":184,"author":{"gitId":"garyljj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the","lastModifiedDate":"2021-04-05"},{"lineNumber":185,"author":{"gitId":"garyljj"},"content":"     * {@code model}\u0027s event book.","lastModifiedDate":"2021-04-05"},{"lineNumber":186,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":187,"author":{"gitId":"garyljj"},"content":"    public static void showEventAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-04-05"},{"lineNumber":188,"author":{"gitId":"garyljj"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEventList().size());","lastModifiedDate":"2021-04-05"},{"lineNumber":189,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":190,"author":{"gitId":"garyljj"},"content":"        Event event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":191,"author":{"gitId":"garyljj"},"content":"        final String[] splitName \u003d event.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-04-05"},{"lineNumber":192,"author":{"gitId":"garyljj"},"content":"        model.updateFilteredEventList(new EventNameContainsKeywordsPredicate(splitName[0]));","lastModifiedDate":"2021-04-05"},{"lineNumber":193,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":194,"author":{"gitId":"garyljj"},"content":"        assertEquals(1, model.getFilteredEventList().size());","lastModifiedDate":"2021-04-05"},{"lineNumber":195,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":196,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":197,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":198,"author":{"gitId":"garyljj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the","lastModifiedDate":"2021-04-05"},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"     * {@code model}\u0027s event book.","lastModifiedDate":"2021-04-05"},{"lineNumber":200,"author":{"gitId":"garyljj"},"content":"     * Multiple targetIndexes can be provided.","lastModifiedDate":"2021-04-05"},{"lineNumber":201,"author":{"gitId":"garyljj"},"content":"     * Every targetIndex has to be valid.","lastModifiedDate":"2021-04-05"},{"lineNumber":202,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":203,"author":{"gitId":"garyljj"},"content":"    public static void showEventAtMultipleIndex(Model model, Index... targetIndexes) {","lastModifiedDate":"2021-04-05"},{"lineNumber":204,"author":{"gitId":"garyljj"},"content":"        assertTrue(targetIndexes.length \u003e\u003d 1);","lastModifiedDate":"2021-04-05"},{"lineNumber":205,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":206,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e eventNames \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":207,"author":{"gitId":"garyljj"},"content":"        for (Index i : targetIndexes) {","lastModifiedDate":"2021-04-05"},{"lineNumber":208,"author":{"gitId":"garyljj"},"content":"            assertTrue(i.getZeroBased() \u003c model.getFilteredEventList().size());","lastModifiedDate":"2021-04-05"},{"lineNumber":209,"author":{"gitId":"garyljj"},"content":"            eventNames.add(model.getFilteredEventList().get(i.getZeroBased()).getName().fullName);","lastModifiedDate":"2021-04-05"},{"lineNumber":210,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":211,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":212,"author":{"gitId":"garyljj"},"content":"        Predicate\u003cEvent\u003e allEvents \u003d new EventNameContainsKeywordsPredicate(eventNames.get(0));","lastModifiedDate":"2021-04-05"},{"lineNumber":213,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":214,"author":{"gitId":"garyljj"},"content":"        for (int c \u003d 1; c \u003c eventNames.size(); c++) {","lastModifiedDate":"2021-04-05"},{"lineNumber":215,"author":{"gitId":"garyljj"},"content":"            allEvents \u003d allEvents.or(new EventNameContainsKeywordsPredicate(eventNames.get(c)));","lastModifiedDate":"2021-04-05"},{"lineNumber":216,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":217,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":218,"author":{"gitId":"garyljj"},"content":"        model.updateFilteredEventList(allEvents);","lastModifiedDate":"2021-04-05"},{"lineNumber":219,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":220,"author":{"gitId":"garyljj"},"content":"        assertEquals(targetIndexes.length, model.getFilteredEventList().size());","lastModifiedDate":"2021-04-05"},{"lineNumber":221,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"glennljs":1,"zhengruoxin":12,"pyuxiang":14,"garyljj":84,"-":92,"Ellevy":19}},{"path":"src/test/java/seedu/partyplanet/logic/commands/DeleteClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":" * {@code DeleteClearCommand}.","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"public class DeleteClearCommandTest {","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    public void execute_validDeleteClear_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteClearCommand();","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e personsDeleted \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"                displayPersons(personsDeleted));","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        for (Person p : personsDeleted) {","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            expectedModel.deletePerson(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    public void execute_deleteClearEmptyList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteClearCommand();","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, \"None!\");","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        expectedModel.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    public void equals() {","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteClearCommand();","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteClearCommand();","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        assertTrue(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     * Returns list of persons in the form \"a, b, c,...\"","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    private String displayPersons(List\u003cPerson\u003e deletedPersons) {","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        return deletedPersons.stream()","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"                .orElse(\"None!\");","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"garyljj":84}},{"path":"src/test/java/seedu/partyplanet/logic/commands/DeleteContactCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.showPersonAtMultipleIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":" * {@code DeleteContactCommand}.","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"public class DeleteContactCommandTest {","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    public void execute_validSingleIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactCommand(List.of(INDEX_FIRST_PERSON), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"                personToDelete.getName());","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    public void execute_validSingleIndexFilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactCommand(List.of(INDEX_FIRST_PERSON), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"                personToDelete.getName());","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    public void execute_validMultipleIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e personsToDelete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        personsToDelete.add(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        personsToDelete.add(model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"                displayPersons(personsToDelete));","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"        for (Person p : personsToDelete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"            expectedModel.deletePerson(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    public void execute_validMultipleIndexFilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        showPersonAtMultipleIndex(model, INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e personsToDelete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        personsToDelete.add(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        personsToDelete.add(model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"                displayPersons(personsToDelete));","lastModifiedDate":"2021-04-05"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"        for (Person p : personsToDelete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"            expectedModel.deletePerson(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"    public void execute_allInvalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactCommand(List.of(Index.fromZeroBased(100)), new ArrayList\u003c\u003e());","lastModifiedDate":"2021-04-05"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-04-05"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"                Messages.MESSAGE_NONE_INDEX_VALID, () -\u003e deleteCommand.execute(expectedModel));","lastModifiedDate":"2021-04-05"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"    public void execute_bothValidInvalidIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e personsToDelete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"        personsToDelete.add(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"        personsToDelete.add(model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), List.of(\"invalid\", \"-1\"));","lastModifiedDate":"2021-04-05"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"                + \"\\n\" + DeleteContactCommand.MESSAGE_INVALID_PERSON_INDEX,","lastModifiedDate":"2021-04-05"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"                displayPersons(personsToDelete), \"invalid, -1\");","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"        for (Person p : personsToDelete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"            expectedModel.deletePerson(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"    public void equals() {","lastModifiedDate":"2021-04-05"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteContactCommand(List.of(INDEX_FIRST_PERSON), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteContactCommand(List.of(INDEX_SECOND_PERSON), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteContactCommand(List.of(INDEX_FIRST_PERSON), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-04-05"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-04-05"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-04-05"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-04-05"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2021-04-05"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2021-04-05"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2021-04-05"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"     * Returns list of persons in the form \"a, b, c,...\"","lastModifiedDate":"2021-04-05"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"    private String displayPersons(List\u003cPerson\u003e deletedPersons) {","lastModifiedDate":"2021-04-05"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":"        return deletedPersons.stream()","lastModifiedDate":"2021-04-05"},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-04-05"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-04-05"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"                .orElse(\"\");","lastModifiedDate":"2021-04-05"},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"garyljj":182}},{"path":"src/test/java/seedu/partyplanet/logic/commands/DeleteContactWithTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import java.util.Set;","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":" * {@code DeleteContactWithTagCommand}.","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"public class DeleteContactWithTagCommandTest {","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    private Model model;","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    private Set\u003cTag\u003e validTags;","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    private Set\u003cTag\u003e invalidTags;","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    {","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        // AMY has tag friends","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        // BOB has tag friends and husband","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        ab.setPersons(List.of(AMY, BOB));","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        model \u003d new ModelManager(ab, getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        validTags \u003d Set.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND));","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        invalidTags \u003d Set.of(new Tag(\"thistagshouldnotmatch\"), new Tag(\"thistagshouldnotmatchtoo\"));","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    public void execute_validAnyTagUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e personsToDelete \u003d List.of(AMY, BOB);","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactWithTagCommand(validTags, true);","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"                displayPersons(personsToDelete));","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        for (Person p : personsToDelete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"            expectedModel.deletePerson(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    public void execute_validAllTagUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        List\u003cPerson\u003e personsToDelete \u003d List.of(BOB);","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactWithTagCommand(validTags, false);","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"                displayPersons(personsToDelete));","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"        for (Person p : personsToDelete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"            expectedModel.deletePerson(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"    public void execute_validAnyTagNoneMatch_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactWithTagCommand(invalidTags, true);","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactWithTagCommand.MESSAGE_PERSON_NOT_REMOVED_ANY);","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"    public void execute_validAllTagNoneMatch_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteContactWithTagCommand(invalidTags, false);","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(DeleteContactWithTagCommand.MESSAGE_PERSON_NOT_REMOVED_ALL);","lastModifiedDate":"2021-04-05"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    public void equals() {","lastModifiedDate":"2021-04-05"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteAnyValidCommand \u003d new DeleteContactWithTagCommand(validTags, true);","lastModifiedDate":"2021-04-05"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteAllValidCommand \u003d new DeleteContactWithTagCommand(validTags, false);","lastModifiedDate":"2021-04-05"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteAnyInvalidCommand \u003d new DeleteContactWithTagCommand(invalidTags, true);","lastModifiedDate":"2021-04-05"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"        assertTrue(deleteAnyValidCommand.equals(deleteAnyValidCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"        DeleteCommand deleteAnyValidCommandCopy \u003d new DeleteContactWithTagCommand(validTags, true);","lastModifiedDate":"2021-04-05"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"        assertTrue(deleteAnyValidCommand.equals(deleteAnyValidCommandCopy));","lastModifiedDate":"2021-04-05"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteAnyValidCommand.equals(1));","lastModifiedDate":"2021-04-05"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteAnyValidCommand.equals(null));","lastModifiedDate":"2021-04-05"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"        // any vs all -\u003e return false","lastModifiedDate":"2021-04-05"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteAnyValidCommand.equals(deleteAllValidCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"        assertFalse(deleteAnyValidCommand.equals(deleteAnyInvalidCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"     * Returns list of persons in the form \"a, b, c,...\"","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"    private String displayPersons(List\u003cPerson\u003e deletedPersons) {","lastModifiedDate":"2021-04-05"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"        return deletedPersons.stream()","lastModifiedDate":"2021-04-05"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-04-05"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-04-05"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"                .orElse(\"\");","lastModifiedDate":"2021-04-05"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"garyljj":140}},{"path":"src/test/java/seedu/partyplanet/logic/commands/EDeleteClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":" * {@code EDeleteClearCommand}.","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"public class EDeleteClearCommandTest {","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    public void execute_validDeleteClear_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteCommand \u003d new EDeleteClearCommand();","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e eventsDeleted \u003d model.getFilteredEventList();","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDeleteClearCommand.MESSAGE_DELETE_EVENT_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"                displayEvents(eventsDeleted));","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        for (Event p : eventsDeleted) {","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            expectedModel.deleteEvent(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    public void execute_deleteClearEmptyList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteCommand \u003d new EDeleteClearCommand();","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        model.updateFilteredEventList(p -\u003e false);","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDeleteClearCommand.MESSAGE_DELETE_EVENT_SUCCESS, \"None!\");","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        expectedModel.updateFilteredEventList(p -\u003e false);","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    public void equals() {","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteFirstCommand \u003d new EDeleteClearCommand();","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteSecondCommand \u003d new EDeleteClearCommand();","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        assertTrue(eDeleteFirstCommand.equals(eDeleteFirstCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        assertTrue(eDeleteFirstCommand.equals(eDeleteSecondCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        assertFalse(eDeleteFirstCommand.equals(1));","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        assertFalse(eDeleteFirstCommand.equals(null));","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     * Returns list of events in the form \"a, b, c,...\"","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    private String displayEvents(List\u003cEvent\u003e deletedEvents) {","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        return deletedEvents.stream()","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"                .orElse(\"None!\");","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"garyljj":84}},{"path":"src/test/java/seedu/partyplanet/logic/commands/EDeleteEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.showEventAtMultipleIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_EVENT;","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_SECOND_EVENT;","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":" * {@code EDeleteEventCommand}.","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"public class EDeleteEventCommandTest {","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    public void execute_validSingleIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteCommand \u003d new EDeleteEventCommand(List.of(INDEX_FIRST_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"                eventToDelete.getName());","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        expectedModel.deleteEvent(eventToDelete);","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    public void execute_validSingleIndexFilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteCommand \u003d new EDeleteEventCommand(List.of(INDEX_FIRST_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"                eventToDelete.getName());","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        expectedModel.deleteEvent(eventToDelete);","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        showNoEvent(expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    public void execute_validMultipleIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e eventsToDelete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        eventsToDelete.add(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        eventsToDelete.add(model.getFilteredEventList().get(INDEX_SECOND_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteCommand \u003d new EDeleteEventCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_EVENT, INDEX_SECOND_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"                displayEvents(eventsToDelete));","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"        for (Event p : eventsToDelete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"            expectedModel.deleteEvent(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    public void execute_validMultipleIndexFilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        showEventAtMultipleIndex(model, INDEX_FIRST_EVENT, INDEX_SECOND_EVENT);","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e eventsToDelete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        eventsToDelete.add(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        eventsToDelete.add(model.getFilteredEventList().get(INDEX_SECOND_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteCommand \u003d new EDeleteEventCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_EVENT, INDEX_SECOND_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS,","lastModifiedDate":"2021-04-05"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"                displayEvents(eventsToDelete));","lastModifiedDate":"2021-04-05"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"        for (Event p : eventsToDelete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"            expectedModel.deleteEvent(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"        showNoEvent(expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"    public void execute_allInvalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteCommand \u003d new EDeleteEventCommand(List.of(Index.fromZeroBased(100)), new ArrayList\u003c\u003e());","lastModifiedDate":"2021-04-05"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-04-05"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"                Messages.MESSAGE_NONE_INDEX_VALID, () -\u003e eDeleteCommand.execute(expectedModel));","lastModifiedDate":"2021-04-05"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"    public void execute_bothValidInvalidIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e eventsToDelete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"        eventsToDelete.add(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"        eventsToDelete.add(model.getFilteredEventList().get(INDEX_SECOND_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteCommand \u003d new EDeleteEventCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_EVENT, INDEX_SECOND_EVENT), List.of(\"invalid\", \"-1\"));","lastModifiedDate":"2021-04-05"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"                + \"\\n\" + EDeleteEventCommand.MESSAGE_INVALID_EVENT_INDEX,","lastModifiedDate":"2021-04-05"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"                displayEvents(eventsToDelete), \"invalid, -1\");","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"        for (Event p : eventsToDelete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"            expectedModel.deleteEvent(p);","lastModifiedDate":"2021-04-05"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDeleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"    public void equals() {","lastModifiedDate":"2021-04-05"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteFirstCommand \u003d new EDeleteEventCommand(List.of(INDEX_FIRST_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteSecondCommand \u003d new EDeleteEventCommand(List.of(INDEX_SECOND_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"        assertTrue(eDeleteFirstCommand.equals(eDeleteFirstCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"        EDeleteCommand eDeleteFirstCommandCopy \u003d new EDeleteEventCommand(List.of(INDEX_FIRST_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"        assertTrue(eDeleteFirstCommand.equals(eDeleteFirstCommandCopy));","lastModifiedDate":"2021-04-05"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"        assertFalse(eDeleteFirstCommand.equals(1));","lastModifiedDate":"2021-04-05"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"        assertFalse(eDeleteFirstCommand.equals(null));","lastModifiedDate":"2021-04-05"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"        // different event -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"        assertFalse(eDeleteFirstCommand.equals(eDeleteSecondCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-04-05"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"    private void showNoEvent(Model model) {","lastModifiedDate":"2021-04-05"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"        model.updateFilteredEventList(p -\u003e false);","lastModifiedDate":"2021-04-05"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"        assertTrue(model.getFilteredEventList().isEmpty());","lastModifiedDate":"2021-04-05"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"     * Returns list of events in the form \"a, b, c,...\"","lastModifiedDate":"2021-04-05"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"    private String displayEvents(List\u003cEvent\u003e deletedEvents) {","lastModifiedDate":"2021-04-05"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":"        return deletedEvents.stream()","lastModifiedDate":"2021-04-05"},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-04-05"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-04-05"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"                .orElse(\"\");","lastModifiedDate":"2021-04-05"},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"garyljj":182}},{"path":"src/test/java/seedu/partyplanet/logic/commands/EDoneCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-04-05"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-04-05"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.showEventAtMultipleIndex;","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-04-05"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_EVENT;","lastModifiedDate":"2021-04-05"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_SECOND_EVENT;","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-04-05"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-04-05"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-04-05"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-04-05"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"/**","lastModifiedDate":"2021-04-05"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-04-05"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":" * {@code EDoneCommand}.","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":" */","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"public class EDoneCommandTest {","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    public void execute_validSingleIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        Event eventToComplete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        EDoneCommand eDoneCommand \u003d new EDoneCommand(List.of(INDEX_FIRST_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDoneCommand.MESSAGE_EVENT_DONE_SUCCESS, eventToComplete.getName());","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        expectedModel.setEvent(eventToComplete, eventToComplete.setDone());","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDoneCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        Event eventToComplete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        EDoneCommand eDoneCommand \u003d new EDoneCommand(List.of(INDEX_FIRST_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDoneCommand.MESSAGE_EVENT_DONE_SUCCESS, eventToComplete.getName());","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        showEventAtIndex(expectedModel, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        expectedModel.setEvent(eventToComplete, eventToComplete.setDone());","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDoneCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"    public void execute_validMultipleIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e eventsToComplete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        eventsToComplete.add(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        eventsToComplete.add(model.getFilteredEventList().get(INDEX_SECOND_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        EDoneCommand eDoneCommand \u003d new EDoneCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_EVENT, INDEX_SECOND_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"                String.format(EDoneCommand.MESSAGE_EVENT_DONE_SUCCESS, displayEvents(eventsToComplete));","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        for (Event e : eventsToComplete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"            expectedModel.setEvent(e, e.setDone());","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDoneCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    public void execute_validMultipleIndexFilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"        showEventAtMultipleIndex(model, INDEX_FIRST_EVENT, INDEX_SECOND_EVENT);","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e eventsToComplete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        eventsToComplete.add(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"        eventsToComplete.add(model.getFilteredEventList().get(INDEX_SECOND_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        EDoneCommand eDoneCommand \u003d new EDoneCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_EVENT, INDEX_SECOND_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2021-04-05"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"                String.format(EDoneCommand.MESSAGE_EVENT_DONE_SUCCESS, displayEvents(eventsToComplete));","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"        showEventAtMultipleIndex(expectedModel, INDEX_FIRST_EVENT, INDEX_SECOND_EVENT);","lastModifiedDate":"2021-04-05"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"        for (Event e : eventsToComplete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"            expectedModel.setEvent(e, e.setDone());","lastModifiedDate":"2021-04-05"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDoneCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"    public void execute_allInvalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-04-05"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"        EDoneCommand eDoneCommand \u003d new EDoneCommand(List.of(Index.fromZeroBased(100)), new ArrayList\u003c\u003e());","lastModifiedDate":"2021-04-05"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-04-05"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"                EDoneCommand.MESSAGE_NONE_EVENT_INDEX_VALID, () -\u003e eDoneCommand.execute(expectedModel));","lastModifiedDate":"2021-04-05"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"    public void execute_alreadyCompletedIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-04-05"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"        // Model with first index already done","lastModifiedDate":"2021-04-05"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"        ModelManager modelCopy \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"        Event eventToComplete \u003d modelCopy.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-04-05"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"        modelCopy.setEvent(eventToComplete, eventToComplete.setDone());","lastModifiedDate":"2021-04-05"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"        EDoneCommand eDoneCommand \u003d new EDoneCommand(List.of(INDEX_FIRST_EVENT), new ArrayList\u003c\u003e());","lastModifiedDate":"2021-04-05"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2021-04-05"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"                EDoneCommand.MESSAGE_NONE_EVENT_INDEX_VALID, () -\u003e eDoneCommand.execute(modelCopy));","lastModifiedDate":"2021-04-05"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"    public void execute_bothValidInvalidIndexUnfilteredList_success() {","lastModifiedDate":"2021-04-05"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"        List\u003cEvent\u003e eventsToComplete \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-04-05"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"        eventsToComplete.add(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"        eventsToComplete.add(model.getFilteredEventList().get(INDEX_SECOND_EVENT.getZeroBased()));","lastModifiedDate":"2021-04-05"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"        EDoneCommand eDoneCommand \u003d new EDoneCommand(","lastModifiedDate":"2021-04-05"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"                List.of(INDEX_FIRST_EVENT, INDEX_SECOND_EVENT), List.of(\"invalid\", \"-1\"));","lastModifiedDate":"2021-04-05"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"        String expectedMessage \u003d String.format(EDoneCommand.MESSAGE_EVENT_DONE_SUCCESS","lastModifiedDate":"2021-04-05"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"                + \"\\n\" + EDoneCommand.MESSAGE_INVALID_EVENT_INDEX,","lastModifiedDate":"2021-04-05"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"                displayEvents(eventsToComplete),","lastModifiedDate":"2021-04-05"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"                \"invalid, -1\");","lastModifiedDate":"2021-04-05"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-04-05"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"        for (Event e : eventsToComplete) {","lastModifiedDate":"2021-04-05"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"            expectedModel.setEvent(e, e.setDone());","lastModifiedDate":"2021-04-05"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"        assertCommandSuccess(eDoneCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-05"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"    @Test","lastModifiedDate":"2021-04-05"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"    public void equals() {","lastModifiedDate":"2021-04-05"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"        EDoneCommand completeFirstCommand \u003d new EDoneCommand(List.of(INDEX_FIRST_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"        EDoneCommand completeSecondCommand \u003d new EDoneCommand(List.of(INDEX_SECOND_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"        EDoneCommand completeFirstWithInvalidCommand \u003d new EDoneCommand(List.of(INDEX_FIRST_EVENT), List.of(\"-1\"));","lastModifiedDate":"2021-04-05"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"        assertTrue(completeFirstCommand.equals(completeFirstCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-04-05"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"        EDoneCommand completeFirstCommandCopy \u003d new EDoneCommand(List.of(INDEX_FIRST_EVENT), List.of());","lastModifiedDate":"2021-04-05"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"        assertTrue(completeFirstCommand.equals(completeFirstCommandCopy));","lastModifiedDate":"2021-04-05"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"        assertFalse(completeFirstCommand.equals(1));","lastModifiedDate":"2021-04-05"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"        assertFalse(completeFirstCommand.equals(null));","lastModifiedDate":"2021-04-05"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"        // different target indexes -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"        assertFalse(completeFirstCommand.equals(completeSecondCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"        // different invalid indexes -\u003e returns false","lastModifiedDate":"2021-04-05"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":"        assertFalse(completeFirstCommand.equals(completeFirstWithInvalidCommand));","lastModifiedDate":"2021-04-05"},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"    /**","lastModifiedDate":"2021-04-05"},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"     * Returns list of events in the form \"a, b, c,...\"","lastModifiedDate":"2021-04-05"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"     */","lastModifiedDate":"2021-04-05"},{"lineNumber":183,"author":{"gitId":"garyljj"},"content":"    private String displayEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-04-05"},{"lineNumber":184,"author":{"gitId":"garyljj"},"content":"        return events.stream()","lastModifiedDate":"2021-04-05"},{"lineNumber":185,"author":{"gitId":"garyljj"},"content":"                .map(p -\u003e p.getName().toString())","lastModifiedDate":"2021-04-05"},{"lineNumber":186,"author":{"gitId":"garyljj"},"content":"                .reduce((a, b) -\u003e a + \", \" + b)","lastModifiedDate":"2021-04-05"},{"lineNumber":187,"author":{"gitId":"garyljj"},"content":"                .orElse(\"\");","lastModifiedDate":"2021-04-05"},{"lineNumber":188,"author":{"gitId":"garyljj"},"content":"    }","lastModifiedDate":"2021-04-05"},{"lineNumber":189,"author":{"gitId":"garyljj"},"content":"}","lastModifiedDate":"2021-04-05"}],"authorContributionMap":{"garyljj":189}},{"path":"src/test/java/seedu/partyplanet/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.Messages;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand editCommand \u003d new EditFieldCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"            new EventBook(model.getEventBook()), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand editCommand \u003d new EditFieldCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand editCommand \u003d new EditFieldCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand editCommand \u003d new EditFieldCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":103,"author":{"gitId":"zhengruoxin"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2021-04-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand editCommand \u003d new EditFieldCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"zhengruoxin"},"content":"        assertCommandFailure(editCommand, model, EditFieldCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand editCommand \u003d new EditFieldCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"zhengruoxin"},"content":"        assertCommandFailure(editCommand, model, EditFieldCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand editCommand \u003d new EditFieldCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand editCommand \u003d new EditFieldCommand(outOfBoundIndex,","lastModifiedDate":"2021-03-20"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"zhengruoxin"},"content":"        final EditCommand standardCommand \u003d new EditFieldCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2021-03-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand commandWithSameValues \u003d new EditFieldCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"zhengruoxin"},"content":"        assertFalse(standardCommand.equals(new EditFieldCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2021-03-20"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"zhengruoxin"},"content":"        assertFalse(standardCommand.equals(new EditFieldCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2021-03-20"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-04-04"},{"lineNumber":178,"author":{"gitId":"zhengruoxin"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-04-04"},{"lineNumber":179,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-04-04"},{"lineNumber":180,"author":{"gitId":"zhengruoxin"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2021-04-04"},{"lineNumber":181,"author":{"gitId":"zhengruoxin"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2021-04-04"},{"lineNumber":182,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":183,"author":{"gitId":"zhengruoxin"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2021-04-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-04-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"zhengruoxin":23,"garyljj":21,"-":131,"Ellevy":11}},{"path":"src/test/java/seedu/partyplanet/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"zhengruoxin":1,"garyljj":9,"-":48}},{"path":"src/test/java/seedu/partyplanet/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true);","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"nickyfoo":1,"garyljj":5,"-":14}},{"path":"src/test/java/seedu/partyplanet/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, false);","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"nickyfoo":1,"garyljj":5,"-":14}},{"path":"src/test/java/seedu/partyplanet/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_PERSONS_LISTED_TAGS;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ModelManager;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.NameContainsExactKeywordsPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.TagsContainsExactTagPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.model.person.predicates.TagsContainsTagPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    private final NameContainsKeywordsPredicate predicateKurz \u003d preparePredicate(\"Kurz\");","lastModifiedDate":"2021-03-18"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    private final NameContainsKeywordsPredicate predicateElle \u003d preparePredicate(\"Elle\");","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    private final NameContainsKeywordsPredicate predicateKunz \u003d preparePredicate(\"Kunz\");","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    private final NameContainsExactKeywordsPredicate predicateExactKurz \u003d prepareExactPredicate(\"Kurz\");","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    private final NameContainsExactKeywordsPredicate predicateExactElle \u003d prepareExactPredicate(\"Elle\");","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    private final NameContainsExactKeywordsPredicate predicateExactKunz \u003d prepareExactPredicate(\"Kunz\");","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    public void equals() {","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(\"first\");","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(\"second\");","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        ListCommand listFirstCommand \u003d new ListCommand(firstPredicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        ListCommand listSecondCommand \u003d new ListCommand(secondPredicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(listFirstCommand, listFirstCommand);","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        ListCommand listFirstCommandCopy \u003d new ListCommand(firstPredicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(listFirstCommand, listFirstCommandCopy);","lastModifiedDate":"2021-03-18"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        assertNotEquals(listFirstCommand, listSecondCommand);","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"friends (3), owesMoney (1)\"), expectedModel);","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"friends (3), owesMoney (1)\"), expectedModel);","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"    public void execute_allPartialMultipleNames_notFound() {","lastModifiedDate":"2021-03-18"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0) + \"Nobody met the requirements.\"","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"None!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e predicate \u003d predicateKurz.and(predicateElle.and(predicateKunz));","lastModifiedDate":"2021-03-18"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d new ListCommand(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(Collections.EMPTY_LIST, model.getFilteredPersonList());","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"    public void execute_anyPartialMultipleNames_found() {","lastModifiedDate":"2021-03-18"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3)","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"None!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e predicate \u003d predicateKurz.or(predicateElle.or(predicateKunz));","lastModifiedDate":"2021-03-18"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d new ListCommand(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(3, model.getFilteredPersonList().size());","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"    public void execute_allExactMultipleNames_notFound() {","lastModifiedDate":"2021-03-18"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0) + \"Nobody met the requirements.\"","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"None!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e predicate \u003d predicateExactKurz.and(predicateExactElle.and(predicateExactKunz));","lastModifiedDate":"2021-03-18"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d new ListCommand(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(Collections.EMPTY_LIST, model.getFilteredPersonList());","lastModifiedDate":"2021-03-18"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"    public void execute_anyExactMultipleNames_notFound() {","lastModifiedDate":"2021-03-18"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0) + \"Nobody met the requirements.\"","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"None!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e predicate \u003d predicateExactKurz.or(predicateExactElle.or(predicateExactKunz));","lastModifiedDate":"2021-03-18"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d new ListCommand(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(Collections.EMPTY_LIST, model.getFilteredPersonList());","lastModifiedDate":"2021-03-18"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"    public void execute_anyExactMultipleNames_found() {","lastModifiedDate":"2021-03-18"},{"lineNumber":130,"author":{"gitId":"zhengruoxin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"None!\");","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"        NameContainsExactKeywordsPredicate predicateExactFullElle \u003d prepareExactPredicate(\"Elle Meyer\");","lastModifiedDate":"2021-03-18"},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e predicate \u003d predicateExactKurz.or(predicateExactFullElle.or(predicateExactKunz));","lastModifiedDate":"2021-03-18"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d new ListCommand(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2021-03-18"},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":142,"author":{"gitId":"pyuxiang"},"content":"    public void execute_allPartialWhitespace_multiplePersonsFound() {","lastModifiedDate":"2021-03-18"},{"lineNumber":143,"author":{"gitId":"zhengruoxin"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"Ellevy"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"friends (3), owesMoney (1)\");","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-18"},{"lineNumber":146,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d new ListCommand(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":147,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":148,"author":{"gitId":"pyuxiang"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":149,"author":{"gitId":"pyuxiang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":150,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(getTypicalAddressBook().getPersonList(), model.getFilteredPersonList());","lastModifiedDate":"2021-03-18"},{"lineNumber":151,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":152,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":153,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":154,"author":{"gitId":"pyuxiang"},"content":"    public void execute_allExactTags_found() {","lastModifiedDate":"2021-03-18"},{"lineNumber":155,"author":{"gitId":"zhengruoxin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)","lastModifiedDate":"2021-03-29"},{"lineNumber":156,"author":{"gitId":"Ellevy"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"friends (1), owesMoney (1)\");","lastModifiedDate":"2021-03-30"},{"lineNumber":157,"author":{"gitId":"pyuxiang"},"content":"        TagsContainsExactTagPredicate predicateOwesMoney \u003d new TagsContainsExactTagPredicate(\"owesMoney\");","lastModifiedDate":"2021-03-18"},{"lineNumber":158,"author":{"gitId":"pyuxiang"},"content":"        TagsContainsExactTagPredicate predicateFriends \u003d new TagsContainsExactTagPredicate(\"friends\");","lastModifiedDate":"2021-03-18"},{"lineNumber":159,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e predicate \u003d predicateOwesMoney.and(predicateFriends);","lastModifiedDate":"2021-03-18"},{"lineNumber":160,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d new ListCommand(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":161,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":162,"author":{"gitId":"pyuxiang"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":163,"author":{"gitId":"pyuxiang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":164,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2021-03-18"},{"lineNumber":165,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":166,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":167,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":168,"author":{"gitId":"pyuxiang"},"content":"    public void execute_allPartialTagName_found() {","lastModifiedDate":"2021-03-18"},{"lineNumber":169,"author":{"gitId":"zhengruoxin"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3)","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"Ellevy"},"content":"                + String.format(MESSAGE_PERSONS_LISTED_TAGS, \"friends (3), owesMoney (1)\"); // Alice, Benson, Daniel","lastModifiedDate":"2021-03-30"},{"lineNumber":171,"author":{"gitId":"pyuxiang"},"content":"        TagsContainsTagPredicate predicateTag \u003d new TagsContainsTagPredicate(\"friend\");","lastModifiedDate":"2021-03-18"},{"lineNumber":172,"author":{"gitId":"pyuxiang"},"content":"        NameContainsKeywordsPredicate predicateName \u003d new NameContainsKeywordsPredicate(\"e\");","lastModifiedDate":"2021-03-18"},{"lineNumber":173,"author":{"gitId":"pyuxiang"},"content":"        Predicate\u003cPerson\u003e predicate \u003d predicateTag.and(predicateName);","lastModifiedDate":"2021-03-18"},{"lineNumber":174,"author":{"gitId":"pyuxiang"},"content":"        ListCommand command \u003d new ListCommand(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":175,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":176,"author":{"gitId":"pyuxiang"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-03-18"},{"lineNumber":177,"author":{"gitId":"pyuxiang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":178,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(3, model.getFilteredPersonList().size());","lastModifiedDate":"2021-03-18"},{"lineNumber":179,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":180,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":181,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":182,"author":{"gitId":"pyuxiang"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-18"},{"lineNumber":183,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":184,"author":{"gitId":"pyuxiang"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-18"},{"lineNumber":185,"author":{"gitId":"pyuxiang"},"content":"        return new NameContainsKeywordsPredicate(userInput);","lastModifiedDate":"2021-03-18"},{"lineNumber":186,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":187,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":188,"author":{"gitId":"pyuxiang"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":189,"author":{"gitId":"pyuxiang"},"content":"     * Parses {@code userInput} into a {@code NameContainsExactKeywordsPredicate}.","lastModifiedDate":"2021-03-18"},{"lineNumber":190,"author":{"gitId":"pyuxiang"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":191,"author":{"gitId":"pyuxiang"},"content":"    private NameContainsExactKeywordsPredicate prepareExactPredicate(String userInput) {","lastModifiedDate":"2021-03-18"},{"lineNumber":192,"author":{"gitId":"pyuxiang"},"content":"        return new NameContainsExactKeywordsPredicate(userInput);","lastModifiedDate":"2021-03-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"zhengruoxin":8,"pyuxiang":135,"garyljj":13,"-":27,"Ellevy":11}},{"path":"src/test/java/seedu/partyplanet/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.REMARK_DESC_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.AddCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"        // multiple remarks - last remark accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"            + BIRTHDAY_DESC_BOB + REMARK_DESC_AMY + TAG_DESC_FRIEND + REMARK_DESC_BOB,","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"            new AddCommand(expectedPerson));","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        // multiple birthdays - last birthday accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"                + BIRTHDAY_DESC_AMY + REMARK_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB,","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"            new AddCommand(expectedPerson));","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":92,"author":{"gitId":"zhengruoxin"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"                new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":101,"author":{"gitId":"zhengruoxin"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"                        + BIRTHDAY_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY,","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"zhengruoxin":3,"garyljj":39,"-":84,"Ellevy":24}},{"path":"src/test/java/seedu/partyplanet/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.AddCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteContactCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.EditCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand;","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.ListCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        assertEquals(new DeleteContactCommand(List.of(INDEX_FIRST_PERSON), List.of()), command);","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"        assertEquals(new EditFieldCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"zhengruoxin":3,"garyljj":18,"-":62}},{"path":"src/test/java/seedu/partyplanet/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    private static final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    private static final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    private static final Prefix dashTT \u003d new Prefix(\"-TT\");","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    private static final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"        String argsString \u003d \"SomePreambleString -TT dashTT-Value p/ pSlash value\";","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashTT, hatQ);","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"        assertArgumentPresent(argMultimap, dashTT, \"dashTT-Value\");","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"        argsString \u003d \"Different Preamble String ^Q 111 -TT dashTT-Value p/ pSlash value\";","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashTT, hatQ);","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"        assertArgumentPresent(argMultimap, dashTT, \"dashTT-Value\");","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashTT, hatQ);","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashTT, hatQ);","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"        String argsString \u003d \"SomePreambleString -TT dashTT-Value ^Q ^Q -TT another dashTT value p/ pSlash value -TT\";","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashTT, hatQ);","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"        assertArgumentPresent(argMultimap, dashTT, \"dashTT-Value\", \"another dashTT value\", \"\");","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -TT not joined^Qjoined\";","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashTT, hatQ);","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"        assertArgumentPresent(argMultimap, dashTT, \"not joined^Qjoined\");","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"pyuxiang":18,"garyljj":1,"-":119}},{"path":"src/test/java/seedu/partyplanet/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.Command;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"garyljj":3,"-":35}},{"path":"src/test/java/seedu/partyplanet/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.DeleteContactCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        assertParseSuccess(parser, \"1\", new DeleteContactCommand(List.of(INDEX_FIRST_PERSON), List.of()));","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"garyljj":9,"-":26}},{"path":"src/test/java/seedu/partyplanet/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.EditCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand;","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditFieldCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"        assertParseFailure(parser, \"1\", EditFieldCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"zhengruoxin"},"content":"        expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"zhengruoxin"},"content":"        expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"zhengruoxin"},"content":"        expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"zhengruoxin"},"content":"        expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"zhengruoxin"},"content":"        expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"zhengruoxin"},"content":"        EditCommand expectedCommand \u003d new EditFieldCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"zhengruoxin":15,"garyljj":39,"-":158}},{"path":"src/test/java/seedu/partyplanet/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"garyljj":10,"-":186}},{"path":"src/test/java/seedu/partyplanet/logic/parser/PrefixTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.logic.parser;","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"public class PrefixTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    public void invalidOrDuplicatePrefixes() {","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"        Prefix abc \u003d new Prefix(\"_test_abc\");","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"        try {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"            Prefix abc2 \u003d new Prefix(\"_test_abc\");","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"            return;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        throw new AssertionError(\"Duplicate prefixes should not be allowed.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    public void equalsMethod() {","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        Prefix aaa \u003d new Prefix(\"_test_aaa\");","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        assertNotEquals(aaa, \"_test_aaa\");","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        assertNotEquals(aaa, new Prefix(\"_test_aab\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"pyuxiang":30}},{"path":"src/test/java/seedu/partyplanet/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"garyljj":9,"-":93}},{"path":"src/test/java/seedu/partyplanet/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.AddressBookBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.ui.Theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4, Theme.PASTEL));","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4, Theme.PASTEL);","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        EventBook eventBook \u003d new EventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"        modelManager \u003d new ModelManager(addressBook, eventBook, userPrefs);","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, eventBook, userPrefs);","lastModifiedDate":"2021-03-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, eventBook, userPrefs)));","lastModifiedDate":"2021-03-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"glennljs"},"content":"        String keywords \u003d ALICE.getName().fullName;","lastModifiedDate":"2021-03-08"},{"lineNumber":122,"author":{"gitId":"glennljs"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(keywords));","lastModifiedDate":"2021-03-08"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, eventBook, userPrefs)));","lastModifiedDate":"2021-03-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, eventBook, differentUserPrefs)));","lastModifiedDate":"2021-03-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"glennljs":2,"pyuxiang":3,"garyljj":8,"-":114,"Ellevy":6}},{"path":"src/test/java/seedu/partyplanet/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"garyljj":2,"-":19}},{"path":"src/test/java/seedu/partyplanet/model/date/DateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.model.date;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"public class DateTest {","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    public void compareTo() {","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"        // Same year","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"        Date date0606 \u003d new Date(\"2020-06-06\");","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"        Date dateNoYear0606 \u003d new Date(\"--06-06\");","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"        Date dateNoYear0607 \u003d new Date(\"--06-07\");","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"        Date date0608 \u003d new Date(\"2020-06-08\");","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"        // Different year","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        Date datePrevYear \u003d new Date(\"2019-08-13\");","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        // Dates with no years are smaller","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(date0606.compareTo(dateNoYear0607) \u003e 0);","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(dateNoYear0606.compareTo(dateNoYear0607) \u003c 0);","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(dateNoYear0606.compareTo(date0608) \u003c 0);","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        // Different date","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(date0606.compareTo(date0608) \u003c 0);","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(date0608.compareTo(datePrevYear) \u003e 0);","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(datePrevYear.compareTo(date0606) \u003c 0);","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"pyuxiang":30}},{"path":"src/test/java/seedu/partyplanet/model/event/EventDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package seedu.partyplanet.model.event;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class EventDateTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"        assertThrows(NullPointerException.class, () -\u003e new EventDate(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public void constructor_invalidEventDate_throwsDateTimeException() {","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"        String invalidEventDate \u003d \"\";","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        assertThrows(DateTimeException.class, () -\u003e new EventDate(invalidEventDate));","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    public void isValidEventDate_invalidEventDate() {","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"        // null event dates","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"        assertThrows(NullPointerException.class, () -\u003e EventDate.isValidEventDate(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        // invalid event dates","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(EventDate.isValidEventDate(\"\")); // empty string","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(EventDate.isValidEventDate(\" \")); // spaces only","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(EventDate.isValidEventDate(\"91\")); // none match","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(EventDate.isValidEventDate(\"2021 Feb 20\")); // unsupported format","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(EventDate.isValidEventDate(\"20Feb2021\")); // unsupported format","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    public void isValidEventDate_validWithYears() {","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"        String[] validInputs \u003d new String[]{","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"            \"2021-02-03\",","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"            \"3.2.2021\",","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"            \"3/2/2021\",","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"            \"3 Feb 2021\",","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"            \"3 February 2021\",","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"            \"Feb 3 2021\",","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"            \"February 3 2021\",","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"        };","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"        for (String validInput: validInputs) {","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"            assertTrue(EventDate.isValidEventDate(validInput));","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(1, Arrays.stream(validInputs)","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"                .map(EventDate::new)","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"                .distinct()","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"                .count());","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"    public void isValidEventDate() {","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"        LocalDate referenceDate \u003d LocalDate.of(2021, 6, 6);","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"        // MonthDay is always valid","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"        assertTrue(EventDate.isValidEventDate(\"--02-03\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"        assertTrue(EventDate.isValidEventDate(\"--06-06\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"        assertTrue(EventDate.isValidEventDate(\"--12-12\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"        // LocalDate need not be before reference","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"        assertTrue(EventDate.isValidEventDate(\"2020-06-05\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"        assertTrue(EventDate.isValidEventDate(\"2025-06-06\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"        assertTrue(EventDate.isValidEventDate(\"9999-06-07\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"}","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"pyuxiang":4,"nickyfoo":72}},{"path":"src/test/java/seedu/partyplanet/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"garyljj":2,"-":34}},{"path":"src/test/java/seedu/partyplanet/model/person/BirthdayTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-04-04"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"public class BirthdayTest {","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    public void constructor_invalidBirthday_throwsDateTimeException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        String invalidBirthday \u003d \"\";","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        assertThrows(DateTimeException.class, () -\u003e new Birthday(invalidBirthday));","lastModifiedDate":"2021-04-04"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    public void isValidBirthday_invalidBirthdays() {","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"        // null birthdays","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthdayDate(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        // invalid birthdays","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(Birthday.isValidBirthdayDate(\"\")); // empty string","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(Birthday.isValidBirthdayDate(\" \")); // spaces only","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(Birthday.isValidBirthdayDate(\"91\")); // none match","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(Birthday.isValidBirthdayDate(\"2021 Feb 20\")); // unsupported format","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        assertFalse(Birthday.isValidBirthdayDate(\"20Feb2021\")); // unsupported format","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    public void isValidBirthday_validWithYears() {","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        String[] validInputs \u003d new String[]{","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            \"2021-02-03\",","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            \"3.2.2021\",","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            \"3/2/2021\",","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            \"3 Feb 2021\",","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            \"3 February 2021\",","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"            \"Feb 3 2021\",","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"            \"February 3 2021\",","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        };","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        for (String validInput: validInputs) {","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"            assertTrue(Birthday.isValidBirthdayDate(validInput));","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(1, Arrays.stream(validInputs)","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"                .map(Birthday::new)","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"                .distinct()","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"                .count());","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"    public void isValidBirthday_validWithoutYears() {","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        String[] validInputs \u003d new String[]{","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"            \"--02-03\",","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"            \"3/2\",","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"            \"3 Feb\",","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"            \"3 February\",","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"            \"Feb 3\",","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"            \"February 3\",","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"        };","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"        for (String validInput: validInputs) {","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"            assertTrue(Birthday.isValidBirthdayDate(validInput));","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(1, Arrays.stream(validInputs)","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"                .map(Birthday::new)","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"                .distinct()","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"                .count());","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"    @Test","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"    public void isValidBirthdayDate() {","lastModifiedDate":"2021-03-19"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"        LocalDate referenceDate \u003d LocalDate.of(2021, 6, 6);","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"        // MonthDay is always valid","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Birthday.isValidBirthdayDate(\"--02-03\", referenceDate));","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Birthday.isValidBirthdayDate(\"--06-06\", referenceDate));","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Birthday.isValidBirthdayDate(\"--12-12\", referenceDate));","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"        // LocalDate must be before reference","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Birthday.isValidBirthdayDate(\"2021-06-05\", referenceDate));","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Birthday.isValidBirthdayDate(\"2021-06-06\", referenceDate));","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"        assertFalse(Birthday.isValidBirthdayDate(\"2021-06-07\", referenceDate));","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"pyuxiang":85,"nickyfoo":8}},{"path":"src/test/java/seedu/partyplanet/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        // valid email - user test","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-_@example.org\")); // special characters local part","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name, with dash","lastModifiedDate":"2021-04-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        // domain test","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peterjack@a\")); // minimal","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peterjack@0\")); // minimal","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peterjack@a-\")); // minimal with dash","lastModifiedDate":"2021-04-05"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peterjack@_\")); // start with underscore","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peterjack@a.\")); // ends in period","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peterjack@localhost\")); // all text","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peterjack@192.168.1.23\")); // IP address (IPv4)","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(Email.isValidEmail(\"peterjack@web.example.com.\")); // multiple periods","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // cannot start with dash","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"pyuxiang":14,"garyljj":2,"-":48}},{"path":"src/test/java/seedu/partyplanet/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"glennljs"},"content":"        String firstPredicateKeywordList \u003d \"first\";","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"glennljs"},"content":"        String secondPredicateKeywordList \u003d \"second\";","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"glennljs"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\"Alice\");","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"glennljs"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(\"\");","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"glennljs"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"glennljs"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(\"Carol\");","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"glennljs":6,"garyljj":3,"-":46}},{"path":"src/test/java/seedu/partyplanet/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"garyljj":2,"-":38}},{"path":"src/test/java/seedu/partyplanet/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"garyljj":10,"-":81}},{"path":"src/test/java/seedu/partyplanet/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"garyljj":2,"-":38}},{"path":"src/test/java/seedu/partyplanet/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.person;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.PersonBuilder;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"garyljj":9,"-":161}},{"path":"src/test/java/seedu/partyplanet/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.model.tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"garyljj":2,"-":24}},{"path":"src/test/java/seedu/partyplanet/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"02092021\";","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    private static final String INVALID_REMARK \u003d \" \";","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"                        VALID_BIRTHDAY, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"                VALID_BIRTHDAY, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"                        VALID_BIRTHDAY, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"                VALID_BIRTHDAY, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,","lastModifiedDate":"2021-03-11"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"                        VALID_BIRTHDAY, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"zhengruoxin"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"                VALID_BIRTHDAY, VALID_ADDRESS, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"zhengruoxin"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"                        VALID_BIRTHDAY, INVALID_ADDRESS, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"zhengruoxin"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE,","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"                VALID_EMAIL, VALID_BIRTHDAY, null, VALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"    public void toModelType_invalidRemark_throwsIllegalValueException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"                VALID_BIRTHDAY, VALID_ADDRESS, INVALID_REMARK, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"        String expectedMessage \u003d Remark.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"    public void toModelType_nullRemark_throwsIllegalValueException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE,","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"            VALID_EMAIL, VALID_BIRTHDAY, VALID_ADDRESS, null, VALID_TAGS);","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"zhengruoxin"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-11"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"                        VALID_BIRTHDAY, VALID_ADDRESS, VALID_REMARK, invalidTags);","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"zhengruoxin":12,"garyljj":9,"-":91,"Ellevy":29}},{"path":"src/test/java/seedu/partyplanet/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.IDA;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"garyljj":9,"-":101}},{"path":"src/test/java/seedu/partyplanet/storage/JsonEventBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.CNY;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.EASTER;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.JAN;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"public class JsonEventBookStorageTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonEventBookStorageTest\");","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    @TempDir","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    public Path testFolder;","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    public void readEventsBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        assertThrows(NullPointerException.class, () -\u003e readEventBook(null));","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    private java.util.Optional\u003cReadOnlyEventBook\u003e readEventBook(String filePath) throws Exception {","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        return new JsonEventBookStorage(Paths.get(filePath)).readEventBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"                : null;","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        assertFalse(readEventBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEventBook(\"notJsonFormatEventBook.json\"));","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    public void readEventBook_invalidEventEventBook_throwDataConversionException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEventBook(\"invalidEventEventBook.json\"));","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"    public void readAddressBook_invalidAndValidEventEventBook_throwDataConversionException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEventBook(\"invalidAndValidEventEventBook.json\"));","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    public void readAndSaveEventBook_allInOrder_success() throws Exception {","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        Path filePath \u003d testFolder.resolve(\"TempEventBook.json\");","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        EventBook original \u003d getTypicalEventBook();","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        JsonEventBookStorage jsonEventBookStorage \u003d new JsonEventBookStorage(filePath);","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"        // Save in new file and read back","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        jsonEventBookStorage.saveEventBook(original, filePath);","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"        ReadOnlyEventBook readBack \u003d jsonEventBookStorage.readEventBook(filePath).get();","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"        assertEquals(original, new EventBook(readBack));","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"        original.addEvent(CNY);","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        original.removeEvent(JAN);","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"        jsonEventBookStorage.saveEventBook(original, filePath);","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"        readBack \u003d jsonEventBookStorage.readEventBook(filePath).get();","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"        assertEquals(original, new EventBook(readBack));","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        original.addEvent(EASTER);","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        jsonEventBookStorage.saveEventBook(original); // file path not specified","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        readBack \u003d jsonEventBookStorage.readEventBook().get(); // file path not specified","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"        assertEquals(original, new EventBook(readBack));","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"    public void saveEventBook_nullEventBook_throwsNullPointerException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveEventBook(null, \"SomeFile.json\"));","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"     * Saves {@code eventBook} at the specified {@code filePath}.","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"    private void saveEventBook(ReadOnlyEventBook eventBook, String filePath) {","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"        try {","lastModifiedDate":"2021-03-22"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"            new JsonEventBookStorage(Paths.get(filePath))","lastModifiedDate":"2021-03-22"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"                    .saveEventBook(eventBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveEventBook(new EventBook(), null));","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":110}},{"path":"src/test/java/seedu/partyplanet/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.util.JsonUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.testutil.TypicalPersons;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"garyljj":6,"-":41}},{"path":"src/test/java/seedu/partyplanet/storage/JsonSerializableEventBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.commons.util.JsonUtil;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.testutil.TypicalEvents;","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"public class JsonSerializableEventBookTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableEventBookTest\");","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsEventBook.json\");","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventEventBook.json\");","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventEventBook.json\");","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    public void toModelType_typicalEventsFile_success() throws Exception {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        JsonSerializableEventBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EVENTS_FILE,","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"                JsonSerializableEventBook.class).get();","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        EventBook eventBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        EventBook typicalEventsEventBook \u003d TypicalEvents.getTypicalEventBook();","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        assertEquals(eventBookFromFile, typicalEventsEventBook);","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        JsonSerializableEventBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EVENT_FILE,","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"                JsonSerializableEventBook.class).get();","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        JsonSerializableEventBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EVENT_FILE,","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"                JsonSerializableEventBook.class).get();","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableEventBook.MESSAGE_DUPLICATE_EVENT,","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"Ellevy":47}},{"path":"src/test/java/seedu/partyplanet/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.ui.Theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        userPrefs.setGuiSettings(new GuiSettings(","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"                1000, 500, 300, 100, Theme.PASTEL));","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2, Theme.PASTEL));","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5, Theme.PASTEL));","lastModifiedDate":"2021-03-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"pyuxiang":5,"garyljj":5,"-":115}},{"path":"src/test/java/seedu/partyplanet/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.storage;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalEvents.getTypicalEventBook;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.GuiSettings;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.ReadOnlyEventBook;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.UserPrefs;","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"import seedu.partyplanet.ui.Theme;","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        JsonEventBookStorage eventBookStorage \u003d new JsonEventBookStorage(getTempFilePath(\"eb\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6, Theme.PASTEL));","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    public void eventBookReadSave() throws Exception {","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"        /*","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"         * {@link JsonEventBookStorage} class.","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonEventBookStorageTest} class.","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"         */","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        EventBook original \u003d getTypicalEventBook();","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        storageManager.saveEventBook(original);","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        ReadOnlyEventBook retrieved \u003d storageManager.readEventBook().get();","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        assertEquals(original, new EventBook(retrieved));","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"    public void getEventBookFilePath() {","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"        assertNotNull(storageManager.getEventBookFilePath());","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"pyuxiang":2,"garyljj":5,"-":60,"Ellevy":24}},{"path":"src/test/java/seedu/partyplanet/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":3,"-":31}},{"path":"src/test/java/seedu/partyplanet/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"garyljj":1,"-":33}},{"path":"src/test/java/seedu/partyplanet/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Birthday;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        descriptor.setBirthday(person.getBirthday());","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        descriptor.setRemark(person.getRemark());","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"        descriptor.setBirthday(new Birthday(birthday));","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"    public EditPersonDescriptorBuilder withRemark(String remark) {","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        descriptor.setRemark(new Remark(remark));","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"zhengruoxin":10,"garyljj":8,"-":79,"Ellevy":10}},{"path":"src/test/java/seedu/partyplanet/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import seedu.partyplanet.model.event.EventDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"public class EventBuilder {","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    public static final String DEFAULT_NAME \u003d \"CNY\";","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    public static final String DEFAULT_DATE \u003d \"2021-02-01\";","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    public static final String DEFAULT_DETAIL \u003d \"buy food\";","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    private Name name;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    private EventDate eventDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    private Remark detail;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * Creates a {@code EventBuilder} with the default details.","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    public EventBuilder() {","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        eventDate \u003d new EventDate(DEFAULT_DATE);","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        detail \u003d new Remark(DEFAULT_DETAIL);","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}.","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    public EventBuilder(Event eventToCopy) {","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        name \u003d eventToCopy.getName();","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        eventDate \u003d eventToCopy.getEventDate();","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        detail \u003d eventToCopy.getDetails();","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     * Sets the {@code Name} of the {@code Event} that we are building.","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    public EventBuilder withName(String name) {","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        return this;","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     * Sets the {@code Remark} of the {@code Event} that we are building.","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    public EventBuilder withDetail(String detail) {","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        this.detail \u003d new Remark(detail);","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        return this;","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * Sets the {@code Date} of the {@code Event} that we are building.","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"    public EventBuilder withDate(String eventDate) {","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"        this.eventDate \u003d new EventDate(eventDate);","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        return this;","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"    public Event build() {","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"        return new Event(name, eventDate, detail);","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"nickyfoo":7,"Ellevy":60}},{"path":"src/test/java/seedu/partyplanet/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Address;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Birthday;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Email;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Name;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Phone;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.person.Remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"1999-10-27\";","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    public static final String DEFAULT_REMARK \u003d \"loves pink\";","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    private Birthday birthday;","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    private Remark remark;","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"        birthday \u003d personToCopy.getBirthday();","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        remark \u003d personToCopy.getRemark();","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"    public PersonBuilder withRemark(String remark) {","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        this.remark \u003d new Remark(remark);","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":110,"author":{"gitId":"zhengruoxin"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":111,"author":{"gitId":"zhengruoxin"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building.","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"zhengruoxin"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"zhengruoxin"},"content":"    public PersonBuilder withBirthday(String birthday) {","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"zhengruoxin"},"content":"        this.birthday \u003d new Birthday(birthday);","lastModifiedDate":"2021-03-11"},{"lineNumber":115,"author":{"gitId":"zhengruoxin"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":116,"author":{"gitId":"zhengruoxin"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":117,"author":{"gitId":"zhengruoxin"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"        return new Person(name, phone, email, birthday, address, remark, tags);","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"zhengruoxin":12,"garyljj":9,"-":87,"Ellevy":14}},{"path":"src/test/java/seedu/partyplanet/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.logic.commands.AddCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"import seedu.partyplanet.logic.commands.EditFieldCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        sb.append(PREFIX_NAME + \" \" + person.getName().fullName + \" \");","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        sb.append(PREFIX_PHONE + \" \" + person.getPhone().value + \" \");","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        sb.append(PREFIX_EMAIL + \" \" + person.getEmail().value + \" \");","lastModifiedDate":"2021-03-07"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        sb.append(PREFIX_BIRTHDAY + \" \" + person.getBirthday().value + \" \");","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        sb.append(PREFIX_ADDRESS + \" \" + person.getAddress().value + \" \");","lastModifiedDate":"2021-03-07"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        sb.append(PREFIX_REMARK + \" \" + person.getRemark().value + \" \");","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            s -\u003e sb.append(PREFIX_TAG + \" \" + s.tagName + \" \")","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME + \" \" + name.fullName + \" \"));","lastModifiedDate":"2021-03-07"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE + \" \" + phone.value + \" \"));","lastModifiedDate":"2021-03-07"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL + \" \" + email.value + \" \"));","lastModifiedDate":"2021-03-07"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY + \" \" + birthday.value + \" \"));","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS + \" \" + address.value + \" \"));","lastModifiedDate":"2021-03-07"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        descriptor.getRemark().ifPresent(remark -\u003e sb.append(PREFIX_REMARK + \" \" + remark.value + \" \"));","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"                sb.append(PREFIX_TAG).append(\" \");","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(\" \").append(s.tagName).append(\" \"));","lastModifiedDate":"2021-03-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"zhengruoxin":3,"pyuxiang":11,"garyljj":10,"-":41,"Ellevy":3}},{"path":"src/test/java/seedu/partyplanet/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":1,"-":71}},{"path":"src/test/java/seedu/partyplanet/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"garyljj":4,"-":51}},{"path":"src/test/java/seedu/partyplanet/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_DATE_CNY;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_DATE_EASTER;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_DETAIL_CNY;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_DETAIL_EASTER;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_CNY;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_EASTER;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.EventBook;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"import seedu.partyplanet.model.event.Event;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"/**","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests.","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":" */","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"public class TypicalEvents {","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public static final Event JAN \u003d new EventBuilder().withName(\"Jan Celebration\").withDate(\"2022-01-01\").withDetail(","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        \"10 people\").build();","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    public static final Event FEB \u003d new EventBuilder().withName(\"Feb Celebration\").withDate(\"2022-02-01\").withDetail(","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        \"10 people\").build();","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    public static final Event MAR \u003d new EventBuilder().withName(\"Mar Celebration\").withDate(\"2022-03-01\").withDetail(","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        \"PLAN NOW!\").build();","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    public static final Event APR \u003d new EventBuilder().withName(\"Apr Celebration\").withDate(\"2022-04-01\").withDetail(","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        \"in school\").build();","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    // Manually added - Event\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    public static final Event CNY \u003d new EventBuilder().withName(VALID_NAME_CNY).withDate(VALID_DATE_CNY)","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"            .withDetail(VALID_DETAIL_CNY).build();","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    public static final Event EASTER \u003d new EventBuilder().withName(VALID_NAME_EASTER).withDate(VALID_DATE_EASTER)","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"            .withDetail(VALID_DETAIL_EASTER).build();","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    private TypicalEvents() {} // prevents instantiation","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     * Returns an {@code EventBook} with all the typical events.","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    public static EventBook getTypicalEventBook() {","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        EventBook eb \u003d new EventBook();","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        for (Event event : getTypicalEvents()) {","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            eb.addEvent(event);","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        return eb;","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(JAN, FEB, MAR, APR));","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"}","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"Ellevy":53}},{"path":"src/test/java/seedu/partyplanet/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-04-05"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-04-05"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    public static final Index INDEX_THIRD_EVENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"garyljj":6,"-":10}},{"path":"src/test/java/seedu/partyplanet/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.testutil;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_REMARK_BOB;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.AddressBook;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.model.person.Person;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"            .withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY)","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"            .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND)","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"            .build();","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"            .withEmail(VALID_EMAIL_BOB).withBirthday(VALID_BIRTHDAY_BOB)","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"            .withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"zhengruoxin":3,"garyljj":15,"-":59,"Ellevy":4}},{"path":"src/test/java/seedu/partyplanet/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"garyljj":1,"-":34}},{"path":"src/test/java/seedu/partyplanet/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package seedu.partyplanet.ui;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import static seedu.partyplanet.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import seedu.partyplanet.MainApp;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"garyljj":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"\u003c?import seedu.partyplanet.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"garyljj":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"\u003cfx:root type\u003d\"seedu.partyplanet.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"garyljj":1,"-":5}}]
