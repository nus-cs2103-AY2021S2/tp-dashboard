[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jonathan-Cao"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T12-1/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Jonathan-Cao"},"content":"# nufash"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"### Version 1.1"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"Are your clothes all over the place, and you can never seem to remember what clothes you do have? Well fret not,"},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":"with nufash, organising your clothes becomes a breeze!\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":"With our easy to use GUI, all you have to do is to enter in your clothes once into nufash, and you will be able to"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"look up your clothes as and when you need it!\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":"Head on to our [User Guide](https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/master/docs/UserGuide.md) and [Developer Guide](https://github.com/AY2021S2-CS2103T-T12-1/tp/blob/master/docs/DeveloperGuide.md) to find out more!"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"### Contributors"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"- [Visnu S/O Ravindran](https://github.com/VisnuRavi/)"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"- [Banerjee Aditya](https://github.com/adidoesnt)"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"- [Arihant Jain](https://github.com/arihantjain97)"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"- [Cao Jiahao, Jonathan](https://github.com/Jonathan-Cao)"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"  \u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"### Acknowledgements"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"}],"authorContributionMap":{"Jonathan-Cao":5,"VisnuRavi":15,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":"### Cao Jiahao, Jonathan"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":"\u003cimg src\u003d\"images/jonathan-cao.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"[[github](https://github.com/Jonathan-Cao)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"* Role: Developer"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"* Responsibilities: UI, Storage"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"### Banerjee Aditya"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":"\u003cimg src\u003d\"images/adidoesnt.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"[[github](https://github.com/adidoesnt)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"* Responsibilities: Logic (Parser)"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"### Arihant Jain"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Jonathan-Cao"},"content":"\u003cimg src\u003d\"images/arihantjain97.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Jonathan-Cao"},"content":"[[github](https://github.com/arihantjain97)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"Jonathan-Cao"},"content":"* Responsibilities: Model"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Jonathan-Cao"},"content":"### Visnu S/O Ravindran"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"\u003cimg src\u003d\"images/visnuravi.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"[[github](https://github.com/VisnuRavi)]"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":46,"author":{"gitId":"Jonathan-Cao"},"content":"* Responsibilities: Logic (Commands)"}],"authorContributionMap":{"Jonathan-Cao":17,"-":29}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"adidoesnt"},"content":"﻿# Developer Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"adidoesnt"},"content":"## Appendix: Requirements"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"### Product Scope"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"adidoesnt"},"content":"**Target User Profile:**"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"adidoesnt"},"content":"* Students currently in tertiary educational institutions"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"adidoesnt"},"content":"* Users that prefer desktop applications as opposed to other types of applications"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":"* Users that are reasonably comfortable with command line interfaces"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"* Users who are able to type fast and hence prefer typing to mouse interaction"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"adidoesnt"},"content":"* Users who have a hard time organising their wardrobe"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  "},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"adidoesnt"},"content":"**Value Proposition:**"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"adidoesnt"},"content":"* Ability to organise clothing items based on attributes such as colour, size, material, type of clothing"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"adidoesnt"},"content":"* Maintain outfit schedules to prevent repetitive dressing"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"adidoesnt"},"content":"* Receive clothing suggestions based on factors such as weather, temperature, or the nature of events the user may be attending"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"arihantjain97"},"content":"### User stories"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"arihantjain97"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"arihantjain97"},"content":"| Priority | As a …​ | I want to …​ | So that I can…​ |  "},{"lineNumber":34,"author":{"gitId":"arihantjain97"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |  "},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"| `* * *`  | new user                                   | have a tutorial to teach me how to use the app| so that I will be able to learn how to use the app quicker                 |  "},{"lineNumber":36,"author":{"gitId":"Jonathan-Cao"},"content":"| `* * *`  | user                                       | add an item of clothing               |        keep a record of clothing items                                                                |  "},{"lineNumber":37,"author":{"gitId":"arihantjain97"},"content":"| `* * *`  | user                                       | edit details of clothing logged in                | correct incorrect details pertaining to items          |  "},{"lineNumber":38,"author":{"gitId":"Jonathan-Cao"},"content":"| `* * *`  | user                                       | find a clothing by name          | locate details of clothing without having to go through the entire list |  "},{"lineNumber":39,"author":{"gitId":"arihantjain97"},"content":"| `* *`    | user                                       | remove an item of clothing from my wardrobe   | so that I can reflect that an item of clothing has been discarded                |  "},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"|  `* *`      | user        | easily plan a schedule for what clothes to wear                                                |  so that I do not have to waste time deciding at the last minute"},{"lineNumber":41,"author":{"gitId":"arihantjain97"},"content":"|  `* *`      | user        | be reminded on the clothes I have not worn                                                 |  so that I would not be wearing the same clothes all the time"},{"lineNumber":42,"author":{"gitId":"arihantjain97"},"content":"|  `*`      | user        | to see whether certain colours and types of clothing match                                                 |  so that I will be able to ascertain if the clothes match without having to try them on physically"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"### Use cases"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"(For all use cases below, the System is the `nufash` and the Actor is the `user`, unless specified otherwise)"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"Jonathan-Cao"},"content":"**Use case: Add a clothing item**"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"Jonathan-Cao"},"content":"**MSS**"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"Jonathan-Cao"},"content":"1. User requests to add a clothing item with specified attributes"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"2. nufash adds the specified clothing item to list of existing clothing items"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"Jonathan-Cao"},"content":"   Use case ends."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Jonathan-Cao"},"content":"**Extensions**"},{"lineNumber":58,"author":{"gitId":"Jonathan-Cao"},"content":"* 1a. The specified attributes are in an invalid format."},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"    * 1a1. nufash shows an error message with the valid format."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"Jonathan-Cao"},"content":"    * 1a2. User enters new data."},{"lineNumber":62,"author":{"gitId":"Jonathan-Cao"},"content":"    "},{"lineNumber":63,"author":{"gitId":"Jonathan-Cao"},"content":"        Steps 1a1-1a2 are repeated until data entered is in a valid format."},{"lineNumber":64,"author":{"gitId":"Jonathan-Cao"},"content":"        "},{"lineNumber":65,"author":{"gitId":"Jonathan-Cao"},"content":"        Use case resumes from step 2."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":"      "},{"lineNumber":68,"author":{"gitId":"Jonathan-Cao"},"content":"**Use case: Delete a clothing item**"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"Jonathan-Cao"},"content":"1. User requests to list all clothing items"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"2. nufash shows a list of clothing items"},{"lineNumber":74,"author":{"gitId":"Jonathan-Cao"},"content":"3. User requests to delete a specific clothing item in the list"},{"lineNumber":75,"author":{"gitId":"VisnuRavi"},"content":"4. nufash deletes the specified clothing item "},{"lineNumber":76,"author":{"gitId":"Jonathan-Cao"},"content":"   "},{"lineNumber":77,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":81,"author":{"gitId":"Jonathan-Cao"},"content":"  "},{"lineNumber":82,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":85,"author":{"gitId":"VisnuRavi"},"content":"    * 3a1. nufash shows an error message."},{"lineNumber":86,"author":{"gitId":"Jonathan-Cao"},"content":"      "},{"lineNumber":87,"author":{"gitId":"Jonathan-Cao"},"content":"        Use case resumes at step 2."},{"lineNumber":88,"author":{"gitId":"VisnuRavi"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":89,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":90,"author":{"gitId":"VisnuRavi"},"content":"**Non-Functional Requirements:**"},{"lineNumber":91,"author":{"gitId":"VisnuRavi"},"content":"1. Should work on any mainstream OS as long as it has Java 11 or above installed."},{"lineNumber":92,"author":{"gitId":"VisnuRavi"},"content":"2.  Should be able to hold up to 1000 articles of clothing without a noticeable sluggishness in performance for typical usage."},{"lineNumber":93,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":94,"author":{"gitId":"VisnuRavi"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":95,"author":{"gitId":"VisnuRavi"},"content":"    "},{"lineNumber":96,"author":{"gitId":"VisnuRavi"},"content":"**Glossary:**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"}],"authorContributionMap":{"arihantjain97":8,"Jonathan-Cao":25,"adidoesnt":11,"VisnuRavi":17,"-":36}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"Jonathan-Cao"},"content":"# nufash"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"---"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"### Introduction"},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"nufash is for those who prefer to use a desktop application to organise and manage their wardrobe. nufash is "},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"optimised for users who prefer typing, but also has the added benefit of a smooth and easy to use Graphical User "},{"lineNumber":8,"author":{"gitId":"Jonathan-Cao"},"content":"Interface(GUI). Start using nufash and never worry about keeping track of your clothes again!"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"---"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"### Quickstart"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"*{more to be added}*"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"---"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"### Features"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"**Command Format**"},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/striped shirt`."},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"* Items in square brackets are optional e.g. `n/NAME [c/COLOUR]` can be used as `n/striped shirt c/blue` or as `n/striped shirt`."},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME c/COLOUR`, `c/COLOUR n/NAME` is also acceptable."},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"* Argument for `t/TYPE` is either `office`, `casual`, `formal`, `sports`, or `others`."},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"**1. Viewing Help: `help`**  "},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"Shows an in-app user guide to various commands.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"**2. Add Clothing Item: `add`**  "},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"Adds a clothing item with a name, a specified colour, type and size.\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"Format: `add n/NAME c/COLOUR t/TYPE s/SIZE`\u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"Example:\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"* `add n/favourite t-shirt c/blue t/casual s/M`"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"  \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"**3. Listing all clothing `list`**  "},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"Shows a list of all articles of clothing in the wardrobe\u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":39,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"**4. Remove Clothing Item: `remove`**  "},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"Removes a clothing item associated with the index.\u003cbr\u003e"},{"lineNumber":42,"author":{"gitId":"Jonathan-Cao"},"content":"Format: `remove INDEX`"},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"* Removes the article of clothing at the specified INDEX"},{"lineNumber":44,"author":{"gitId":"Jonathan-Cao"},"content":"* The index refers to the index number shown in the list command"},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"* The index must be a positive integer 1, 2, 3, …\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":47,"author":{"gitId":"Jonathan-Cao"},"content":"Example:\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"Jonathan-Cao"},"content":"* `list`\u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"Jonathan-Cao"},"content":"  `remove 2`\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"Jonathan-Cao"},"content":"  Removes the 2nd article of clothing in the wardrobe."},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"  \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"**5. Editing an article of clothing: `edit`**\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"Jonathan-Cao"},"content":"Edits an existing article of clothing in the wardrobe.\u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"Jonathan-Cao"},"content":"Format: `edit INDEX [n/NAME] [c/COLOUR] [t/TYPE] [s/SIZE]`"},{"lineNumber":56,"author":{"gitId":"Jonathan-Cao"},"content":"* Edits the article of clothing at the specified INDEX. The index refers to the index number shown in the list command. The index must be a positive integer 1, 2, 3, …"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"* Existing values will be updated to the input values.\u003cbr\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"Example:"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"* `list`\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"  `edit 1 c/red s/M`\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"  Edits the colour and size of the 1st article of clothing to be red and M respectively."},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"  \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"VisnuRavi"},"content":"**6. Finding clothing that matches a certain type: `find`**\u003cbr\u003e"},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":"Finds clothing that matches a certain type.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"Format: `find t/type`"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":"* The search is case insensitive\u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"* `find n/worn out jeans`\u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"  Returns the article of clothing that is named \"worn out jeans\"."},{"lineNumber":74,"author":{"gitId":"VisnuRavi"},"content":"* `find c/white s/S`\u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"VisnuRavi"},"content":"  Returns all articles of S-sized clothing that are white in colour."},{"lineNumber":76,"author":{"gitId":"VisnuRavi"},"content":"  \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"VisnuRavi"},"content":"  "},{"lineNumber":78,"author":{"gitId":"VisnuRavi"},"content":"**7. Exiting the program: `exit`**\u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"VisnuRavi"},"content":"Exits the program.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"VisnuRavi"},"content":"---"},{"lineNumber":83,"author":{"gitId":"VisnuRavi"},"content":"### FAQ"},{"lineNumber":84,"author":{"gitId":"Jonathan-Cao"},"content":"Q: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":85,"author":{"gitId":"VisnuRavi"},"content":"A: Install the app in the other computer and overwrite the empty data file it creates with the file that contains "},{"lineNumber":86,"author":{"gitId":"VisnuRavi"},"content":"the data of your previous nufash folder."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"Jonathan-Cao"},"content":"Q: Who do I contact if I face any issues?\u003cbr\u003e"},{"lineNumber":89,"author":{"gitId":"Jonathan-Cao"},"content":"A: Tell us about your issue [here](https://github.com/AY2021S2-CS2103T-T12-1/tp), or better yet, submit a pull request with a way to solve it!"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"VisnuRavi"},"content":"---"},{"lineNumber":92,"author":{"gitId":"VisnuRavi"},"content":"### Command Summary"},{"lineNumber":93,"author":{"gitId":"VisnuRavi"},"content":"1. Help: `help`"},{"lineNumber":94,"author":{"gitId":"VisnuRavi"},"content":"2. Add: `add n/NAME c/COLOUR t/TYPE s/SIZE`\u003cbr\u003e"},{"lineNumber":95,"author":{"gitId":"VisnuRavi"},"content":"Eg. `add n/sleek tux c/white t/formal wear s/L`"},{"lineNumber":96,"author":{"gitId":"VisnuRavi"},"content":"3. List: `list`"},{"lineNumber":97,"author":{"gitId":"VisnuRavi"},"content":"4. Remove: `remove INDEX`\u003cbr\u003e"},{"lineNumber":98,"author":{"gitId":"VisnuRavi"},"content":"   Eg. `remove 4`"},{"lineNumber":99,"author":{"gitId":"VisnuRavi"},"content":"5. Edit: `edit INDEX n/NAME c/COLOUR t/TYPE s/SIZE`\u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"VisnuRavi"},"content":"Eg. `edit 1 n/polka dotted shirt c/red t/casual s/s`"},{"lineNumber":101,"author":{"gitId":"VisnuRavi"},"content":"6. Find: `find t/TYPE`\u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"VisnuRavi"},"content":"Eg. find `t/Office`"},{"lineNumber":103,"author":{"gitId":"VisnuRavi"},"content":"7. Exit: `exit`"},{"lineNumber":104,"author":{"gitId":"VisnuRavi"},"content":"---"}],"authorContributionMap":{"arihantjain97":1,"Jonathan-Cao":26,"VisnuRavi":59,"adidoesnt":2,"-":16}},{"path":"docs/diagrams/BetterModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"AddressBook *-right-\u003e \"1\" UniquePersonList"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook *-right-\u003e \"1\" UniqueTagList"},{"lineNumber":9,"author":{"gitId":"-"},"content":"UniqueTagList -[hidden]down- UniquePersonList"},{"lineNumber":10,"author":{"gitId":"-"},"content":"UniqueTagList -[hidden]down- UniquePersonList"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"UniqueTagList *-right-\u003e \"*\" Tag"},{"lineNumber":13,"author":{"gitId":"-"},"content":"UniquePersonList o-right-\u003e Person"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"Person -up-\u003e \"*\" Tag"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Person *--\u003e Name"},{"lineNumber":18,"author":{"gitId":"adidoesnt"},"content":"Person *--\u003e Size"},{"lineNumber":19,"author":{"gitId":"adidoesnt"},"content":"Person *--\u003e Colour"},{"lineNumber":20,"author":{"gitId":"arihantjain97"},"content":"Person *--\u003e DressCode"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"arihantjain97":1,"adidoesnt":2,"-":18}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface ObservableList \u003c\u003cInterface\u003e\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ReadOnlyAddressBook"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class Model"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ModelManager"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UserPrefs"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Package Person {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class Person"},{"lineNumber":20,"author":{"gitId":"arihantjain97"},"content":"Class DressCode"},{"lineNumber":21,"author":{"gitId":"adidoesnt"},"content":"Class Colour"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Name"},{"lineNumber":23,"author":{"gitId":"adidoesnt"},"content":"Class Size"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class UniquePersonList"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Package Tag {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class Tag"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF"},{"lineNumber":33,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Model .right.\u003e ObservableList"},{"lineNumber":39,"author":{"gitId":"-"},"content":"ModelManager o--\u003e \"1\" AddressBook"},{"lineNumber":40,"author":{"gitId":"-"},"content":"ModelManager o-left-\u003e \"1\" UserPrefs"},{"lineNumber":41,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"AddressBook *--\u003e \"1\" UniquePersonList"},{"lineNumber":44,"author":{"gitId":"-"},"content":"UniquePersonList o--\u003e \"*\" Person"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Person *--\u003e Name"},{"lineNumber":46,"author":{"gitId":"adidoesnt"},"content":"Person *--\u003e Size"},{"lineNumber":47,"author":{"gitId":"adidoesnt"},"content":"Person *--\u003e Colour"},{"lineNumber":48,"author":{"gitId":"arihantjain97"},"content":"Person *--\u003e DressCode"},{"lineNumber":49,"author":{"gitId":"adidoesnt"},"content":"Person *--\u003e \"*\" Description"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone"},{"lineNumber":52,"author":{"gitId":"arihantjain97"},"content":"Phone -[hidden]right-\u003e DressCode"},{"lineNumber":53,"author":{"gitId":"adidoesnt"},"content":"Address -[hidden]right-\u003e Colour"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"ModelManager -----\u003e\" ~* filtered list\" Person"},{"lineNumber":56,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"arihantjain97":3,"adidoesnt":6,"-":47}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string."},{"lineNumber":155,"author":{"gitId":"-"},"content":" *"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}."},{"lineNumber":171,"author":{"gitId":"-"},"content":" */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`."},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":344,"author":{"gitId":"adidoesnt"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getColour(),"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook."}],"authorContributionMap":{"adidoesnt":1,"-":393}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":66,"author":{"gitId":"-"},"content":"..."},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"..."},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":75,"author":{"gitId":"-"},"content":"..."},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":78,"author":{"gitId":"adidoesnt"},"content":"\u003cLabel fx:id\u003d\"colour\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$colour\" /\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"..."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":96,"author":{"gitId":"adidoesnt"},"content":"    \"size\": \"9482424\","},{"lineNumber":97,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"hans@example.com\","},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field."}],"authorContributionMap":{"adidoesnt":3,"-":100}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"adidoesnt"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [S/SIZE] [c/COLOUR] [a/ADDRESS] [d/DESCRIPTION]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here."},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":155,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"       persons.addAll("},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book"}],"authorContributionMap":{"adidoesnt":1,"-":249}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.storage.JsonWardrobeStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.storage.WardrobeStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"Jonathan-Cao"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Wardrobe ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"Jonathan-Cao"},"content":"        WardrobeStorage wardrobeStorage \u003d new JsonWardrobeStorage(userPrefs.getWardrobeFilePath());"},{"lineNumber":60,"author":{"gitId":"Jonathan-Cao"},"content":"        storage \u003d new StorageManager(wardrobeStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"Jonathan-Cao"},"content":"        Optional\u003cReadOnlyWardrobe\u003e wardrobeOptional;"},{"lineNumber":78,"author":{"gitId":"Jonathan-Cao"},"content":"        ReadOnlyWardrobe initialData;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"Jonathan-Cao"},"content":"            wardrobeOptional \u003d storage.readWardrobe();"},{"lineNumber":81,"author":{"gitId":"Jonathan-Cao"},"content":"            if (!wardrobeOptional.isPresent()) {"},{"lineNumber":82,"author":{"gitId":"Jonathan-Cao"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Wardrobe\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"Jonathan-Cao"},"content":"            initialData \u003d wardrobeOptional.orElseGet(SampleDataUtil::getSampleWardrobe);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":86,"author":{"gitId":"Jonathan-Cao"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Wardrobe\");"},{"lineNumber":87,"author":{"gitId":"Jonathan-Cao"},"content":"            initialData \u003d new Wardrobe();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"Jonathan-Cao"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Wardrobe\");"},{"lineNumber":90,"author":{"gitId":"Jonathan-Cao"},"content":"            initialData \u003d new Wardrobe();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":154,"author":{"gitId":"Jonathan-Cao"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Wardrobe\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":170,"author":{"gitId":"Jonathan-Cao"},"content":"        logger.info(\"Starting Wardrobe \" + MainApp.VERSION);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":19,"-":164}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"     * Returns the Wardrobe."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"     * @see seedu.address.model.Model#getWardrobe()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"    ReadOnlyWardrobe getWardrobe();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Jonathan-Cao"},"content":"    Path getWardrobeFilePath();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":5,"-":45}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.logic.parser.WardrobeParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"    private final WardrobeParser addressBookParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"Jonathan-Cao"},"content":"        addressBookParser \u003d new WardrobeParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"Jonathan-Cao"},"content":"            storage.saveWardrobe(model.getWardrobe());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"Jonathan-Cao"},"content":"    public ReadOnlyWardrobe getWardrobe() {"},{"lineNumber":59,"author":{"gitId":"Jonathan-Cao"},"content":"        return model.getWardrobe();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"Jonathan-Cao"},"content":"    public Path getWardrobeFilePath() {"},{"lineNumber":69,"author":{"gitId":"Jonathan-Cao"},"content":"        return model.getWardrobeFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":9,"-":72}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":3,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DRESSCODE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SIZE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"            + PREFIX_SIZE + \"SIZE \""},{"lineNumber":24,"author":{"gitId":"adidoesnt"},"content":"            + PREFIX_COLOUR + \"COLOUR \""},{"lineNumber":25,"author":{"gitId":"arihantjain97"},"content":"            + PREFIX_DRESSCODE + \"DRESSCODE \""},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]...\\n\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"            + PREFIX_SIZE + \"45 \""},{"lineNumber":30,"author":{"gitId":"adidoesnt"},"content":"            + PREFIX_COLOUR + \"johnd@example.com \""},{"lineNumber":31,"author":{"gitId":"arihantjain97"},"content":"            + PREFIX_DRESSCODE + \"CASUAL \""},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"            + PREFIX_DESCRIPTION + \"friends \""},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"            + PREFIX_DESCRIPTION + \"owesMoney\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":3,"adidoesnt":3,"VisnuRavi":7,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"        model.setWardrobe(new Wardrobe());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":2,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DRESSCODE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SIZE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":23,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":24,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"            + \"[\" + PREFIX_SIZE + \"SIZE] \""},{"lineNumber":42,"author":{"gitId":"adidoesnt"},"content":"            + \"[\" + PREFIX_COLOUR + \"COLOUR] \""},{"lineNumber":43,"author":{"gitId":"arihantjain97"},"content":"            + \"[\" + PREFIX_DRESSCODE + \"DRESSCODE] \""},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]...\\n\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"            + PREFIX_SIZE + \"36 \""},{"lineNumber":47,"author":{"gitId":"adidoesnt"},"content":"            + PREFIX_COLOUR + \"johndoe@example.com\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":97,"author":{"gitId":"adidoesnt"},"content":"        Colour updatedColour \u003d editPersonDescriptor.getColour().orElse(personToEdit.getColour());"},{"lineNumber":98,"author":{"gitId":"arihantjain97"},"content":"        Size updatedSize \u003d editPersonDescriptor.getSize().orElse(personToEdit.getSize());"},{"lineNumber":99,"author":{"gitId":"arihantjain97"},"content":"        DressCode updatedDressCode \u003d editPersonDescriptor.getDressCode().orElse(personToEdit.getDressCode());"},{"lineNumber":100,"author":{"gitId":"VisnuRavi"},"content":"        Set\u003cDescription\u003e updatedDescriptions \u003d editPersonDescriptor.getDescriptions()"},{"lineNumber":101,"author":{"gitId":"VisnuRavi"},"content":"                .orElse(personToEdit.getDescriptions());"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"arihantjain97"},"content":"        return new Person(updatedName, updatedSize, updatedColour, updatedDressCode, updatedDescriptions);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"VisnuRavi"},"content":"     * Stores the details to edit the person with."},{"lineNumber":126,"author":{"gitId":"VisnuRavi"},"content":"     * Each non-empty field value will replace the"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":131,"author":{"gitId":"VisnuRavi"},"content":"        private Size size;"},{"lineNumber":132,"author":{"gitId":"adidoesnt"},"content":"        private Colour colour;"},{"lineNumber":133,"author":{"gitId":"arihantjain97"},"content":"        private DressCode dresscode;"},{"lineNumber":134,"author":{"gitId":"VisnuRavi"},"content":"        private Set\u003cDescription\u003e descriptions;"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":140,"author":{"gitId":"VisnuRavi"},"content":"         * A defensive copy of {@code descriptions} is used internally."},{"lineNumber":141,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":144,"author":{"gitId":"VisnuRavi"},"content":"            setSize(toCopy.size);"},{"lineNumber":145,"author":{"gitId":"adidoesnt"},"content":"            setColour(toCopy.colour);"},{"lineNumber":146,"author":{"gitId":"arihantjain97"},"content":"            setDressCode(toCopy.dresscode);"},{"lineNumber":147,"author":{"gitId":"VisnuRavi"},"content":"            setDescriptions(toCopy.descriptions);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":152,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":154,"author":{"gitId":"arihantjain97"},"content":"            return CollectionUtil.isAnyNonNull(name, size, colour, dresscode, descriptions);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"VisnuRavi"},"content":"        public void setSize(Size size) {"},{"lineNumber":166,"author":{"gitId":"VisnuRavi"},"content":"            this.size \u003d size;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"VisnuRavi"},"content":"        public Optional\u003cSize\u003e getSize() {"},{"lineNumber":170,"author":{"gitId":"VisnuRavi"},"content":"            return Optional.ofNullable(size);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"adidoesnt"},"content":"        public void setColour(Colour colour) {"},{"lineNumber":174,"author":{"gitId":"adidoesnt"},"content":"            this.colour \u003d colour;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"adidoesnt"},"content":"        public Optional\u003cColour\u003e getColour() {"},{"lineNumber":178,"author":{"gitId":"adidoesnt"},"content":"            return Optional.ofNullable(colour);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"arihantjain97"},"content":"        public void setDressCode(DressCode dresscode) {"},{"lineNumber":182,"author":{"gitId":"arihantjain97"},"content":"            this.dresscode \u003d dresscode;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"arihantjain97"},"content":"        public Optional\u003cDressCode\u003e getDressCode() {"},{"lineNumber":186,"author":{"gitId":"arihantjain97"},"content":"            return Optional.ofNullable(dresscode);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":190,"author":{"gitId":"VisnuRavi"},"content":"         * Sets {@code descriptions} to this object\u0027s {@code descriptions}."},{"lineNumber":191,"author":{"gitId":"VisnuRavi"},"content":"         * A defensive copy of {@code descriptions} is used internally."},{"lineNumber":192,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":193,"author":{"gitId":"VisnuRavi"},"content":"        public void setDescriptions(Set\u003cDescription\u003e descriptions) {"},{"lineNumber":194,"author":{"gitId":"VisnuRavi"},"content":"            this.descriptions \u003d (descriptions !\u003d null) ? new HashSet\u003c\u003e(descriptions) : null;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":198,"author":{"gitId":"VisnuRavi"},"content":"         * Returns an unmodifiable description set, which throws {@code UnsupportedOperationException}"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":200,"author":{"gitId":"VisnuRavi"},"content":"         * Returns {@code Optional#empty()} if {@code descriptions} is null."},{"lineNumber":201,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitId":"VisnuRavi"},"content":"        public Optional\u003cSet\u003cDescription\u003e\u003e getDescriptions() {"},{"lineNumber":203,"author":{"gitId":"VisnuRavi"},"content":"            return (descriptions !\u003d null) ? Optional.of(Collections.unmodifiableSet(descriptions)) : Optional.empty();"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":222,"author":{"gitId":"VisnuRavi"},"content":"                    \u0026\u0026 getSize().equals(e.getSize())"},{"lineNumber":223,"author":{"gitId":"adidoesnt"},"content":"                    \u0026\u0026 getColour().equals(e.getColour())"},{"lineNumber":224,"author":{"gitId":"arihantjain97"},"content":"                    \u0026\u0026 getDressCode().equals(e.getDressCode())"},{"lineNumber":225,"author":{"gitId":"VisnuRavi"},"content":"                    \u0026\u0026 getDescriptions().equals(e.getDescriptions());"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":14,"adidoesnt":12,"VisnuRavi":30,"-":172}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DRESSCODE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SIZE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":16,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":17,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitId":"arihantjain97"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SIZE, PREFIX_COLOUR, PREFIX_DRESSCODE,"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"                        PREFIX_DESCRIPTION);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"arihantjain97"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DRESSCODE, PREFIX_SIZE, PREFIX_COLOUR)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"        Size size \u003d ParserUtil.parseSize(argMultimap.getValue(PREFIX_SIZE).get());"},{"lineNumber":45,"author":{"gitId":"adidoesnt"},"content":"        Colour colour \u003d ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR).get());"},{"lineNumber":46,"author":{"gitId":"arihantjain97"},"content":"        DressCode dresscode \u003d ParserUtil.parseDresscode(argMultimap.getValue(PREFIX_DRESSCODE).get());"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"        Set\u003cDescription\u003e descriptionList \u003d ParserUtil.parseDescriptions(argMultimap.getAllValues(PREFIX_DESCRIPTION));"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"arihantjain97"},"content":"        Person person \u003d new Person(name, size, colour, dresscode, descriptionList);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":6,"adidoesnt":3,"VisnuRavi":7,"-":46}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":8,"author":{"gitId":"adidoesnt"},"content":"    public static final Prefix PREFIX_COLOUR \u003d new Prefix(\"c/\");"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"},{"lineNumber":10,"author":{"gitId":"arihantjain97"},"content":"    public static final Prefix PREFIX_DRESSCODE \u003d new Prefix(\"r/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":12,"author":{"gitId":"arihantjain97"},"content":"    public static final Prefix PREFIX_SIZE \u003d new Prefix(\"s/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"},{"lineNumber":14,"author":{"gitId":"arihantjain97"},"content":""}],"authorContributionMap":{"arihantjain97":3,"adidoesnt":1,"VisnuRavi":1,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":6,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DRESSCODE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SIZE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"arihantjain97"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SIZE, PREFIX_COLOUR, PREFIX_DRESSCODE,"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"                        PREFIX_DESCRIPTION);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"        if (argMultimap.getValue(PREFIX_SIZE).isPresent()) {"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"            editPersonDescriptor.setSize(ParserUtil.parseSize(argMultimap.getValue(PREFIX_SIZE).get()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"adidoesnt"},"content":"        if (argMultimap.getValue(PREFIX_COLOUR).isPresent()) {"},{"lineNumber":54,"author":{"gitId":"adidoesnt"},"content":"            editPersonDescriptor.setColour(ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR).get()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"arihantjain97"},"content":"        if (argMultimap.getValue(PREFIX_DRESSCODE).isPresent()) {"},{"lineNumber":57,"author":{"gitId":"arihantjain97"},"content":"            editPersonDescriptor.setDressCode(ParserUtil.parseDresscode(argMultimap.getValue(PREFIX_DRESSCODE).get()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"        parseDescriptionsForEdit(argMultimap.getAllValues(PREFIX_DESCRIPTION))"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"                .ifPresent(editPersonDescriptor::setDescriptions);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"     * Parses {@code Collection\u003cString\u003e descriptions} into a {@code Set\u003cDescription\u003e}"},{"lineNumber":71,"author":{"gitId":"VisnuRavi"},"content":"     * if {@code descriptions} is non-empty."},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"     * If {@code descriptions} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"     * {@code Set\u003cDescription\u003e} containing zero descriptions."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"VisnuRavi"},"content":"    private Optional\u003cSet\u003cDescription\u003e\u003e parseDescriptionsForEdit(Collection\u003cString\u003e descriptions) throws ParseException {"},{"lineNumber":76,"author":{"gitId":"VisnuRavi"},"content":"        assert descriptions !\u003d null;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"VisnuRavi"},"content":"        if (descriptions.isEmpty()) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"VisnuRavi"},"content":"        Collection\u003cString\u003e descriptionSet \u003d descriptions.size() \u003d\u003d 1 \u0026\u0026 descriptions"},{"lineNumber":82,"author":{"gitId":"VisnuRavi"},"content":"                .contains(\"\") ? Collections.emptySet() : descriptions;"},{"lineNumber":83,"author":{"gitId":"VisnuRavi"},"content":"        return Optional.of(ParserUtil.parseDescriptions(descriptionSet));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":4,"adidoesnt":4,"VisnuRavi":17,"-":61}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":13,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":14,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"     * Parses a {@code String size} into a {@code Size}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"     * @throws ParseException if the given {@code size} is invalid."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"    public static Size parseSize(String size) throws ParseException {"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"        requireNonNull(size);"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"        String trimmedPhone \u003d size.trim();"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"        if (!Size.isValidSize(trimmedPhone)) {"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"            throw new ParseException(Size.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"        return new Size(trimmedPhone);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"arihantjain97"},"content":"    public static DressCode parseDresscode(String dresscode) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"arihantjain97"},"content":"        requireNonNull(dresscode);"},{"lineNumber":76,"author":{"gitId":"arihantjain97"},"content":"        String trimmedDresscode \u003d dresscode.trim();"},{"lineNumber":77,"author":{"gitId":"arihantjain97"},"content":"        if (!DressCode.isValidDressCode(trimmedDresscode)) {"},{"lineNumber":78,"author":{"gitId":"arihantjain97"},"content":"            throw new ParseException(DressCode.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"arihantjain97"},"content":"        return new DressCode(trimmedDresscode);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"adidoesnt"},"content":"     * Parses a {@code String colour} into an {@code Colour}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"adidoesnt"},"content":"     * @throws ParseException if the given {@code colour} is invalid."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"adidoesnt"},"content":"    public static Colour parseColour(String colour) throws ParseException {"},{"lineNumber":90,"author":{"gitId":"adidoesnt"},"content":"        requireNonNull(colour);"},{"lineNumber":91,"author":{"gitId":"adidoesnt"},"content":"        String trimmedColour \u003d colour.trim();"},{"lineNumber":92,"author":{"gitId":"adidoesnt"},"content":"        if (!Colour.isValidColour(trimmedColour)) {"},{"lineNumber":93,"author":{"gitId":"adidoesnt"},"content":"            throw new ParseException(Colour.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"adidoesnt"},"content":"        return new Colour(trimmedColour);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"VisnuRavi"},"content":"     * Parses a {@code String description} into a {@code Description}."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"VisnuRavi"},"content":"     * @throws ParseException if the given {@code description} is invalid."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"VisnuRavi"},"content":"    public static Description parseDescription(String description) throws ParseException {"},{"lineNumber":105,"author":{"gitId":"VisnuRavi"},"content":"        requireNonNull(description);"},{"lineNumber":106,"author":{"gitId":"VisnuRavi"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":107,"author":{"gitId":"VisnuRavi"},"content":"        if (!Description.isValidDescriptionName(trimmedDescription)) {"},{"lineNumber":108,"author":{"gitId":"VisnuRavi"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"VisnuRavi"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"VisnuRavi"},"content":"     * Parses {@code Collection\u003cString\u003e descriptions} into a {@code Set\u003cDescription\u003e}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"VisnuRavi"},"content":"    public static Set\u003cDescription\u003e parseDescriptions(Collection\u003cString\u003e descriptions) throws ParseException {"},{"lineNumber":117,"author":{"gitId":"VisnuRavi"},"content":"        requireNonNull(descriptions);"},{"lineNumber":118,"author":{"gitId":"VisnuRavi"},"content":"        final Set\u003cDescription\u003e descriptionSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"VisnuRavi"},"content":"        for (String descriptionName : descriptions) {"},{"lineNumber":120,"author":{"gitId":"VisnuRavi"},"content":"            descriptionSet.add(parseDescription(descriptionName));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"VisnuRavi"},"content":"        return descriptionSet;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":7,"VisnuRavi":25,"adidoesnt":9,"-":83}},{"path":"src/main/java/seedu/address/logic/parser/WardrobeParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":"public class WardrobeParser {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":1,"-":75}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Jonathan-Cao"},"content":"     * Returns the user prefs\u0027 wardrobe file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"    Path getWardrobeFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"     * Sets the user prefs\u0027 wardrobe file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"    void setWardrobeFilePath(Path wardrobeFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Jonathan-Cao"},"content":"     * Replaces wardrobe data with the data in {@code wardrobe}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Jonathan-Cao"},"content":"    void setWardrobe(ReadOnlyWardrobe wardrobe);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"Jonathan-Cao"},"content":"    /** Returns the Wardrobe */"},{"lineNumber":53,"author":{"gitId":"Jonathan-Cao"},"content":"    ReadOnlyWardrobe getWardrobe();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Jonathan-Cao"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the wardrobe."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":62,"author":{"gitId":"Jonathan-Cao"},"content":"     * The person must exist in the wardrobe."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":68,"author":{"gitId":"Jonathan-Cao"},"content":"     * {@code person} must not already exist in the wardrobe."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":74,"author":{"gitId":"Jonathan-Cao"},"content":"     * {@code target} must exist in the wardrobe."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":12,"-":75}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":"    private final Wardrobe wardrobe;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"     * Initializes a ModelManager with the given wardrobe and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"    public ModelManager(ReadOnlyWardrobe wardrobe, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"        requireAllNonNull(wardrobe, userPrefs);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Jonathan-Cao"},"content":"        logger.fine(\"Initializing with address book: \" + wardrobe + \" and user prefs \" + userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"        this.wardrobe \u003d new Wardrobe(wardrobe);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":37,"author":{"gitId":"Jonathan-Cao"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.wardrobe.getPersonList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"        this(new Wardrobe(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"Jonathan-Cao"},"content":"    public Path getWardrobeFilePath() {"},{"lineNumber":70,"author":{"gitId":"Jonathan-Cao"},"content":"        return userPrefs.getWardrobeFilePath();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"Jonathan-Cao"},"content":"    public void setWardrobeFilePath(Path wardrobeFilePath) {"},{"lineNumber":75,"author":{"gitId":"Jonathan-Cao"},"content":"        requireNonNull(wardrobeFilePath);"},{"lineNumber":76,"author":{"gitId":"Jonathan-Cao"},"content":"        userPrefs.setWardrobeFilePath(wardrobeFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"Jonathan-Cao"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wardrobe \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"Jonathan-Cao"},"content":"    public void setWardrobe(ReadOnlyWardrobe wardrobe) {"},{"lineNumber":83,"author":{"gitId":"Jonathan-Cao"},"content":"        this.wardrobe.resetData(wardrobe);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"Jonathan-Cao"},"content":"    public ReadOnlyWardrobe getWardrobe() {"},{"lineNumber":88,"author":{"gitId":"Jonathan-Cao"},"content":"        return wardrobe;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":94,"author":{"gitId":"Jonathan-Cao"},"content":"        return wardrobe.hasPerson(person);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":99,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobe.removePerson(target);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":104,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobe.addPerson(person);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobe.setPerson(target, editedPerson);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":119,"author":{"gitId":"Jonathan-Cao"},"content":"     * {@code versionedWardrobe}"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":146,"author":{"gitId":"Jonathan-Cao"},"content":"        return wardrobe.equals(other.wardrobe)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":24,"-":127}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":"    Path getWardrobeFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":1,"-":15}},{"path":"src/main/java/seedu/address/model/ReadOnlyWardrobe.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":"public interface ReadOnlyWardrobe {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":1,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":"    private Path wardrobeFilePath \u003d Paths.get(\"data\" , \"wardrobe.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"Jonathan-Cao"},"content":"        setWardrobeFilePath(newUserPrefs.getWardrobeFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"Jonathan-Cao"},"content":"    public Path getWardrobeFilePath() {"},{"lineNumber":51,"author":{"gitId":"Jonathan-Cao"},"content":"        return wardrobeFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"Jonathan-Cao"},"content":"    public void setWardrobeFilePath(Path wardrobeFilePath) {"},{"lineNumber":55,"author":{"gitId":"Jonathan-Cao"},"content":"        requireNonNull(wardrobeFilePath);"},{"lineNumber":56,"author":{"gitId":"Jonathan-Cao"},"content":"        this.wardrobeFilePath \u003d wardrobeFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":71,"author":{"gitId":"Jonathan-Cao"},"content":"                \u0026\u0026 wardrobeFilePath.equals(o.wardrobeFilePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"Jonathan-Cao"},"content":"        return Objects.hash(guiSettings, wardrobeFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":83,"author":{"gitId":"Jonathan-Cao"},"content":"        sb.append(\"\\nLocal data file location : \" + wardrobeFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":10,"-":77}},{"path":"src/main/java/seedu/address/model/Wardrobe.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":" * Wraps all data at the wardrobe level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"public class Wardrobe implements ReadOnlyWardrobe {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"    public Wardrobe() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Jonathan-Cao"},"content":"     * Creates an Wardrobe using the Persons in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"    public Wardrobe(ReadOnlyWardrobe toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Jonathan-Cao"},"content":"     * Resets the existing data of this {@code Wardrobe} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Jonathan-Cao"},"content":"    public void resetData(ReadOnlyWardrobe newData) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Jonathan-Cao"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the wardrobe."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Jonathan-Cao"},"content":"     * Adds a person to the wardrobe."},{"lineNumber":71,"author":{"gitId":"Jonathan-Cao"},"content":"     * The person must not already exist in the wardrobe."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":79,"author":{"gitId":"Jonathan-Cao"},"content":"     * {@code target} must exist in the wardrobe."},{"lineNumber":80,"author":{"gitId":"Jonathan-Cao"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the wardrobe."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Jonathan-Cao"},"content":"     * Removes {@code key} from this {@code Wardrobe}."},{"lineNumber":90,"author":{"gitId":"Jonathan-Cao"},"content":"     * {@code key} must exist in the wardrobe."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"Jonathan-Cao"},"content":"                || (other instanceof Wardrobe // instanceof handles nulls"},{"lineNumber":113,"author":{"gitId":"Jonathan-Cao"},"content":"                \u0026\u0026 persons.equals(((Wardrobe) other).persons));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":16,"-":104}},{"path":"src/main/java/seedu/address/model/description/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jonathan-Cao"},"content":"package seedu.address.model.description;"},{"lineNumber":2,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":3,"author":{"gitId":"Jonathan-Cao"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Jonathan-Cao"},"content":" * Represents a Description in the address book."},{"lineNumber":8,"author":{"gitId":"Jonathan-Cao"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidDescriptionName(String)}"},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":"public class Description {"},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Description names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"    public final String descriptionName;"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"     * Constructs a {@code Description}."},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"     * @param descriptionName A valid description name."},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":"    public Description(String descriptionName) {"},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":"        requireNonNull(descriptionName);"},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":"        checkArgument(isValidDescriptionName(descriptionName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"        this.descriptionName \u003d descriptionName;"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"     * Returns true if a given string is a valid description name."},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"    public static boolean isValidDescriptionName(String test) {"},{"lineNumber":32,"author":{"gitId":"Jonathan-Cao"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Jonathan-Cao"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"Jonathan-Cao"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"Jonathan-Cao"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"Jonathan-Cao"},"content":"                \u0026\u0026 descriptionName.equals(((Description) other).descriptionName)); // state check"},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":42,"author":{"gitId":"Jonathan-Cao"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"Jonathan-Cao"},"content":"        return descriptionName.hashCode();"},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":47,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Jonathan-Cao"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Jonathan-Cao"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"Jonathan-Cao"},"content":"        return \u0027[\u0027 + descriptionName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":54,"author":{"gitId":"Jonathan-Cao"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":54}},{"path":"src/main/java/seedu/address/model/person/Colour.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"adidoesnt"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":3,"author":{"gitId":"adidoesnt"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"adidoesnt"},"content":" * Represents a Person\u0027s colour in the address book."},{"lineNumber":7,"author":{"gitId":"adidoesnt"},"content":" */"},{"lineNumber":8,"author":{"gitId":"adidoesnt"},"content":"public class Colour {"},{"lineNumber":9,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":10,"author":{"gitId":"adidoesnt"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":11,"author":{"gitId":"adidoesnt"},"content":"            \"Person\u0027s Colour field is missing!\";"},{"lineNumber":12,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":13,"author":{"gitId":"adidoesnt"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":14,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":15,"author":{"gitId":"adidoesnt"},"content":"    public final String colour;"},{"lineNumber":16,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":17,"author":{"gitId":"adidoesnt"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"adidoesnt"},"content":"     * Constructs an {@code Colour}."},{"lineNumber":19,"author":{"gitId":"adidoesnt"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"adidoesnt"},"content":"     * @param colour A valid colour address."},{"lineNumber":21,"author":{"gitId":"adidoesnt"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"adidoesnt"},"content":"    public Colour(String colour) {"},{"lineNumber":23,"author":{"gitId":"adidoesnt"},"content":"        if (colour \u003d\u003d \" \" || colour \u003d\u003d \" \") {"},{"lineNumber":24,"author":{"gitId":"adidoesnt"},"content":"            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"adidoesnt"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"adidoesnt"},"content":"        requireNonNull(colour);"},{"lineNumber":27,"author":{"gitId":"adidoesnt"},"content":"        this.colour \u003d colour;"},{"lineNumber":28,"author":{"gitId":"adidoesnt"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":30,"author":{"gitId":"adidoesnt"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"adidoesnt"},"content":"     * Returns true if a given string is a valid colour."},{"lineNumber":32,"author":{"gitId":"adidoesnt"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"adidoesnt"},"content":"    public static boolean isValidColour(String test) {"},{"lineNumber":34,"author":{"gitId":"adidoesnt"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitId":"adidoesnt"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":37,"author":{"gitId":"adidoesnt"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"adidoesnt"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"adidoesnt"},"content":"        return colour;"},{"lineNumber":40,"author":{"gitId":"adidoesnt"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":42,"author":{"gitId":"adidoesnt"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"adidoesnt"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"adidoesnt"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"adidoesnt"},"content":"                || (other instanceof Colour // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"adidoesnt"},"content":"                \u0026\u0026 colour.equals(((Colour) other).colour)); // state check"},{"lineNumber":47,"author":{"gitId":"adidoesnt"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":49,"author":{"gitId":"adidoesnt"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"adidoesnt"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitId":"adidoesnt"},"content":"        return colour.hashCode();"},{"lineNumber":52,"author":{"gitId":"adidoesnt"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":54,"author":{"gitId":"adidoesnt"},"content":"}"}],"authorContributionMap":{"adidoesnt":54}},{"path":"src/main/java/seedu/address/model/person/DressCode.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"arihantjain97"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":3,"author":{"gitId":"arihantjain97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":" * Represents a Garment\u0027s DressCode in the wardrobe."},{"lineNumber":8,"author":{"gitId":"arihantjain97"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDressCode(String)}"},{"lineNumber":9,"author":{"gitId":"arihantjain97"},"content":" */"},{"lineNumber":10,"author":{"gitId":"arihantjain97"},"content":"public class DressCode {"},{"lineNumber":11,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":12,"author":{"gitId":"arihantjain97"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"DressCode can take 3 values: FORMAL, ACTIVE, CASUAL\";"},{"lineNumber":13,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":14,"author":{"gitId":"arihantjain97"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"arihantjain97"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"arihantjain97"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"arihantjain97"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"arihantjain97"},"content":"    public static final String VALIDATION_REGEX \u003d \"FORMAL|ACTIVE|CASUAL\";"},{"lineNumber":19,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":20,"author":{"gitId":"arihantjain97"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":22,"author":{"gitId":"arihantjain97"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"arihantjain97"},"content":"     * Constructs an {@code dresscode}."},{"lineNumber":24,"author":{"gitId":"arihantjain97"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"arihantjain97"},"content":"     * @param dresscode A valid DressCode."},{"lineNumber":26,"author":{"gitId":"arihantjain97"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"arihantjain97"},"content":"    public DressCode(String dresscode) {"},{"lineNumber":28,"author":{"gitId":"arihantjain97"},"content":"        requireNonNull(dresscode);"},{"lineNumber":29,"author":{"gitId":"arihantjain97"},"content":"        checkArgument(isValidDressCode(dresscode), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"arihantjain97"},"content":"        value \u003d dresscode;"},{"lineNumber":31,"author":{"gitId":"arihantjain97"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":33,"author":{"gitId":"arihantjain97"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"arihantjain97"},"content":"     * Returns true if a given string is a valid DressCode."},{"lineNumber":35,"author":{"gitId":"arihantjain97"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"arihantjain97"},"content":"    public static boolean isValidDressCode(String test) {"},{"lineNumber":37,"author":{"gitId":"arihantjain97"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"arihantjain97"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":40,"author":{"gitId":"arihantjain97"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"arihantjain97"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"arihantjain97"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"arihantjain97"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":45,"author":{"gitId":"arihantjain97"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"arihantjain97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"arihantjain97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"arihantjain97"},"content":"                || (other instanceof DressCode // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"arihantjain97"},"content":"                \u0026\u0026 value.equals(((DressCode) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"arihantjain97"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":52,"author":{"gitId":"arihantjain97"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"arihantjain97"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"arihantjain97"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"arihantjain97"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":57,"author":{"gitId":"arihantjain97"},"content":"}"}],"authorContributionMap":{"arihantjain97":57}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"    private final Size size;"},{"lineNumber":21,"author":{"gitId":"adidoesnt"},"content":"    private final Colour colour;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"arihantjain97"},"content":"    private final DressCode dresscode;"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    private final Set\u003cDescription\u003e descriptions \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":31,"author":{"gitId":"arihantjain97"},"content":"    public Person(Name name, Size size, Colour colour, DressCode dresscode, Set\u003cDescription\u003e descriptions) {"},{"lineNumber":32,"author":{"gitId":"arihantjain97"},"content":"        requireAllNonNull(name, size, colour, dresscode, descriptions);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"        this.size \u003d size;"},{"lineNumber":35,"author":{"gitId":"adidoesnt"},"content":"        this.colour \u003d colour;"},{"lineNumber":36,"author":{"gitId":"arihantjain97"},"content":"        this.dresscode \u003d dresscode;"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"        this.descriptions.addAll(descriptions);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"    public Size getSize() {"},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":"        return size;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"adidoesnt"},"content":"    public Colour getColour() {"},{"lineNumber":49,"author":{"gitId":"adidoesnt"},"content":"        return colour;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"arihantjain97"},"content":"    public DressCode getDressCode() {"},{"lineNumber":53,"author":{"gitId":"arihantjain97"},"content":"        return dresscode;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"     * Returns an immutable description set, which throws {@code UnsupportedOperationException}"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"    public Set\u003cDescription\u003e getDescriptions() {"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"        return Collections.unmodifiableSet(descriptions);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":93,"author":{"gitId":"VisnuRavi"},"content":"                \u0026\u0026 otherPerson.getSize().equals(getSize())"},{"lineNumber":94,"author":{"gitId":"arihantjain97"},"content":"                \u0026\u0026 otherPerson.getColour().equals(getColour())"},{"lineNumber":95,"author":{"gitId":"arihantjain97"},"content":"                \u0026\u0026 otherPerson.getDressCode().equals(getDressCode())"},{"lineNumber":96,"author":{"gitId":"VisnuRavi"},"content":"                \u0026\u0026 otherPerson.getDescriptions().equals(getDescriptions());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitId":"arihantjain97"},"content":"        return Objects.hash(name, size, colour, dresscode, descriptions);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":109,"author":{"gitId":"VisnuRavi"},"content":"                .append(\"; Size: \")"},{"lineNumber":110,"author":{"gitId":"VisnuRavi"},"content":"                .append(getSize())"},{"lineNumber":111,"author":{"gitId":"adidoesnt"},"content":"                .append(\"; Colour: \")"},{"lineNumber":112,"author":{"gitId":"adidoesnt"},"content":"                .append(getColour())"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":114,"author":{"gitId":"arihantjain97"},"content":"                .append(getDressCode());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"VisnuRavi"},"content":"        Set\u003cDescription\u003e descriptions \u003d getDescriptions();"},{"lineNumber":117,"author":{"gitId":"VisnuRavi"},"content":"        if (!descriptions.isEmpty()) {"},{"lineNumber":118,"author":{"gitId":"VisnuRavi"},"content":"            builder.append(\"; Descriptions: \");"},{"lineNumber":119,"author":{"gitId":"VisnuRavi"},"content":"            descriptions.forEach(builder::append);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":11,"VisnuRavi":18,"adidoesnt":6,"-":89}},{"path":"src/main/java/seedu/address/model/person/Size.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":" * Represents a Garment\u0027s size in the nufash."},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSize(String)}"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"public class Size {"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"            \"Size numbers should only contain numbers\";"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"     * Constructs a {@code Size}."},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"     * @param size A valid size."},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    public Size(String size) {"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"        requireNonNull(size);"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"        checkArgument(isValidSize(size), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"        value \u003d size;"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"     * Returns true if a given string is a valid size."},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"    public static boolean isValidSize(String test) {"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"                || (other instanceof Size // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":"                \u0026\u0026 value.equals(((Size) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":53}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":8,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":10,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":11,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":" * Contains utility methods for populating {@code Wardrobe} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":22,"author":{"gitId":"adidoesnt"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Size(\"34\"), new Colour(\"alexyeoh@example.com\"),"},{"lineNumber":23,"author":{"gitId":"arihantjain97"},"content":"                new DressCode(\"FORMAL\"),"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"                getDescriptionSet(\"friends\")),"},{"lineNumber":25,"author":{"gitId":"adidoesnt"},"content":"            new Person(new Name(\"Bernice Yu\"), new Size(\"29\"), new Colour(\"berniceyu@example.com\"),"},{"lineNumber":26,"author":{"gitId":"arihantjain97"},"content":"                new DressCode(\"CASUAL\"),"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"                getDescriptionSet(\"colleagues\", \"friends\")),"},{"lineNumber":28,"author":{"gitId":"adidoesnt"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Size(\"26\"), new Colour(\"charlotte@example.com\"),"},{"lineNumber":29,"author":{"gitId":"arihantjain97"},"content":"                new DressCode(\"ACTIVE\"),"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"                getDescriptionSet(\"neighbours\")),"},{"lineNumber":31,"author":{"gitId":"adidoesnt"},"content":"            new Person(new Name(\"David Li\"), new Size(\"43\"), new Colour(\"lidavid@example.com\"),"},{"lineNumber":32,"author":{"gitId":"arihantjain97"},"content":"                new DressCode(\"FORMAL\"),"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"                getDescriptionSet(\"family\")),"},{"lineNumber":34,"author":{"gitId":"adidoesnt"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Size(\"44\"), new Colour(\"irfan@example.com\"),"},{"lineNumber":35,"author":{"gitId":"arihantjain97"},"content":"                new DressCode(\"CASUAL\"),"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"                getDescriptionSet(\"classmates\")),"},{"lineNumber":37,"author":{"gitId":"adidoesnt"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Size(\"35\"), new Colour(\"royb@example.com\"),"},{"lineNumber":38,"author":{"gitId":"arihantjain97"},"content":"                new DressCode(\"ACTIVE\"),"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"                getDescriptionSet(\"colleagues\"))"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"    public static ReadOnlyWardrobe getSampleWardrobe() {"},{"lineNumber":44,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe sampleAb \u003d new Wardrobe();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a description set containing the list of strings given."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"    public static Set\u003cDescription\u003e getDescriptionSet(String... strings) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"                .map(Description::new)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":7,"Jonathan-Cao":5,"VisnuRavi":11,"adidoesnt":7,"-":30}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jonathan-Cao"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":3,"author":{"gitId":"Jonathan-Cao"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"Jonathan-Cao"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":8,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":" * Jackson-friendly version of {@link seedu.address.model.description.Description}."},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":"class JsonAdaptedDescription {"},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":"    private final String descriptionName;"},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":"     * Constructs a {@code JsonAdaptedDescription} with the given {@code descriptionName}."},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"    public JsonAdaptedDescription(String descriptionName) {"},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"        this.descriptionName \u003d descriptionName;"},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"     * Converts a given {@code Description} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"    public JsonAdaptedDescription(Description source) {"},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"        descriptionName \u003d source.descriptionName;"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"Jonathan-Cao"},"content":"    public String getDescriptionName() {"},{"lineNumber":33,"author":{"gitId":"Jonathan-Cao"},"content":"        return descriptionName;"},{"lineNumber":34,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":36,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Jonathan-Cao"},"content":"     * Converts this Jackson-friendly adapted description object into the model\u0027s {@code Description} object."},{"lineNumber":38,"author":{"gitId":"Jonathan-Cao"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Jonathan-Cao"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted description."},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"    public Description toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"Jonathan-Cao"},"content":"        if (!Description.isValidDescriptionName(descriptionName)) {"},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"Jonathan-Cao"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"        return new Description(descriptionName);"},{"lineNumber":46,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":48,"author":{"gitId":"Jonathan-Cao"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":48}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":14,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":15,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    private final String size;"},{"lineNumber":29,"author":{"gitId":"adidoesnt"},"content":"    private final String colour;"},{"lineNumber":30,"author":{"gitId":"arihantjain97"},"content":"    private final String dresscode;"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"    private final List\u003cJsonAdaptedDescription\u003e descriptions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"size\") String size,"},{"lineNumber":38,"author":{"gitId":"arihantjain97"},"content":"            @JsonProperty(\"colour\") String colour, @JsonProperty(\"dresscode\") String dresscode,"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"            @JsonProperty(\"addedDescriptions\") List\u003cJsonAdaptedDescription\u003e addedDescriptions) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"        this.size \u003d size;"},{"lineNumber":42,"author":{"gitId":"adidoesnt"},"content":"        this.colour \u003d colour;"},{"lineNumber":43,"author":{"gitId":"arihantjain97"},"content":"        this.dresscode \u003d dresscode;"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"        if (addedDescriptions !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":"            this.descriptions.addAll(addedDescriptions);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"        size \u003d source.getSize().value;"},{"lineNumber":55,"author":{"gitId":"adidoesnt"},"content":"        colour \u003d source.getColour().colour;"},{"lineNumber":56,"author":{"gitId":"arihantjain97"},"content":"        dresscode \u003d source.getDressCode().value;"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"        descriptions.addAll(source.getDescriptions().stream()"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"                .map(JsonAdaptedDescription::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"        final List\u003cDescription\u003e garmentDescriptions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":"        for (JsonAdaptedDescription description : descriptions) {"},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"            garmentDescriptions.add(description.toModelType());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"VisnuRavi"},"content":"        if (size \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitId":"VisnuRavi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Size.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"VisnuRavi"},"content":"        if (!Size.isValidSize(size)) {"},{"lineNumber":85,"author":{"gitId":"VisnuRavi"},"content":"            throw new IllegalValueException(Size.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"adidoesnt"},"content":"        final Size modelSize \u003d new Size(size);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"adidoesnt"},"content":"        if (colour \u003d\u003d null || !Colour.isValidColour(colour)) {"},{"lineNumber":90,"author":{"gitId":"adidoesnt"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Colour.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"adidoesnt"},"content":"        final Colour modelColour \u003d new Colour(colour);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"arihantjain97"},"content":"        if (dresscode \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"arihantjain97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":96,"author":{"gitId":"arihantjain97"},"content":"                    DressCode.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"arihantjain97"},"content":"        if (!DressCode.isValidDressCode(dresscode)) {"},{"lineNumber":99,"author":{"gitId":"arihantjain97"},"content":"            throw new IllegalValueException(DressCode.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"arihantjain97"},"content":"        final DressCode modelAddress \u003d new DressCode(dresscode);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"VisnuRavi"},"content":"        final Set\u003cDescription\u003e modelDescriptions \u003d new HashSet\u003c\u003e(garmentDescriptions);"},{"lineNumber":104,"author":{"gitId":"adidoesnt"},"content":"        return new Person(modelName, modelSize, modelColour, modelAddress, modelDescriptions);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":11,"VisnuRavi":20,"adidoesnt":9,"-":67}},{"path":"src/main/java/seedu/address/storage/JsonSerializableWardrobe.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":" * An Immutable Wardrobe that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"@JsonRootName(value \u003d \"wardrobe\")"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"class JsonSerializableWardrobe {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"     * Constructs a {@code JsonSerializableWardrobe} with the given persons."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"    public JsonSerializableWardrobe(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"     * Converts a given {@code ReadOnlyWardrobe} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Jonathan-Cao"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableWardrobe}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Jonathan-Cao"},"content":"    public JsonSerializableWardrobe(ReadOnlyWardrobe source) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Jonathan-Cao"},"content":"     * Converts this address book into the model\u0027s {@code Wardrobe} object."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Jonathan-Cao"},"content":"    public Wardrobe toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe wardrobe \u003d new Wardrobe();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();"},{"lineNumber":52,"author":{"gitId":"Jonathan-Cao"},"content":"            if (wardrobe.hasPerson(person)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"Jonathan-Cao"},"content":"            wardrobe.addPerson(person);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Jonathan-Cao"},"content":"        return wardrobe;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":16,"-":44}},{"path":"src/main/java/seedu/address/storage/JsonWardrobeStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":" * A class to access Wardrobe data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"public class JsonWardrobeStorage implements WardrobeStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonWardrobeStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"    public JsonWardrobeStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"    public Path getWardrobeFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"    public Optional\u003cReadOnlyWardrobe\u003e readWardrobe() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"Jonathan-Cao"},"content":"        return readWardrobe(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"     * Similar to {@link #readWardrobe()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"    public Optional\u003cReadOnlyWardrobe\u003e readWardrobe(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"Jonathan-Cao"},"content":"        Optional\u003cJsonSerializableWardrobe\u003e jsonWardrobe \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"Jonathan-Cao"},"content":"                filePath, JsonSerializableWardrobe.class);"},{"lineNumber":50,"author":{"gitId":"Jonathan-Cao"},"content":"        if (!jsonWardrobe.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Jonathan-Cao"},"content":"            return Optional.of(jsonWardrobe.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Jonathan-Cao"},"content":"    public void saveWardrobe(ReadOnlyWardrobe wardrobe) throws IOException {"},{"lineNumber":64,"author":{"gitId":"Jonathan-Cao"},"content":"        saveWardrobe(wardrobe, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Jonathan-Cao"},"content":"     * Similar to {@link #saveWardrobe(ReadOnlyWardrobe)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Jonathan-Cao"},"content":"    public void saveWardrobe(ReadOnlyWardrobe wardrobe, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"Jonathan-Cao"},"content":"        requireNonNull(wardrobe);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"Jonathan-Cao"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableWardrobe(wardrobe), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":20,"-":60}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"public interface Storage extends WardrobeStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":"    Path getWardrobeFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"    Optional\u003cReadOnlyWardrobe\u003e readWardrobe() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"    void saveWardrobe(ReadOnlyWardrobe wardrobe) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":5,"-":27}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":" * Manages storage of Wardrobe data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"    private WardrobeStorage wardrobeStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":"     * Creates a {@code StorageManager} with the given {@code WardrobeStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"    public StorageManager(WardrobeStorage wardrobeStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"        this.wardrobeStorage \u003d wardrobeStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"Jonathan-Cao"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wardrobe methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Jonathan-Cao"},"content":"    public Path getWardrobeFilePath() {"},{"lineNumber":54,"author":{"gitId":"Jonathan-Cao"},"content":"        return wardrobeStorage.getWardrobeFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"Jonathan-Cao"},"content":"    public Optional\u003cReadOnlyWardrobe\u003e readWardrobe() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"Jonathan-Cao"},"content":"        return readWardrobe(wardrobeStorage.getWardrobeFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Jonathan-Cao"},"content":"    public Optional\u003cReadOnlyWardrobe\u003e readWardrobe(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":65,"author":{"gitId":"Jonathan-Cao"},"content":"        return wardrobeStorage.readWardrobe(filePath);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"Jonathan-Cao"},"content":"    public void saveWardrobe(ReadOnlyWardrobe wardrobe) throws IOException {"},{"lineNumber":70,"author":{"gitId":"Jonathan-Cao"},"content":"        saveWardrobe(wardrobe, wardrobeStorage.getWardrobeFilePath());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"Jonathan-Cao"},"content":"    public void saveWardrobe(ReadOnlyWardrobe wardrobe, Path filePath) throws IOException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":76,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobeStorage.saveWardrobe(wardrobe, filePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":17,"-":62}},{"path":"src/main/java/seedu/address/storage/WardrobeStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jonathan-Cao"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":3,"author":{"gitId":"Jonathan-Cao"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Jonathan-Cao"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"Jonathan-Cao"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":7,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":" * Represents a storage for {@link seedu.address.model.Wardrobe}."},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":"public interface WardrobeStorage {"},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"    Path getWardrobeFilePath();"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"     * Returns Wardrobe data as a {@link ReadOnlyWardrobe}."},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"    Optional\u003cReadOnlyWardrobe\u003e readWardrobe() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"     * @see #getWardrobeFilePath()"},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"    Optional\u003cReadOnlyWardrobe\u003e readWardrobe(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":33,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Jonathan-Cao"},"content":"     * Saves the given {@link ReadOnlyWardrobe} to the storage."},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"     * @param wardrobe cannot be null."},{"lineNumber":36,"author":{"gitId":"Jonathan-Cao"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Jonathan-Cao"},"content":"    void saveWardrobe(ReadOnlyWardrobe wardrobe) throws IOException;"},{"lineNumber":39,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"     * @see #saveWardrobe(ReadOnlyWardrobe)"},{"lineNumber":42,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"    void saveWardrobe(ReadOnlyWardrobe wardrobe, Path filePath) throws IOException;"},{"lineNumber":44,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":45}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"Jonathan-Cao"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getWardrobeFilePath());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":1,"-":195}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    private Label size;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"arihantjain97"},"content":"    private Label dresscode;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"adidoesnt"},"content":"    private Label colour;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"    private FlowPane descriptions;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"        size.setText(person.getSize().value);"},{"lineNumber":53,"author":{"gitId":"arihantjain97"},"content":"        dresscode.setText(person.getDressCode().value);"},{"lineNumber":54,"author":{"gitId":"adidoesnt"},"content":"        colour.setText(person.getColour().colour);"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"        person.getDescriptions().stream()"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"                .sorted(Comparator.comparing(description -\u003e description.descriptionName))"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"                .forEach(description -\u003e descriptions.getChildren()"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"                        .add(new Label(\"\u003c\" + description.descriptionName + \"\u003e\")));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":2,"VisnuRavi":7,"adidoesnt":2,"-":67}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"         title\u003d\"nufash\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Jonathan-Cao":1,"-":59}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"      \u003cFlowPane fx:id\u003d\"descriptions\" /\u003e"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"      \u003cLabel fx:id\u003d\"size\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$size\" /\u003e"},{"lineNumber":32,"author":{"gitId":"arihantjain97"},"content":"      \u003cLabel fx:id\u003d\"dresscode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dresscode\" /\u003e"},{"lineNumber":33,"author":{"gitId":"adidoesnt"},"content":"      \u003cLabel fx:id\u003d\"colour\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$colour\" /\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"arihantjain97":1,"VisnuRavi":2,"adidoesnt":1,"-":32}},{"path":"src/test/data/JsonSerializableWardrobeTest/duplicatePersonWardrobe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    \"size\": \"53\","},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\": \"FORMAL\","},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"    \"descriptions\": [ \"friends\" ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"    \"size\": \"53\","},{"lineNumber":11,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"pauline@example.com\","},{"lineNumber":12,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\": \"FORMAL\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":2,"VisnuRavi":3,"adidoesnt":2,"-":7}},{"path":"src/test/data/JsonSerializableWardrobeTest/invalidPersonWardrobe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"invalid@colour!3e\","},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\": \"CASUAL\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":1,"adidoesnt":1,"-":6}},{"path":"src/test/data/JsonSerializableWardrobeTest/typicalPersonsWardrobe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"Jonathan-Cao"},"content":"  \"_comment\": \"Wardrobe save file which contains the same Person values as in TypicalPersons#getTypicalWardrobe()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"    \"size\" : \"53\","},{"lineNumber":6,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\" : \"FORMAL\","},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    \"descriptions\" : [ \"friends\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"    \"size\" : \"32\","},{"lineNumber":12,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"johnd@example.com\","},{"lineNumber":13,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\" : \"FORMAL\","},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    \"descriptions\" : [ \"owesMoney\", \"friends\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    \"size\" : \"93\","},{"lineNumber":18,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"heinz@example.com\","},{"lineNumber":19,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\" : \"FORMAL\","},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"    \"descriptions\" : [ ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    \"size\" : \"33\","},{"lineNumber":24,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"cornelia@example.com\","},{"lineNumber":25,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\" : \"CASUAL\","},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"    \"descriptions\" : [ \"friends\" ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"    \"size\" : \"24\","},{"lineNumber":30,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"werner@example.com\","},{"lineNumber":31,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\" : \"CASUAL\","},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"    \"descriptions\" : [ ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"    \"size\" : \"27\","},{"lineNumber":36,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"lydia@example.com\","},{"lineNumber":37,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\" : \"CASUAL\","},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"    \"descriptions\" : [ ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"    \"size\" : \"42\","},{"lineNumber":42,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"anna@example.com\","},{"lineNumber":43,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\" : \"ACTIVE\","},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"    \"descriptions\" : [ ]"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":7,"Jonathan-Cao":1,"VisnuRavi":14,"adidoesnt":7,"-":17}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":"  \"wardrobeFilePath\" : \"wardrobe.json\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":"  \"wardrobeFilePath\" : \"wardrobe.json\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":1,"-":10}},{"path":"src/test/data/JsonWardrobeStorageTest/invalidAndValidPersonWardrobe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\": \"FORMAL\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":10,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"hans@example.com\","},{"lineNumber":11,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\": \"FORMAL\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":2,"adidoesnt":2,"-":9}},{"path":"src/test/data/JsonWardrobeStorageTest/invalidPersonWardrobe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"    \"colour\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"    \"dresscode\": \"FORMAL\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":1,"adidoesnt":1,"-":6}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DRESSCODE_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SIZE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.storage.JsonWardrobeStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"Jonathan-Cao"},"content":"        JsonWardrobeStorage wardrobeStorage \u003d"},{"lineNumber":47,"author":{"gitId":"Jonathan-Cao"},"content":"                new JsonWardrobeStorage(temporaryFolder.resolve(\"wardrobe.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"Jonathan-Cao"},"content":"        StorageManager storage \u003d new StorageManager(wardrobeStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"Jonathan-Cao"},"content":"        // Setup LogicManager with JsonWardrobeIoExceptionThrowingStub"},{"lineNumber":74,"author":{"gitId":"Jonathan-Cao"},"content":"        JsonWardrobeStorage wardrobeStorage \u003d"},{"lineNumber":75,"author":{"gitId":"Jonathan-Cao"},"content":"                new JsonWardrobeIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionWardrobe.json\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":78,"author":{"gitId":"Jonathan-Cao"},"content":"        StorageManager storage \u003d new StorageManager(wardrobeStorage, userPrefsStorage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":82,"author":{"gitId":"adidoesnt"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + SIZE_DESC_AMY + COLOUR_DESC_AMY"},{"lineNumber":83,"author":{"gitId":"arihantjain97"},"content":"                + DRESSCODE_DESC_AMY;"},{"lineNumber":84,"author":{"gitId":"VisnuRavi"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withDescriptions().build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":132,"author":{"gitId":"Jonathan-Cao"},"content":"        Model expectedModel \u003d new ModelManager(model.getWardrobe(), new UserPrefs());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"Jonathan-Cao"},"content":"    private static class JsonWardrobeIoExceptionThrowingStub extends JsonWardrobeStorage {"},{"lineNumber":153,"author":{"gitId":"Jonathan-Cao"},"content":"        private JsonWardrobeIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"Jonathan-Cao"},"content":"        public void saveWardrobe(ReadOnlyWardrobe wardrobe, Path filePath) throws IOException {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":2,"Jonathan-Cao":13,"adidoesnt":2,"VisnuRavi":2,"-":143}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"        model \u003d new ModelManager(getTypicalWardrobe(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Jonathan-Cao"},"content":"        Model expectedModel \u003d new ModelManager(model.getWardrobe(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"        Person personInList \u003d model.getWardrobe().getPersonList().get(0);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":4,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitId":"Jonathan-Cao"},"content":"        public Path getWardrobeFilePath() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitId":"Jonathan-Cao"},"content":"        public void setWardrobeFilePath(Path wardrobeFilePath) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitId":"Jonathan-Cao"},"content":"        public void setWardrobe(ReadOnlyWardrobe newData) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitId":"Jonathan-Cao"},"content":"        public ReadOnlyWardrobe getWardrobe() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitId":"Jonathan-Cao"},"content":"        public ReadOnlyWardrobe getWardrobe() {"},{"lineNumber":190,"author":{"gitId":"Jonathan-Cao"},"content":"            return new Wardrobe();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":8,"-":186}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"    public void execute_emptyWardrobe_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":"    public void execute_nonEmptyWardrobe_success() {"},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"        Model model \u003d new ModelManager(getTypicalWardrobe(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalWardrobe(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"        expectedModel.setWardrobe(new Wardrobe());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":7,"-":25}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DRESSCODE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SIZE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"    public static final String VALID_SIZE_AMY \u003d \"11\";"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"    public static final String VALID_SIZE_BOB \u003d \"22\";"},{"lineNumber":33,"author":{"gitId":"adidoesnt"},"content":"    public static final String VALID_COLOUR_AMY \u003d \"amy@example.com\";"},{"lineNumber":34,"author":{"gitId":"adidoesnt"},"content":"    public static final String VALID_COLOUR_BOB \u003d \"bob@example.com\";"},{"lineNumber":35,"author":{"gitId":"arihantjain97"},"content":"    public static final String VALID_DRESSCODE_AMY \u003d \"FORMAL\";"},{"lineNumber":36,"author":{"gitId":"arihantjain97"},"content":"    public static final String VALID_DRESSCODE_BOB \u003d \"ACTIVE\";"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"    public static final String VALID_DESCRIPTION_HUSBAND \u003d \"husband\";"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"    public static final String VALID_DESCRIPTION_FRIEND \u003d \"friend\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"    public static final String SIZE_DESC_AMY \u003d \" \" + PREFIX_SIZE + VALID_SIZE_AMY;"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"    public static final String SIZE_DESC_BOB \u003d \" \" + PREFIX_SIZE + VALID_SIZE_BOB;"},{"lineNumber":44,"author":{"gitId":"adidoesnt"},"content":"    public static final String COLOUR_DESC_AMY \u003d \" \" + PREFIX_COLOUR + VALID_COLOUR_AMY;"},{"lineNumber":45,"author":{"gitId":"adidoesnt"},"content":"    public static final String COLOUR_DESC_BOB \u003d \" \" + PREFIX_COLOUR + VALID_COLOUR_BOB;"},{"lineNumber":46,"author":{"gitId":"arihantjain97"},"content":"    public static final String DRESSCODE_DESC_AMY \u003d \" \" + PREFIX_DRESSCODE + VALID_DRESSCODE_AMY;"},{"lineNumber":47,"author":{"gitId":"arihantjain97"},"content":"    public static final String DRESSCODE_DESC_BOB \u003d \" \" + PREFIX_DRESSCODE + VALID_DRESSCODE_BOB;"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"    public static final String DESCRIPTION_DESC_FRIEND \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_FRIEND;"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":"    public static final String DESCRIPTION_DESC_HUSBAND \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"    public static final String INVALID_SIZE_DESC \u003d \" \" + PREFIX_SIZE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":53,"author":{"gitId":"adidoesnt"},"content":"    public static final String INVALID_COLOUR_DESC \u003d \" \" + PREFIX_COLOUR + \" \"; // missing \u0027@\u0027 symbol"},{"lineNumber":54,"author":{"gitId":"arihantjain97"},"content":"    public static final String INVALID_DRESSCODE_DESC \u003d \" \" + PREFIX_DRESSCODE;"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"            + \"hubby*\"; // \u0027*\u0027 not allowed in descriptions"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":66,"author":{"gitId":"arihantjain97"},"content":"                .withSize(VALID_SIZE_AMY).withColour(VALID_COLOUR_AMY).withDressCode(VALID_DRESSCODE_AMY)"},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":"                .withDescriptions(VALID_DESCRIPTION_FRIEND).build();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":69,"author":{"gitId":"arihantjain97"},"content":"                .withSize(VALID_SIZE_BOB).withColour(VALID_COLOUR_BOB).withDressCode(VALID_DRESSCODE_BOB)"},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"                .withDescriptions(VALID_DESCRIPTION_HUSBAND, VALID_DESCRIPTION_FRIEND).build();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":108,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe expectedWardrobe \u003d new Wardrobe(actualModel.getWardrobe());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":112,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(expectedWardrobe, actualModel.getWardrobe());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":8,"Jonathan-Cao":3,"adidoesnt":6,"VisnuRavi":15,"-":97}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"    private Model model \u003d new ModelManager(getTypicalWardrobe(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"Jonathan-Cao"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getWardrobe(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"Jonathan-Cao"},"content":"        Model expectedModel \u003d new ModelManager(model.getWardrobe(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"Jonathan-Cao"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWardrobe().getPersonList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":5,"-":104}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SIZE_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"    private Model model \u003d new ModelManager(getTypicalWardrobe(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"        Model expectedModel \u003d new ModelManager(new Wardrobe(model.getWardrobe()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withSize(VALID_SIZE_BOB)"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"                .withDescriptions(VALID_DESCRIPTION_HUSBAND).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"                .withSize(VALID_SIZE_BOB).withDescriptions(VALID_DESCRIPTION_HUSBAND).build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"Jonathan-Cao"},"content":"        Model expectedModel \u003d new ModelManager(new Wardrobe(model.getWardrobe()), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"Jonathan-Cao"},"content":"        Model expectedModel \u003d new ModelManager(new Wardrobe(model.getWardrobe()), new UserPrefs());"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"Jonathan-Cao"},"content":"        Model expectedModel \u003d new ModelManager(new Wardrobe(model.getWardrobe()), new UserPrefs());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":115,"author":{"gitId":"Jonathan-Cao"},"content":"        Person personInList \u003d model.getWardrobe().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":140,"author":{"gitId":"Jonathan-Cao"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWardrobe().getPersonList().size());"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":9,"VisnuRavi":5,"-":159}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_BOB;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SIZE_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withSize(VALID_SIZE_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"adidoesnt"},"content":"        // different colour -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"adidoesnt"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withColour(VALID_COLOUR_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"arihantjain97"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDressCode(VALID_DRESSCODE_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDescriptions(VALID_DESCRIPTION_HUSBAND).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":2,"adidoesnt":3,"VisnuRavi":4,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"    private Model model \u003d new ModelManager(getTypicalWardrobe(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalWardrobe(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":3,"-":80}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"        model \u003d new ModelManager(getTypicalWardrobe(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"        expectedModel \u003d new ModelManager(model.getWardrobe(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":3,"-":36}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_FRIEND;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DRESSCODE_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DRESSCODE_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLOUR_DESC;"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"},{"lineNumber":12,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DRESSCODE_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SIZE_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SIZE_DESC_AMY;"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SIZE_DESC_BOB;"},{"lineNumber":21,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_BOB;"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FRIEND;"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":24,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SIZE_BOB;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":36,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":37,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":40,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withDescriptions(VALID_DESCRIPTION_FRIEND).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":51,"author":{"gitId":"adidoesnt"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB"},{"lineNumber":52,"author":{"gitId":"arihantjain97"},"content":"                + DRESSCODE_DESC_BOB + DESCRIPTION_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":55,"author":{"gitId":"adidoesnt"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB"},{"lineNumber":56,"author":{"gitId":"arihantjain97"},"content":"                + DRESSCODE_DESC_BOB + DESCRIPTION_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":59,"author":{"gitId":"adidoesnt"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SIZE_DESC_AMY + SIZE_DESC_BOB + COLOUR_DESC_BOB"},{"lineNumber":60,"author":{"gitId":"arihantjain97"},"content":"                + DRESSCODE_DESC_BOB + DESCRIPTION_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":63,"author":{"gitId":"adidoesnt"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_AMY + COLOUR_DESC_BOB"},{"lineNumber":64,"author":{"gitId":"arihantjain97"},"content":"                + DRESSCODE_DESC_BOB + DESCRIPTION_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":67,"author":{"gitId":"arihantjain97"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB + DRESSCODE_DESC_AMY"},{"lineNumber":68,"author":{"gitId":"arihantjain97"},"content":"                + DRESSCODE_DESC_BOB + DESCRIPTION_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB)"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"                .withDescriptions(VALID_DESCRIPTION_FRIEND, VALID_DESCRIPTION_HUSBAND)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":75,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":76,"author":{"gitId":"arihantjain97"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB + DRESSCODE_DESC_BOB"},{"lineNumber":77,"author":{"gitId":"VisnuRavi"},"content":"                + DESCRIPTION_DESC_HUSBAND + DESCRIPTION_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":83,"author":{"gitId":"VisnuRavi"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withDescriptions().build();"},{"lineNumber":84,"author":{"gitId":"arihantjain97"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + SIZE_DESC_AMY + COLOUR_DESC_AMY + DRESSCODE_DESC_AMY,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":92,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB + DRESSCODE_DESC_BOB,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":95,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_SIZE_BOB + COLOUR_DESC_BOB + DRESSCODE_DESC_BOB,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":98,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SIZE_DESC_BOB + VALID_COLOUR_BOB + DRESSCODE_DESC_BOB,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":101,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB + VALID_DRESSCODE_BOB,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":104,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_SIZE_BOB + VALID_COLOUR_BOB + VALID_DRESSCODE_BOB,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":111,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + SIZE_DESC_BOB + COLOUR_DESC_BOB + DRESSCODE_DESC_BOB"},{"lineNumber":112,"author":{"gitId":"VisnuRavi"},"content":"                + DESCRIPTION_DESC_HUSBAND + DESCRIPTION_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_SIZE_DESC + COLOUR_DESC_BOB + DRESSCODE_DESC_BOB"},{"lineNumber":115,"author":{"gitId":"arihantjain97"},"content":"                + DESCRIPTION_DESC_HUSBAND + DESCRIPTION_DESC_FRIEND, Size.MESSAGE_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SIZE_DESC_BOB + INVALID_COLOUR_DESC + DRESSCODE_DESC_BOB"},{"lineNumber":118,"author":{"gitId":"arihantjain97"},"content":"                + DESCRIPTION_DESC_HUSBAND + DESCRIPTION_DESC_FRIEND, Colour.MESSAGE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":120,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB + INVALID_DRESSCODE_DESC"},{"lineNumber":121,"author":{"gitId":"arihantjain97"},"content":"                + DESCRIPTION_DESC_HUSBAND + DESCRIPTION_DESC_FRIEND, DressCode.MESSAGE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":123,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB + DRESSCODE_DESC_BOB"},{"lineNumber":124,"author":{"gitId":"VisnuRavi"},"content":"                + INVALID_DESCRIPTION_DESC + VALID_DESCRIPTION_FRIEND, Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":126,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + SIZE_DESC_BOB + COLOUR_DESC_BOB + INVALID_DRESSCODE_DESC,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":129,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + SIZE_DESC_BOB + COLOUR_DESC_BOB"},{"lineNumber":130,"author":{"gitId":"arihantjain97"},"content":"                + DRESSCODE_DESC_BOB + DESCRIPTION_DESC_HUSBAND + DESCRIPTION_DESC_FRIEND,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":36,"adidoesnt":6,"VisnuRavi":15,"-":76}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_FRIEND;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DRESSCODE_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DRESSCODE_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLOUR_DESC;"},{"lineNumber":11,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"},{"lineNumber":12,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DRESSCODE_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SIZE_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SIZE_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SIZE_DESC_BOB;"},{"lineNumber":18,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_AMY;"},{"lineNumber":19,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_BOB;"},{"lineNumber":20,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FRIEND;"},{"lineNumber":21,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":22,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_AMY;"},{"lineNumber":23,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":25,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SIZE_AMY;"},{"lineNumber":26,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SIZE_BOB;"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":40,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":41,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_DESCRIPTION;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"VisnuRavi"},"content":"        assertParseFailure(parser, \"1\" + INVALID_SIZE_DESC, Size.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, \"1\" + INVALID_COLOUR_DESC, Colour.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DRESSCODE_DESC, DressCode.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"VisnuRavi"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"},{"lineNumber":89,"author":{"gitId":"VisnuRavi"},"content":"                Description.MESSAGE_CONSTRAINTS); // invalid description"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"adidoesnt"},"content":"        // invalid phone followed by valid colour"},{"lineNumber":92,"author":{"gitId":"adidoesnt"},"content":"        assertParseFailure(parser, \"1\" + INVALID_SIZE_DESC + COLOUR_DESC_AMY, Size.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":96,"author":{"gitId":"VisnuRavi"},"content":"        assertParseFailure(parser, \"1\" + SIZE_DESC_BOB + INVALID_SIZE_DESC, Size.MESSAGE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":99,"author":{"gitId":"VisnuRavi"},"content":"        // parsing it together with a valid description results in error"},{"lineNumber":100,"author":{"gitId":"VisnuRavi"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":101,"author":{"gitId":"VisnuRavi"},"content":"                + DESCRIPTION_DESC_FRIEND + DESCRIPTION_DESC_HUSBAND + TAG_EMPTY, Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"VisnuRavi"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":103,"author":{"gitId":"VisnuRavi"},"content":"                + DESCRIPTION_DESC_FRIEND + TAG_EMPTY + DESCRIPTION_DESC_HUSBAND, Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitId":"VisnuRavi"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":105,"author":{"gitId":"VisnuRavi"},"content":"                + TAG_EMPTY + DESCRIPTION_DESC_FRIEND + DESCRIPTION_DESC_HUSBAND, Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":108,"author":{"gitId":"arihantjain97"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_COLOUR_DESC + VALID_DRESSCODE_AMY"},{"lineNumber":109,"author":{"gitId":"arihantjain97"},"content":"                        + VALID_SIZE_AMY,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":116,"author":{"gitId":"VisnuRavi"},"content":"        String userInput \u003d targetIndex.getOneBased() + SIZE_DESC_BOB + DESCRIPTION_DESC_HUSBAND"},{"lineNumber":117,"author":{"gitId":"arihantjain97"},"content":"                + COLOUR_DESC_AMY + DRESSCODE_DESC_AMY + NAME_DESC_AMY + DESCRIPTION_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":120,"author":{"gitId":"arihantjain97"},"content":"                .withSize(VALID_SIZE_BOB).withColour(VALID_COLOUR_AMY).withDressCode(VALID_DRESSCODE_AMY)"},{"lineNumber":121,"author":{"gitId":"VisnuRavi"},"content":"                .withDescriptions(VALID_DESCRIPTION_HUSBAND, VALID_DESCRIPTION_FRIEND).build();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":130,"author":{"gitId":"adidoesnt"},"content":"        String userInput \u003d targetIndex.getOneBased() + SIZE_DESC_BOB + COLOUR_DESC_AMY;"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"VisnuRavi"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withSize(VALID_SIZE_BOB)"},{"lineNumber":133,"author":{"gitId":"adidoesnt"},"content":"                .withColour(VALID_COLOUR_AMY).build();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":149,"author":{"gitId":"VisnuRavi"},"content":"        userInput \u003d targetIndex.getOneBased() + SIZE_DESC_AMY;"},{"lineNumber":150,"author":{"gitId":"VisnuRavi"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withSize(VALID_SIZE_AMY).build();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"adidoesnt"},"content":"        // colour"},{"lineNumber":155,"author":{"gitId":"adidoesnt"},"content":"        userInput \u003d targetIndex.getOneBased() + COLOUR_DESC_AMY;"},{"lineNumber":156,"author":{"gitId":"adidoesnt"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withColour(VALID_COLOUR_AMY).build();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":161,"author":{"gitId":"arihantjain97"},"content":"        userInput \u003d targetIndex.getOneBased() + DRESSCODE_DESC_AMY;"},{"lineNumber":162,"author":{"gitId":"arihantjain97"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withDressCode(VALID_DRESSCODE_AMY).build();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":167,"author":{"gitId":"VisnuRavi"},"content":"        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_FRIEND;"},{"lineNumber":168,"author":{"gitId":"VisnuRavi"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withDescriptions(VALID_DESCRIPTION_FRIEND).build();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":176,"author":{"gitId":"arihantjain97"},"content":"        String userInput \u003d targetIndex.getOneBased() + SIZE_DESC_AMY + DRESSCODE_DESC_AMY + COLOUR_DESC_AMY"},{"lineNumber":177,"author":{"gitId":"arihantjain97"},"content":"                + DESCRIPTION_DESC_FRIEND + SIZE_DESC_AMY + DRESSCODE_DESC_AMY + COLOUR_DESC_AMY"},{"lineNumber":178,"author":{"gitId":"arihantjain97"},"content":"                + DESCRIPTION_DESC_FRIEND + SIZE_DESC_BOB + DRESSCODE_DESC_BOB + COLOUR_DESC_BOB"},{"lineNumber":179,"author":{"gitId":"arihantjain97"},"content":"                + DESCRIPTION_DESC_HUSBAND;"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"VisnuRavi"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withSize(VALID_SIZE_BOB)"},{"lineNumber":182,"author":{"gitId":"arihantjain97"},"content":"                .withColour(VALID_COLOUR_BOB).withDressCode(VALID_DRESSCODE_BOB)"},{"lineNumber":183,"author":{"gitId":"arihantjain97"},"content":"                .withDescriptions(VALID_DESCRIPTION_FRIEND,"},{"lineNumber":184,"author":{"gitId":"VisnuRavi"},"content":"                        VALID_DESCRIPTION_HUSBAND)"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":195,"author":{"gitId":"VisnuRavi"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_SIZE_DESC + SIZE_DESC_BOB;"},{"lineNumber":196,"author":{"gitId":"VisnuRavi"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withSize(VALID_SIZE_BOB).build();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":201,"author":{"gitId":"arihantjain97"},"content":"        userInput \u003d targetIndex.getOneBased() + COLOUR_DESC_BOB + INVALID_SIZE_DESC + DRESSCODE_DESC_BOB"},{"lineNumber":202,"author":{"gitId":"VisnuRavi"},"content":"                + SIZE_DESC_BOB;"},{"lineNumber":203,"author":{"gitId":"adidoesnt"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withSize(VALID_SIZE_BOB).withColour(VALID_COLOUR_BOB)"},{"lineNumber":204,"author":{"gitId":"arihantjain97"},"content":"                .withDressCode(VALID_DRESSCODE_BOB).build();"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"VisnuRavi"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withDescriptions().build();"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":37,"VisnuRavi":28,"adidoesnt":9,"-":145}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":18,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":19,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    private static final String INVALID_SIZE \u003d \"+65\";"},{"lineNumber":26,"author":{"gitId":"arihantjain97"},"content":"    private static final String INVALID_DRESSCODE \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"adidoesnt"},"content":"    private static final String INVALID_COLOUR \u003d \" \";"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    private static final String INVALID_DESCRIPTION \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"    private static final String VALID_SIZE \u003d \"12\";"},{"lineNumber":32,"author":{"gitId":"arihantjain97"},"content":"    private static final String VALID_DRESSCODE \u003d \"FORMAL\";"},{"lineNumber":33,"author":{"gitId":"adidoesnt"},"content":"    private static final String VALID_COLOUR \u003d \"rachel@example.com\";"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"    private static final String VALID_DESCRIPTION_1 \u003d \"friend\";"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"    private static final String VALID_DESCRIPTION_2 \u003d \"neighbour\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"VisnuRavi"},"content":"    public void parseSize_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSize((String) null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"VisnuRavi"},"content":"    public void parseSize_invalidValue_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSize(INVALID_SIZE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"VisnuRavi"},"content":"    public void parseSize_validValueWithoutWhitespace_returnsSize() throws Exception {"},{"lineNumber":94,"author":{"gitId":"VisnuRavi"},"content":"        Size expectedSize \u003d new Size(VALID_SIZE);"},{"lineNumber":95,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(expectedSize, ParserUtil.parseSize(VALID_SIZE));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"VisnuRavi"},"content":"    public void parseSize_validValueWithWhitespace_returnsTrimmedSize() throws Exception {"},{"lineNumber":100,"author":{"gitId":"VisnuRavi"},"content":"        String sizeWithWhitespace \u003d WHITESPACE + VALID_SIZE + WHITESPACE;"},{"lineNumber":101,"author":{"gitId":"VisnuRavi"},"content":"        Size expectedSize \u003d new Size(VALID_SIZE);"},{"lineNumber":102,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(expectedSize, ParserUtil.parseSize(sizeWithWhitespace));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"arihantjain97"},"content":"    public void parseDressCode_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitId":"arihantjain97"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDresscode((String) null));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"arihantjain97"},"content":"    public void parseDressCode_invalidValue_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"arihantjain97"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDresscode(INVALID_DRESSCODE));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"arihantjain97"},"content":"    public void parseDressCode_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":117,"author":{"gitId":"arihantjain97"},"content":"        DressCode expectedDressCode \u003d new DressCode(VALID_DRESSCODE);"},{"lineNumber":118,"author":{"gitId":"arihantjain97"},"content":"        assertEquals(expectedDressCode, ParserUtil.parseDresscode(VALID_DRESSCODE));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"arihantjain97"},"content":"    public void parseDressCode_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":123,"author":{"gitId":"arihantjain97"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_DRESSCODE + WHITESPACE;"},{"lineNumber":124,"author":{"gitId":"arihantjain97"},"content":"        DressCode expectedDressCode \u003d new DressCode(VALID_DRESSCODE);"},{"lineNumber":125,"author":{"gitId":"arihantjain97"},"content":"        assertEquals(expectedDressCode, ParserUtil.parseDresscode(addressWithWhitespace));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"adidoesnt"},"content":"    public void parseColour_null_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitId":"adidoesnt"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseColour((String) null));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"adidoesnt"},"content":"    public void parseColour_invalidValue_throwsParseException() {"},{"lineNumber":135,"author":{"gitId":"adidoesnt"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseColour(INVALID_COLOUR));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"adidoesnt"},"content":"    public void parseColour_validValueWithoutWhitespace_returnsColour() throws Exception {"},{"lineNumber":140,"author":{"gitId":"adidoesnt"},"content":"        Colour expectedColour \u003d new Colour(VALID_COLOUR);"},{"lineNumber":141,"author":{"gitId":"adidoesnt"},"content":"        assertEquals(expectedColour, ParserUtil.parseColour(VALID_COLOUR));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"adidoesnt"},"content":"    public void parseColour_validValueWithWhitespace_returnsTrimmedColour() throws Exception {"},{"lineNumber":146,"author":{"gitId":"adidoesnt"},"content":"        String colourWithWhitespace \u003d WHITESPACE + VALID_COLOUR + WHITESPACE;"},{"lineNumber":147,"author":{"gitId":"adidoesnt"},"content":"        Colour expectedColour \u003d new Colour(VALID_COLOUR);"},{"lineNumber":148,"author":{"gitId":"adidoesnt"},"content":"        assertEquals(expectedColour, ParserUtil.parseColour(colourWithWhitespace));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"VisnuRavi"},"content":"    public void parseDescription_null_throwsNullPointerException() {"},{"lineNumber":153,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"VisnuRavi"},"content":"    public void parseDescription_invalidValue_throwsParseException() {"},{"lineNumber":158,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"VisnuRavi"},"content":"    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"},{"lineNumber":163,"author":{"gitId":"VisnuRavi"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION_1);"},{"lineNumber":164,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION_1));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"VisnuRavi"},"content":"    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"},{"lineNumber":169,"author":{"gitId":"VisnuRavi"},"content":"        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION_1 + WHITESPACE;"},{"lineNumber":170,"author":{"gitId":"VisnuRavi"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION_1);"},{"lineNumber":171,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"VisnuRavi"},"content":"    public void parseDescriptions_null_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescriptions(null));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"VisnuRavi"},"content":"    public void parseDescriptions_collectionWithInvalidDescriptions_throwsParseException() {"},{"lineNumber":181,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil"},{"lineNumber":182,"author":{"gitId":"VisnuRavi"},"content":"                .parseDescriptions(Arrays.asList(VALID_DESCRIPTION_1, INVALID_DESCRIPTION)));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"VisnuRavi"},"content":"    public void parseDescriptions_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":187,"author":{"gitId":"VisnuRavi"},"content":"        assertTrue(ParserUtil.parseDescriptions(Collections.emptyList()).isEmpty());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitId":"VisnuRavi"},"content":"    public void parseDescriptions_collectionWithValidDescriptions_returnsDescriptionSet() throws Exception {"},{"lineNumber":192,"author":{"gitId":"VisnuRavi"},"content":"        Set\u003cDescription\u003e actualDescriptionSet \u003d ParserUtil"},{"lineNumber":193,"author":{"gitId":"VisnuRavi"},"content":"                .parseDescriptions(Arrays.asList(VALID_DESCRIPTION_1, VALID_DESCRIPTION_2));"},{"lineNumber":194,"author":{"gitId":"VisnuRavi"},"content":"        Set\u003cDescription\u003e expectedDescriptionSet \u003d new HashSet\u003cDescription\u003e(Arrays.asList("},{"lineNumber":195,"author":{"gitId":"VisnuRavi"},"content":"                new Description(VALID_DESCRIPTION_1),"},{"lineNumber":196,"author":{"gitId":"VisnuRavi"},"content":"                new Description(VALID_DESCRIPTION_2)));"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(expectedDescriptionSet, actualDescriptionSet);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":14,"VisnuRavi":43,"adidoesnt":14,"-":129}},{"path":"src/test/java/seedu/address/logic/parser/WardrobeParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Jonathan-Cao"},"content":"public class WardrobeParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Jonathan-Cao"},"content":"    private final WardrobeParser parser \u003d new WardrobeParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":2,"-":99}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.testutil.WardrobeBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(new Wardrobe(), new Wardrobe(modelManager.getWardrobe()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"        userPrefs.setWardrobeFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"Jonathan-Cao"},"content":"        userPrefs.setWardrobeFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"Jonathan-Cao"},"content":"    public void setWardrobeFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setWardrobeFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"Jonathan-Cao"},"content":"    public void setWardrobeFilePath_validPath_setsWardrobeFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"Jonathan-Cao"},"content":"        modelManager.setWardrobeFilePath(path);"},{"lineNumber":72,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(path, modelManager.getWardrobeFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"Jonathan-Cao"},"content":"    public void hasPerson_personNotInWardrobe_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"Jonathan-Cao"},"content":"    public void hasPerson_personInWardrobe_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe wardrobe \u003d new WardrobeBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe differentWardrobe \u003d new Wardrobe();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"Jonathan-Cao"},"content":"        modelManager \u003d new ModelManager(wardrobe, userPrefs);"},{"lineNumber":104,"author":{"gitId":"Jonathan-Cao"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(wardrobe, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"Jonathan-Cao"},"content":"        // different Wardrobe -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"Jonathan-Cao"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentWardrobe, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"Jonathan-Cao"},"content":"        assertFalse(modelManager.equals(new ModelManager(wardrobe, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"Jonathan-Cao"},"content":"        differentUserPrefs.setWardrobeFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"Jonathan-Cao"},"content":"        assertFalse(modelManager.equals(new ModelManager(wardrobe, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":20,"-":112}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"    public void setWardrobeFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setWardrobeFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":2,"-":19}},{"path":"src/test/java/seedu/address/model/WardrobeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"public class WardrobeTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"    private final Wardrobe wardrobe \u003d new Wardrobe();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(Collections.emptyList(), wardrobe.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e wardrobe.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"    public void resetData_withValidReadOnlyWardrobe_replacesData() {"},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe newData \u003d getTypicalWardrobe();"},{"lineNumber":42,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobe.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(newData, wardrobe);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"Jonathan-Cao"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)"},{"lineNumber":50,"author":{"gitId":"arihantjain97"},"content":"                .withDressCode(VALID_DRESSCODE_BOB)"},{"lineNumber":51,"author":{"gitId":"Jonathan-Cao"},"content":"                .withDescriptions(VALID_DESCRIPTION_HUSBAND)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":54,"author":{"gitId":"Jonathan-Cao"},"content":"        WardrobeStub newData \u003d new WardrobeStub(newPersons);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e wardrobe.resetData(newData));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e wardrobe.hasPerson(null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"Jonathan-Cao"},"content":"    public void hasPerson_personNotInWardrobe_returnsFalse() {"},{"lineNumber":66,"author":{"gitId":"Jonathan-Cao"},"content":"        assertFalse(wardrobe.hasPerson(ALICE));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"Jonathan-Cao"},"content":"    public void hasPerson_personInWardrobe_returnsTrue() {"},{"lineNumber":71,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobe.addPerson(ALICE);"},{"lineNumber":72,"author":{"gitId":"Jonathan-Cao"},"content":"        assertTrue(wardrobe.hasPerson(ALICE));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"Jonathan-Cao"},"content":"    public void hasPerson_personWithSameIdentityFieldsInWardrobe_returnsTrue() {"},{"lineNumber":77,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobe.addPerson(ALICE);"},{"lineNumber":78,"author":{"gitId":"Jonathan-Cao"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)"},{"lineNumber":79,"author":{"gitId":"arihantjain97"},"content":"                .withDressCode(VALID_DRESSCODE_BOB)"},{"lineNumber":80,"author":{"gitId":"Jonathan-Cao"},"content":"                .withDescriptions(VALID_DESCRIPTION_HUSBAND)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":82,"author":{"gitId":"Jonathan-Cao"},"content":"        assertTrue(wardrobe.hasPerson(editedAlice));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":87,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e wardrobe.getPersonList().remove(0));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"Jonathan-Cao"},"content":"     * A stub ReadOnlyWardrobe whose persons list can violate interface constraints."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Jonathan-Cao"},"content":"    private static class WardrobeStub implements ReadOnlyWardrobe {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"Jonathan-Cao"},"content":"        WardrobeStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":3,"Jonathan-Cao":29,"-":74}},{"path":"src/test/java/seedu/address/model/description/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jonathan-Cao"},"content":"package seedu.address.model.description;"},{"lineNumber":2,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":3,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":5,"author":{"gitId":"Jonathan-Cao"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":7,"author":{"gitId":"Jonathan-Cao"},"content":"public class DescriptionTest {"},{"lineNumber":8,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"    public void constructor_invalidDescriptionName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"        String invalidDescriptionName \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescriptionName));"},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"    public void isValidDescriptionName() {"},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":"        // null description name"},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescriptionName(null));"},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":26}},{"path":"src/test/java/seedu/address/model/person/ColourTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"adidoesnt"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":3,"author":{"gitId":"adidoesnt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":6,"author":{"gitId":"adidoesnt"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":8,"author":{"gitId":"adidoesnt"},"content":"public class ColourTest {"},{"lineNumber":9,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":10,"author":{"gitId":"adidoesnt"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"adidoesnt"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitId":"adidoesnt"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Colour(null));"},{"lineNumber":13,"author":{"gitId":"adidoesnt"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":15,"author":{"gitId":"adidoesnt"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"adidoesnt"},"content":"    public void constructor_invalidColour_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitId":"adidoesnt"},"content":"        String invalidColour \u003d \" \";"},{"lineNumber":18,"author":{"gitId":"adidoesnt"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Colour(invalidColour));"},{"lineNumber":19,"author":{"gitId":"adidoesnt"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"adidoesnt"},"content":""},{"lineNumber":21,"author":{"gitId":"adidoesnt"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"adidoesnt"},"content":"    public void isValidColour() {"},{"lineNumber":23,"author":{"gitId":"adidoesnt"},"content":"        assertEquals(1, 1);"},{"lineNumber":24,"author":{"gitId":"adidoesnt"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"adidoesnt"},"content":"}"}],"authorContributionMap":{"adidoesnt":25}},{"path":"src/test/java/seedu/address/model/person/DressCodeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"arihantjain97"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":3,"author":{"gitId":"arihantjain97"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"arihantjain97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":9,"author":{"gitId":"arihantjain97"},"content":"public class DressCodeTest {"},{"lineNumber":10,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":11,"author":{"gitId":"arihantjain97"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"arihantjain97"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"arihantjain97"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DressCode(null));"},{"lineNumber":14,"author":{"gitId":"arihantjain97"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":16,"author":{"gitId":"arihantjain97"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"arihantjain97"},"content":"    public void constructor_invalidDressCode_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"arihantjain97"},"content":"        String invalidDressCode \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"arihantjain97"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DressCode(invalidDressCode));"},{"lineNumber":20,"author":{"gitId":"arihantjain97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":22,"author":{"gitId":"arihantjain97"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"arihantjain97"},"content":"    public void isValidDressCode() {"},{"lineNumber":24,"author":{"gitId":"arihantjain97"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"arihantjain97"},"content":"        assertThrows(NullPointerException.class, () -\u003e DressCode.isValidDressCode(null));"},{"lineNumber":26,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":27,"author":{"gitId":"arihantjain97"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"arihantjain97"},"content":"        assertFalse(DressCode.isValidDressCode(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"arihantjain97"},"content":"        assertFalse(DressCode.isValidDressCode(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":31,"author":{"gitId":"arihantjain97"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"arihantjain97"},"content":"        assertTrue(DressCode.isValidDressCode(\"FORMAL\"));"},{"lineNumber":33,"author":{"gitId":"arihantjain97"},"content":"        assertTrue(DressCode.isValidDressCode(\"CASUAL\"));"},{"lineNumber":34,"author":{"gitId":"arihantjain97"},"content":"        assertTrue(DressCode.isValidDressCode(\"ACTIVE\")); // long address"},{"lineNumber":35,"author":{"gitId":"arihantjain97"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"arihantjain97"},"content":"}"}],"authorContributionMap":{"arihantjain97":36}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"arihantjain97"},"content":"        // Keywords match phone, colour and dresscode, but does not match name"},{"lineNumber":71,"author":{"gitId":"arihantjain97"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@colour.com\", \"FORMAL\"));"},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withSize(\"12345\")"},{"lineNumber":73,"author":{"gitId":"arihantjain97"},"content":"                .withColour(\"alice@colour.com\").withDressCode(\"FORMAL\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":3,"VisnuRavi":1,"-":71}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_BOB;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SIZE_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getDescriptions().remove(0));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"adidoesnt"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withSize(VALID_SIZE_BOB).withColour(VALID_COLOUR_BOB)"},{"lineNumber":36,"author":{"gitId":"arihantjain97"},"content":"                .withDressCode(VALID_DRESSCODE_BOB).withDescriptions(VALID_DESCRIPTION_HUSBAND).build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"VisnuRavi"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withSize(VALID_SIZE_BOB).build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"adidoesnt"},"content":"        // different colour -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"adidoesnt"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withColour(VALID_COLOUR_BOB).build();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"arihantjain97"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withDressCode(VALID_DRESSCODE_BOB).build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"VisnuRavi"},"content":"        // different descriptions -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"VisnuRavi"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withDescriptions(VALID_DESCRIPTION_HUSBAND).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":3,"adidoesnt":4,"VisnuRavi":6,"-":78}},{"path":"src/test/java/seedu/address/model/person/SizeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"public class SizeTest {"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Size(null));"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    public void constructor_invalidSize_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"        String invalidSize \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Size(invalidSize));"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    public void isValidSize() {"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"        // null size"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"        assertThrows(NullPointerException.class, () -\u003e Size.isValidSize(null));"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"        // invalid sizes"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"        assertFalse(Size.isValidSize(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"        assertFalse(Size.isValidSize(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"        assertFalse(Size.isValidSize(\"phone\")); // non-numeric"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"        assertFalse(Size.isValidSize(\"9011p041\")); // alphabets within digits"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"        assertFalse(Size.isValidSize(\"9 1\")); // spaces within digits"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"        // valid sizes"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"        assertTrue(Size.isValidSize(\"23\")); // exactly 3 numbers"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"        assertTrue(Size.isValidSize(\"11\"));"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":38}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)"},{"lineNumber":46,"author":{"gitId":"arihantjain97"},"content":"                .withDressCode(VALID_DRESSCODE_BOB)"},{"lineNumber":47,"author":{"gitId":"Jonathan-Cao"},"content":"                .withDescriptions(VALID_DESCRIPTION_HUSBAND)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":90,"author":{"gitId":"Jonathan-Cao"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)"},{"lineNumber":91,"author":{"gitId":"arihantjain97"},"content":"                .withDressCode(VALID_DRESSCODE_BOB)"},{"lineNumber":92,"author":{"gitId":"Jonathan-Cao"},"content":"                .withDescriptions(VALID_DESCRIPTION_HUSBAND)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":3,"Jonathan-Cao":5,"-":166}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":16,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"    private static final String INVALID_SIZE \u003d \"+22\";"},{"lineNumber":23,"author":{"gitId":"arihantjain97"},"content":"    private static final String INVALID_DRESSCODE \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"adidoesnt"},"content":"    private static final String INVALID_COLOUR \u003d \" \";"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    private static final String INVALID_DESCRIPTION \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    private static final String VALID_SIZE \u003d BENSON.getSize().toString();"},{"lineNumber":29,"author":{"gitId":"adidoesnt"},"content":"    private static final String VALID_COLOUR \u003d BENSON.getColour().toString();"},{"lineNumber":30,"author":{"gitId":"arihantjain97"},"content":"    private static final String VALID_DRESSCODE \u003d BENSON.getDressCode().toString();"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"    private static final List\u003cJsonAdaptedDescription\u003e VALID_DESCRIPTIONS \u003d BENSON.getDescriptions().stream()"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"            .map(JsonAdaptedDescription::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":44,"author":{"gitId":"arihantjain97"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_SIZE, VALID_COLOUR, VALID_DRESSCODE, VALID_DESCRIPTIONS);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"arihantjain97"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_SIZE, VALID_COLOUR, VALID_DRESSCODE,"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"                VALID_DESCRIPTIONS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"    public void toModelType_invalidSize_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":60,"author":{"gitId":"arihantjain97"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_SIZE, VALID_COLOUR, VALID_DRESSCODE, VALID_DESCRIPTIONS);"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"        String expectedMessage \u003d Size.MESSAGE_CONSTRAINTS;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"VisnuRavi"},"content":"    public void toModelType_nullSize_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitId":"arihantjain97"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_COLOUR, VALID_DRESSCODE,"},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"                VALID_DESCRIPTIONS);"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Size.class.getSimpleName());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"adidoesnt"},"content":"    public void toModelType_invalidColour_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":76,"author":{"gitId":"arihantjain97"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SIZE, INVALID_COLOUR, VALID_DRESSCODE, VALID_DESCRIPTIONS);"},{"lineNumber":77,"author":{"gitId":"arihantjain97"},"content":"        String expectedMessage \u003d Colour.MESSAGE_CONSTRAINTS;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitId":"arihantjain97"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_SIZE, null, VALID_DRESSCODE,"},{"lineNumber":84,"author":{"gitId":"VisnuRavi"},"content":"                VALID_DESCRIPTIONS);"},{"lineNumber":85,"author":{"gitId":"adidoesnt"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Colour.class.getSimpleName());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"arihantjain97"},"content":"    public void toModelType_invalidDressCode_throwsIllegalValueException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":92,"author":{"gitId":"arihantjain97"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SIZE, VALID_COLOUR, INVALID_DRESSCODE, VALID_DESCRIPTIONS);"},{"lineNumber":93,"author":{"gitId":"arihantjain97"},"content":"        String expectedMessage \u003d DressCode.MESSAGE_CONSTRAINTS;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"arihantjain97"},"content":"    public void toModelType_nullDressCode_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitId":"adidoesnt"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_SIZE, VALID_COLOUR, null,"},{"lineNumber":100,"author":{"gitId":"VisnuRavi"},"content":"                VALID_DESCRIPTIONS);"},{"lineNumber":101,"author":{"gitId":"arihantjain97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DressCode.class.getSimpleName());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"VisnuRavi"},"content":"    public void toModelType_invalidDescriptions_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitId":"VisnuRavi"},"content":"        List\u003cJsonAdaptedDescription\u003e invalidDescriptions \u003d new ArrayList\u003c\u003e(VALID_DESCRIPTIONS);"},{"lineNumber":108,"author":{"gitId":"VisnuRavi"},"content":"        invalidDescriptions.add(new JsonAdaptedDescription(INVALID_DESCRIPTION));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":110,"author":{"gitId":"arihantjain97"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_SIZE, VALID_COLOUR, VALID_DRESSCODE,"},{"lineNumber":111,"author":{"gitId":"VisnuRavi"},"content":"                        invalidDescriptions);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":16,"adidoesnt":6,"VisnuRavi":18,"-":75}},{"path":"src/test/java/seedu/address/storage/JsonSerializableWardrobeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"public class JsonSerializableWardrobeTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableWardrobeTest\");"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsWardrobe.json\");"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonWardrobe.json\");"},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonWardrobe.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"        JsonSerializableWardrobe dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"                JsonSerializableWardrobe.class).get();"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe wardrobeFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe typicalPersonsWardrobe \u003d TypicalPersons.getTypicalWardrobe();"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(wardrobeFromFile, typicalPersonsWardrobe);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"Jonathan-Cao"},"content":"        JsonSerializableWardrobe dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"                JsonSerializableWardrobe.class).get();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"        JsonSerializableWardrobe dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"},{"lineNumber":42,"author":{"gitId":"Jonathan-Cao"},"content":"                JsonSerializableWardrobe.class).get();"},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableWardrobe.MESSAGE_DUPLICATE_PERSON,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":16,"-":31}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"Jonathan-Cao"},"content":"        userPrefs.setWardrobeFilePath(Paths.get(\"wardrobe.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":1,"-":122}},{"path":"src/test/java/seedu/address/storage/JsonWardrobeStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jonathan-Cao"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":3,"author":{"gitId":"Jonathan-Cao"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Jonathan-Cao"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":"public class JsonWardrobeStorageTest {"},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonWardrobeStorageTest\");"},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"    public void readWardrobe_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e readWardrobe(null));"},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":33,"author":{"gitId":"Jonathan-Cao"},"content":"    private java.util.Optional\u003cReadOnlyWardrobe\u003e readWardrobe(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"Jonathan-Cao"},"content":"        return new JsonWardrobeStorage(Paths.get(filePath)).readWardrobe(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":37,"author":{"gitId":"Jonathan-Cao"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"Jonathan-Cao"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"Jonathan-Cao"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"Jonathan-Cao"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":43,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"Jonathan-Cao"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"Jonathan-Cao"},"content":"        assertFalse(readWardrobe(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":48,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Jonathan-Cao"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(DataConversionException.class, () -\u003e readWardrobe(\"notJsonFormatWardrobe.json\"));"},{"lineNumber":51,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":53,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"Jonathan-Cao"},"content":"    public void readWardrobe_invalidPersonWardrobe_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(DataConversionException.class, () -\u003e readWardrobe(\"invalidPersonWardrobe.json\"));"},{"lineNumber":56,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":58,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"Jonathan-Cao"},"content":"    public void readWardrobe_invalidAndValidPersonWardrobe_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(DataConversionException.class, () -\u003e readWardrobe(\"invalidAndValidPersonWardrobe.json\"));"},{"lineNumber":61,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":63,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"Jonathan-Cao"},"content":"    public void readAndSaveWardrobe_allInOrder_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"Jonathan-Cao"},"content":"        Path filePath \u003d testFolder.resolve(\"TempWardrobe.json\");"},{"lineNumber":66,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe original \u003d getTypicalWardrobe();"},{"lineNumber":67,"author":{"gitId":"Jonathan-Cao"},"content":"        JsonWardrobeStorage jsonWardrobeStorage \u003d new JsonWardrobeStorage(filePath);"},{"lineNumber":68,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":69,"author":{"gitId":"Jonathan-Cao"},"content":"        // Save in new file and read back"},{"lineNumber":70,"author":{"gitId":"Jonathan-Cao"},"content":"        jsonWardrobeStorage.saveWardrobe(original, filePath);"},{"lineNumber":71,"author":{"gitId":"Jonathan-Cao"},"content":"        ReadOnlyWardrobe readBack \u003d jsonWardrobeStorage.readWardrobe(filePath).get();"},{"lineNumber":72,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(original, new Wardrobe(readBack));"},{"lineNumber":73,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":74,"author":{"gitId":"Jonathan-Cao"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":75,"author":{"gitId":"Jonathan-Cao"},"content":"        original.addPerson(HOON);"},{"lineNumber":76,"author":{"gitId":"Jonathan-Cao"},"content":"        original.removePerson(ALICE);"},{"lineNumber":77,"author":{"gitId":"Jonathan-Cao"},"content":"        jsonWardrobeStorage.saveWardrobe(original, filePath);"},{"lineNumber":78,"author":{"gitId":"Jonathan-Cao"},"content":"        readBack \u003d jsonWardrobeStorage.readWardrobe(filePath).get();"},{"lineNumber":79,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(original, new Wardrobe(readBack));"},{"lineNumber":80,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":81,"author":{"gitId":"Jonathan-Cao"},"content":"        // Save and read without specifying file path"},{"lineNumber":82,"author":{"gitId":"Jonathan-Cao"},"content":"        original.addPerson(IDA);"},{"lineNumber":83,"author":{"gitId":"Jonathan-Cao"},"content":"        jsonWardrobeStorage.saveWardrobe(original); // file path not specified"},{"lineNumber":84,"author":{"gitId":"Jonathan-Cao"},"content":"        readBack \u003d jsonWardrobeStorage.readWardrobe().get(); // file path not specified"},{"lineNumber":85,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(original, new Wardrobe(readBack));"},{"lineNumber":86,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":87,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":89,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"Jonathan-Cao"},"content":"    public void saveWardrobe_nullWardrobe_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveWardrobe(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":94,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"Jonathan-Cao"},"content":"     * Saves {@code wardrobe} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Jonathan-Cao"},"content":"    private void saveWardrobe(ReadOnlyWardrobe wardrobe, String filePath) {"},{"lineNumber":98,"author":{"gitId":"Jonathan-Cao"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"Jonathan-Cao"},"content":"            new JsonWardrobeStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"Jonathan-Cao"},"content":"                    .saveWardrobe(wardrobe, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"Jonathan-Cao"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"Jonathan-Cao"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"Jonathan-Cao"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":106,"author":{"gitId":"Jonathan-Cao"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"Jonathan-Cao"},"content":"    public void saveWardrobe_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"Jonathan-Cao"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveWardrobe(new Wardrobe(), null));"},{"lineNumber":109,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Jonathan-Cao"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":110}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"Jonathan-Cao"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalWardrobe;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.ReadOnlyWardrobe;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"        JsonWardrobeStorage wardrobeStorage \u003d new JsonWardrobeStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"        storageManager \u003d new StorageManager(wardrobeStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"Jonathan-Cao"},"content":"    public void wardrobeReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"Jonathan-Cao"},"content":"         * {@link JsonWardrobeStorage} class."},{"lineNumber":55,"author":{"gitId":"Jonathan-Cao"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonWardrobeStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe original \u003d getTypicalWardrobe();"},{"lineNumber":58,"author":{"gitId":"Jonathan-Cao"},"content":"        storageManager.saveWardrobe(original);"},{"lineNumber":59,"author":{"gitId":"Jonathan-Cao"},"content":"        ReadOnlyWardrobe retrieved \u003d storageManager.readWardrobe().get();"},{"lineNumber":60,"author":{"gitId":"Jonathan-Cao"},"content":"        assertEquals(original, new Wardrobe(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"Jonathan-Cao"},"content":"    public void getWardrobeFilePath() {"},{"lineNumber":65,"author":{"gitId":"Jonathan-Cao"},"content":"        assertNotNull(storageManager.getWardrobeFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":14,"-":54}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":9,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":10,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"        descriptor.setSize(person.getSize());"},{"lineNumber":37,"author":{"gitId":"adidoesnt"},"content":"        descriptor.setColour(person.getColour());"},{"lineNumber":38,"author":{"gitId":"arihantjain97"},"content":"        descriptor.setDressCode(person.getDressCode());"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"        descriptor.setDescriptions(person.getDescriptions());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"     * Sets the {@code Size} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"    public EditPersonDescriptorBuilder withSize(String size) {"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"        descriptor.setSize(new Size(size));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"adidoesnt"},"content":"     * Sets the {@code Colour} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"adidoesnt"},"content":"    public EditPersonDescriptorBuilder withColour(String colour) {"},{"lineNumber":62,"author":{"gitId":"adidoesnt"},"content":"        descriptor.setColour(new Colour(colour));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"arihantjain97"},"content":"    public EditPersonDescriptorBuilder withDressCode(String dressCode) {"},{"lineNumber":70,"author":{"gitId":"arihantjain97"},"content":"        descriptor.setDressCode(new DressCode(dressCode));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"VisnuRavi"},"content":"     * Parses the {@code descriptions} into a {@code Set\u003cDescription\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"VisnuRavi"},"content":"    public EditPersonDescriptorBuilder withDescriptions(String... descriptions) {"},{"lineNumber":79,"author":{"gitId":"VisnuRavi"},"content":"        Set\u003cDescription\u003e descriptionSet \u003d Stream.of(descriptions).map(Description::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitId":"VisnuRavi"},"content":"        descriptor.setDescriptions(descriptionSet);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":4,"VisnuRavi":11,"adidoesnt":5,"-":67}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":7,"author":{"gitId":"adidoesnt"},"content":"import seedu.address.model.person.Colour;"},{"lineNumber":8,"author":{"gitId":"arihantjain97"},"content":"import seedu.address.model.person.DressCode;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.person.Size;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"    public static final String DEFAULT_SIZE \u003d \"25\";"},{"lineNumber":21,"author":{"gitId":"adidoesnt"},"content":"    public static final String DEFAULT_COLOUR \u003d \"amy@gmail.com\";"},{"lineNumber":22,"author":{"gitId":"arihantjain97"},"content":"    public static final String DEFAULT_DRESSCODE \u003d \"FORMAL\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    private Size size;"},{"lineNumber":26,"author":{"gitId":"adidoesnt"},"content":"    private Colour colour;"},{"lineNumber":27,"author":{"gitId":"arihantjain97"},"content":"    private DressCode dresscode;"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    private Set\u003cDescription\u003e descriptions;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"        size \u003d new Size(DEFAULT_SIZE);"},{"lineNumber":36,"author":{"gitId":"adidoesnt"},"content":"        colour \u003d new Colour(DEFAULT_COLOUR);"},{"lineNumber":37,"author":{"gitId":"arihantjain97"},"content":"        dresscode \u003d new DressCode(DEFAULT_DRESSCODE);"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"        descriptions \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"        size \u003d personToCopy.getSize();"},{"lineNumber":47,"author":{"gitId":"adidoesnt"},"content":"        colour \u003d personToCopy.getColour();"},{"lineNumber":48,"author":{"gitId":"arihantjain97"},"content":"        dresscode \u003d personToCopy.getDressCode();"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":"        descriptions \u003d new HashSet\u003c\u003e(personToCopy.getDescriptions());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"     * Parses the {@code descriptions} into a {@code Set\u003cDescription\u003e}"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"     * and set it to the {@code Person} that we are building."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"    public PersonBuilder withDescriptions(String ... descriptions) {"},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"        this.descriptions \u003d SampleDataUtil.getDescriptionSet(descriptions);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"arihantjain97"},"content":"    public PersonBuilder withDressCode(String dresscode) {"},{"lineNumber":73,"author":{"gitId":"arihantjain97"},"content":"        this.dresscode \u003d new DressCode(dresscode);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"VisnuRavi"},"content":"    public PersonBuilder withSize(String size) {"},{"lineNumber":81,"author":{"gitId":"VisnuRavi"},"content":"        this.size \u003d new Size(size);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"adidoesnt"},"content":"     * Sets the {@code Colour} of the {@code Person} that we are building."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"adidoesnt"},"content":"    public PersonBuilder withColour(String colour) {"},{"lineNumber":89,"author":{"gitId":"adidoesnt"},"content":"        this.colour \u003d new Colour(colour);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":94,"author":{"gitId":"arihantjain97"},"content":"        return new Person(name, size, colour, dresscode, descriptions);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":8,"VisnuRavi":15,"adidoesnt":8,"-":66}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DRESSCODE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SIZE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"import seedu.address.model.description.Description;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"        sb.append(PREFIX_SIZE + person.getSize().value + \" \");"},{"lineNumber":35,"author":{"gitId":"adidoesnt"},"content":"        sb.append(PREFIX_COLOUR + person.getColour().colour + \" \");"},{"lineNumber":36,"author":{"gitId":"arihantjain97"},"content":"        sb.append(PREFIX_DRESSCODE + person.getDressCode().value + \" \");"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"        person.getDescriptions().stream().forEach("},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"            s -\u003e sb.append(PREFIX_DESCRIPTION + s.descriptionName + \" \")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":"        descriptor.getSize().ifPresent(phone -\u003e sb.append(PREFIX_SIZE).append(phone.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"adidoesnt"},"content":"        descriptor.getColour().ifPresent(colour -\u003e sb.append(PREFIX_COLOUR).append(colour.colour).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"arihantjain97"},"content":"        descriptor.getDressCode().ifPresent(dresscode -\u003e sb.append(PREFIX_DRESSCODE)"},{"lineNumber":52,"author":{"gitId":"arihantjain97"},"content":"                .append(dresscode.value).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"arihantjain97"},"content":""},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"        if (descriptor.getDescriptions().isPresent()) {"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"            Set\u003cDescription\u003e descriptions \u003d descriptor.getDescriptions().get();"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"            if (descriptions.isEmpty()) {"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"                sb.append(PREFIX_DESCRIPTION);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"                descriptions.forEach(s -\u003e sb.append(PREFIX_DESCRIPTION).append(s.descriptionName).append(\" \"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":5,"adidoesnt":3,"VisnuRavi":12,"-":44}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_AMY;"},{"lineNumber":4,"author":{"gitId":"adidoesnt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_BOB;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FRIEND;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_AMY;"},{"lineNumber":8,"author":{"gitId":"arihantjain97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DRESSCODE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SIZE_AMY;"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SIZE_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":27,"author":{"gitId":"arihantjain97"},"content":"            .withDressCode(\"FORMAL\").withColour(\"alice@example.com\")"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"            .withSize(\"53\")"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"            .withDescriptions(\"friends\").build();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":31,"author":{"gitId":"arihantjain97"},"content":"            .withDressCode(\"FORMAL\")"},{"lineNumber":32,"author":{"gitId":"adidoesnt"},"content":"            .withColour(\"johnd@example.com\").withSize(\"32\")"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"            .withDescriptions(\"owesMoney\", \"friends\").build();"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withSize(\"93\")"},{"lineNumber":35,"author":{"gitId":"arihantjain97"},"content":"            .withColour(\"heinz@example.com\").withDressCode(\"FORMAL\").build();"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withSize(\"33\")"},{"lineNumber":37,"author":{"gitId":"arihantjain97"},"content":"            .withColour(\"cornelia@example.com\").withDressCode(\"CASUAL\").withDescriptions(\"friends\").build();"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withSize(\"24\")"},{"lineNumber":39,"author":{"gitId":"arihantjain97"},"content":"            .withColour(\"werner@example.com\").withDressCode(\"CASUAL\").build();"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withSize(\"27\")"},{"lineNumber":41,"author":{"gitId":"arihantjain97"},"content":"            .withColour(\"lydia@example.com\").withDressCode(\"CASUAL\").build();"},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withSize(\"42\")"},{"lineNumber":43,"author":{"gitId":"arihantjain97"},"content":"            .withColour(\"anna@example.com\").withDressCode(\"ACTIVE\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withSize(\"24\")"},{"lineNumber":47,"author":{"gitId":"arihantjain97"},"content":"            .withColour(\"stefan@example.com\").withDressCode(\"ACTIVE\").build();"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withSize(\"31\")"},{"lineNumber":49,"author":{"gitId":"arihantjain97"},"content":"            .withColour(\"hans@example.com\").withDressCode(\"ACTIVE\").build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withSize(VALID_SIZE_AMY)"},{"lineNumber":53,"author":{"gitId":"arihantjain97"},"content":"            .withColour(VALID_COLOUR_AMY).withDressCode(VALID_DRESSCODE_AMY).withDescriptions(VALID_DESCRIPTION_FRIEND)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withSize(VALID_SIZE_BOB)"},{"lineNumber":56,"author":{"gitId":"arihantjain97"},"content":"            .withColour(VALID_COLOUR_BOB).withDressCode(VALID_DRESSCODE_BOB).withDescriptions(VALID_DESCRIPTION_HUSBAND,"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"                    VALID_DESCRIPTION_FRIEND).build();"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"Jonathan-Cao"},"content":"     * Returns an {@code Wardrobe} with all the typical persons."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Jonathan-Cao"},"content":"    public static Wardrobe getTypicalWardrobe() {"},{"lineNumber":68,"author":{"gitId":"Jonathan-Cao"},"content":"        Wardrobe ab \u003d new Wardrobe();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arihantjain97":13,"Jonathan-Cao":4,"adidoesnt":3,"VisnuRavi":18,"-":40}},{"path":"src/test/java/seedu/address/testutil/WardrobeBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jonathan-Cao"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":3,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.Wardrobe;"},{"lineNumber":4,"author":{"gitId":"Jonathan-Cao"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":6,"author":{"gitId":"Jonathan-Cao"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Jonathan-Cao"},"content":" * A utility class to help with building Wardrobe objects."},{"lineNumber":8,"author":{"gitId":"Jonathan-Cao"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"Jonathan-Cao"},"content":" *     {@code Wardrobe ab \u003d new WardrobeBuilder().withPerson(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"Jonathan-Cao"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jonathan-Cao"},"content":"public class WardrobeBuilder {"},{"lineNumber":12,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":13,"author":{"gitId":"Jonathan-Cao"},"content":"    private Wardrobe wardrobe;"},{"lineNumber":14,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":15,"author":{"gitId":"Jonathan-Cao"},"content":"    public WardrobeBuilder() {"},{"lineNumber":16,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobe \u003d new Wardrobe();"},{"lineNumber":17,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":19,"author":{"gitId":"Jonathan-Cao"},"content":"    public WardrobeBuilder(Wardrobe wardrobe) {"},{"lineNumber":20,"author":{"gitId":"Jonathan-Cao"},"content":"        this.wardrobe \u003d wardrobe;"},{"lineNumber":21,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":23,"author":{"gitId":"Jonathan-Cao"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Jonathan-Cao"},"content":"     * Adds a new {@code Person} to the {@code Wardrobe} that we are building."},{"lineNumber":25,"author":{"gitId":"Jonathan-Cao"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jonathan-Cao"},"content":"    public WardrobeBuilder withPerson(Person person) {"},{"lineNumber":27,"author":{"gitId":"Jonathan-Cao"},"content":"        wardrobe.addPerson(person);"},{"lineNumber":28,"author":{"gitId":"Jonathan-Cao"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Jonathan-Cao"},"content":""},{"lineNumber":31,"author":{"gitId":"Jonathan-Cao"},"content":"    public Wardrobe build() {"},{"lineNumber":32,"author":{"gitId":"Jonathan-Cao"},"content":"        return wardrobe;"},{"lineNumber":33,"author":{"gitId":"Jonathan-Cao"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Jonathan-Cao"},"content":"}"}],"authorContributionMap":{"Jonathan-Cao":34}}]
