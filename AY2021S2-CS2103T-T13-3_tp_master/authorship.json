[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103T-T13-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-T13-3/tp/actions/workflows/gradle.yml)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"* This is **a product made for students revising for examinations**.\u003cbr\u003e"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Example usages:"},{"lineNumber":8,"author":{"gitId":"zenlyj"},"content":"* as an application to make notes for important information."},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"* as a revision tool for students to revise for their examinations."},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":11,"author":{"gitId":"zenlyj"},"content":"The product is a desktop application (called _FlashBack_) used for easy access and organisation of notes."},{"lineNumber":12,"author":{"gitId":"zenlyj"},"content":" * It allows students to add, view, and delete notes easily."},{"lineNumber":13,"author":{"gitId":"zenlyj"},"content":" * It is made for students who are fast typers so that they can organise their notes efficiently."},{"lineNumber":14,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"* For the detailed documentation of this project, see the **[FlashBack Website](https://ay2021s2-cs2103t-t13-3.github.io/tp/)**. "},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":"* This project adopts some functionality from the AddressBook-Level4 project created by the [SE-EDU initiative](https://github.com/se-edu/addressbook-level4)."}],"authorContributionMap":{"yeoutzer":5,"Marc-97":1,"zenlyj":5,"vuminhhieunus2019":1,"linhns":1,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"### Loo Yeou Tzer"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"\u003cimg src\u003d\"images/yeoutzer.png\" width\u003d\"200px\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"[[github](https://github.com/yeoutzer)]"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"[[portfolio](team/yeoutzer.md)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"### Nguyen Son Linh"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"\u003cimg src\u003d\"images/linhns.png\" width\u003d\"200px\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"[[github](http://github.com/linhns)]"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"[[portfolio](team/linhns.md)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"* Role: Integration and Git"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"* Responsibilities: Manage team repository"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"### Vu Minh Hieu"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003cimg src\u003d\"images/vuminhhieunus2019.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"[[github](https://github.com/vuminhhieunus2019)] [[portfolio](team/vuminhhieu.md)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"* Responsibilities: UI"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"### Lim Zi Qiang, Marcus"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"zenlyj"},"content":"\u003cimg src\u003d\"images/marc-97.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":"[[github](https://github.com/marc-97)]"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"[[portfolio](team/marcus.md)]"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"### Zen Lee"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"\u003cimg src\u003d\"images/zenlyj.png\" width\u003d\"200px\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"zenlyj"},"content":"[[github](https://github.com/zenlyj)]"},{"lineNumber":53,"author":{"gitId":"zenlyj"},"content":"[[portfolio](team/zenlee.md)]"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":""}],"authorContributionMap":{"yeoutzer":4,"Marc-97":3,"vuminhhieunus2019":4,"zenlyj":4,"linhns":8,"-":33}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"* Appendix: Requirements"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"    * Use cases"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"zenlyj"},"content":"* student revising for examinations"},{"lineNumber":239,"author":{"gitId":"zenlyj"},"content":"* has a hard time remembering concepts from different fields of study."},{"lineNumber":240,"author":{"gitId":"zenlyj"},"content":"* prefers desktop apps over other types"},{"lineNumber":241,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"zenlyj"},"content":"**Value proposition**: Offers productive study sessions to students "},{"lineNumber":246,"author":{"gitId":"zenlyj"},"content":"via improved accessibility and organisation of flashcards, as well as "},{"lineNumber":247,"author":{"gitId":"zenlyj"},"content":"faster management of flashcards compared to a typical mouse/GUI driven app"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"vuminhhieunus2019"},"content":"| Priority | As a …​                                     |I want to …​                     | So that I can…​                                                        "},{"lineNumber":255,"author":{"gitId":"vuminhhieunus2019"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- "},{"lineNumber":256,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App        "},{"lineNumber":257,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* * *`  | new user | use the app with sample data | see how the app look like         "},{"lineNumber":258,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* * *`  | student                                    | add a new card                 | take down important concepts for future reference                                                                    "},{"lineNumber":259,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* * *`  | long-time user                             | delete an old card             | remove some notes that I no longer need                               "},{"lineNumber":260,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* * *`  | student                                    | view all my notes   | easily refer to all my study materials               |                                                "},{"lineNumber":261,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* * *`  | student                                    | view the question and answer of a specific card | check if I remember the concepts correctly "},{"lineNumber":262,"author":{"gitId":"zenlyj"},"content":"| `* * * ` | careless user | modify the details of a flash card | avoid having to delete and add a new card when I wish to update card information"},{"lineNumber":263,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* *` | multi-discipline student | put my notes under different tags and categories | easily organize them"},{"lineNumber":264,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* *`     | angry student   | undo my actions| my emotion will not cloud my judgements"},{"lineNumber":265,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* *` | student | review my own performance after each study session | know what to improve on"},{"lineNumber":266,"author":{"gitId":"vuminhhieunus2019"},"content":"| `* *` | long-time user | find what I need easily | search through the list of decks without doing it manually "},{"lineNumber":267,"author":{"gitId":"vuminhhieunus2019"},"content":"| `*`   | student | export a part of my materials | share it with others "},{"lineNumber":268,"author":{"gitId":"vuminhhieunus2019"},"content":"| `*`   | experienced user | define my own aliases for commands | use them faster"},{"lineNumber":269,"author":{"gitId":"vuminhhieunus2019"},"content":"| `*`   | chemistry/biology Student | use subscripts | see the chemical formula easier"},{"lineNumber":270,"author":{"gitId":"vuminhhieunus2019"},"content":"| `*`   | careless student | archive my notes | easily restore them"},{"lineNumber":271,"author":{"gitId":"vuminhhieunus2019"},"content":"| `*`   | student | look at the statistics | focus on topics that I am not good at"},{"lineNumber":272,"author":{"gitId":"vuminhhieunus2019"},"content":" "},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"zenlyj"},"content":"(For all use cases below, the **System** is the `FlashBack` and the **Actor** is the `user`, unless specified otherwise) \u003cbr /\u003e\u003cbr /\u003e"},{"lineNumber":280,"author":{"gitId":"zenlyj"},"content":"**Use case: Add a flash card**"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"zenlyj"},"content":"1. User requests to add a new flash card into the list"},{"lineNumber":285,"author":{"gitId":"zenlyj"},"content":"2. FlashBack adds the new flash card"},{"lineNumber":286,"author":{"gitId":"zenlyj"},"content":"   "},{"lineNumber":287,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":290,"author":{"gitId":"zenlyj"},"content":"* 1a. The given fields are empty."},{"lineNumber":291,"author":{"gitId":"zenlyj"},"content":"    * 1a1. FlashBack shows an error message."},{"lineNumber":292,"author":{"gitId":"zenlyj"},"content":"      "},{"lineNumber":293,"author":{"gitId":"-"},"content":"      Use case ends."},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"zenlyj"},"content":"**Use case: Remove a flash card**"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"zenlyj"},"content":"**MSS**"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"zenlyj"},"content":"1. FlashBack shows a list of flash cards"},{"lineNumber":300,"author":{"gitId":"zenlyj"},"content":"2. User requests to delete a specific flash card from the list"},{"lineNumber":301,"author":{"gitId":"zenlyj"},"content":"3. FlashBack deletes the specified flash card"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"zenlyj"},"content":"    Use case ends."},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"zenlyj"},"content":"**Extensions**"},{"lineNumber":306,"author":{"gitId":"zenlyj"},"content":"* 1a. The list is empty."},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"zenlyj"},"content":"    Use case ends."},{"lineNumber":309,"author":{"gitId":"-"},"content":"  "},{"lineNumber":310,"author":{"gitId":"zenlyj"},"content":"* 2a. The given index is invalid."},{"lineNumber":311,"author":{"gitId":"zenlyj"},"content":"    * 2a1. FlashBack shows an error message."},{"lineNumber":312,"author":{"gitId":"zenlyj"},"content":"    "},{"lineNumber":313,"author":{"gitId":"zenlyj"},"content":"        Use case resumes at step 1."},{"lineNumber":314,"author":{"gitId":"-"},"content":"    "},{"lineNumber":315,"author":{"gitId":"zenlyj"},"content":"**Use case: Edit a flash card**"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"zenlyj"},"content":"**MSS**"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"zenlyj"},"content":"1. FlashBack shows a list of flash cards"},{"lineNumber":320,"author":{"gitId":"zenlyj"},"content":"2. User requests to edit a specific flash card on the list"},{"lineNumber":321,"author":{"gitId":"zenlyj"},"content":"3. User enters the details of updated flash card"},{"lineNumber":322,"author":{"gitId":"zenlyj"},"content":"4. FlashBack updates the flash card with the given details"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"zenlyj"},"content":"    Use case ends"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"zenlyj"},"content":"**Extensions**"},{"lineNumber":327,"author":{"gitId":"zenlyj"},"content":"* 1a. The list is empty."},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"zenlyj"},"content":"    Use case ends."},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"zenlyj"},"content":"* 2a. The given index is invalid"},{"lineNumber":332,"author":{"gitId":"zenlyj"},"content":"    * 2a1. FlashBack shows an error message."},{"lineNumber":333,"author":{"gitId":"zenlyj"},"content":"    "},{"lineNumber":334,"author":{"gitId":"zenlyj"},"content":"        Use case resumes at step 1."},{"lineNumber":335,"author":{"gitId":"zenlyj"},"content":"    "},{"lineNumber":336,"author":{"gitId":"zenlyj"},"content":"* 3a. The updated flash card is a duplicate of an existing card."},{"lineNumber":337,"author":{"gitId":"zenlyj"},"content":"    * 3a1. FlashBack shows an error message."},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"zenlyj"},"content":"        Use case resumes at step 1."},{"lineNumber":340,"author":{"gitId":"zenlyj"},"content":"    "},{"lineNumber":341,"author":{"gitId":"yeoutzer"},"content":"**Use case: View a flash card**"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"zenlyj"},"content":"1. FlashBack shows the list of flash cards"},{"lineNumber":346,"author":{"gitId":"zenlyj"},"content":"1. User requests to view a specific flash card on the list"},{"lineNumber":347,"author":{"gitId":"yeoutzer"},"content":"1. FlashBack shows the requested card"},{"lineNumber":348,"author":{"gitId":"-"},"content":"   "},{"lineNumber":349,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"zenlyj"},"content":"**Extensions**"},{"lineNumber":352,"author":{"gitId":"zenlyj"},"content":"* 1a. The list is empty"},{"lineNumber":353,"author":{"gitId":"zenlyj"},"content":"  "},{"lineNumber":354,"author":{"gitId":"zenlyj"},"content":"  Use case ends"},{"lineNumber":355,"author":{"gitId":"zenlyj"},"content":"  "},{"lineNumber":356,"author":{"gitId":"zenlyj"},"content":"* 2a. The given index is invalid"},{"lineNumber":357,"author":{"gitId":"zenlyj"},"content":"    * 2a1. FlashBack shows an error message"},{"lineNumber":358,"author":{"gitId":"zenlyj"},"content":"      "},{"lineNumber":359,"author":{"gitId":"zenlyj"},"content":"      Use case resumes at step 1"},{"lineNumber":360,"author":{"gitId":"zenlyj"},"content":"    "},{"lineNumber":361,"author":{"gitId":"yeoutzer"},"content":"**Use case: Find cards by search criteria**"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"yeoutzer"},"content":"**MSS**"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"yeoutzer"},"content":"1. User requests to find cards by criteria with given keywords"},{"lineNumber":366,"author":{"gitId":"yeoutzer"},"content":"1. FlashBack shows a list of flashcards matching given keywords according to search criteria"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"yeoutzer"},"content":"   Use case ends."},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"yeoutzer"},"content":"**Extensions**"},{"lineNumber":371,"author":{"gitId":"yeoutzer"},"content":"* 1a. The list is empty"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"yeoutzer"},"content":"  Use case ends"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"yeoutzer"},"content":"* 1b. The search criteria is invalid or empty keywords"},{"lineNumber":376,"author":{"gitId":"yeoutzer"},"content":"  * 1b1. FlashBack shows an error message."},{"lineNumber":377,"author":{"gitId":"yeoutzer"},"content":"    "},{"lineNumber":378,"author":{"gitId":"yeoutzer"},"content":"    Use case ends"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"yeoutzer"},"content":"**Use case: List all flash cards**"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"yeoutzer"},"content":"**MSS**"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"linhns"},"content":"1. User requests to list all flash cards"},{"lineNumber":385,"author":{"gitId":"linhns"},"content":"1. FlashBack shows a list of flash cards"},{"lineNumber":386,"author":{"gitId":"-"},"content":"   "},{"lineNumber":387,"author":{"gitId":"linhns"},"content":"    Use case ends."},{"lineNumber":388,"author":{"gitId":"-"},"content":"    "},{"lineNumber":389,"author":{"gitId":"Marc-97"},"content":"**Use case: Undo an undoable command**"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"Marc-97"},"content":"**MSS**"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"Marc-97"},"content":"1. User requests to delete a flash card from the list"},{"lineNumber":394,"author":{"gitId":"Marc-97"},"content":"1. FlashBack deletes the specified flash card"},{"lineNumber":395,"author":{"gitId":"Marc-97"},"content":"1. User requests to undo delete command"},{"lineNumber":396,"author":{"gitId":"Marc-97"},"content":"1. FlashBack reverts to its previous state before delete command"},{"lineNumber":397,"author":{"gitId":"Marc-97"},"content":"   "},{"lineNumber":398,"author":{"gitId":"Marc-97"},"content":"    Use case ends."},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":403,"author":{"gitId":"Marc-97"},"content":"2.  Should be able to respond to user commands within 3 seconds for up to 1000 cards."},{"lineNumber":404,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"zenlyj"},"content":"### Glossary"},{"lineNumber":409,"author":{"gitId":"linhns"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":410,"author":{"gitId":"linhns"},"content":"* **Flash card**: A card that contains study materials with its topic name"},{"lineNumber":411,"author":{"gitId":"Marc-97"},"content":"* **Undoable Command**: A command that modifies the content of FlashBack"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"}],"authorContributionMap":{"yeoutzer":18,"Marc-97":10,"zenlyj":60,"vuminhhieunus2019":18,"linhns":5,"-":302}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"FlashBack is a **desktop application for managing notes, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). This application allows the improvement of student performance via improved accessibility and organisation of notes, together with interactive sessions that enhance memory retention."},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"* [Quick start](#quick-start)"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"*  [Features](#features)"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"    * [Viewing help](#viewing-help-help): `help`"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"    * [Adding a new card](#adding-a-new-card-add): `add`"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"    * [Listing all cards](#listing-all-cards--list): `list`"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    * [Deleting a card](#deleting-a-card--delete): `delete`"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"    * [Viewing a card](#viewing-a-card--view): `view`"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    * [Finding cards](#finding-cards--find): `find` "},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"    * [Clearing all cards](#clearing-all-entries--clear): `clear`"},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":"    * [Undo a command](#undo-a-command--undo): `undo`"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"    * [Exiting the program](#exiting-the-program--exit): `exit`"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    * [Saving data](#saving-the-data)"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    * [Editing the data file](#editing-the-data-file)"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"    * [Filtering cards](#filtering-cards-coming-in-v13): `[coming in v1.3]`"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"    * [Review mode](#review-mode-coming-in-v13): `[coming in v1.3]`"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"* [FAQ](#faq)"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"* [Command Summary](#command-summary)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":34,"author":{"gitId":"zenlyj"},"content":"1. Download the latest FlashBack.jar."},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"1. Copy the file to the folder you want to use as the home folder for your FlashBack."},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"1. Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"![GUI](./images/Ui.png)"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"1. Below are some commands you can try, type the command in the command box and press Enter to execute it:"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    * **`help`** : Opens the help window."},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"    * **`add`**`q/ What is the Einstein’s Equation? a/e\u003dmc^2 c/Physics p/High t/ModernPhysics`: Adds a new flashcard named `What is the Einstein\u0027s Equation?` to FlashBack."},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"    * **`delete`**`1`: Deletes the 1st card shown in the current list."},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    * **`clear`**: Deletes all cards. "},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"    * **`exit`**: Exits the application."},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"1. Refer to the Features below for details of each command."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"### Viewing help: `help`"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"Format: `help`"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"zenlyj"},"content":"### Adding a new card: `add`"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"zenlyj"},"content":"Adds a new card to the card list."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"Format: `add q/QUESTION a/ANSWER c/CATEGORY p/PRIORITY [t/TAG]` \u003cbr /\u003e"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"Note: The TAG is optional when adding a new card."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"* `add q/Einstein’s Equation a/e\u003dmc^2 c/Physics p/High`  "},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"* `add q/Independence day of Singapore a/August 9th 1965 c/History p/Mid t/Singapore`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"zenlyj"},"content":"### Editing a card: `edit`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"zenlyj"},"content":"Edits an existing flash card in the card list."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"zenlyj"},"content":"Format: `edit INDEX [q/NEW QUESTION] [a/NEW ANSWER] [c/NEW CATEGORY]` \u003cbr /\u003e"},{"lineNumber":72,"author":{"gitId":"zenlyj"},"content":"`[p/NEW PRIORITY] [t/TAG]`"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"zenlyj"},"content":"* Edits the card at the specified `INDEX`."},{"lineNumber":75,"author":{"gitId":"zenlyj"},"content":"* The index refers to the index number shown in the displayed card list."},{"lineNumber":76,"author":{"gitId":"zenlyj"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":77,"author":{"gitId":"zenlyj"},"content":"* At least 1 updated card field must be provided for modification."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"### Listing all cards : `list`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"Shows all cards in the card list."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"Marc-97"},"content":"### Deleting a card : `delete`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"Deletes the specified card from the card list."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"Marc-97"},"content":"* Deletes the card at the specified `INDEX`."},{"lineNumber":93,"author":{"gitId":"Marc-97"},"content":"* The index refers to the index number shown in the displayed card list."},{"lineNumber":94,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":97,"author":{"gitId":"Marc-97"},"content":"* `list` followed by `delete 2` deletes the 2nd card in the card list."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"linhns"},"content":"### Viewing a card : `view`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"linhns"},"content":"Views a specific card from the card list."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"Format: `view INDEX`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"linhns"},"content":"* Views the flashcard at the specified `INDEX`."},{"lineNumber":106,"author":{"gitId":"linhns"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":107,"author":{"gitId":"linhns"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"Examples:"},{"lineNumber":110,"author":{"gitId":"linhns"},"content":"* `view 1` shows the 1st flashcard (in the displayed flashcard list)."},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"yeoutzer"},"content":"### Finding cards : `find`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"yeoutzer"},"content":"Find cards according to a search criteria containing any of the given keywords."},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"yeoutzer"},"content":"Format: `find CRITERIA KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"yeoutzer"},"content":"* The search is case-insensitive. e.g `equation` will match `Equation`"},{"lineNumber":119,"author":{"gitId":"yeoutzer"},"content":"* The order of the keywords does not matter. e.g. `Newton Equation` will match `Equation Newton`"},{"lineNumber":120,"author":{"gitId":"yeoutzer"},"content":"* The search will be according to the `CRITERIA` given, does not support searching by more than one different criteria:"},{"lineNumber":121,"author":{"gitId":"yeoutzer"},"content":"  * `q/` to search by questions."},{"lineNumber":122,"author":{"gitId":"yeoutzer"},"content":"  * `c/` to search by categories."},{"lineNumber":123,"author":{"gitId":"yeoutzer"},"content":"  * `p/` to search by priorities."},{"lineNumber":124,"author":{"gitId":"yeoutzer"},"content":"  * `t/` to search by tags."},{"lineNumber":125,"author":{"gitId":"yeoutzer"},"content":"* Partial words can be matched when searching by questions or priorities. e.g. `Wh` will match `What?`"},{"lineNumber":126,"author":{"gitId":"yeoutzer"},"content":"* Only full words will be matched when searching by categories or tags. e.g. `Wh` will not match `What?`"},{"lineNumber":127,"author":{"gitId":"yeoutzer"},"content":"* Flashcards matching at least one keyword will be returned. e.g. `find q/ Newton\u0027s Equation` will return flashcards with question of `Newton\u0027s Second Law of Motion` and `Einstein\u0027s Equation`"},{"lineNumber":128,"author":{"gitId":"yeoutzer"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"yeoutzer"},"content":":bulb: **Tip:** You can list all flashcards again by using `list` command"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"yeoutzer"},"content":"\u003c/div\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":135,"author":{"gitId":"yeoutzer"},"content":"* `find q/ equation` will return flashcards with `Equation` or `equation` in its questions."},{"lineNumber":136,"author":{"gitId":"yeoutzer"},"content":"* `find c/ computer` will return flashcards with `computer` in its category.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitId":"yeoutzer"},"content":"![result for `find c/ computer`](images/findComputerResult.png)"},{"lineNumber":138,"author":{"gitId":"yeoutzer"},"content":"* `find p/ low` will return flashcards with `low` as its priority."},{"lineNumber":139,"author":{"gitId":"yeoutzer"},"content":"* `find t/ trivia` will return flashcards with `trivia` in its tags."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"linhns"},"content":"Clears all entries from FlashBack."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"Marc-97"},"content":"### Undo a command : `undo`"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"Marc-97"},"content":"Restore FlashBack to the state before the previous command was executed.  "},{"lineNumber":150,"author":{"gitId":"Marc-97"},"content":"**_NOTE:_**  Only commands that modify FlashBack\u0027s content can be reversed. (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"Marc-97"},"content":"Examples:"},{"lineNumber":153,"author":{"gitId":"Marc-97"},"content":"* `delete 3`  "},{"lineNumber":154,"author":{"gitId":"Marc-97"},"content":"`clear`  "},{"lineNumber":155,"author":{"gitId":"Marc-97"},"content":"`undo` will reverse the `clear` command  "},{"lineNumber":156,"author":{"gitId":"Marc-97"},"content":"`undo` will reverse the `delete 3` command"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"Marc-97"},"content":"Format: `undo`"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"linhns"},"content":"FlashBack data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"linhns"},"content":"FlashBack data are saved as a JSON file `[JAR file location]/data/flashback.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"yeoutzer"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":175,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":176,"author":{"gitId":"yeoutzer"},"content":":exclamation: **Caution:**"},{"lineNumber":177,"author":{"gitId":"linhns"},"content":"If your changes to the data file makes its format invalid, FlashBack will discard all data and start with an empty data file at the next run."},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"vuminhhieunus2019"},"content":"### Filtering cards: `[coming in v1.3]`"},{"lineNumber":182,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":183,"author":{"gitId":"vuminhhieunus2019"},"content":"_Details coming soon ..._"},{"lineNumber":184,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":185,"author":{"gitId":"vuminhhieunus2019"},"content":"### Review mode: `[coming in v1.3]`"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":194,"author":{"gitId":"linhns"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous FlashBack home folder."},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":202,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":203,"author":{"gitId":"vuminhhieunus2019"},"content":"**Add** | `add q/QUESTION a/ANSWER c/CATEGORY p/PRIORITY [t/TAGS]` \u003cbr\u003e e.g., `add q/ What is the Einstein’s Equation? a/e\u003dmc^2 c/Physics p/High t/ModernPhysics`"},{"lineNumber":204,"author":{"gitId":"vuminhhieunus2019"},"content":"**Delete** | `delete INDEX` \u003cbr\u003e e.g., `delete 1`"},{"lineNumber":205,"author":{"gitId":"zenlyj"},"content":"**Edit** | `edit INDEX` \u003cbr\u003e e.g., `edit 3 a/NEW ANSWER p/NEW PRIORITY`"},{"lineNumber":206,"author":{"gitId":"vuminhhieunus2019"},"content":"**View** | `view INDEX` \u003cbr\u003e e.g., `view 2`"},{"lineNumber":207,"author":{"gitId":"yeoutzer"},"content":"**Find** | `find CRITERIA KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find q/ equation`, `find c/ computer science`,\u003cbr\u003e `find p/ low`, `find t/ random`"},{"lineNumber":208,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":209,"author":{"gitId":"Marc-97"},"content":"**Undo** | `undo`"},{"lineNumber":210,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":211,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":212,"author":{"gitId":"vuminhhieunus2019"},"content":"**Exit** | `exit`"},{"lineNumber":213,"author":{"gitId":"linhns"},"content":""}],"authorContributionMap":{"yeoutzer":47,"Marc-97":16,"zenlyj":12,"vuminhhieunus2019":18,"linhns":20,"-":100}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"ecp -\u003e ec ++: index, editFlashcardDescriptor"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"yeoutzer":1,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"title: FlashBack"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103T-T13-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-T13-3/tp/actions/workflows/gradle.yml)"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":""},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T13-3/tp/branch/master/graph/badge.svg?token\u003dAD0F4NRI75)](https://codecov.io/gh/AY2021S2-CS2103T-T13-3/tp)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":"**FlashBack is a desktop application for managing your notes** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Marc-97"},"content":"* If you are interested in using FlashBack, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":"* If you are interested about developing FlashBack, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"* Some codes were adopted from the AddressBook-Level4 project created by the [SE-EDU initiative](https://github.com/se-edu/addressbook-level4). "}],"authorContributionMap":{"Marc-97":5,"linhns":3,"-":14}},{"path":"docs/team/linhns.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"---"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"title: Nguyen Son Linh\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"---"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"## Project: FlashBack"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":""},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"FlashBack - This application will improve the performance of students via improved accessibility and organisation of notes, together with interactive sessions that enhance memory retention."},{"lineNumber":9,"author":{"gitId":"linhns"},"content":""},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"linhns":10}},{"path":"docs/team/marcus.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"title: Marcus\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"## Project: FlashBack"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":"FlashBack is a desktop flashcard application to help improve the performance of students via improved accessibility and organisation of notes, together with interactive sessions that enhance memory retention. The user interacts with it using a CLI. It is written in Java and it has a GUI created with JavaFX."},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"Marc-97":10}},{"path":"docs/team/vuminhhieu.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"---"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"title: Vu Minh Hieu\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"---"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"## Project: FlashBack"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"FlashBack is a desktop flashcard application. The user interacts with it using a CLI, and it has a GUI created with JavaFX."},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"vuminhhieunus2019":10}},{"path":"docs/team/yeoutzer.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"---"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"title: Loo Yeou Tzer\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"---"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"## Project: FlashBack"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"FlashBack - This application will improve the performance of students via improved accessibility and organisation of notes, together with interactive sessions that enhance memory retention."},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"* **New Feature**: Added the ability to find flashcards by different search criteria."},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"  * What it does: allows the user to find flashcards matching the given keywords according to the given search criteria."},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"  * Justification: This feature improves the product significantly because a user may add a huge amount of flashcards in FlashBack which makes it difficult to search for desired flashcards, and the app should provide a way for users to easily search for flashcards the user wish to see."},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"  * Highlights: This enhancement affects existing commands. It required a good understand of existing code to add the ability of finding flashcards by different criteria. The implementation was challenging as it required changes to existing command and test cases."},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"    "},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"* **Documentation**:"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"  * User Guide:"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    * Added documentation for the features `list` and `find`"}],"authorContributionMap":{"yeoutzer":20}},{"path":"docs/team/zenlee.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zenlyj"},"content":"---"},{"lineNumber":2,"author":{"gitId":"zenlyj"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"zenlyj"},"content":"title: Zen\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"zenlyj"},"content":"---"},{"lineNumber":5,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":6,"author":{"gitId":"zenlyj"},"content":"## Project: FlashBack"},{"lineNumber":7,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":8,"author":{"gitId":"zenlyj"},"content":"FlashBack - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":10,"author":{"gitId":"zenlyj"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":12,"author":{"gitId":"zenlyj"},"content":"* **New Feature**: "},{"lineNumber":13,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":14,"author":{"gitId":"zenlyj"},"content":"* **New Feature**:"},{"lineNumber":15,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":16,"author":{"gitId":"zenlyj"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":17,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":18,"author":{"gitId":"zenlyj"},"content":"* **Project management**:"},{"lineNumber":19,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":20,"author":{"gitId":"zenlyj"},"content":"* **Enhancements to existing features**:"},{"lineNumber":21,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":22,"author":{"gitId":"zenlyj"},"content":"* **Documentation**:"},{"lineNumber":23,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":24,"author":{"gitId":"zenlyj"},"content":"* **Community**:"},{"lineNumber":25,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":26,"author":{"gitId":"zenlyj"},"content":"* **Tools**:"},{"lineNumber":27,"author":{"gitId":"zenlyj"},"content":""},{"lineNumber":28,"author":{"gitId":"zenlyj"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"zenlyj":28}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string."},{"lineNumber":155,"author":{"gitId":"-"},"content":" *"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}."},{"lineNumber":171,"author":{"gitId":"-"},"content":" */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"vuminhhieunus2019"},"content":"Simply add the following to [`seedu.address.ui.FlashbackCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`."},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook."}],"authorContributionMap":{"vuminhhieunus2019":1,"-":393}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here."},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":155,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":156,"author":{"gitId":"yeoutzer"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editFlashcardDescriptor);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"       persons.addAll("},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book"}],"authorContributionMap":{"yeoutzer":1,"-":249}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"zenlyj"},"content":"import seedu.address.storage.FlashBackStorage;"},{"lineNumber":26,"author":{"gitId":"zenlyj"},"content":"import seedu.address.storage.JsonFlashBackStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"zenlyj"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FlashBack ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"zenlyj"},"content":"        FlashBackStorage flashBackStorage \u003d new JsonFlashBackStorage(userPrefs.getFlashBackFilePath());"},{"lineNumber":60,"author":{"gitId":"zenlyj"},"content":"        storage \u003d new StorageManager(flashBackStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"zenlyj"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s FlashBack and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"zenlyj"},"content":"     * The data from the sample FlashBack will be used instead if {@code storage}\u0027s FlashBack is not found,"},{"lineNumber":74,"author":{"gitId":"zenlyj"},"content":"     * or an empty FlashBack will be used instead if errors occur when reading {@code storage}\u0027s FlashBack."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"zenlyj"},"content":"        Optional\u003cReadOnlyFlashBack\u003e flashBackOptional;"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        ReadOnlyFlashBack initialData;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"zenlyj"},"content":"            flashBackOptional \u003d storage.readFlashBack();"},{"lineNumber":81,"author":{"gitId":"zenlyj"},"content":"            if (!flashBackOptional.isPresent()) {"},{"lineNumber":82,"author":{"gitId":"zenlyj"},"content":"                logger.info(\"Data file not found. Will be starting with a sample FlashBack\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"zenlyj"},"content":"            initialData \u003d flashBackOptional.orElseGet(SampleDataUtil::getSampleFlashBack);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":86,"author":{"gitId":"zenlyj"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty FlashBack\");"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"            initialData \u003d new FlashBack();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"zenlyj"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty FlashBack\");"},{"lineNumber":90,"author":{"gitId":"linhns"},"content":"            initialData \u003d new FlashBack();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":154,"author":{"gitId":"zenlyj"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty FlashBack\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":170,"author":{"gitId":"zenlyj"},"content":"        logger.info(\"Starting FlashBack \" + MainApp.VERSION);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":176,"author":{"gitId":"zenlyj"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FlashBack ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":18,"linhns":5,"-":160}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    private static final String LOG_FILE \u003d \"flashback.log\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":1,"-":111}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"%1$d flashcards listed!\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"linhns":2,"-":11}},{"path":"src/main/java/seedu/address/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class CollectionUtil {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"     * Returns true if the {@code tags} contains the {@code word}."},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"     *       Set\u0026#60;Tag\u0026#62; tags \u003d new HashSet\u003c\u003e(Arrays.asList(\"ABc\", \"def\"));"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"     *       containsWordIgnoreCase(tags, \"abc\") \u003d\u003d true"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"     *       containsWordIgnoreCase(tags, \"DEF\") \u003d\u003d true"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"     *       containsWordIgnoreCase(tags, \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"     * @param tags cannot be null"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"    public static boolean tagContainsWordIgnoreCase(Set\u003cTag\u003e tags, String word) {"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(tags);"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(word);"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        String[] wordsInTagSet \u003d tagsToStringArray(tags);"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"        return Arrays.stream(wordsInTagSet)"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"     * Returns a string array converted from a set of tags."},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"     * @param tags set of tags to be converted into string array"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"     * @return string array converted from set of tags"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"    public static String[] tagsToStringArray(Set\u003cTag\u003e tags) {"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        String[] stringArr \u003d new String[tags.size()];"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"        int i \u003d 0;"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"        for (Tag tag : tags) {"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"            stringArr[i] \u003d tag.tagName;"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"            i++;"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        return stringArr;"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":49,"-":35}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    public static boolean sentenceContainsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"     *   Ignores case and a full word match is not required."},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"     *       containsPartWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"     *       containsPartWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"     *       containsPartWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"     * @param sentence cannot be null"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"    public static boolean sentenceContainsPartWordIgnoreCase(String sentence, String word) {"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(sentence);"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(word);"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        preppedWord \u003d preppedWord.toLowerCase();"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        String preppedSentence \u003d sentence.toLowerCase();"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"        return preppedSentence.contains(preppedWord);"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(t);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(s);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":26,"-":67}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"     * @see seedu.address.model.Model#getFlashBack()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    ReadOnlyFlashBack getFlashBack();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    Path getFlashBackFilePath();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":3,"linhns":3,"-":44}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.logic.parser.FlashBackParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final FlashBackParser flashBackParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"        flashBackParser \u003d new FlashBackParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        Command command \u003d flashBackParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"zenlyj"},"content":"            storage.saveFlashBack(model.getFlashBack());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ReadOnlyFlashBack getFlashBack() {"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"        return model.getFlashBack();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"        return model.getFilteredFlashcardList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Path getFlashBackFilePath() {"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"        return model.getFlashBackFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":7,"zenlyj":1,"linhns":5,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to FlashBack. \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"            + PREFIX_QUESTION + \"QUESTION \""},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"            + PREFIX_ANSWER + \"ANSWER \""},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"            + PREFIX_CATEGORY + \"CATEGORY \""},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"            + PREFIX_QUESTION + \"Who is the author of Romeo and Juliet? \""},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"            + PREFIX_ANSWER + \"William Shakespeare \""},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"            + PREFIX_CATEGORY + \"English Literature \""},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"            + PREFIX_PRIORITY + \"Mid \""},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"            + PREFIX_TAG + \"tragedy\";"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added:\\n %1$s\";"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This card already exists in FlashBack.\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    private final Flashcard toAdd;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Creates an AddCommand to add the specified {@code Flashcard}"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"    public AddCommand(Flashcard flashcard) {"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        requireNonNull(flashcard);"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        toAdd \u003d flashcard;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"        if (model.hasFlashcard(toAdd)) {"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"        model.addFlashcard(toAdd);"},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":"        model.commitFlashBack();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Marc-97":1,"vuminhhieunus2019":6,"linhns":19,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":" * Clears all the cards in FlashBack."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"FlashBack has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"        model.setFlashBack(new FlashBack());"},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":"        model.commitFlashBack();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Marc-97":1,"vuminhhieunus2019":1,"linhns":3,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    private static final int DEFAULT_INDEX \u003d -1;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** The application should exit. */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Turn on the view mode."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final boolean showView;"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Get the index of the card to show to the user."},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final int index;"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The application enters review mode."},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final boolean reviewMode;"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean reviewMode) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.showView \u003d false;"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.index \u003d DEFAULT_INDEX;"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.reviewMode \u003d reviewMode;"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Constructs a {@code CommandResult} with the specified fields {@code feedbackToUser, index},"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"     * and other fields set to their default value."},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Uses for View Command."},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"    public CommandResult(String feedbackToUser, int index) {"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.showHelp \u003d false;"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.exit \u003d false;"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.showView \u003d true;"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.index \u003d index;"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.reviewMode \u003d false;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"        this(feedbackToUser, false, false, false);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"    public int getIndex() {"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"        return index;"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"    public boolean isShowView() {"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"        return showView;"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":42,"-":69}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":" * Deletes a flashcard identified using it\u0027s displayed index from the FlashBack."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"            + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Flashcard: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"        Flashcard flashcardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        model.deleteFlashcard(flashcardToDelete);"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"        model.commitFlashBack();"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Marc-97":1,"vuminhhieunus2019":4,"linhns":5,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Answer;"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Category;"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Priority;"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Question;"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Remark;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"zenlyj"},"content":" * Edits the details of an existing card in Flashback."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"zenlyj"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the card identified \""},{"lineNumber":38,"author":{"gitId":"zenlyj"},"content":"            + \"by the index number used in the displayed card list. \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":41,"author":{"gitId":"zenlyj"},"content":"            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""},{"lineNumber":42,"author":{"gitId":"zenlyj"},"content":"            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""},{"lineNumber":43,"author":{"gitId":"zenlyj"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""},{"lineNumber":44,"author":{"gitId":"zenlyj"},"content":"            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":47,"author":{"gitId":"zenlyj"},"content":"            + PREFIX_QUESTION + \"Who is the chess champion? \""},{"lineNumber":48,"author":{"gitId":"zenlyj"},"content":"            + PREFIX_ANSWER + \"Magnus Carlsen\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited Card: %1$s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":52,"author":{"gitId":"zenlyj"},"content":"    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in Flashback!.\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":55,"author":{"gitId":"zenlyj"},"content":"    private final EditCardDescriptor editCardDescriptor;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"zenlyj"},"content":"     * @param index of the card in the filtered card list to edit"},{"lineNumber":59,"author":{"gitId":"zenlyj"},"content":"     * @param editCardDescriptor details to edit the card with"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"zenlyj"},"content":"    public EditCommand(Index index, EditCardDescriptor editCardDescriptor) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":63,"author":{"gitId":"zenlyj"},"content":"        requireNonNull(editCardDescriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":66,"author":{"gitId":"zenlyj"},"content":"        this.editCardDescriptor \u003d new EditCardDescriptor(editCardDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"zenlyj"},"content":"        Flashcard editedFlashcard \u003d createEditedCard(flashcardToEdit, editCardDescriptor);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"zenlyj"},"content":"        if (!flashcardToEdit.isSameCard(editedFlashcard) \u0026\u0026 model.hasFlashcard(editedFlashcard)) {"},{"lineNumber":82,"author":{"gitId":"zenlyj"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CARD);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"        model.setFlashcard(flashcardToEdit, editedFlashcard);"},{"lineNumber":86,"author":{"gitId":"Marc-97"},"content":"        model.commitFlashBack();"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":88,"author":{"gitId":"zenlyj"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedFlashcard));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"zenlyj"},"content":"     * Creates and returns a {@code Flashcard} with the details of {@code flashcardToEdit}"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"zenlyj"},"content":"    private static Flashcard createEditedCard(Flashcard flashcardToEdit, EditCardDescriptor editCardDescriptor) {"},{"lineNumber":96,"author":{"gitId":"linhns"},"content":"        assert flashcardToEdit !\u003d null;"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"zenlyj"},"content":"        Question updatedQuestion \u003d editCardDescriptor.getQuestion().orElse(flashcardToEdit.getQuestion());"},{"lineNumber":99,"author":{"gitId":"zenlyj"},"content":"        Answer updatedAnswer \u003d editCardDescriptor.getAnswer().orElse(flashcardToEdit.getAnswer());"},{"lineNumber":100,"author":{"gitId":"zenlyj"},"content":"        Category updatedCategory \u003d editCardDescriptor.getCategory().orElse(flashcardToEdit.getCategory());"},{"lineNumber":101,"author":{"gitId":"zenlyj"},"content":"        Priority updatedPriority \u003d editCardDescriptor.getPriority().orElse(flashcardToEdit.getPriority());"},{"lineNumber":102,"author":{"gitId":"linhns"},"content":"        Remark updatedRemark \u003d flashcardToEdit.getRemark();"},{"lineNumber":103,"author":{"gitId":"zenlyj"},"content":"        Set\u003cTag\u003e updatedTags \u003d editCardDescriptor.getTags().orElse(flashcardToEdit.getTags());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"vuminhhieunus2019"},"content":"        return new Flashcard(updatedQuestion, updatedAnswer, updatedCategory,"},{"lineNumber":106,"author":{"gitId":"vuminhhieunus2019"},"content":"                updatedPriority, updatedRemark, updatedTags);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":124,"author":{"gitId":"zenlyj"},"content":"                \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"zenlyj"},"content":"     * Stores the details to edit the card with. Each non-empty field value will replace the"},{"lineNumber":129,"author":{"gitId":"zenlyj"},"content":"     * corresponding field value of the card."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"zenlyj"},"content":"    public static class EditCardDescriptor {"},{"lineNumber":132,"author":{"gitId":"linhns"},"content":"        private Question question;"},{"lineNumber":133,"author":{"gitId":"linhns"},"content":"        private Answer answer;"},{"lineNumber":134,"author":{"gitId":"linhns"},"content":"        private Category category;"},{"lineNumber":135,"author":{"gitId":"linhns"},"content":"        private Priority priority;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"zenlyj"},"content":"        public EditCardDescriptor() {}"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":142,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":143,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":144,"author":{"gitId":"zenlyj"},"content":"        public EditCardDescriptor(EditCardDescriptor toCopy) {"},{"lineNumber":145,"author":{"gitId":"zenlyj"},"content":"            setQuestion(toCopy.question);"},{"lineNumber":146,"author":{"gitId":"zenlyj"},"content":"            setAnswer(toCopy.answer);"},{"lineNumber":147,"author":{"gitId":"zenlyj"},"content":"            setCategory(toCopy.category);"},{"lineNumber":148,"author":{"gitId":"zenlyj"},"content":"            setPriority(toCopy.priority);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":154,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":156,"author":{"gitId":"linhns"},"content":"            return CollectionUtil.isAnyNonNull(question, answer, category, priority, tags);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"zenlyj"},"content":"        public void setQuestion(Question question) {"},{"lineNumber":160,"author":{"gitId":"linhns"},"content":"            this.question \u003d question;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"zenlyj"},"content":"        public Optional\u003cQuestion\u003e getQuestion() {"},{"lineNumber":164,"author":{"gitId":"linhns"},"content":"            return Optional.ofNullable(question);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"zenlyj"},"content":"        public void setAnswer(Answer answer) {"},{"lineNumber":168,"author":{"gitId":"linhns"},"content":"            this.answer \u003d answer;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"zenlyj"},"content":"        public Optional\u003cAnswer\u003e getAnswer() {"},{"lineNumber":172,"author":{"gitId":"linhns"},"content":"            return Optional.ofNullable(answer);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"zenlyj"},"content":"        public void setCategory(Category category) {"},{"lineNumber":176,"author":{"gitId":"linhns"},"content":"            this.category \u003d category;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"zenlyj"},"content":"        public Optional\u003cCategory\u003e getCategory() {"},{"lineNumber":180,"author":{"gitId":"linhns"},"content":"            return Optional.ofNullable(category);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"zenlyj"},"content":"        public void setPriority(Priority priority) {"},{"lineNumber":184,"author":{"gitId":"linhns"},"content":"            this.priority \u003d priority;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"zenlyj"},"content":"        public Optional\u003cPriority\u003e getPriority() {"},{"lineNumber":188,"author":{"gitId":"linhns"},"content":"            return Optional.ofNullable(priority);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":193,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":194,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":203,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":216,"author":{"gitId":"zenlyj"},"content":"            if (!(other instanceof EditCardDescriptor)) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":221,"author":{"gitId":"zenlyj"},"content":"            EditCardDescriptor e \u003d (EditCardDescriptor) other;"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"zenlyj"},"content":"            return getQuestion().equals(e.getQuestion())"},{"lineNumber":224,"author":{"gitId":"zenlyj"},"content":"                    \u0026\u0026 getAnswer().equals(e.getAnswer())"},{"lineNumber":225,"author":{"gitId":"zenlyj"},"content":"                    \u0026\u0026 getCategory().equals(e.getCategory())"},{"lineNumber":226,"author":{"gitId":"zenlyj"},"content":"                    \u0026\u0026 getPriority().equals(e.getPriority())"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Marc-97":1,"vuminhhieunus2019":7,"zenlyj":52,"linhns":26,"-":144}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting FlashBack as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":1,"linhns":1,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/FindCategoryCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.CategoryContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":" * Finds and lists all flashcards in FlashBack with category containing any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"public class FindCategoryCommand extends FindCommand {"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    private final CategoryContainsKeywordsPredicate predicate;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    public FindCategoryCommand(CategoryContainsKeywordsPredicate predicate) {"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"        model.updateFilteredFlashcardList(predicate);"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"        return new CommandResult("},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"                || (other instanceof FindCategoryCommand // instanceof handles nulls"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 predicate.equals(((FindCategoryCommand) other).predicate)); // state check"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":34}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":" * Finds and lists all flashcards in FlashBack with a search criteria containing any of the argument keywords."},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"public abstract class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all flashcards with a search criteria \""},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"            + \"that contains any of the specified keywords (case-insensitive) \""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"            + \"and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"            + \"Parameters:  CRITERIA KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"            + \"CRITERIA: \" + PREFIX_QUESTION + \" for questions, \" + PREFIX_CATEGORY + \" for category, \""},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"            + PREFIX_TAG + \" for tags, or \" + PREFIX_PRIORITY + \" for priority.\\n\""},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_QUESTION + \" equation\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":13,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/FindPriorityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.PriorityContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":" * Finds and lists all flashcards in FlashBack with priority containing any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"public class FindPriorityCommand extends FindCommand {"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    private final PriorityContainsKeywordsPredicate predicate;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    public FindPriorityCommand(PriorityContainsKeywordsPredicate predicate) {"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"        model.updateFilteredFlashcardList(predicate);"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"        return new CommandResult("},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"                || (other instanceof FindPriorityCommand // instanceof handles nulls"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 predicate.equals(((FindPriorityCommand) other).predicate)); // state check"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":34}},{"path":"src/main/java/seedu/address/logic/commands/FindQuestionCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.QuestionContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":" * Finds and lists all flashcards in FlashBack with question containing any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"public class FindQuestionCommand extends FindCommand {"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    private final QuestionContainsKeywordsPredicate predicate;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    public FindQuestionCommand(QuestionContainsKeywordsPredicate predicate) {"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"        model.updateFilteredFlashcardList(predicate);"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"        return new CommandResult("},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"                || (other instanceof FindQuestionCommand // instanceof handles nulls"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 predicate.equals(((FindQuestionCommand) other).predicate)); // state check"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":34}},{"path":"src/main/java/seedu/address/logic/commands/FindTagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":" * Finds and lists all flashcards in FlashBack with tags containing any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"public class FindTagCommand extends FindCommand {"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    public FindTagCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"        model.updateFilteredFlashcardList(predicate);"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"        return new CommandResult("},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"                || (other instanceof FindTagCommand // instanceof handles nulls"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 predicate.equals(((FindTagCommand) other).predicate)); // state check"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":34}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":" * Lists all flashcards in the FlashBack to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":2,"linhns":2,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Remark;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Remark remark;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"        Flashcard editedFlashcard \u003d new Flashcard(flashcardToEdit.getQuestion(),"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"                flashcardToEdit.getAnswer(), flashcardToEdit.getCategory(),"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"                flashcardToEdit.getPriority(), remark, flashcardToEdit.getTags());"},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"        model.setFlashcard(flashcardToEdit, editedFlashcard);"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"        return new CommandResult(generateSuccessMessage(editedFlashcard));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * {@code personToEdit}."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"    private String generateSuccessMessage(Flashcard flashcardToEdit) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"        return String.format(message, flashcardToEdit);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":3,"linhns":15,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":"/*"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@@author marc-97-reused"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Reused from"},{"lineNumber":11,"author":{"gitId":"-"},"content":"https://github.com/se-edu/addressbook-level4/blob/master/src/main/java/seedu/address/logic/commands/UndoCommand.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"with minor modification"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Undo an action in FlashBack."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"FlashBack has been undo!\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No commands to undo!\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        if (!model.canUndoFlashBack()) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.undoFlashBack();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        model.updateFilteredFlashcardList(Model.PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":"//@author"}],"authorContributionMap":{"Marc-97":8,"-":28}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"public class ViewCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Viewed Flashcard: \\n%1$s\";"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String MESSAGE_USAGE \u003d"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"            \"Views the flashcard identified by the index number used in the displayed flashcard list. \""},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"            + \"\\n\" + \"Parameters: INDEX (must be a positive integer)\""},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"            + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Index index;"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Creates a ViewCommand to view a flashcard at a specified {@code index}"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ViewCommand(Index index) {"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"        requireNonNull(index);"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.index \u003d index;"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"        requireNonNull(model);"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        List\u003cFlashcard\u003e list \u003d model.getFilteredFlashcardList();"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (index.getZeroBased() \u003e\u003d list.size()) {"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"        Flashcard viewCard \u003d list.get(index.getZeroBased());"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"        return new CommandResult(String.format(MESSAGE_VIEW_SUCCESS, viewCard), index.getZeroBased());"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"            return true;"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (!(obj instanceof ViewCommand)) {"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"            return false;"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"            ViewCommand other \u003d (ViewCommand) obj;"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"            return this.index.equals(other.index);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":53}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Answer;"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Category;"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Priority;"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Question;"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Remark;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_QUESTION,"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"                PREFIX_ANSWER, PREFIX_CATEGORY, PREFIX_PRIORITY, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_PRIORITY, PREFIX_ANSWER, PREFIX_CATEGORY)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Remark remark \u003d new Remark(\"\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"        Flashcard flashcard \u003d new Flashcard(question, answer, category, priority, remark, tagList);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"        return new AddCommand(flashcard);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":7,"linhns":12,"-":43}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"linhns":4,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"zenlyj"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_QUESTION,"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"                PREFIX_ANSWER, PREFIX_CATEGORY, PREFIX_PRIORITY, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"zenlyj"},"content":"        EditCardDescriptor editCardDescriptor \u003d new EditCardDescriptor();"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"zenlyj"},"content":"            editCardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"            editCardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"},{"lineNumber":53,"author":{"gitId":"zenlyj"},"content":"            editCardDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"},{"lineNumber":56,"author":{"gitId":"zenlyj"},"content":"            editCardDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"zenlyj"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCardDescriptor::setTags);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"zenlyj"},"content":"        if (!editCardDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"zenlyj"},"content":"        return new EditCommand(index, editCardDescriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":4,"zenlyj":9,"linhns":6,"-":63}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindCategoryCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindPriorityCommand;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindQuestionCommand;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.CategoryContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.PriorityContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.QuestionContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"     * and returns a correct FindCommand object according to criteria for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"        if (trimmedArgs.isEmpty() || trimmedArgs.length() \u003c 2) {"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"            throw new ParseException("},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"        String searchCriteria \u003d trimmedArgs.substring(0, 2);"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        trimmedArgs \u003d trimmedArgs.substring(2).trim();"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        if (invalidSearchCriteria(searchCriteria) || trimmedArgs.isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":43,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"        return findCommandByCriteria(searchCriteria, nameKeywords);"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"     * Returns a boolean stating whether the search criteria is valid."},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"     * @param searchCriteria Field that the user wants to search by."},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"     * @return True if search criteria is not valid. False if search criteria is valid."},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"    public boolean invalidSearchCriteria(String searchCriteria) {"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        return !isQuestion(searchCriteria)"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 !isCategory(searchCriteria)"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 !isTag(searchCriteria)"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 !isPriority(searchCriteria);"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"     * Returns a boolean stating whether the search criteria is according to question."},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"     * @param searchCriteria Field that the user wants to search by."},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"     * @return True if search criteria is according to question. False otherwise."},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"    public boolean isQuestion(String searchCriteria) {"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        return searchCriteria.equals(PREFIX_QUESTION.getPrefix());"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"     * Returns a boolean stating whether the search criteria is according to category."},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"     * @param searchCriteria Field that the user wants to search by."},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"     * @return True if search criteria is according to category. False otherwise."},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"    public boolean isCategory(String searchCriteria) {"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        return searchCriteria.equals(PREFIX_CATEGORY.getPrefix());"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"     * Returns a boolean stating whether the search criteria is according to tag."},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"     * @param searchCriteria Field that the user wants to search by."},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"     * @return True if search criteria is according to tag. False otherwise."},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"    public boolean isTag(String searchCriteria) {"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        return searchCriteria.equals(PREFIX_TAG.getPrefix());"},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"     * Returns a boolean stating whether the search criteria is according to priority."},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":"     * @param searchCriteria Field that the user wants to search by."},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":"     * @return True if search criteria is according to tag. False otherwise."},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"    public boolean isPriority(String searchCriteria) {"},{"lineNumber":101,"author":{"gitId":"yeoutzer"},"content":"        return searchCriteria.equals(PREFIX_PRIORITY.getPrefix());"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":104,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"yeoutzer"},"content":"     * Returns the FindCommand object according to the search criteria."},{"lineNumber":106,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"yeoutzer"},"content":"     * @param searchCriteria Field that the user wants to search by."},{"lineNumber":108,"author":{"gitId":"yeoutzer"},"content":"     * @param nameKeywords Keywords the user wish to search by."},{"lineNumber":109,"author":{"gitId":"yeoutzer"},"content":"     * @return The FindCommand object according to the search criteria."},{"lineNumber":110,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"yeoutzer"},"content":"    public FindCommand findCommandByCriteria(String searchCriteria, String[] nameKeywords) {"},{"lineNumber":112,"author":{"gitId":"yeoutzer"},"content":"        if (isQuestion(searchCriteria)) {"},{"lineNumber":113,"author":{"gitId":"yeoutzer"},"content":"            return new FindQuestionCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":114,"author":{"gitId":"yeoutzer"},"content":"        } else if (isCategory(searchCriteria)) {"},{"lineNumber":115,"author":{"gitId":"yeoutzer"},"content":"            return new FindCategoryCommand(new CategoryContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":116,"author":{"gitId":"yeoutzer"},"content":"        } else if (isTag(searchCriteria)) {"},{"lineNumber":117,"author":{"gitId":"yeoutzer"},"content":"            return new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":118,"author":{"gitId":"yeoutzer"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"yeoutzer"},"content":"            return new FindPriorityCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":120,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":93,"linhns":1,"-":29}},{"path":"src/main/java/seedu/address/logic/parser/FlashBackParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.logic.commands.*;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"public class FlashBackParser {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"        //case RemarkCommand.COMMAND_WORD: return new RemarkCommandParser().parse(arguments);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"            return new UndoCommand();"},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Marc-97":3,"vuminhhieunus2019":6,"-":65}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Answer;"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Category;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Priority;"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Question;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"     * Parses a {@code String question} into a {@code Name}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"     * @throws ParseException if the given {@code question} is invalid."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"    public static Question parseQuestion(String question) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        requireNonNull(question);"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"        String trimmedQuestion \u003d question.trim();"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        if (!Question.isValidQuestion(trimmedQuestion)) {"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"        return new Question(trimmedQuestion);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"     * Parses a {@code String answer} into a {@code Phone}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"     * @throws ParseException if the given {@code answer} is invalid."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"    public static Answer parseAnswer(String answer) throws ParseException {"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"        requireNonNull(answer);"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"        String trimmedAnswer \u003d answer.trim();"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"        if (!Answer.isValidAnswer(trimmedAnswer)) {"},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":""},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"        return new Answer(trimmedAnswer);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"     * Parses a {@code String priority} into an {@code Address}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"     * @throws ParseException if the given {@code priority} is invalid."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"    public static Priority parsePriority(String priority) throws ParseException {"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"        requireNonNull(priority);"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"        String trimmedPriority \u003d priority.trim();"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        if (!Priority.isValidPriority(trimmedPriority)) {"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"        return new Priority(trimmedPriority);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"     * Parses a {@code String priority} into an {@code Email}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"linhns"},"content":"     * @throws ParseException if the given {@code priority} is invalid."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"linhns"},"content":"    public static Category parseCategory(String priority) throws ParseException {"},{"lineNumber":91,"author":{"gitId":"linhns"},"content":"        requireNonNull(priority);"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":"        String trimmedCategory \u003d priority.trim();"},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"        if (!Category.isValidCategory(trimmedCategory)) {"},{"lineNumber":94,"author":{"gitId":"linhns"},"content":"            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"linhns"},"content":"        return new Category(trimmedCategory);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":2,"linhns":35,"-":88}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Remark;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                PREFIX_REMARK);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new RemarkCommand(index, new Remark(remark));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"linhns":5,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"            return new ViewCommand(index);"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (ParseException pe) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new ParseException("},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":20}},{"path":"src/main/java/seedu/address/model/FlashBack.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.UniqueFlashcardList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"zenlyj"},"content":" * Wraps all data at the FlashBack level"},{"lineNumber":13,"author":{"gitId":"zenlyj"},"content":" * Duplicates are not allowed (by .isSameCard comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"public class FlashBack implements ReadOnlyFlashBack {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"zenlyj"},"content":"    private final UniqueFlashcardList flashcards;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"zenlyj"},"content":"        flashcards \u003d new UniqueFlashcardList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"    public FlashBack() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"zenlyj"},"content":"     * Creates an FlashBack using the cards in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"    public FlashBack(ReadOnlyFlashBack toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"zenlyj"},"content":"     * Replaces the contents of the card list with {@code flashcards}."},{"lineNumber":44,"author":{"gitId":"zenlyj"},"content":"     * {@code flashcards} must not contain duplicate flash cards."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"zenlyj"},"content":"    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"},{"lineNumber":47,"author":{"gitId":"zenlyj"},"content":"        this.flashcards.setCards(flashcards);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"zenlyj"},"content":"     * Resets the existing data of this {@code FlashCard} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"    public void resetData(ReadOnlyFlashBack newData) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"zenlyj"},"content":"        setFlashcards(newData.getCardList());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"zenlyj"},"content":"    //// card-level operations"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"zenlyj"},"content":"     * Returns true if a card with the same identity as {@code flashcard} exists in FlashBack"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"zenlyj"},"content":"    public boolean hasCard(Flashcard flashcard) {"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"        requireNonNull(flashcard);"},{"lineNumber":65,"author":{"gitId":"zenlyj"},"content":"        return flashcards.contains(flashcard);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"zenlyj"},"content":"     * Adds a card to FlashBack."},{"lineNumber":70,"author":{"gitId":"zenlyj"},"content":"     * The card must not already exist in FlashBack."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"zenlyj"},"content":"    public void addCard(Flashcard p) {"},{"lineNumber":73,"author":{"gitId":"zenlyj"},"content":"        flashcards.add(p);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"zenlyj"},"content":"     * Replaces the given card {@code target} in the list with {@code editedFlashcard}."},{"lineNumber":78,"author":{"gitId":"zenlyj"},"content":"     * {@code target} must exist in FlashBack."},{"lineNumber":79,"author":{"gitId":"zenlyj"},"content":"     * The card identity of {@code editedFlashcard} must not be the same as another existing card in FlashBack."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"zenlyj"},"content":"    public void setCard(Flashcard target, Flashcard editedFlashcard) {"},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"        requireNonNull(editedFlashcard);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"zenlyj"},"content":"        flashcards.setCard(target, editedFlashcard);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"zenlyj"},"content":"     * Removes {@code key} from this {@code FlashBack}."},{"lineNumber":89,"author":{"gitId":"zenlyj"},"content":"     * {@code key} must exist in FlashBack."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"zenlyj"},"content":"    public void removeCard(Flashcard key) {"},{"lineNumber":92,"author":{"gitId":"zenlyj"},"content":"        flashcards.remove(key);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":99,"author":{"gitId":"zenlyj"},"content":"        return flashcards.asUnmodifiableObservableList().size() + \" cards\";"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"zenlyj"},"content":"    public ObservableList\u003cFlashcard\u003e getCardList() {"},{"lineNumber":105,"author":{"gitId":"zenlyj"},"content":"        return flashcards.asUnmodifiableObservableList();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitId":"linhns"},"content":"                || (other instanceof FlashBack // instanceof handles nulls"},{"lineNumber":112,"author":{"gitId":"zenlyj"},"content":"                \u0026\u0026 flashcards.equals(((FlashBack) other).flashcards));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":117,"author":{"gitId":"zenlyj"},"content":"        return flashcards.hashCode();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":33,"linhns":9,"-":77}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"zenlyj"},"content":"     * Returns the user prefs\u0027 FlashBack file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"    Path getFlashBackFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"zenlyj"},"content":"     * Sets the user prefs\u0027 FlashBack file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"zenlyj"},"content":"    void setFlashBackFilePath(Path flashBackFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"zenlyj"},"content":"     * Replaces FlashBack data with the data in {@code flashBack}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"    void setFlashBack(ReadOnlyFlashBack flashBack);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"zenlyj"},"content":"    /** Returns the FlashBack */"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"    ReadOnlyFlashBack getFlashBack();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"zenlyj"},"content":"     * Returns true if a flash card with the same identity as {@code flashcard} exists in FlashBack."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"    boolean hasFlashcard(Flashcard flashcard);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"zenlyj"},"content":"     * Deletes the given flash card."},{"lineNumber":62,"author":{"gitId":"zenlyj"},"content":"     * The flash card must exist in FlashBack"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"    void deleteFlashcard(Flashcard target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"zenlyj"},"content":"     * Adds the given flash card."},{"lineNumber":68,"author":{"gitId":"zenlyj"},"content":"     * {@code flashcard} must not already exist in FlashBack"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"    void addFlashcard(Flashcard flashcard);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"zenlyj"},"content":"     * Replaces the given flash card {@code target} with {@code editedFlashcard}."},{"lineNumber":74,"author":{"gitId":"zenlyj"},"content":"     * {@code target} must exist in FlashBack."},{"lineNumber":75,"author":{"gitId":"zenlyj"},"content":"     * The flash card identity of {@code editedFlashCard} must not be the same as another existing card in FlashBack."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"zenlyj"},"content":"    /** Returns an unmodifiable view of the filtered card list */"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"zenlyj"},"content":"     * Updates the filter of the filtered card list to filter by the given {@code predicate}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"},{"lineNumber":87,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Marc-97"},"content":"     * Returns true if the model can be undo"},{"lineNumber":90,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Marc-97"},"content":"    boolean canUndoFlashBack();"},{"lineNumber":92,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":93,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Marc-97"},"content":"     * Saves the current FlashBack state for undo."},{"lineNumber":95,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Marc-97"},"content":"    void commitFlashBack();"},{"lineNumber":97,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":98,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"Marc-97"},"content":"     * Restores FlashBack to its previous state."},{"lineNumber":100,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"Marc-97"},"content":"    void undoFlashBack();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Marc-97":15,"zenlyj":16,"linhns":10,"-":61}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"zenlyj"},"content":" * Represents the in-memory model of the FlashBack data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"    private final VersionedFlashBack versionedFlashBack;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"zenlyj"},"content":"     * Initializes a ModelManager with the given flashBack and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ModelManager(ReadOnlyFlashBack flashBack, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        requireAllNonNull(flashBack, userPrefs);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"zenlyj"},"content":"        logger.fine(\"Initializing with FlashBack: \" + flashBack + \" and user prefs \" + userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"        this.versionedFlashBack \u003d new VersionedFlashBack(flashBack);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.versionedFlashBack.getCardList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"        this(new FlashBack(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"    public Path getFlashBackFilePath() {"},{"lineNumber":70,"author":{"gitId":"zenlyj"},"content":"        return userPrefs.getFlashBackFilePath();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"    public void setFlashBackFilePath(Path addressBookFilePath) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":76,"author":{"gitId":"zenlyj"},"content":"        userPrefs.setFlashBackFilePath(addressBookFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"zenlyj"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashBack \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"zenlyj"},"content":"    public void setFlashBack(ReadOnlyFlashBack flashBack) {"},{"lineNumber":83,"author":{"gitId":"Marc-97"},"content":"        this.versionedFlashBack.resetData(flashBack);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"    public ReadOnlyFlashBack getFlashBack() {"},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"        return versionedFlashBack;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":"    public boolean hasFlashcard(Flashcard flashcard) {"},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"        requireNonNull(flashcard);"},{"lineNumber":94,"author":{"gitId":"Marc-97"},"content":"        return versionedFlashBack.hasCard(flashcard);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"linhns"},"content":"    public void deleteFlashcard(Flashcard target) {"},{"lineNumber":99,"author":{"gitId":"Marc-97"},"content":"        versionedFlashBack.removeCard(target);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"    public void addFlashcard(Flashcard flashcard) {"},{"lineNumber":104,"author":{"gitId":"Marc-97"},"content":"        versionedFlashBack.addCard(flashcard);"},{"lineNumber":105,"author":{"gitId":"linhns"},"content":"        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"},{"lineNumber":110,"author":{"gitId":"linhns"},"content":"        requireAllNonNull(target, editedFlashcard);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"Marc-97"},"content":"        versionedFlashBack.setCard(target, editedFlashcard);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"zenlyj"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"zenlyj"},"content":"     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"},{"lineNumber":119,"author":{"gitId":"zenlyj"},"content":"     * {@code versionedFlashBack}"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"linhns"},"content":"    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"},{"lineNumber":123,"author":{"gitId":"linhns"},"content":"        return filteredFlashcards;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"linhns"},"content":"    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":129,"author":{"gitId":"linhns"},"content":"        filteredFlashcards.setPredicate(predicate);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":146,"author":{"gitId":"Marc-97"},"content":"        return versionedFlashBack.equals(other.versionedFlashBack)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":148,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"Marc-97"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"Marc-97"},"content":"    public void commitFlashBack() {"},{"lineNumber":153,"author":{"gitId":"Marc-97"},"content":"        versionedFlashBack.commit();"},{"lineNumber":154,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":156,"author":{"gitId":"Marc-97"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"Marc-97"},"content":"    public boolean canUndoFlashBack() {"},{"lineNumber":158,"author":{"gitId":"Marc-97"},"content":"        return versionedFlashBack.canUndo();"},{"lineNumber":159,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":161,"author":{"gitId":"Marc-97"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"Marc-97"},"content":"    public void undoFlashBack() {"},{"lineNumber":163,"author":{"gitId":"Marc-97"},"content":"        versionedFlashBack.undo();"},{"lineNumber":164,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Marc-97":24,"zenlyj":10,"vuminhhieunus2019":2,"linhns":18,"-":111}},{"path":"src/main/java/seedu/address/model/ReadOnlyFlashBack.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zenlyj"},"content":" * Unmodifiable view of FlashBack"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"public interface ReadOnlyFlashBack {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zenlyj"},"content":"     * Returns an unmodifiable view of the cards list."},{"lineNumber":13,"author":{"gitId":"zenlyj"},"content":"     * This list will not contain any duplicate cards."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"zenlyj"},"content":"    ObservableList\u003cFlashcard\u003e getCardList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":4,"linhns":2,"-":11}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"zenlyj"},"content":"    Path getFlashBackFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":1,"-":15}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    private Path flashBackFilePath \u003d Paths.get(\"data\" , \"flashback.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"zenlyj"},"content":"        setFlashBackFilePath(newUserPrefs.getFlashBackFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"    public Path getFlashBackFilePath() {"},{"lineNumber":51,"author":{"gitId":"zenlyj"},"content":"        return flashBackFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"zenlyj"},"content":"    public void setFlashBackFilePath(Path flashBackFilePath) {"},{"lineNumber":55,"author":{"gitId":"zenlyj"},"content":"        requireNonNull(flashBackFilePath);"},{"lineNumber":56,"author":{"gitId":"zenlyj"},"content":"        this.flashBackFilePath \u003d flashBackFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":71,"author":{"gitId":"zenlyj"},"content":"                \u0026\u0026 flashBackFilePath.equals(o.flashBackFilePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"zenlyj"},"content":"        return Objects.hash(guiSettings, flashBackFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":83,"author":{"gitId":"zenlyj"},"content":"        sb.append(\"\\nLocal data file location : \" + flashBackFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":9,"linhns":1,"-":77}},{"path":"src/main/java/seedu/address/model/VersionedFlashBack.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":"/*"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@@author marc-97-reused"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Reused from"},{"lineNumber":10,"author":{"gitId":"-"},"content":"https://github.com/se-edu/addressbook-level4/blob/master/src/main/java/seedu/address/model/VersionedAddressBook.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"with minor modification"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * {@code FlashBack} with states tracking for undo"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class VersionedFlashBack extends FlashBack {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final List\u003cReadOnlyFlashBack\u003e flashBackStates;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private int currentStatePointer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Creates a VersionedFlashBack using the cards in the {@code toBeCopied}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public VersionedFlashBack(ReadOnlyFlashBack toBeCopied) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        super(toBeCopied);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        flashBackStates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        flashBackStates.add(new FlashBack(toBeCopied));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        currentStatePointer \u003d 0;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Saves updated state of FlashBack into the list of states"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void commit() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        removeStatesAfterCurrentPointer();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        flashBackStates.add(new FlashBack(this));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        currentStatePointer++;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private void removeStatesAfterCurrentPointer() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        flashBackStates.subList(currentStatePointer + 1, flashBackStates.size()).clear();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Restores FlashBack to its previous state"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void undo() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!canUndo()) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new NoUndoableStateException();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        currentStatePointer--;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        resetData(flashBackStates.get(currentStatePointer));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if {@code undo()} has flashback states to undo"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean canUndo() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return currentStatePointer \u003e 0;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof VersionedFlashBack // instanceof handles nulls"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                \u0026\u0026 flashBackStates.equals(((VersionedFlashBack) other).flashBackStates)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 currentStatePointer \u003d\u003d ((VersionedFlashBack) other).currentStatePointer"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \u0026\u0026 super.equals((VersionedFlashBack) other));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static class NoUndoableStateException extends RuntimeException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        private NoUndoableStateException() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            super(\"Current state pointer at start of flashBackStates list, unable to undo\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"Marc-97":7,"-":71}},{"path":"src/main/java/seedu/address/model/flashcard/Answer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zenlyj"},"content":" * Represents a flash card\u0027s answer in FlashBack."},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"public class Answer {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"            \"Answer can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"zenlyj"},"content":"     * Constructs a {@code Answer}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     * @param answer A valid answer."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    public Answer(String answer) {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"        requireNonNull(answer);"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"        value \u003d answer;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"zenlyj"},"content":"     * Returns true if a given string is a valid answer."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    public static boolean isValidAnswer(String test) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"                || (other instanceof Answer // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 value.equals(((Answer) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":3,"linhns":13,"-":37}},{"path":"src/main/java/seedu/address/model/flashcard/Category.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":" * Represents a Flashcard\u0027s category in the Flashback."},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":10,"author":{"gitId":"zenlyj"},"content":" * Represents a flash card\u0027s category in FlashBack."},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e c62b7fca8e6e2608d71e5cc2946c10944917bc3d"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"public class Category {"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"            \"Categories can take any values, must not be longer than 30 characters and it should not be blank\";"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":""},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"     * Constructs an {@code Category}."},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"     * @param category A valid category."},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    public Category(String category) {"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"        requireNonNull(category);"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        value \u003d category;"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":""},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"     * Returns if a given string is a valid category."},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"    public static boolean isValidCategory(String test) {"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 30;"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":""},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":""},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"                || (other instanceof Category // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 value.equals(((Category) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":""},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":""},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"yeoutzer":11,"zenlyj":1,"linhns":45}},{"path":"src/main/java/seedu/address/model/flashcard/CategoryContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":" * Tests that a {@code Flashcard}\u0027s {@code Category} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"public class CategoryContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    public CategoryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"    public boolean test(Flashcard flashcard) {"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"                .anyMatch(keyword -\u003e StringUtil.sentenceContainsWordIgnoreCase(flashcard.getCategory().value, keyword));"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"                || (other instanceof CategoryContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 keywords.equals(((CategoryContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":30}},{"path":"src/main/java/seedu/address/model/flashcard/Flashcard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"zenlyj"},"content":" * Represents a flash card in FlashBack."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"public class Flashcard {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    private final Question question;"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    private final Answer answer;"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    private final Category category;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    private final Priority priority;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Remark remark;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Flashcard(Question question, Answer answer, Category category, Priority priority,"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"                     Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        requireAllNonNull(question, answer, category, priority, tags);"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        this.question \u003d question;"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        this.answer \u003d answer;"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        this.category \u003d category;"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        this.priority \u003d priority;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"zenlyj"},"content":"    public Question getQuestion() {"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        return question;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"zenlyj"},"content":"    public Answer getAnswer() {"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        return answer;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"    public Category getCategory() {"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"        return category;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"zenlyj"},"content":"    public Priority getPriority() {"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"        return priority;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Remark getRemark() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return remark;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"zenlyj"},"content":"     * Returns true if both cards have the same questions."},{"lineNumber":72,"author":{"gitId":"zenlyj"},"content":"     * This defines a weaker notion of equality between two flash cards."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"zenlyj"},"content":"    public boolean isSameCard(Flashcard otherFlashcard) {"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"        if (otherFlashcard \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"        return otherFlashcard !\u003d null"},{"lineNumber":80,"author":{"gitId":"zenlyj"},"content":"                \u0026\u0026 otherFlashcard.getQuestion().equals(getQuestion());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"zenlyj"},"content":"     * Returns true if both cards have the same identity and data fields."},{"lineNumber":85,"author":{"gitId":"zenlyj"},"content":"     * This defines a stronger notion of equality between two cards."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"        if (!(other instanceof Flashcard)) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"linhns"},"content":"        Flashcard otherFlashcard \u003d (Flashcard) other;"},{"lineNumber":98,"author":{"gitId":"zenlyj"},"content":"        return otherFlashcard.getQuestion().equals(getQuestion())"},{"lineNumber":99,"author":{"gitId":"zenlyj"},"content":"                \u0026\u0026 otherFlashcard.getAnswer().equals(getAnswer())"},{"lineNumber":100,"author":{"gitId":"zenlyj"},"content":"                \u0026\u0026 otherFlashcard.getCategory().equals(getCategory())"},{"lineNumber":101,"author":{"gitId":"zenlyj"},"content":"                \u0026\u0026 otherFlashcard.getPriority().equals(getPriority())"},{"lineNumber":102,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 otherFlashcard.getTags().equals(getTags())"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 otherFlashcard.getRemark().equals(getRemark());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"        return Objects.hash(question, answer, category, priority, tags, remark);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":115,"author":{"gitId":"vuminhhieunus2019"},"content":"        builder.append(\"Question: \")"},{"lineNumber":116,"author":{"gitId":"zenlyj"},"content":"                .append(getQuestion())"},{"lineNumber":117,"author":{"gitId":"vuminhhieunus2019"},"content":"                .append(\"\\nAnswer: \")"},{"lineNumber":118,"author":{"gitId":"zenlyj"},"content":"                .append(getAnswer())"},{"lineNumber":119,"author":{"gitId":"vuminhhieunus2019"},"content":"                .append(\"\\nCategory: \")"},{"lineNumber":120,"author":{"gitId":"zenlyj"},"content":"                .append(getCategory())"},{"lineNumber":121,"author":{"gitId":"vuminhhieunus2019"},"content":"                .append(\"\\nPriority: \")"},{"lineNumber":122,"author":{"gitId":"zenlyj"},"content":"                .append(getPriority());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":126,"author":{"gitId":"vuminhhieunus2019"},"content":"            builder.append(\"\\nTags: \");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":19,"vuminhhieunus2019":7,"linhns":22,"-":84}},{"path":"src/main/java/seedu/address/model/flashcard/Priority.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zenlyj"},"content":" * Represents a flash card\u0027s priority in FlashBack."},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"public class Priority {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Priorities can only be High, Mid or Low\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"zenlyj"},"content":"     * The first character of the priority must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"zenlyj"},"content":"     * Constructs an {@code Priority}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"     * @param priority A valid priority."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    public Priority(String priority) {"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        requireNonNull(priority);"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        value \u003d priority;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"zenlyj"},"content":"     * Returns true if a given string is a valid priority."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"    public static boolean isValidPriority(String test) {"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        return test.equals(\"High\") || test.equals(\"Mid\") || test.equals(\"Low\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"                || (other instanceof Priority // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 value.equals(((Priority) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":4,"linhns":14,"-":39}},{"path":"src/main/java/seedu/address/model/flashcard/PriorityContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":" * Tests that a {@code Flashcard}\u0027s {@code Priority} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"public class PriorityContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    public PriorityContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"    public boolean test(Flashcard flashcard) {"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"                .anyMatch(keyword -\u003e StringUtil"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"                        .sentenceContainsPartWordIgnoreCase(flashcard.getPriority().value, keyword));"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"                || (other instanceof PriorityContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 keywords.equals(((PriorityContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":31}},{"path":"src/main/java/seedu/address/model/flashcard/Question.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zenlyj"},"content":" * Represents a flash card\u0027s question in FlashBack."},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"public class Question {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"            \"Questions can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"zenlyj"},"content":"     * The first character of the question must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    public final String fullQuestion;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"zenlyj"},"content":"     * Constructs a {@code Question}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"     * @param question A valid question."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    public Question(String question) {"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        requireNonNull(question);"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        fullQuestion \u003d question;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"zenlyj"},"content":"     * Returns true if a given string is a valid question."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    public static boolean isValidQuestion(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        return fullQuestion;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"                || (other instanceof Question // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 fullQuestion.equals(((Question) other).fullQuestion)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"        return fullQuestion.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":4,"linhns":16,"-":39}},{"path":"src/main/java/seedu/address/model/flashcard/QuestionContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":" * Tests that a {@code Flashcard}\u0027s {@code Question} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"public class QuestionContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    public boolean test(Flashcard flashcard) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"                .anyMatch(keyword -\u003e StringUtil"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"                        .sentenceContainsPartWordIgnoreCase(flashcard.getQuestion().fullQuestion, keyword));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":3,"linhns":6,"-":22}},{"path":"src/main/java/seedu/address/model/flashcard/Remark.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"zenlyj"},"content":" * Represents a flash card\u0027s remark in FlashBack."},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Remark {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"     * @param remark A valid remark."},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public Remark(String remark) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(remark);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        value \u003d remark;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Remark) other).value)); // state check"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":1,"linhns":8,"-":28}},{"path":"src/main/java/seedu/address/model/flashcard/UniqueFlashcardList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"zenlyj"},"content":" * A list of cards that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"zenlyj"},"content":" * A card is considered unique by comparing using {@code Flashcard#isSameCard(Flashcard)}. As such, adding and updating"},{"lineNumber":17,"author":{"gitId":"zenlyj"},"content":" * of cards uses Flashcard#isSameCard(Flashcard) for equality so as to ensure that the card being added or updated is"},{"lineNumber":18,"author":{"gitId":"zenlyj"},"content":" * unique in terms of identity in the UniqueFlashcardList. However, the removal of a card uses Flashcard#equals(Object)"},{"lineNumber":19,"author":{"gitId":"zenlyj"},"content":" * so as to ensure that the card with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"-"},"content":" *"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"-"},"content":" *"},{"lineNumber":23,"author":{"gitId":"zenlyj"},"content":" * @see Flashcard#isSameCard(Flashcard)"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"zenlyj"},"content":"     * Returns true if the list contains an equivalent card as the given argument."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    public boolean contains(Flashcard toCheck) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"zenlyj"},"content":"        return internalList.stream().anyMatch(toCheck::isSameCard);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"zenlyj"},"content":"     * Adds a card to the list."},{"lineNumber":41,"author":{"gitId":"zenlyj"},"content":"     * The card must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"    public void add(Flashcard toAdd) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"            throw new DuplicateFlashcardException();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"zenlyj"},"content":"     * Replaces the card {@code target} in the list with {@code editedFlashcard}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"zenlyj"},"content":"     * The card identity of {@code editedFlashcard} must not be the same as another existing card in the list."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"zenlyj"},"content":"    public void setCard(Flashcard target, Flashcard editedFlashcard) {"},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"        requireAllNonNull(target, editedFlashcard);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"            throw new FlashcardNotFoundException();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"zenlyj"},"content":"        if (!target.isSameCard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"            throw new DuplicateFlashcardException();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"        internalList.set(index, editedFlashcard);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"zenlyj"},"content":"     * Removes the equivalent card from the list."},{"lineNumber":73,"author":{"gitId":"zenlyj"},"content":"     * The card must exist in the list."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"    public void remove(Flashcard toRemove) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"            throw new FlashcardNotFoundException();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"zenlyj"},"content":"    public void setCards(UniqueFlashcardList replacement) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"zenlyj"},"content":"     * Replaces the contents of this list with {@code flashcards}."},{"lineNumber":89,"author":{"gitId":"zenlyj"},"content":"     * {@code flashcards} must not contain duplicate cards."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"zenlyj"},"content":"    public void setCards(List\u003cFlashcard\u003e flashcards) {"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":"        requireAllNonNull(flashcards);"},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"        if (!personsAreUnique(flashcards)) {"},{"lineNumber":94,"author":{"gitId":"linhns"},"content":"            throw new DuplicateFlashcardException();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"linhns"},"content":"        internalList.setAll(flashcards);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"linhns"},"content":"    public Iterator\u003cFlashcard\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"linhns"},"content":"                || (other instanceof UniqueFlashcardList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"linhns"},"content":"                        \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"zenlyj"},"content":"     * Returns true if {@code flashcards} contains only unique cards."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"linhns"},"content":"    private boolean personsAreUnique(List\u003cFlashcard\u003e flashcards) {"},{"lineNumber":128,"author":{"gitId":"linhns"},"content":"        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"linhns"},"content":"            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"zenlyj"},"content":"                if (flashcards.get(i).isSameCard(flashcards.get(j))) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":22,"linhns":26,"-":89}},{"path":"src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashcardException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard.exceptions;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * Signals that the operation will result in duplicate Flashcards"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" * (Flashcards are considered duplicates if they have the same identity)."},{"lineNumber":6,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"public class DuplicateFlashcardException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"    public DuplicateFlashcardException() {"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"        super(\"Operation would result in duplicate flashcards\");"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":2,"linhns":9}},{"path":"src/main/java/seedu/address/model/flashcard/exceptions/FlashcardNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard.exceptions;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zenlyj"},"content":" * Signals that the operation is unable to find the specified flash card."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"public class FlashcardNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"zenlyj":1,"linhns":5}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zenlyj"},"content":" * Represents a Tag in the FlashBack."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":1,"-":53}},{"path":"src/main/java/seedu/address/model/tag/TagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":" * Tests that a {@code Flashcard}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    public boolean test(Flashcard flashcard) {"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"                .anyMatch(keyword -\u003e CollectionUtil.tagContainsWordIgnoreCase(flashcard.getTags(), keyword));"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":31}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.*;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"zenlyj"},"content":" * Contains utility methods for populating {@code FlashBack} with sample data."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final Remark EMPTY \u003d new Remark(\"\");"},{"lineNumber":17,"author":{"gitId":"zenlyj"},"content":"    public static Flashcard[] getSampleCards() {"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        return new Flashcard[] {"},{"lineNumber":19,"author":{"gitId":"zenlyj"},"content":"            new Flashcard(new Question(\"What is the formula for hydrochloric acid?\"),"},{"lineNumber":20,"author":{"gitId":"zenlyj"},"content":"                    new Answer(\"HCl\"),"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Category(\"Chemistry 101\"),"},{"lineNumber":22,"author":{"gitId":"zenlyj"},"content":"                    new Priority(\"Mid\"),"},{"lineNumber":23,"author":{"gitId":"zenlyj"},"content":"                    EMPTY,"},{"lineNumber":24,"author":{"gitId":"zenlyj"},"content":"                    getTagSet(\"formula\", \"chemistry\")),"},{"lineNumber":25,"author":{"gitId":"zenlyj"},"content":"            new Flashcard(new Question(\"What is Newton\u0027s Second Law of Motion?\"),"},{"lineNumber":26,"author":{"gitId":"zenlyj"},"content":"                    new Answer(\"Force \u003d Mass * Acceleration\"),"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Category(\"Physics 101\"),"},{"lineNumber":28,"author":{"gitId":"zenlyj"},"content":"                    new Priority(\"Mid\"),"},{"lineNumber":29,"author":{"gitId":"zenlyj"},"content":"                    EMPTY,"},{"lineNumber":30,"author":{"gitId":"zenlyj"},"content":"                    getTagSet(\"mechanics\", \"physics\")),"},{"lineNumber":31,"author":{"gitId":"zenlyj"},"content":"            new Flashcard(new Question(\"What is ATP?\"),"},{"lineNumber":32,"author":{"gitId":"zenlyj"},"content":"                    new Answer(\"Adenosine Triphosphate\"),"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Category(\"Biology 101\"),"},{"lineNumber":34,"author":{"gitId":"zenlyj"},"content":"                    new Priority(\"Mid\"),"},{"lineNumber":35,"author":{"gitId":"zenlyj"},"content":"                    EMPTY,"},{"lineNumber":36,"author":{"gitId":"zenlyj"},"content":"                    getTagSet(\"biology\")),"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"            new Flashcard(new Question(\"What is the time complexity of merge sort?\"),"},{"lineNumber":38,"author":{"gitId":"zenlyj"},"content":"                    new Answer(\"O(nlogn)\"),"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Category(\"Computer Science\"),"},{"lineNumber":40,"author":{"gitId":"zenlyj"},"content":"                    new Priority(\"High\"),"},{"lineNumber":41,"author":{"gitId":"zenlyj"},"content":"                    EMPTY,"},{"lineNumber":42,"author":{"gitId":"zenlyj"},"content":"                    getTagSet(\"sorting\", \"runtime\")),"},{"lineNumber":43,"author":{"gitId":"zenlyj"},"content":"            new Flashcard(new Question(\"When did Charles Darwin stop believing in Christianity?\"),"},{"lineNumber":44,"author":{"gitId":"zenlyj"},"content":"                    new Answer(\"After the Voyage of the Beagle\"),"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Category(\"History\"),"},{"lineNumber":46,"author":{"gitId":"zenlyj"},"content":"                    new Priority(\"Low\"),"},{"lineNumber":47,"author":{"gitId":"zenlyj"},"content":"                    EMPTY,"},{"lineNumber":48,"author":{"gitId":"zenlyj"},"content":"                    getTagSet(\"Darwinian\")),"},{"lineNumber":49,"author":{"gitId":"zenlyj"},"content":"            new Flashcard(new Question(\"What is recursion?\"),"},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"                    new Answer(\"recursion\"),"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Category(\"Computer Science\"),"},{"lineNumber":52,"author":{"gitId":"zenlyj"},"content":"                    new Priority(\"Low\"),"},{"lineNumber":53,"author":{"gitId":"zenlyj"},"content":"                    EMPTY,"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"                    getTagSet(\"random\")),"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"            new Flashcard(new Question(\"What is the author of Romeo and Juliet?\"),"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Answer(\"William Shakespeare\"),"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Category(\"Literature\"),"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"                    new Priority(\"High\"),"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"                    EMPTY,"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"                    getTagSet(\"tragedy\"))"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"zenlyj"},"content":"    public static ReadOnlyFlashBack getSampleFlashBack() {"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"        FlashBack sampleAb \u003d new FlashBack();"},{"lineNumber":66,"author":{"gitId":"zenlyj"},"content":"        for (Flashcard sampleFlashcard : getSampleCards()) {"},{"lineNumber":67,"author":{"gitId":"zenlyj"},"content":"            sampleAb.addCard(sampleFlashcard);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":33,"vuminhhieunus2019":14,"linhns":5,"-":29}},{"path":"src/main/java/seedu/address/storage/FlashBackStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":" * Represents a storage for {@link FlashBack}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"zenlyj"},"content":"public interface FlashBackStorage {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"zenlyj"},"content":"    Path getFlashBackFilePath();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"zenlyj"},"content":"     * Returns FlashBack data as a {@link ReadOnlyFlashBack}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"zenlyj"},"content":"    Optional\u003cReadOnlyFlashBack\u003e readFlashBack() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"zenlyj"},"content":"     * @see #getFlashBackFilePath()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"zenlyj"},"content":"    Optional\u003cReadOnlyFlashBack\u003e readFlashBack(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"     * Saves the given {@link ReadOnlyFlashBack} to the storage."},{"lineNumber":36,"author":{"gitId":"zenlyj"},"content":"     * @param flashBack cannot be null."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"zenlyj"},"content":"    void saveFlashBack(ReadOnlyFlashBack flashBack) throws IOException;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"zenlyj"},"content":"     * @see #saveFlashBack(ReadOnlyFlashBack)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"zenlyj"},"content":"    void saveFlashBack(ReadOnlyFlashBack flashBack, Path filePath) throws IOException;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":10,"linhns":4,"-":32}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedFlashcard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.*;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":" * Jackson-friendly version of {@link Flashcard}."},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"class JsonAdaptedFlashcard {"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":21,"author":{"gitId":"zenlyj"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"    private final String question;"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"    private final String answer;"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    private final String category;"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    private final String priority;"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    private final String remark;"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"zenlyj"},"content":"     * Constructs a {@code JsonAdaptedFlashcard} with the given flash card details."},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"    @JsonCreator"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String answer,"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"                                @JsonProperty(\"category\") String category, @JsonProperty(\"priority\") String priority,"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"                                @JsonProperty(\"remark\") String remark,"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        this.question \u003d question;"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"        this.answer \u003d answer;"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        this.category \u003d category;"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        this.priority \u003d priority;"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"        this.remark \u003d remark;"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"zenlyj"},"content":"     * Converts a given {@code Flashcard} into this class for Jackson use."},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"    public JsonAdaptedFlashcard(Flashcard source) {"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"        question \u003d source.getQuestion().fullQuestion;"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        answer \u003d source.getAnswer().value;"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"        category \u003d source.getCategory().value;"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"        priority \u003d source.getPriority().value;"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"zenlyj"},"content":"     * Converts this Jackson-friendly adapted card object into the model\u0027s {@code Flashcard} object."},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"zenlyj"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted card."},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"    public Flashcard toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"zenlyj"},"content":"        final List\u003cTag\u003e cardTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":70,"author":{"gitId":"zenlyj"},"content":"            cardTags.add(tag.toModelType());"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        if (question \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"                    Question.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"        if (!Question.isValidQuestion(question)) {"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        final Question modelQuestion \u003d new Question(question);"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        if (answer \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"        if (!Answer.isValidAnswer(answer)) {"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"        final Answer modelAnswer \u003d new Answer(answer);"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        if (category \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"                    Category.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"        if (!Category.isValidCategory(category)) {"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":"        final Category modelCategory \u003d new Category(category);"},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":"        if (priority \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":101,"author":{"gitId":"yeoutzer"},"content":"                    Priority.class.getSimpleName()));"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"yeoutzer"},"content":"        if (!Priority.isValidPriority(priority)) {"},{"lineNumber":104,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"yeoutzer"},"content":"        final Priority modelPriority \u003d new Priority(priority);"},{"lineNumber":107,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":108,"author":{"gitId":"yeoutzer"},"content":"        if (remark \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"yeoutzer"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"yeoutzer"},"content":"        final Remark modelRemark \u003d new Remark(remark);"},{"lineNumber":112,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":113,"author":{"gitId":"zenlyj"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(cardTags);"},{"lineNumber":114,"author":{"gitId":"yeoutzer"},"content":"        return new Flashcard(modelQuestion, modelAnswer, modelCategory, modelPriority, modelRemark, modelTags);"},{"lineNumber":115,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":117,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":109,"zenlyj":8}},{"path":"src/main/java/seedu/address/storage/JsonFlashBackStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"zenlyj"},"content":" * A class to access FlashBack data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"zenlyj"},"content":"public class JsonFlashBackStorage implements FlashBackStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"zenlyj"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonFlashBackStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"zenlyj"},"content":"    public JsonFlashBackStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"zenlyj"},"content":"    public Path getFlashBackFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"zenlyj"},"content":"    public Optional\u003cReadOnlyFlashBack\u003e readFlashBack() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"zenlyj"},"content":"        return readFlashBack(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"zenlyj"},"content":"     * Similar to {@link #readFlashBack()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"zenlyj"},"content":"    public Optional\u003cReadOnlyFlashBack\u003e readFlashBack(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"zenlyj"},"content":"        Optional\u003cJsonSerializableFlashBack\u003e jsonFlashBack \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"zenlyj"},"content":"                filePath, JsonSerializableFlashBack.class);"},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"        if (!jsonFlashBack.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"zenlyj"},"content":"            return Optional.of(jsonFlashBack.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"zenlyj"},"content":"    public void saveFlashBack(ReadOnlyFlashBack flashBack) throws IOException {"},{"lineNumber":64,"author":{"gitId":"zenlyj"},"content":"        saveFlashBack(flashBack, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"zenlyj"},"content":"     * Similar to {@link #saveFlashBack(ReadOnlyFlashBack)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"zenlyj"},"content":"    public void saveFlashBack(ReadOnlyFlashBack flashBack, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"zenlyj"},"content":"        requireNonNull(flashBack);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"zenlyj"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableFlashBack(flashBack), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":19,"linhns":1,"-":60}},{"path":"src/main/java/seedu/address/storage/JsonSerializableFlashBack.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"zenlyj"},"content":" * An Immutable FlashBack that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"@JsonRootName(value \u003d \"addressbook\")"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"class JsonSerializableFlashBack {"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":22,"author":{"gitId":"zenlyj"},"content":"    public static final String MESSAGE_DUPLICATE_CARD \u003d \"Flash cards list contains duplicate card(s).\";"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"     * Constructs a {@code JsonSerializableFlashBack} with the given flash card."},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    public JsonSerializableFlashBack(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"        this.flashcards.addAll(flashcards);"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"zenlyj"},"content":"     * Converts a given {@code ReadOnlyFlashBack} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableFlashBack}."},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"    public JsonSerializableFlashBack(ReadOnlyFlashBack source) {"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        flashcards.addAll(source.getCardList().stream()"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"                .map(JsonAdaptedFlashcard::new).collect(Collectors.toList()));"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"     * Converts this flashback into the model\u0027s {@code FlashBack} object."},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"    public FlashBack toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"        FlashBack flashBack \u003d new FlashBack();"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"            Flashcard flashcard \u003d jsonAdaptedFlashcard.toModelType();"},{"lineNumber":53,"author":{"gitId":"zenlyj"},"content":"            if (flashBack.hasCard(flashcard)) {"},{"lineNumber":54,"author":{"gitId":"zenlyj"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_CARD);"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"zenlyj"},"content":"            flashBack.addCard(flashcard);"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        return flashBack;"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":55,"zenlyj":6}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"zenlyj"},"content":"public interface Storage extends FlashBackStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"zenlyj"},"content":"    Path getFlashBackFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"zenlyj"},"content":"    Optional\u003cReadOnlyFlashBack\u003e readFlashBack() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"zenlyj"},"content":"    void saveFlashBack(ReadOnlyFlashBack flashBack) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":4,"linhns":1,"-":27}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"zenlyj"},"content":" * Manages storage of FlashBack data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"zenlyj"},"content":"    private FlashBackStorage flashBackStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"zenlyj"},"content":"     * Creates a {@code StorageManager} with the given {@code FlashBackStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"zenlyj"},"content":"    public StorageManager(FlashBackStorage flashBackStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"zenlyj"},"content":"        this.flashBackStorage \u003d flashBackStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"zenlyj"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FlashBack methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"zenlyj"},"content":"    public Path getFlashBackFilePath() {"},{"lineNumber":54,"author":{"gitId":"zenlyj"},"content":"        return flashBackStorage.getFlashBackFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"zenlyj"},"content":"    public Optional\u003cReadOnlyFlashBack\u003e readFlashBack() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"zenlyj"},"content":"        return readFlashBack(flashBackStorage.getFlashBackFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"zenlyj"},"content":"    public Optional\u003cReadOnlyFlashBack\u003e readFlashBack(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":65,"author":{"gitId":"zenlyj"},"content":"        return flashBackStorage.readFlashBack(filePath);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"zenlyj"},"content":"    public void saveFlashBack(ReadOnlyFlashBack flashBack) throws IOException {"},{"lineNumber":70,"author":{"gitId":"zenlyj"},"content":"        saveFlashBack(flashBack, flashBackStorage.getFlashBackFilePath());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"zenlyj"},"content":"    public void saveFlashBack(ReadOnlyFlashBack flashBack, Path filePath) throws IOException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":76,"author":{"gitId":"zenlyj"},"content":"        flashBackStorage.saveFlashBack(flashBack, filePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":16,"linhns":1,"-":62}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    private TextField commandKeyword;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        commandKeyword.setVisible(false);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":34,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @FunctionalInterface"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result."},{"lineNumber":82,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":3,"-":85}},{"path":"src/main/java/seedu/address/ui/FlashbackCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.geometry.Insets;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.*;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"public class FlashbackCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    private static final String FXML \u003d \"FlashcardListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    public final Flashcard flashcard;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Label question;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Label priority;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Label category;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label remark;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Creates a {@code FlashbackCard} with the given {@code flashcard} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"    public FlashbackCard(Flashcard flashcard, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"        this.flashcard \u003d flashcard;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"        question.setText(flashcard.getQuestion().fullQuestion);"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"        String text \u003d flashcard.getPriority().toString();"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        priority.setText(text);"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"        priority.setStyle(\"-fx-text-fill: white;\");"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (text.equals(\"High\")) {"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"            priority.setBackground(new Background(new BackgroundFill(Color.RED, CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (text.equals(\"Mid\")) {"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"            priority.setBackground(new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"            priority.setStyle(\"-fx-text-fill: black;\");"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"            assert text.equals(\"Low\");"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"            priority.setBackground(new Background(new BackgroundFill(Color.GREEN, CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"        category.setText(flashcard.getCategory().value);"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"        remark.setText(flashcard.getRemark().value);"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"        flashcard.getTags().stream()"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (!(other instanceof FlashbackCard)) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"        FlashbackCard card \u003d (FlashbackCard) other;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"                \u0026\u0026 flashcard.equals(card.flashcard);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":26,"linhns":6,"-":56}},{"path":"src/main/java/seedu/address/ui/FlashbackViewCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.geometry.Insets;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"public class FlashbackViewCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    private static final String FXML \u003d \"FlashbackViewCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    public final Flashcard flashcard;"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Label question;"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Label answer;"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    private FlowPane tags;"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Label priority;"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Label category;"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Creates a {@code FlashbackViewCard} with the given {@code flashcard}."},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"    public FlashbackViewCard(Flashcard flashcard) {"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.flashcard \u003d flashcard;"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"        question.setText(flashcard.getQuestion().fullQuestion);"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"        answer.setText(flashcard.getAnswer().toString());"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"        category.setText(flashcard.getCategory().toString());"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"        flashcard.getTags().stream()"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"        String text \u003d flashcard.getPriority().toString();"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"        priority.setText(text);"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        priority.setStyle(\"-fx-text-fill: white;\");"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (text.equals(\"High\")) {"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"            priority.setBackground(new Background(new BackgroundFill(Color.RED, CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (text.equals(\"Mid\")) {"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"            priority.setBackground(new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"            priority.setStyle(\"-fx-text-fill: black;\");"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"            assert text.equals(\"Low\");"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"            priority.setBackground(new Background(new BackgroundFill(Color.GREEN, CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"            return true;"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (!(other instanceof FlashbackViewCard)) {"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"            return false;"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"        // state check"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"        FlashbackViewCard card \u003d (FlashbackViewCard) other;"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"        return flashcard.equals(card.flashcard);"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":71}},{"path":"src/main/java/seedu/address/ui/FlashcardListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    private ListView\u003cFlashcard\u003e personListView;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        personListView.setItems(flashcardList);"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"        personListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        protected void updateItem(Flashcard flashcard, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"            super.updateItem(flashcard, empty);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"            if (empty || flashcard \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"                setGraphic(new FlashbackCard(flashcard, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":7,"linhns":6,"-":36}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-t13-3.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    private FlashcardListPanel flashcardListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"    private StackPane flashcardListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"    private StackPane flashcardViewCardPlaceholder;"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":93,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":99,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":103,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":116,"author":{"gitId":"vuminhhieunus2019"},"content":"        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"},{"lineNumber":117,"author":{"gitId":"vuminhhieunus2019"},"content":"        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"vuminhhieunus2019"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFlashBackFilePath());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"vuminhhieunus2019"},"content":"    private void handleView(int index) {"},{"lineNumber":170,"author":{"gitId":"vuminhhieunus2019"},"content":"        clearViewArea();"},{"lineNumber":171,"author":{"gitId":"vuminhhieunus2019"},"content":"        FlashbackViewCard flashbackViewCard \u003d new FlashbackViewCard(logic.getFilteredFlashcardList().get(index));"},{"lineNumber":172,"author":{"gitId":"vuminhhieunus2019"},"content":"        flashcardViewCardPlaceholder.getChildren().add(flashbackViewCard.getRoot());"},{"lineNumber":173,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":175,"author":{"gitId":"vuminhhieunus2019"},"content":"    private void clearViewArea() {"},{"lineNumber":176,"author":{"gitId":"vuminhhieunus2019"},"content":"        flashcardViewCardPlaceholder.getChildren().clear();"},{"lineNumber":177,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":179,"author":{"gitId":"vuminhhieunus2019"},"content":"    public FlashcardListPanel getFlashcardListPanel() {"},{"lineNumber":180,"author":{"gitId":"vuminhhieunus2019"},"content":"        return flashcardListPanel;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"vuminhhieunus2019"},"content":"            clearViewArea();"},{"lineNumber":195,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (commandResult.isShowView()) {"},{"lineNumber":205,"author":{"gitId":"vuminhhieunus2019"},"content":"                handleView(commandResult.getIndex());"},{"lineNumber":206,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":207,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":26,"-":189}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/flashback.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":1,"-":88}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003cStackPane prefHeight\u003d\"66.0\" prefWidth\u003d\"149.0\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"  \u003cGridPane fx:id\u003d\"inputPane\" styleClass\u003d\"pane-no-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cColumnConstraints percentWidth\u003d\"100.0\" /\u003e"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cColumnConstraints percentWidth\u003d\"0.0\" /\u003e"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003crowConstraints\u003e"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cRowConstraints percentHeight\u003d\"25.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cRowConstraints percentHeight\u003d\"25.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003c/rowConstraints\u003e"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"26.0\" prefWidth\u003d\"142.0\" promptText\u003d\"Enter command here...\" GridPane.rowIndex\u003d\"0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003cTextField fx:id\u003d\"commandKeyword\" onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"26.0\" prefWidth\u003d\"142.0\" promptText\u003d\"Enter keyword here...\" GridPane.rowIndex\u003d\"1\" /\u003e"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"}],"authorContributionMap":{"vuminhhieunus2019":15,"-":4}},{"path":"src/main/resources/view/FlashbackViewCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003cStackPane prefHeight\u003d\"66.0\" prefWidth\u003d\"149.0\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"  \u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003cGridPane styleClass\u003d\"pane-no-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003ccolumnConstraints\u003e"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003c/columnConstraints\u003e"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003crowConstraints\u003e"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cRowConstraints percentHeight\u003d\"70.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cRowConstraints percentHeight\u003d\"3.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cRowConstraints percentHeight\u003d\"27.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003c/rowConstraints\u003e"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cVBox styleClass\u003d\"pane-with-round-black-border\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cminWidth\u003e"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"              \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003c/minWidth\u003e"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003c/Label\u003e"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$question\" /\u003e"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003c/HBox\u003e"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\"\u003e"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"               \u003cVBox.margin\u003e"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"                  \u003cInsets top\u003d\"5.0\" /\u003e"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"               \u003c/VBox.margin\u003e"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"               \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"                  \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"               \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003c/VBox\u003e"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cVBox alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"pane-with-round-black-border\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\"\u003e"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cpadding\u003e"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003c/padding\u003e"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" /\u003e"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003c/VBox\u003e"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"  \u003c/HBox\u003e"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c/StackPane\u003e"}],"authorContributionMap":{"vuminhhieunus2019":49}},{"path":"src/main/resources/view/FlashcardListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cminWidth\u003e"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003c/Label\u003e"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003c/HBox\u003e"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\"\u003e"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cpadding\u003e"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"               \u003cInsets bottom\u003d\"3.0\" /\u003e"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\"\u003e"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cVBox.margin\u003e"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003c/VBox.margin\u003e"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cpadding\u003e"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"               \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003c/VBox\u003e"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003crowConstraints\u003e"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"         \u003cRowConstraints /\u003e"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"      \u003c/rowConstraints\u003e"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"vuminhhieunus2019":43}},{"path":"src/main/resources/view/LightTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":89,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":90,"author":{"gitId":"vuminhhieunus2019"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":95,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":96,"author":{"gitId":"vuminhhieunus2019"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":101,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":102,"author":{"gitId":"vuminhhieunus2019"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #547c91;"},{"lineNumber":104,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":105,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":106,"author":{"gitId":"vuminhhieunus2019"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #3b6978;"},{"lineNumber":108,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":109,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":110,"author":{"gitId":"vuminhhieunus2019"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":113,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":114,"author":{"gitId":"vuminhhieunus2019"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":118,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":119,"author":{"gitId":"vuminhhieunus2019"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":122,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":123,"author":{"gitId":"vuminhhieunus2019"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 17px;"},{"lineNumber":126,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":128,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":129,"author":{"gitId":"vuminhhieunus2019"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 14px;"},{"lineNumber":132,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":134,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":135,"author":{"gitId":"vuminhhieunus2019"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-background-color: derive(#ffffff, 20%);"},{"lineNumber":137,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":138,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":139,"author":{"gitId":"vuminhhieunus2019"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-background-color: derive(#204051, 20%);"},{"lineNumber":141,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-border-color: derive(#ffffff, 10%);"},{"lineNumber":142,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-border-top-width: 5px;"},{"lineNumber":143,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-padding: 10px;"},{"lineNumber":144,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":145,"author":{"gitId":"vuminhhieunus2019"},"content":".pane-no-border {"},{"lineNumber":146,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-background-color: derive(#204051, 20%);"},{"lineNumber":147,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-border-top-width: 5px;"},{"lineNumber":148,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":149,"author":{"gitId":"vuminhhieunus2019"},"content":".pane-with-round-border {"},{"lineNumber":150,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#204051, 20%);"},{"lineNumber":151,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: derive(#ffffff, 10%);"},{"lineNumber":152,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 5px;"},{"lineNumber":153,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-radius: 10;"},{"lineNumber":154,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-radius: 20 20 20 20;"},{"lineNumber":155,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":156,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":157,"author":{"gitId":"vuminhhieunus2019"},"content":".pane-with-round-black-border {"},{"lineNumber":158,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#ffffff, 20%);"},{"lineNumber":159,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: derive(#000000, 10%);"},{"lineNumber":160,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 3px;"},{"lineNumber":161,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-radius: 10;"},{"lineNumber":162,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-radius: 20 20 20 20;"},{"lineNumber":163,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":164,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":165,"author":{"gitId":"vuminhhieunus2019"},"content":".status-bar {"},{"lineNumber":166,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#ffffff, 30%);"},{"lineNumber":167,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":168,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":169,"author":{"gitId":"vuminhhieunus2019"},"content":".result-display {"},{"lineNumber":170,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: transparent;"},{"lineNumber":171,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":172,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":173,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: black;"},{"lineNumber":174,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-radius: 5px;"},{"lineNumber":175,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":176,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":177,"author":{"gitId":"vuminhhieunus2019"},"content":".result-display .label {"},{"lineNumber":178,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white !important;"},{"lineNumber":179,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":180,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":181,"author":{"gitId":"vuminhhieunus2019"},"content":".status-bar .label {"},{"lineNumber":182,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":183,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: black;"},{"lineNumber":184,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 4px;"},{"lineNumber":185,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":186,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":187,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":188,"author":{"gitId":"vuminhhieunus2019"},"content":".status-bar-with-border {"},{"lineNumber":189,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":190,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":191,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 1px;"},{"lineNumber":192,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":193,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":194,"author":{"gitId":"vuminhhieunus2019"},"content":".status-bar-with-border .label {"},{"lineNumber":195,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":196,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":197,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":198,"author":{"gitId":"vuminhhieunus2019"},"content":".grid-pane {"},{"lineNumber":199,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":200,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":201,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 1px;"},{"lineNumber":202,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":203,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":204,"author":{"gitId":"vuminhhieunus2019"},"content":".grid-pane .stack-pane {"},{"lineNumber":205,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":206,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":207,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":208,"author":{"gitId":"vuminhhieunus2019"},"content":".grid-with-border {"},{"lineNumber":209,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-background-color: transparent;"},{"lineNumber":210,"author":{"gitId":"vuminhhieunus2019"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":211,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":212,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":213,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":214,"author":{"gitId":"vuminhhieunus2019"},"content":".context-menu {"},{"lineNumber":215,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":216,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":217,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":218,"author":{"gitId":"vuminhhieunus2019"},"content":".context-menu .label {"},{"lineNumber":219,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":220,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":221,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":222,"author":{"gitId":"vuminhhieunus2019"},"content":".menu-bar {"},{"lineNumber":223,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#ffffff, 20%);"},{"lineNumber":224,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":225,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":226,"author":{"gitId":"vuminhhieunus2019"},"content":".menu-bar .label {"},{"lineNumber":227,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":228,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":229,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: black;"},{"lineNumber":230,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":231,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":232,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":233,"author":{"gitId":"vuminhhieunus2019"},"content":".menu .left-container {"},{"lineNumber":234,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: white;"},{"lineNumber":235,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":236,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":237,"author":{"gitId":"vuminhhieunus2019"},"content":"/*"},{"lineNumber":238,"author":{"gitId":"vuminhhieunus2019"},"content":" * Metro style Push Button"},{"lineNumber":239,"author":{"gitId":"vuminhhieunus2019"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":240,"author":{"gitId":"vuminhhieunus2019"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":241,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":242,"author":{"gitId":"vuminhhieunus2019"},"content":".button {"},{"lineNumber":243,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":244,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":245,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 2;"},{"lineNumber":246,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-radius: 0;"},{"lineNumber":247,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":248,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":249,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":250,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":251,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":252,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":253,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":254,"author":{"gitId":"vuminhhieunus2019"},"content":".button:hover {"},{"lineNumber":255,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":256,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":257,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":258,"author":{"gitId":"vuminhhieunus2019"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":259,"author":{"gitId":"vuminhhieunus2019"},"content":"  -fx-background-color: white;"},{"lineNumber":260,"author":{"gitId":"vuminhhieunus2019"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":261,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":262,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":263,"author":{"gitId":"vuminhhieunus2019"},"content":".button:focused {"},{"lineNumber":264,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: white, white;"},{"lineNumber":265,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":266,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":267,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":268,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":269,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":270,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":271,"author":{"gitId":"vuminhhieunus2019"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":272,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":273,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":274,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":275,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":276,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":277,"author":{"gitId":"vuminhhieunus2019"},"content":".button:default {"},{"lineNumber":278,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":279,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":280,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":281,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":282,"author":{"gitId":"vuminhhieunus2019"},"content":".button:default:hover {"},{"lineNumber":283,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":284,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":285,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":286,"author":{"gitId":"vuminhhieunus2019"},"content":".dialog-pane {"},{"lineNumber":287,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":288,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":289,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":290,"author":{"gitId":"vuminhhieunus2019"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":291,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":292,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":293,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":294,"author":{"gitId":"vuminhhieunus2019"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":295,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 14px;"},{"lineNumber":296,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-weight: bold;"},{"lineNumber":297,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":298,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":299,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":300,"author":{"gitId":"vuminhhieunus2019"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":301,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":302,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":303,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":304,"author":{"gitId":"vuminhhieunus2019"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":305,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 18px;"},{"lineNumber":306,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-style: italic;"},{"lineNumber":307,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-fill: white;"},{"lineNumber":308,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":309,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":310,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":311,"author":{"gitId":"vuminhhieunus2019"},"content":".scroll-bar {"},{"lineNumber":312,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#84a9ac, 20%);"},{"lineNumber":313,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":314,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":315,"author":{"gitId":"vuminhhieunus2019"},"content":".scroll-bar .thumb {"},{"lineNumber":316,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: derive(#435560, 50%);"},{"lineNumber":317,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-insets: 3;"},{"lineNumber":318,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":319,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":320,"author":{"gitId":"vuminhhieunus2019"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":321,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: transparent;"},{"lineNumber":322,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":323,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":324,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":325,"author":{"gitId":"vuminhhieunus2019"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":326,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-shape: \" \";"},{"lineNumber":327,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":328,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":329,"author":{"gitId":"vuminhhieunus2019"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":330,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":331,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":332,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":333,"author":{"gitId":"vuminhhieunus2019"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":334,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":335,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":336,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":337,"author":{"gitId":"vuminhhieunus2019"},"content":"#cardPane {"},{"lineNumber":338,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: transparent;"},{"lineNumber":339,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 0;"},{"lineNumber":340,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":341,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":342,"author":{"gitId":"vuminhhieunus2019"},"content":"#commandTypeLabel {"},{"lineNumber":343,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 11px;"},{"lineNumber":344,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":345,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":346,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":347,"author":{"gitId":"vuminhhieunus2019"},"content":"#commandTextField {"},{"lineNumber":348,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: white;"},{"lineNumber":349,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-insets: 0;"},{"lineNumber":350,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":351,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-insets: 0;"},{"lineNumber":352,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 1;"},{"lineNumber":353,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":354,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":355,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: black;"},{"lineNumber":356,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-radius: 7px;"},{"lineNumber":357,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: black;"},{"lineNumber":358,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":359,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":360,"author":{"gitId":"vuminhhieunus2019"},"content":"#commandKeyword {"},{"lineNumber":361,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":362,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-insets: 0;"},{"lineNumber":363,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":364,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-insets: 0;"},{"lineNumber":365,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-width: 1;"},{"lineNumber":366,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":367,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":368,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: black;"},{"lineNumber":369,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":370,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":371,"author":{"gitId":"vuminhhieunus2019"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":372,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":373,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":374,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":375,"author":{"gitId":"vuminhhieunus2019"},"content":"#resultDisplay .content {"},{"lineNumber":376,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #ffffff;"},{"lineNumber":377,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-radius: 5px;"},{"lineNumber":378,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":379,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":380,"author":{"gitId":"vuminhhieunus2019"},"content":"#tags {"},{"lineNumber":381,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-hgap: 7;"},{"lineNumber":382,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-vgap: 3;"},{"lineNumber":383,"author":{"gitId":"vuminhhieunus2019"},"content":"}"},{"lineNumber":384,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":385,"author":{"gitId":"vuminhhieunus2019"},"content":"#tags .label {"},{"lineNumber":386,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-text-fill: white;"},{"lineNumber":387,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-color: #E64A19;"},{"lineNumber":388,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":389,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-border-radius: 2;"},{"lineNumber":390,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-background-radius: 2;"},{"lineNumber":391,"author":{"gitId":"vuminhhieunus2019"},"content":"    -fx-font-size: 11;"},{"lineNumber":392,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":392}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import java.net.*?\u003e"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.*?\u003e"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.image.*?\u003e"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.stage.*?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"FlashBack\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003cImage url\u003d\"@/images/flashback.png\" /\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cGridPane fx:id\u003d\"commandModePane\" styleClass\u003d\"grid-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003ccolumnConstraints\u003e"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cColumnConstraints percentWidth\u003d\"50.0\" /\u003e"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cColumnConstraints percentWidth\u003d\"50.0\" /\u003e"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003c/columnConstraints\u003e"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003crowConstraints\u003e"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cRowConstraints percentHeight\u003d\"30.0\" /\u003e"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cRowConstraints percentHeight\u003d\"20.0\" /\u003e"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cRowConstraints percentHeight\u003d\"50.0\" /\u003e"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003c/rowConstraints\u003e"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/StackPane\u003e"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150\" minHeight\u003d\"120\" prefHeight\u003d\"150\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003c/StackPane\u003e"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cVBox fx:id\u003d\"flashcardList\" minWidth\u003d\"340\" prefWidth\u003d\"482.0\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"1\" GridPane.rowSpan\u003d\"3\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003cVBox minWidth\u003d\"500\" prefWidth\u003d\"511.0\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cStackPane fx:id\u003d\"flashcardViewCardPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"          \u003c/VBox\u003e"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003c/GridPane\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"vuminhhieunus2019":31,"-":38}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-round-border\" xmlns\u003d\"http://javafx.com/javafx/8\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"}],"authorContributionMap":{"vuminhhieunus2019":1,"-":8}},{"path":"src/test/data/JsonFlashBackStorageTest/invalidAndValidFlashcardFlashBack.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"{"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"    \"question\" : \"Pythagorean theorem\","},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"    \"answer\" : \"a^2 + b^2 \u003d c^2\","},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"    \"category\" : \"Maths\","},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"    \"priority\" : \"Low\","},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"    \"remark\" : \"\","},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [ \"Equation\", \"Common\", \"Easy\" ]"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"    \"question\": \"\","},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"    \"answer\": \"a^2 + b^2 \u003d c^2\","},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"    \"category\": \"Maths\","},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"    \"priority\": \"Low\","},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    \"remark\": \"\","},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\": [ \"Equation\", \"Common\", \"Easy\" ]"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"  } ]"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":17}},{"path":"src/test/data/JsonFlashBackStorageTest/invalidFlashcardFlashBack.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"{"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":"  \"flashcards\": ["},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"      \"question\": \"\","},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"      \"answer\": \"a^2 + b^2 \u003d c^2\","},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"      \"category\": \"Maths\","},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"      \"priority\": \"Low\","},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"      \"remark\": \"\","},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"      \"tagged\": [ \"Equation\", \"Common\", \"Easy\" ]"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"  ]"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":12}},{"path":"src/test/data/JsonSerializableFlashBackTest/duplicateFlashcardFlashBack.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"{"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":"  \"flashcards\" : [ {"},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"    \"question\" : \"Pythagorean theorem\","},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"    \"answer\" : \"a^2 + b^2 \u003d c^2\","},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"    \"category\" : \"Maths\","},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"    \"priority\" : \"Low\","},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"    \"remark\": \"\","},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [ \"Equation\", \"Common\", \"Easy\" ]"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"    \"question\" : \"Pythagorean theorem\","},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"    \"answer\" : \"a^2 + b^2 \u003d c^2\","},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"    \"category\" : \"Maths\","},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"    \"priority\" : \"Low\","},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    \"remark\": \"\","},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [ \"Equation\", \"Common\", \"Easy\" ]"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"  } ]"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":17}},{"path":"src/test/data/JsonSerializableFlashBackTest/invalidFlashcardFlashBack.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"{"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":"  \"flashcards\": ["},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"      \"question\": \"\","},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"      \"answer\": \"a^2 + b^2 \u003d c^2\","},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"      \"category\": \"Maths\","},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"      \"priority\": \"Low\","},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"      \"remark\": \"\","},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"      \"tagged\": [ \"Equation\", \"Common\", \"Easy\" ]"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"  ]"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":12}},{"path":"src/test/data/JsonSerializableFlashBackTest/typicalFlashcardFlashBack.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"{"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":"  \"_comment\": \"FlashBack save file which contains the same Flashcard values as in TypicalFlashcards#getTypicalFlashBack()\","},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"  \"flashcards\" : [ {"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"    \"question\" : \"Pythagorean theorem\","},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"    \"answer\" : \"a^2 + b^2 \u003d c^2\","},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"    \"category\" : \"Maths\","},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"    \"priority\" : \"Low\","},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"    \"remark\" : \"\","},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [ \"Equation\", \"Common\", \"Easy\" ]"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"    \"question\": \"Einstein\u0027s Equation\","},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"    \"answer\": \"e \u003d mc^2\","},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"    \"category\": \"Physics\","},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    \"priority\": \"Mid\","},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"    \"remark\" : \"\","},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [ \"Equation\", \"Common\", \"Famous\" ]"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"  }, {"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    \"question\": \"Newton\u0027s Second Law of Motion\","},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"    \"answer\": \"Force \u003d Mass * Acceleration\","},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    \"category\": \"Physics\","},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    \"priority\": \"Low\","},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"    \"remark\" : \"\","},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [\"Famous\", \"Common\"]"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"  }, {"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    \"question\": \"What is ATP?\","},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    \"answer\": \"Adenosine Triphosphate\","},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    \"category\": \"Biology\","},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    \"priority\": \"Low\","},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    \"remark\" : \"\","},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [ \"Acronym\", \"Biology\" ]"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"  }, {"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"    \"question\": \"What is the time complexity of merge sort?\","},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"    \"answer\": \"O(nlogn)\","},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"    \"category\": \"Computer Science\","},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"    \"priority\": \"High\","},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"    \"remark\" : \"\","},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [\"Runtime\", \"Sort\"]"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"  }, {"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"    \"question\": \"What is recursion?\","},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"    \"answer\": \"recursion\","},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"    \"category\": \"Computer Science\","},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"    \"priority\": \"Low\","},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"    \"remark\" : \"\","},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [\"Random\", \"Fun\"]"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"  }, {"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"    \"question\": \"What is the formula for hydrochloric acid?\","},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"    \"answer\": \"HCl\","},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"    \"category\": \"Chemistry\","},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"    \"priority\": \"High\","},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"    \"remark\" : \"\","},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"    \"tagged\" : [\"Formula\", \"Acid\"]"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"  } ]"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":53}},{"path":"src/test/java/seedu/address/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // no arguments"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // any non-empty argument list"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // empty list"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // list with all non-null elements"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":112,"author":{"gitId":"yeoutzer"},"content":"    //---------------- Tests for tagContainsWordIgnoreCase --------------------------------------"},{"lineNumber":113,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":114,"author":{"gitId":"yeoutzer"},"content":"    /*"},{"lineNumber":115,"author":{"gitId":"yeoutzer"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":116,"author":{"gitId":"yeoutzer"},"content":"     * Invalid equivalence partitions for tags: null"},{"lineNumber":117,"author":{"gitId":"yeoutzer"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":118,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":120,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"yeoutzer"},"content":"    public void tagContainsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":122,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(NullPointerException.class, () -\u003e CollectionUtil"},{"lineNumber":123,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":124,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"typical\"), new Tag(\"sentence\"))), null));"},{"lineNumber":125,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":127,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"yeoutzer"},"content":"    public void tagContainsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":129,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", () -\u003e"},{"lineNumber":130,"author":{"gitId":"yeoutzer"},"content":"                CollectionUtil.tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":131,"author":{"gitId":"yeoutzer"},"content":"                .asList(new Tag(\"typical\"), new Tag(\"sentence\"))), \"  \"));"},{"lineNumber":132,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":134,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"yeoutzer"},"content":"    public void tagContainsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":136,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", () -\u003e"},{"lineNumber":137,"author":{"gitId":"yeoutzer"},"content":"                CollectionUtil.tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":138,"author":{"gitId":"yeoutzer"},"content":"                .asList(new Tag(\"typical\"), new Tag(\"sentence\"))), \"aaa BBB\"));"},{"lineNumber":139,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":141,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"yeoutzer"},"content":"    public void tagContainsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":143,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(NullPointerException.class, () -\u003e CollectionUtil"},{"lineNumber":144,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(null, \"abc\"));"},{"lineNumber":145,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":147,"author":{"gitId":"yeoutzer"},"content":"    /*"},{"lineNumber":148,"author":{"gitId":"yeoutzer"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":149,"author":{"gitId":"yeoutzer"},"content":"     *   - any word"},{"lineNumber":150,"author":{"gitId":"yeoutzer"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":151,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"yeoutzer"},"content":"     * Valid equivalence partitions for tags:"},{"lineNumber":153,"author":{"gitId":"yeoutzer"},"content":"     *   - one tag"},{"lineNumber":154,"author":{"gitId":"yeoutzer"},"content":"     *   - multiple tags"},{"lineNumber":155,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"yeoutzer"},"content":"     * Possible scenarios returning true:"},{"lineNumber":157,"author":{"gitId":"yeoutzer"},"content":"     *   - matches first tag"},{"lineNumber":158,"author":{"gitId":"yeoutzer"},"content":"     *   - last tag in tags"},{"lineNumber":159,"author":{"gitId":"yeoutzer"},"content":"     *   - middle tag in tags"},{"lineNumber":160,"author":{"gitId":"yeoutzer"},"content":"     *   - matches multiple tags"},{"lineNumber":161,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"yeoutzer"},"content":"     * Possible scenarios returning false:"},{"lineNumber":163,"author":{"gitId":"yeoutzer"},"content":"     *   - query word matches part of a tag word"},{"lineNumber":164,"author":{"gitId":"yeoutzer"},"content":"     *   - tag word matches part of the query word"},{"lineNumber":165,"author":{"gitId":"yeoutzer"},"content":"     *   - query word not in tags"},{"lineNumber":166,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"yeoutzer"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":168,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":170,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":171,"author":{"gitId":"yeoutzer"},"content":"    public void tagContainsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":172,"author":{"gitId":"yeoutzer"},"content":"        // Query word not in tags"},{"lineNumber":173,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(CollectionUtil"},{"lineNumber":174,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":175,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"aaa\"), new Tag(\"bbb\"), new Tag(\"ccc\"))), \"eee\"));"},{"lineNumber":176,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":177,"author":{"gitId":"yeoutzer"},"content":"        // Matches a partial word only"},{"lineNumber":178,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(CollectionUtil"},{"lineNumber":179,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":180,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"aaa\"), new Tag(\"bbb\"),"},{"lineNumber":181,"author":{"gitId":"yeoutzer"},"content":"                                new Tag(\"ccc\"))), \"bb\")); // Sentence word bigger than query word"},{"lineNumber":182,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(CollectionUtil"},{"lineNumber":183,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":184,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"aaa\"), new Tag(\"bbb\"),"},{"lineNumber":185,"author":{"gitId":"yeoutzer"},"content":"                                new Tag(\"ccc\"))), \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":186,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":187,"author":{"gitId":"yeoutzer"},"content":"        // Matches word in the tags, different upper/lower case letters"},{"lineNumber":188,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(CollectionUtil"},{"lineNumber":189,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":190,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"aaa\"), new Tag(\"bBb\"),"},{"lineNumber":191,"author":{"gitId":"yeoutzer"},"content":"                                new Tag(\"ccc\"))), \"aAa\")); // First word (boundary case)"},{"lineNumber":192,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(CollectionUtil"},{"lineNumber":193,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":194,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"aaa\"), new Tag(\"bBb\"),"},{"lineNumber":195,"author":{"gitId":"yeoutzer"},"content":"                                new Tag(\"ccc\"))), \"Bbb\"));"},{"lineNumber":196,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(CollectionUtil"},{"lineNumber":197,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":198,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"aaa\"), new Tag(\"bBb\"),"},{"lineNumber":199,"author":{"gitId":"yeoutzer"},"content":"                                new Tag(\"ccC\"))), \"CCc\")); // Last word (boundary case)"},{"lineNumber":200,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(CollectionUtil"},{"lineNumber":201,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":202,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"Aaa\"))), \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":203,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(CollectionUtil"},{"lineNumber":204,"author":{"gitId":"yeoutzer"},"content":"                .tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":205,"author":{"gitId":"yeoutzer"},"content":"                        .asList(new Tag(\"aaa\"), new Tag(\"bbb\"),"},{"lineNumber":206,"author":{"gitId":"yeoutzer"},"content":"                                new Tag(\"ccc\"))), \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":207,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":208,"author":{"gitId":"yeoutzer"},"content":"        // Matches multiple words in tags"},{"lineNumber":209,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(CollectionUtil.tagContainsWordIgnoreCase(new HashSet\u003cTag\u003e(Arrays"},{"lineNumber":210,"author":{"gitId":"yeoutzer"},"content":"                .asList(new Tag(\"AAA\"), new Tag(\"bBb\"),"},{"lineNumber":211,"author":{"gitId":"yeoutzer"},"content":"                        new Tag(\"ccc\"), new Tag(\"bbb\"))), \"bbB\"));"},{"lineNumber":212,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":105,"-":109}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"    //---------------- Tests for sentenceContainsWordIgnoreCase --------------------------------------"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"typical sentence\", null));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"            -\u003e StringUtil.sentenceContainsWordIgnoreCase(\"typical sentence\", \"  \"));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"            -\u003e StringUtil.sentenceContainsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(null, \"abc\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - any word"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - empty string"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - one word"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *   - multiple words"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - last word in sentence"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     *   - matches multiple words"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"     *   - query word not in sentence"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // Empty sentence"},{"lineNumber":111,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil.sentenceContainsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":112,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil.sentenceContainsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"yeoutzer"},"content":"        // Query word not in sentence"},{"lineNumber":115,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil"},{"lineNumber":116,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"aaa bbb ccc\", \"eee\"));"},{"lineNumber":117,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil"},{"lineNumber":118,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"aaa bbb ccc\", \"testing\"));"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Matches a partial word only"},{"lineNumber":121,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil"},{"lineNumber":122,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":123,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil"},{"lineNumber":124,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":127,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":128,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":129,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":130,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":131,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":132,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":133,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":134,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":135,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":136,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":139,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil.sentenceContainsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"yeoutzer"},"content":"    //---------------- Tests for sentenceContainsPartWordIgnoreCase --------------------------------------"},{"lineNumber":143,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":144,"author":{"gitId":"yeoutzer"},"content":"    /*"},{"lineNumber":145,"author":{"gitId":"yeoutzer"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":146,"author":{"gitId":"yeoutzer"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":147,"author":{"gitId":"yeoutzer"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":148,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":150,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsPartWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":152,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil"},{"lineNumber":153,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"typical sentence\", null));"},{"lineNumber":154,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":156,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsPartWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":158,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", () -\u003e"},{"lineNumber":159,"author":{"gitId":"yeoutzer"},"content":"                StringUtil.sentenceContainsPartWordIgnoreCase(\"typical sentence\", \"  \"));"},{"lineNumber":160,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":162,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":163,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsPartWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":164,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", () -\u003e"},{"lineNumber":165,"author":{"gitId":"yeoutzer"},"content":"                StringUtil.sentenceContainsPartWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"},{"lineNumber":166,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":168,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsPartWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":170,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil"},{"lineNumber":171,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(null, \"abc\"));"},{"lineNumber":172,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":174,"author":{"gitId":"yeoutzer"},"content":"    /*"},{"lineNumber":175,"author":{"gitId":"yeoutzer"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":176,"author":{"gitId":"yeoutzer"},"content":"     *   - any word"},{"lineNumber":177,"author":{"gitId":"yeoutzer"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":178,"author":{"gitId":"yeoutzer"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":179,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":180,"author":{"gitId":"yeoutzer"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":181,"author":{"gitId":"yeoutzer"},"content":"     *   - empty string"},{"lineNumber":182,"author":{"gitId":"yeoutzer"},"content":"     *   - one word"},{"lineNumber":183,"author":{"gitId":"yeoutzer"},"content":"     *   - multiple words"},{"lineNumber":184,"author":{"gitId":"yeoutzer"},"content":"     *   - sentence with extra spaces"},{"lineNumber":185,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"yeoutzer"},"content":"     * Possible scenarios returning true:"},{"lineNumber":187,"author":{"gitId":"yeoutzer"},"content":"     *   - matches first word in sentence"},{"lineNumber":188,"author":{"gitId":"yeoutzer"},"content":"     *   - last word in sentence"},{"lineNumber":189,"author":{"gitId":"yeoutzer"},"content":"     *   - middle word in sentence"},{"lineNumber":190,"author":{"gitId":"yeoutzer"},"content":"     *   - matches multiple words"},{"lineNumber":191,"author":{"gitId":"yeoutzer"},"content":"     *   - sentence word bigger than query word"},{"lineNumber":192,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"yeoutzer"},"content":"     * Possible scenarios returning false:"},{"lineNumber":194,"author":{"gitId":"yeoutzer"},"content":"     *   - query word bigger than sentence word"},{"lineNumber":195,"author":{"gitId":"yeoutzer"},"content":"     *   - query word not in sentence"},{"lineNumber":196,"author":{"gitId":"yeoutzer"},"content":"     *"},{"lineNumber":197,"author":{"gitId":"yeoutzer"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":198,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":200,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"yeoutzer"},"content":"    public void sentenceContainsPartWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":202,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":203,"author":{"gitId":"yeoutzer"},"content":"        // Empty sentence"},{"lineNumber":204,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil.sentenceContainsPartWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":205,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil.sentenceContainsPartWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":206,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":207,"author":{"gitId":"yeoutzer"},"content":"        // Query word not in sentence"},{"lineNumber":208,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil"},{"lineNumber":209,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bbb ccc\", \"ee\"));"},{"lineNumber":210,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil"},{"lineNumber":211,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bbb ccc\", \"testing\"));"},{"lineNumber":212,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":213,"author":{"gitId":"yeoutzer"},"content":"        // Matches a partial word"},{"lineNumber":214,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":215,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bbb ccc\", \"a\"));"},{"lineNumber":216,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":217,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bbb ccc\", \"b\"));"},{"lineNumber":218,"author":{"gitId":"yeoutzer"},"content":"        // Sentence word bigger than query word"},{"lineNumber":219,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":220,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"},{"lineNumber":221,"author":{"gitId":"yeoutzer"},"content":"        // Query word bigger than sentence word"},{"lineNumber":222,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(StringUtil"},{"lineNumber":223,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":226,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":227,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":228,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":229,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":230,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":231,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bBb ccc@1\", \"Cc@1\"));"},{"lineNumber":232,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":233,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":234,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":235,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"  AAA   bBb   ccc  \", \"a\"));"},{"lineNumber":236,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":237,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":238,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":239,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"Aaa\", \"a\"));"},{"lineNumber":240,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":241,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":242,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil"},{"lineNumber":243,"author":{"gitId":"yeoutzer"},"content":"                .sentenceContainsPartWordIgnoreCase(\"aaa bbb ccc\", \"  c  \"));"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":246,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil.sentenceContainsPartWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":247,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(StringUtil.sentenceContainsPartWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bB\"));"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":137,"-":130}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_EINSTEIN;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EINSTEIN;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_EINSTEIN;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_EINSTEIN;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.EINS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":30,"author":{"gitId":"zenlyj"},"content":"import seedu.address.storage.JsonFlashBackStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"zenlyj"},"content":"        JsonFlashBackStorage addressBookStorage \u003d"},{"lineNumber":47,"author":{"gitId":"zenlyj"},"content":"                new JsonFlashBackStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":74,"author":{"gitId":"zenlyj"},"content":"        JsonFlashBackStorage addressBookStorage \u003d"},{"lineNumber":75,"author":{"gitId":"zenlyj"},"content":"                new JsonFlashBackIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_EINSTEIN"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"                + ANSWER_DESC_EINSTEIN + CATEGORY_DESC_EINSTEIN"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"                + PRIORITY_DESC_EINSTEIN;"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"        Flashcard expectedFlashcard \u003d new FlashcardBuilder(EINS).withTags().build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"        expectedModel.addFlashcard(expectedFlashcard);"},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":95,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashcardList().remove(0));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":134,"author":{"gitId":"linhns"},"content":"        Model expectedModel \u003d new ModelManager(model.getFlashBack(), new UserPrefs());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"zenlyj"},"content":"    private static class JsonFlashBackIoExceptionThrowingStub extends JsonFlashBackStorage {"},{"lineNumber":155,"author":{"gitId":"zenlyj"},"content":"        private JsonFlashBackIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"zenlyj"},"content":"        public void saveFlashBack(ReadOnlyFlashBack flashBack, Path filePath) throws IOException {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":10,"Marc-97":1,"zenlyj":8,"vuminhhieunus2019":1,"linhns":6,"-":138}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"        model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    public void execute_newFlashcard_success() {"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        Flashcard validFlashcard \u003d new FlashcardBuilder().withQuestion(\"What animal cannot stick its tongue out?\")"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"                .withAnswer(\"Crocodile\").withCategory(\"Animals\").withPriority(\"Low\").build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        Model expectedModel \u003d new ModelManager(model.getFlashBack(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        expectedModel.addFlashcard(validFlashcard);"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        assertCommandSuccess(new AddCommand(validFlashcard), model,"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), expectedModel);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"    public void execute_duplicateFlashcard_throwsCommandException() {"},{"lineNumber":43,"author":{"gitId":"zenlyj"},"content":"        Flashcard flashcardInList \u003d model.getFlashBack().getCardList().get(0);"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        assertCommandFailure(new AddCommand(flashcardInList), model, AddCommand.MESSAGE_DUPLICATE_FLASHCARD);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":7,"Marc-97":1,"zenlyj":1,"linhns":6,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"        CommandResult commandResult \u003d new AddCommand(validFlashcard).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"        assertEquals(Arrays.asList(validFlashcard), modelStub.personsAdded);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        AddCommand addCommand \u003d new AddCommand(validFlashcard);"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validFlashcard);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"                AddCommand.MESSAGE_DUPLICATE_FLASHCARD, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        Flashcard alice \u003d new FlashcardBuilder().withQuestion(\"Alice\").build();"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        Flashcard bob \u003d new FlashcardBuilder().withQuestion(\"Bob\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"        public Path getFlashBackFilePath() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitId":"linhns"},"content":"        public void setFlashBackFilePath(Path addressBookFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitId":"linhns"},"content":"        public void addFlashcard(Flashcard flashcard) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"linhns"},"content":"        public void setFlashBack(ReadOnlyFlashBack newData) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"linhns"},"content":"        public ReadOnlyFlashBack getFlashBack() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitId":"linhns"},"content":"        public boolean hasFlashcard(Flashcard flashcard) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitId":"linhns"},"content":"        public void deleteFlashcard(Flashcard target) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"linhns"},"content":"        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"linhns"},"content":"        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitId":"linhns"},"content":"        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":152,"author":{"gitId":"Marc-97"},"content":"        @Override"},{"lineNumber":153,"author":{"gitId":"Marc-97"},"content":"        public void undoFlashBack() {"},{"lineNumber":154,"author":{"gitId":"Marc-97"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":157,"author":{"gitId":"Marc-97"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"Marc-97"},"content":"        public boolean canUndoFlashBack() {"},{"lineNumber":159,"author":{"gitId":"Marc-97"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":162,"author":{"gitId":"Marc-97"},"content":"        @Override"},{"lineNumber":163,"author":{"gitId":"Marc-97"},"content":"        public void commitFlashBack() {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":172,"author":{"gitId":"linhns"},"content":"        private final Flashcard flashcard;"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"linhns"},"content":"        ModelStubWithPerson(Flashcard flashcard) {"},{"lineNumber":175,"author":{"gitId":"linhns"},"content":"            requireNonNull(flashcard);"},{"lineNumber":176,"author":{"gitId":"linhns"},"content":"            this.flashcard \u003d flashcard;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":180,"author":{"gitId":"linhns"},"content":"        public boolean hasFlashcard(Flashcard flashcard) {"},{"lineNumber":181,"author":{"gitId":"linhns"},"content":"            requireNonNull(flashcard);"},{"lineNumber":182,"author":{"gitId":"zenlyj"},"content":"            return this.flashcard.isSameCard(flashcard);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":190,"author":{"gitId":"linhns"},"content":"        final ArrayList\u003cFlashcard\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":193,"author":{"gitId":"linhns"},"content":"        public boolean hasFlashcard(Flashcard flashcard) {"},{"lineNumber":194,"author":{"gitId":"linhns"},"content":"            requireNonNull(flashcard);"},{"lineNumber":195,"author":{"gitId":"zenlyj"},"content":"            return personsAdded.stream().anyMatch(flashcard::isSameCard);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitId":"linhns"},"content":"        public void addFlashcard(Flashcard flashcard) {"},{"lineNumber":200,"author":{"gitId":"linhns"},"content":"            requireNonNull(flashcard);"},{"lineNumber":201,"author":{"gitId":"linhns"},"content":"            personsAdded.add(flashcard);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitId":"linhns"},"content":"        public ReadOnlyFlashBack getFlashBack() {"},{"lineNumber":206,"author":{"gitId":"linhns"},"content":"            return new FlashBack();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":210,"author":{"gitId":"Marc-97"},"content":"        public void commitFlashBack() {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":5,"Marc-97":14,"vuminhhieunus2019":2,"zenlyj":2,"linhns":32,"-":159}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void execute_emptyFlashBack_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void execute_nonEmptyFlashBack_success() {"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"        Model model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        expectedModel.setFlashBack(new FlashBack());"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":3,"Marc-97":2,"vuminhhieunus2019":2,"linhns":2,"-":25}},{"path":"src/test/java/seedu/address/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":5,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.QuestionContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"zenlyj"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_QUESTION_EINSTEIN \u003d \"Einstein\u0027s Equation\";"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_QUESTION_OCTOPUS \u003d \"How many hearts does an Octopus have?\";"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_ANSWER_EINSTEIN \u003d \"e \u003d mc^2\";"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_ANSWER_OCTOPUS \u003d \"3\";"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_CATEGORY_EINSTEIN \u003d \"Physics\";"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_CATEGORY_OCTOPUS \u003d \"Biology\";"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_PRIORITY_EINSTEIN \u003d \"Mid\";"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_PRIORITY_OCTOPUS \u003d \"High\";"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_TAG_EQUATION \u003d \"Einstein\";"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"    public static final String VALID_TAG_GENERAL \u003d \"General\";"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"    public static final String QUESTION_DESC_EINSTEIN \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_EINSTEIN;"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"    public static final String QUESTION_DESC_OCTOPUS \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_OCTOPUS;"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"    public static final String ANSWER_DESC_EINSTEIN \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_EINSTEIN;"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"    public static final String ANSWER_DESC_OCTOPUS \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_OCTOPUS;"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"    public static final String CATEGORY_DESC_EINSTEIN \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_EINSTEIN;"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"    public static final String CATEGORY_DESC_OCTOPUS \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_OCTOPUS;"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"    public static final String PRIORITY_DESC_EINSTEIN \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_EINSTEIN;"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"    public static final String PRIORITY_DESC_OCTOPUS \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_OCTOPUS;"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"    public static final String TAG_DESC_GENERAL \u003d \" \" + PREFIX_TAG + VALID_TAG_GENERAL;"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"    public static final String TAG_DESC_EQUATION \u003d \" \" + PREFIX_TAG + VALID_TAG_EQUATION;"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + \"\"; // \u0027\u0026\u0027 not allowed in questions"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER + \"\"; // \u0027a\u0027 not allowed in answers"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"\"; // missing \u0027@\u0027 symbol"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY; // empty string not allowed for priorities"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Equation*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"    public static final EditCommand.EditCardDescriptor DESC_EINSTEIN;"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"    public static final EditCommand.EditCardDescriptor DESC_ATP;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"        DESC_EINSTEIN \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_EINSTEIN)"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"                .withAnswer(VALID_ANSWER_EINSTEIN).withCategory(VALID_CATEGORY_EINSTEIN)"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_EINSTEIN)"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"                .withTags(VALID_TAG_GENERAL).build();"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"        DESC_ATP \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_OCTOPUS)"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"                .withAnswer(VALID_ANSWER_OCTOPUS).withCategory(VALID_CATEGORY_OCTOPUS)"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_OCTOPUS)"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"                .withTags(VALID_TAG_EQUATION, VALID_TAG_GENERAL).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"yeoutzer"},"content":"     * - FlashBack, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"        FlashBack expectedFlashBack \u003d new FlashBack(actualModel.getFlashBack());"},{"lineNumber":110,"author":{"gitId":"linhns"},"content":"        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardList());"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":113,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedFlashBack, actualModel.getFlashBack());"},{"lineNumber":114,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardList());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"yeoutzer"},"content":"     * Updates {@code model}\u0027s filtered list to show only the flashcard at the given {@code targetIndex} in the"},{"lineNumber":118,"author":{"gitId":"yeoutzer"},"content":"     * {@code model}\u0027s flashcard list."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"yeoutzer"},"content":"    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"},{"lineNumber":121,"author":{"gitId":"linhns"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"linhns"},"content":"        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"},{"lineNumber":124,"author":{"gitId":"yeoutzer"},"content":"        final String[] splitName \u003d flashcard.getQuestion().fullQuestion.split(\"\\\\s+\");"},{"lineNumber":125,"author":{"gitId":"linhns"},"content":"        model.updateFilteredFlashcardList(new QuestionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"linhns"},"content":"        assertEquals(1, model.getFilteredFlashcardList().size());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":42,"vuminhhieunus2019":3,"zenlyj":1,"linhns":12,"-":72}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    private Model model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getFlashBack(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        expectedModel.deleteFlashcard(flashcardToDelete);"},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"        Model expectedModel \u003d new ModelManager(model.getFlashBack(), new UserPrefs());"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"        expectedModel.deleteFlashcard(flashcardToDelete);"},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":74,"author":{"gitId":"zenlyj"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashBack().getCardList().size());"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FLASHCARD);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":107,"author":{"gitId":"linhns"},"content":"        model.updateFilteredFlashcardList(p -\u003e false);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"        assertTrue(model.getFilteredFlashcardList().isEmpty());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":15,"Marc-97":2,"vuminhhieunus2019":2,"zenlyj":1,"linhns":10,"-":81}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_ATP;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_EINSTEIN;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_OCTOPUS;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_OCTOPUS;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EQUATION;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"zenlyj"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":27,"author":{"gitId":"zenlyj"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"    private Model model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"},{"lineNumber":40,"author":{"gitId":"zenlyj"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedFlashcard).build();"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"zenlyj"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedFlashcard);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        Model expectedModel \u003d new ModelManager(new FlashBack(model.getFlashBack()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":54,"author":{"gitId":"zenlyj"},"content":"        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredFlashcardList().size());"},{"lineNumber":55,"author":{"gitId":"zenlyj"},"content":"        Flashcard lastFlashcard \u003d model.getFilteredFlashcardList().get(indexLastCard.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"zenlyj"},"content":"        FlashcardBuilder cardInList \u003d new FlashcardBuilder(lastFlashcard);"},{"lineNumber":58,"author":{"gitId":"zenlyj"},"content":"        Flashcard editedFlashcard \u003d cardInList.withQuestion(VALID_QUESTION_OCTOPUS).withAnswer(VALID_ANSWER_OCTOPUS)"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"                .withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"                .withQuestion(VALID_QUESTION_OCTOPUS)"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"                .withAnswer(VALID_ANSWER_OCTOPUS).withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":64,"author":{"gitId":"zenlyj"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastCard, descriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"zenlyj"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedFlashcard);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"        Model expectedModel \u003d new ModelManager(new FlashBack(model.getFlashBack()), new UserPrefs());"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"        expectedModel.setFlashcard(lastFlashcard, editedFlashcard);"},{"lineNumber":70,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, new EditCardDescriptor());"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedFlashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"zenlyj"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedFlashcard);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"        Model expectedModel \u003d new ModelManager(new FlashBack(model.getFlashBack()), new UserPrefs());"},{"lineNumber":83,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"        Flashcard flashcardInFilteredList \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedFlashcard \u003d new FlashcardBuilder(flashcardInFilteredList)"},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"                .withQuestion(VALID_QUESTION_OCTOPUS).build();"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":"                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_OCTOPUS).build());"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"zenlyj"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedFlashcard);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"linhns"},"content":"        Model expectedModel \u003d new ModelManager(new FlashBack(model.getFlashBack()), new UserPrefs());"},{"lineNumber":101,"author":{"gitId":"linhns"},"content":"        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"},{"lineNumber":102,"author":{"gitId":"Marc-97"},"content":"        expectedModel.commitFlashBack();"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"zenlyj"},"content":"    public void execute_duplicateCardUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitId":"yeoutzer"},"content":"        Flashcard firstFlashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":110,"author":{"gitId":"zenlyj"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstFlashcard).build();"},{"lineNumber":111,"author":{"gitId":"yeoutzer"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_FLASHCARD, descriptor);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"zenlyj"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CARD);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"zenlyj"},"content":"    public void execute_duplicateCardFilteredList_failure() {"},{"lineNumber":118,"author":{"gitId":"yeoutzer"},"content":"        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"zenlyj"},"content":"        // edit flashcard in filtered list into a duplicate in FlashBack"},{"lineNumber":121,"author":{"gitId":"yeoutzer"},"content":"        Flashcard flashcardInList \u003d model.getFlashBack().getCardList().get(INDEX_SECOND_FLASHCARD.getZeroBased());"},{"lineNumber":122,"author":{"gitId":"yeoutzer"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"},{"lineNumber":123,"author":{"gitId":"zenlyj"},"content":"                new EditCardDescriptorBuilder(flashcardInList).build());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"zenlyj"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CARD);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"zenlyj"},"content":"    public void execute_invalidCardIndexUnfilteredList_failure() {"},{"lineNumber":130,"author":{"gitId":"linhns"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"},{"lineNumber":131,"author":{"gitId":"yeoutzer"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":132,"author":{"gitId":"yeoutzer"},"content":"                .withQuestion(VALID_QUESTION_OCTOPUS).build();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"linhns"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":140,"author":{"gitId":"zenlyj"},"content":"     * but smaller than size of FlashBack"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitId":"zenlyj"},"content":"    public void execute_invalidCardIndexFilteredList_failure() {"},{"lineNumber":144,"author":{"gitId":"yeoutzer"},"content":"        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":145,"author":{"gitId":"yeoutzer"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"},{"lineNumber":146,"author":{"gitId":"zenlyj"},"content":"        // ensures that outOfBoundIndex is still in bounds of FlashBack list"},{"lineNumber":147,"author":{"gitId":"zenlyj"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashBack().getCardList().size());"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":150,"author":{"gitId":"yeoutzer"},"content":"                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_OCTOPUS).build());"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"linhns"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":157,"author":{"gitId":"yeoutzer"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, DESC_EINSTEIN);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitId":"yeoutzer"},"content":"        EditCommand.EditCardDescriptor copyDescriptor \u003d new EditCardDescriptor(DESC_EINSTEIN);"},{"lineNumber":161,"author":{"gitId":"yeoutzer"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_FLASHCARD, copyDescriptor);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":174,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_FLASHCARD, DESC_EINSTEIN)));"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":177,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_FLASHCARD, DESC_ATP)));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":40,"Marc-97":4,"zenlyj":24,"linhns":12,"-":100}},{"path":"src/test/java/seedu/address/logic/commands/EditFlashcardDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_ATP;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_EINSTEIN;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_OCTOPUS;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_OCTOPUS;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_OCTOPUS;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_OCTOPUS;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EQUATION;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"zenlyj"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"},{"lineNumber":16,"author":{"gitId":"zenlyj"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"public class EditFlashcardDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"        EditCommand.EditCardDescriptor descriptorWithSameValues \u003d new EditCardDescriptor(DESC_EINSTEIN);"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(DESC_EINSTEIN.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(DESC_EINSTEIN.equals(DESC_EINSTEIN));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(DESC_EINSTEIN.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(DESC_EINSTEIN.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(DESC_EINSTEIN.equals(DESC_ATP));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"zenlyj"},"content":"        // different question -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"zenlyj"},"content":"        EditCommand.EditCardDescriptor editedEinstein \u003d new EditCardDescriptorBuilder(DESC_EINSTEIN)"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"                .withQuestion(VALID_QUESTION_OCTOPUS).build();"},{"lineNumber":41,"author":{"gitId":"zenlyj"},"content":"        assertFalse(DESC_EINSTEIN.equals(editedEinstein));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"zenlyj"},"content":"        // different answer -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"zenlyj"},"content":"        editedEinstein \u003d new EditCardDescriptorBuilder(DESC_EINSTEIN).withAnswer(VALID_ANSWER_OCTOPUS).build();"},{"lineNumber":45,"author":{"gitId":"zenlyj"},"content":"        assertFalse(DESC_EINSTEIN.equals(editedEinstein));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"zenlyj"},"content":"        // different category -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"zenlyj"},"content":"        editedEinstein \u003d new EditCardDescriptorBuilder(DESC_EINSTEIN).withCategory(VALID_CATEGORY_OCTOPUS).build();"},{"lineNumber":49,"author":{"gitId":"zenlyj"},"content":"        assertFalse(DESC_EINSTEIN.equals(editedEinstein));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"zenlyj"},"content":"        // different priority -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"zenlyj"},"content":"        editedEinstein \u003d new EditCardDescriptorBuilder(DESC_EINSTEIN).withPriority(VALID_PRIORITY_OCTOPUS).build();"},{"lineNumber":53,"author":{"gitId":"zenlyj"},"content":"        assertFalse(DESC_EINSTEIN.equals(editedEinstein));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"zenlyj"},"content":"        editedEinstein \u003d new EditCardDescriptorBuilder(DESC_EINSTEIN).withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":57,"author":{"gitId":"zenlyj"},"content":"        assertFalse(DESC_EINSTEIN.equals(editedEinstein));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":14,"zenlyj":16,"linhns":1,"-":28}},{"path":"src/test/java/seedu/address/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/FindCategoryCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.EINSTEIN;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.MERGE;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.NEWTON;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.RECURSION;"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.CategoryContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCategoryCommand}."},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"public class FindCategoryCommandTest {"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    private Model model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"                new CategoryContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"                new CategoryContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findFirstCommand \u003d new FindCategoryCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findSecondCommand \u003d new FindCategoryCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCategoryCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"        // different object -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"    public void execute_zeroKeywords_noFlashcardFound() {"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindCategoryCommand(predicate);"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multipleKeywords_noFlashcardFound() {"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate predicate \u003d preparePredicate(\"123 test random\");"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindCategoryCommand(predicate);"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multiplePartialKeywords_noFlashcardFound() {"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate predicate \u003d preparePredicate(\"physic comp scienc\");"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindCategoryCommand(predicate);"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multipleKeywords_multipleFlashcardFound() {"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 4);"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate predicate \u003d preparePredicate(\"Physics Computer Science\");"},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindCategoryCommand(predicate);"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Arrays.asList(EINSTEIN, NEWTON, MERGE, RECURSION), model.getFilteredFlashcardList());"},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":"     * Parses {@code userInput} into a {@code CategoryContainsKeywordsPredicate}."},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"yeoutzer"},"content":"    private CategoryContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"        return new CategoryContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":103,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":104}},{"path":"src/test/java/seedu/address/logic/commands/FindPriorityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.ACID;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.EINSTEIN;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.MERGE;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.PriorityContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPriorityCommand}."},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"public class FindPriorityCommandTest {"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    private Model model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"                new PriorityContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"                new PriorityContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findFirstCommand \u003d new FindPriorityCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findSecondCommand \u003d new FindPriorityCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findFirstCommandCopy \u003d new FindPriorityCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        // different object -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"    public void execute_zeroKeywords_noFlashcardFound() {"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindPriorityCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multipleKeywords_noFlashcardFound() {"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate predicate \u003d preparePredicate(\"123 test random\");"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindPriorityCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multipleKeywords_multipleFlashcardFound() {"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate predicate \u003d preparePredicate(\"high mid\");"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindPriorityCommand(predicate);"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Arrays.asList(EINSTEIN, MERGE, ACID), model.getFilteredFlashcardList());"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multiplePartialKeywords_multipleFlashcardFound() {"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate predicate \u003d preparePredicate(\"hi m\");"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindPriorityCommand(predicate);"},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Arrays.asList(EINSTEIN, MERGE, ACID), model.getFilteredFlashcardList());"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":"     * Parses {@code userInput} into a {@code PriorityContainsKeywordsPredicate}."},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"    private PriorityContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":101,"author":{"gitId":"yeoutzer"},"content":"        return new PriorityContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":103}},{"path":"src/test/java/seedu/address/logic/commands/FindQuestionCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.MERGE;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.NEWTON;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.RECURSION;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.QuestionContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":" * Contains integration tests (interaction with the Model) for {@code FindQuestionCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"public class FindQuestionCommandTest {"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    private Model model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"        QuestionContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        QuestionContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findFirstCommand \u003d new FindQuestionCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findSecondCommand \u003d new FindQuestionCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findFirstCommandCopy \u003d new FindQuestionCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        // different object -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"    public void execute_zeroKeywords_noFlashcardFound() {"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindQuestionCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multipleKeywords_noFlashcardFound() {"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"123 test random\");"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindQuestionCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multipleKeywords_multipleFlashcardFound() {"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"newton\u0027s merge recursion?\");"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindQuestionCommand(predicate);"},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Arrays.asList(NEWTON, MERGE, RECURSION), model.getFilteredFlashcardList());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multiplePartialKeywords_multipleFlashcardFound() {"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"new mer recursion\");"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindQuestionCommand(predicate);"},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Arrays.asList(NEWTON, MERGE, RECURSION), model.getFilteredFlashcardList());"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":"     * Parses {@code userInput} into a {@code QuestionContainsKeywordsPredicate}."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"linhns"},"content":"    private QuestionContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":101,"author":{"gitId":"linhns"},"content":"        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":39,"linhns":14,"-":50}},{"path":"src/test/java/seedu/address/logic/commands/FindTagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.*;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":" * Contains integration tests (interaction with the Model) for {@code FindTagCommand}."},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"public class FindTagCommandTest {"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"    private Model model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    public void equals() {"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findFirstCommand \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findSecondCommand \u003d new FindTagCommand(secondPredicate);"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        // same object -\u003e returns true"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        // same values -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        FindCommand findFirstCommandCopy \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"        // different types -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"        // null -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"        // different object -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"    public void execute_zeroKeywords_noFlashcardFound() {"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindTagCommand(predicate);"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multipleKeywords_noFlashcardFound() {"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"123 test nothing\");"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindTagCommand(predicate);"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multiplePartialKeywords_noFlashcardFound() {"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 0);"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"fam ea sor\");"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindTagCommand(predicate);"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredFlashcardList());"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"    public void execute_multipleKeywords_multipleFlashcardFound() {"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 4);"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"random runtime famous\");"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d new FindTagCommand(predicate);"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"        expectedModel.updateFilteredFlashcardList(predicate);"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(Arrays.asList(EINSTEIN, NEWTON, MERGE, RECURSION), model.getFilteredFlashcardList());"},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"     * Parses {@code userInput} into a {@code TagContainsKeywordsPredicate}."},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":"    private TagContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":"        return new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":100}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"        model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"        expectedModel \u003d new ModelManager(model.getFlashBack(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":5,"linhns":1,"-":33}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":11,"author":{"gitId":"Marc-97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitId":"Marc-97"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"Marc-97"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitId":"Marc-97"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":"public class UndoCommandTest {"},{"lineNumber":20,"author":{"gitId":"Marc-97"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"    @BeforeEach"},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"    public void setup() {"},{"lineNumber":24,"author":{"gitId":"Marc-97"},"content":"        model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":27,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"Marc-97"},"content":"    public void execute_undoAddCommandTest_success() {"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":"        Flashcard firstCard \u003d model.getFilteredFlashcardList().get(0);"},{"lineNumber":30,"author":{"gitId":"Marc-97"},"content":"        ObservableList\u003cFlashcard\u003e originalList \u003d model.getFilteredFlashcardList();"},{"lineNumber":31,"author":{"gitId":"Marc-97"},"content":"        model.deleteFlashcard(firstCard);"},{"lineNumber":32,"author":{"gitId":"Marc-97"},"content":"        model.commitFlashBack();"},{"lineNumber":33,"author":{"gitId":"Marc-97"},"content":"        UndoCommand command \u003d new UndoCommand();"},{"lineNumber":34,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"            CommandResult result \u003d command.execute(model);"},{"lineNumber":36,"author":{"gitId":"Marc-97"},"content":"            assertArrayEquals(model.getFilteredFlashcardList().toArray(), originalList.toArray());"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"        } catch (CommandException ex) {"},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ex);"},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":41,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"    public void execute_undoEditCommandTest_success() {"},{"lineNumber":45,"author":{"gitId":"Marc-97"},"content":"        Flashcard flashcardInFilteredList \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":46,"author":{"gitId":"Marc-97"},"content":"        Flashcard editedFlashcard \u003d new FlashcardBuilder(flashcardInFilteredList)"},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"                .withQuestion(VALID_QUESTION_OCTOPUS).build();"},{"lineNumber":48,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":49,"author":{"gitId":"Marc-97"},"content":"        ObservableList\u003cFlashcard\u003e originalList \u003d model.getFilteredFlashcardList();"},{"lineNumber":50,"author":{"gitId":"Marc-97"},"content":"        model.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"},{"lineNumber":51,"author":{"gitId":"Marc-97"},"content":"        model.commitFlashBack();"},{"lineNumber":52,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":53,"author":{"gitId":"Marc-97"},"content":"        UndoCommand command \u003d new UndoCommand();"},{"lineNumber":54,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Marc-97"},"content":"            CommandResult result \u003d command.execute(model);"},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":"            assertArrayEquals(model.getFilteredFlashcardList().toArray(), originalList.toArray());"},{"lineNumber":57,"author":{"gitId":"Marc-97"},"content":"        } catch (CommandException ex) {"},{"lineNumber":58,"author":{"gitId":"Marc-97"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ex);"},{"lineNumber":59,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"Marc-97"},"content":"    public void execute_undoAddCommand_success() {"},{"lineNumber":64,"author":{"gitId":"Marc-97"},"content":"        ObservableList\u003cFlashcard\u003e originalList \u003d model.getFilteredFlashcardList();"},{"lineNumber":65,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":"        Flashcard bob \u003d new FlashcardBuilder().withQuestion(\"Bob\").build();"},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"        model.addFlashcard(bob);"},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":"        model.commitFlashBack();"},{"lineNumber":69,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":70,"author":{"gitId":"Marc-97"},"content":"        UndoCommand command \u003d new UndoCommand();"},{"lineNumber":71,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"Marc-97"},"content":"            CommandResult result \u003d command.execute(model);"},{"lineNumber":73,"author":{"gitId":"Marc-97"},"content":"            assertArrayEquals(model.getFilteredFlashcardList().toArray(), originalList.toArray());"},{"lineNumber":74,"author":{"gitId":"Marc-97"},"content":"        } catch (CommandException ex) {"},{"lineNumber":75,"author":{"gitId":"Marc-97"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ex);"},{"lineNumber":76,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":79,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"Marc-97"},"content":"    public void execute_undoCommand_failure() {"},{"lineNumber":81,"author":{"gitId":"Marc-97"},"content":"        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":82,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Marc-97"},"content":"}"}],"authorContributionMap":{"Marc-97":83}},{"path":"src/test/java/seedu/address/logic/commands/ViewCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"public class ViewCommandTest {"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"    private Model model \u003d new ModelManager(getTypicalFlashBack(), new UserPrefs());"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    //TODO: Add more test cases after the TypicalPerson.java is updated"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"        Flashcard viewCard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_FLASHCARD);"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult("},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, viewCard),"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"                INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertCommandSuccess(viewCommand, model, expectedCommandResult, model);"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"        Flashcard viewCard \u003d model.getFilteredFlashcardList()"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"                .get(INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_FLASHCARD);"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult("},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"                String.format(ViewCommand.MESSAGE_VIEW_SUCCESS, viewCard),"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"                INDEX_FIRST_FLASHCARD.getZeroBased());"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertCommandSuccess(viewCommand, model, expectedCommandResult, model);"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFlashBack().getCardList().size());"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void equals() {"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_FLASHCARD);"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_FLASHCARD);"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"        //same object \u003d\u003e return true"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertEquals(viewFirstCommand, viewFirstCommand);"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"        //same value \u003d\u003e return true"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(viewFirstCommand, new ViewCommand(INDEX_FIRST_FLASHCARD));"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(viewSecondCommand, new ViewCommand(INDEX_SECOND_FLASHCARD));"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"        //different type"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertNotEquals(\"view\", viewFirstCommand);"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertNotEquals(null, viewFirstCommand);"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertNotEquals(viewFirstCommand, viewSecondCommand);"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"yeoutzer":8,"vuminhhieunus2019":66}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_EINSTEIN;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_OCTOPUS;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EINSTEIN;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_OCTOPUS;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_EINSTEIN;"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_OCTOPUS;"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_EINSTEIN;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_OCTOPUS;"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_EQUATION;"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GENERAL;"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_OCTOPUS;"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_OCTOPUS;"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_OCTOPUS;"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_OCTOPUS;"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EQUATION;"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GENERAL;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.AT;"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.EINS;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Answer;"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Category;"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Priority;"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Question;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"        Flashcard expectedFlashcard \u003d new FlashcardBuilder(AT).withTags(VALID_TAG_GENERAL).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_DESC_OCTOPUS"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"                + ANSWER_DESC_OCTOPUS + CATEGORY_DESC_OCTOPUS"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"                + PRIORITY_DESC_OCTOPUS + TAG_DESC_GENERAL, new AddCommand(expectedFlashcard));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, QUESTION_DESC_EINSTEIN + QUESTION_DESC_OCTOPUS"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"                + ANSWER_DESC_OCTOPUS + CATEGORY_DESC_OCTOPUS"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"                + PRIORITY_DESC_OCTOPUS + TAG_DESC_GENERAL, new AddCommand(expectedFlashcard));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_EINSTEIN"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"                + ANSWER_DESC_OCTOPUS + CATEGORY_DESC_OCTOPUS"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"                + PRIORITY_DESC_OCTOPUS + TAG_DESC_GENERAL, new AddCommand(expectedFlashcard));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_EINSTEIN + CATEGORY_DESC_OCTOPUS"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"                + PRIORITY_DESC_OCTOPUS + TAG_DESC_GENERAL, new AddCommand(expectedFlashcard));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_OCTOPUS + PRIORITY_DESC_EINSTEIN"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"                + PRIORITY_DESC_OCTOPUS + TAG_DESC_GENERAL, new AddCommand(expectedFlashcard));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        Flashcard expectedFlashcardMultipleTags \u003d new FlashcardBuilder(AT)"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"                .withTags(VALID_TAG_GENERAL, VALID_TAG_EQUATION).build();"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_OCTOPUS + PRIORITY_DESC_OCTOPUS"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"                + TAG_DESC_EQUATION + TAG_DESC_GENERAL, new AddCommand(expectedFlashcardMultipleTags));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"        Flashcard expectedFlashcard \u003d new FlashcardBuilder(EINS).withTags().build();"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, QUESTION_DESC_EINSTEIN + ANSWER_DESC_EINSTEIN"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"                        + CATEGORY_DESC_EINSTEIN + PRIORITY_DESC_EINSTEIN,"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"                new AddCommand(expectedFlashcard));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, VALID_QUESTION_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":"                        + CATEGORY_DESC_OCTOPUS + PRIORITY_DESC_OCTOPUS, expectedMessage);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":101,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, QUESTION_DESC_OCTOPUS + VALID_ANSWER_OCTOPUS"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"                        + CATEGORY_DESC_OCTOPUS + PRIORITY_DESC_OCTOPUS, expectedMessage);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":105,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":106,"author":{"gitId":"yeoutzer"},"content":"                        + VALID_CATEGORY_OCTOPUS + PRIORITY_DESC_OCTOPUS, expectedMessage);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":109,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":110,"author":{"gitId":"yeoutzer"},"content":"                        + CATEGORY_DESC_OCTOPUS + VALID_PRIORITY_OCTOPUS, expectedMessage);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":113,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, VALID_QUESTION_OCTOPUS + VALID_ANSWER_OCTOPUS"},{"lineNumber":114,"author":{"gitId":"yeoutzer"},"content":"                        + VALID_CATEGORY_OCTOPUS + VALID_PRIORITY_OCTOPUS, expectedMessage);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":120,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_OCTOPUS"},{"lineNumber":121,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_OCTOPUS + PRIORITY_DESC_OCTOPUS"},{"lineNumber":122,"author":{"gitId":"yeoutzer"},"content":"                + TAG_DESC_EQUATION + TAG_DESC_GENERAL, Question.MESSAGE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":125,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, QUESTION_DESC_OCTOPUS + INVALID_ANSWER_DESC"},{"lineNumber":126,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_OCTOPUS + PRIORITY_DESC_OCTOPUS"},{"lineNumber":127,"author":{"gitId":"yeoutzer"},"content":"                + TAG_DESC_EQUATION + TAG_DESC_GENERAL, Answer.MESSAGE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":130,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":131,"author":{"gitId":"yeoutzer"},"content":"                + INVALID_CATEGORY_DESC + PRIORITY_DESC_OCTOPUS"},{"lineNumber":132,"author":{"gitId":"yeoutzer"},"content":"                + TAG_DESC_EQUATION + TAG_DESC_GENERAL, Category.MESSAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":135,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":136,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_OCTOPUS + INVALID_PRIORITY_DESC"},{"lineNumber":137,"author":{"gitId":"yeoutzer"},"content":"                + TAG_DESC_EQUATION + TAG_DESC_GENERAL, Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":140,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, QUESTION_DESC_OCTOPUS + ANSWER_DESC_OCTOPUS"},{"lineNumber":141,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_OCTOPUS + PRIORITY_DESC_OCTOPUS"},{"lineNumber":142,"author":{"gitId":"yeoutzer"},"content":"                + INVALID_TAG_DESC + VALID_TAG_GENERAL, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":145,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_OCTOPUS"},{"lineNumber":146,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_OCTOPUS + INVALID_PRIORITY_DESC,"},{"lineNumber":147,"author":{"gitId":"linhns"},"content":"                Question.MESSAGE_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":150,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_OCTOPUS"},{"lineNumber":151,"author":{"gitId":"yeoutzer"},"content":"                + ANSWER_DESC_OCTOPUS + CATEGORY_DESC_OCTOPUS"},{"lineNumber":152,"author":{"gitId":"yeoutzer"},"content":"                + PRIORITY_DESC_OCTOPUS + TAG_DESC_EQUATION + TAG_DESC_GENERAL,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":77,"vuminhhieunus2019":3,"linhns":4,"-":71}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FLASHCARD));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_EINSTEIN;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_OCTOPUS;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EINSTEIN;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_OCTOPUS;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_EINSTEIN;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_OCTOPUS;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_EINSTEIN;"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_EQUATION;"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GENERAL;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_EINSTEIN;"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_OCTOPUS;"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EINSTEIN;"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_OCTOPUS;"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_EINSTEIN;"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_OCTOPUS;"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_EINSTEIN;"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EQUATION;"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GENERAL;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"zenlyj"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Answer;"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Category;"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Priority;"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Question;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"zenlyj"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, VALID_QUESTION_EINSTEIN, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"-5\" + QUESTION_DESC_EINSTEIN, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"0\" + QUESTION_DESC_EINSTEIN, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"zenlyj"},"content":"        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS); // invalid question"},{"lineNumber":85,"author":{"gitId":"zenlyj"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS); // invalid answer"},{"lineNumber":86,"author":{"gitId":"zenlyj"},"content":"        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS); // invalid category"},{"lineNumber":87,"author":{"gitId":"zenlyj"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS); // invalid priority"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"zenlyj"},"content":"        // invalid answer followed by valid category"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC + CATEGORY_DESC_EINSTEIN, Answer.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"zenlyj"},"content":"        // valid answer followed by invalid answer. The test case for invalid answer followed by valid answer"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"1\" + ANSWER_DESC_OCTOPUS + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"zenlyj"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Flashcard} being edited,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_GENERAL + TAG_DESC_EQUATION"},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"                + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_GENERAL + TAG_EMPTY"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"                + TAG_DESC_EQUATION, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_GENERAL"},{"lineNumber":104,"author":{"gitId":"yeoutzer"},"content":"                + TAG_DESC_EQUATION, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":107,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + INVALID_CATEGORY_DESC"},{"lineNumber":108,"author":{"gitId":"yeoutzer"},"content":"                        + VALID_PRIORITY_EINSTEIN + VALID_ANSWER_EINSTEIN,"},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"                Question.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":114,"author":{"gitId":"yeoutzer"},"content":"        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"},{"lineNumber":115,"author":{"gitId":"yeoutzer"},"content":"        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_OCTOPUS + TAG_DESC_EQUATION"},{"lineNumber":116,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_EINSTEIN + PRIORITY_DESC_EINSTEIN + QUESTION_DESC_EINSTEIN + TAG_DESC_GENERAL;"},{"lineNumber":117,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":118,"author":{"gitId":"yeoutzer"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":119,"author":{"gitId":"yeoutzer"},"content":"                .withQuestion(VALID_QUESTION_EINSTEIN)"},{"lineNumber":120,"author":{"gitId":"yeoutzer"},"content":"                .withAnswer(VALID_ANSWER_OCTOPUS).withCategory(VALID_CATEGORY_EINSTEIN)"},{"lineNumber":121,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_EINSTEIN)"},{"lineNumber":122,"author":{"gitId":"yeoutzer"},"content":"                .withTags(VALID_TAG_EQUATION, VALID_TAG_GENERAL).build();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":130,"author":{"gitId":"yeoutzer"},"content":"        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"},{"lineNumber":131,"author":{"gitId":"yeoutzer"},"content":"        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_OCTOPUS + CATEGORY_DESC_EINSTEIN;"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"yeoutzer"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_OCTOPUS)"},{"lineNumber":134,"author":{"gitId":"yeoutzer"},"content":"                .withCategory(VALID_CATEGORY_EINSTEIN).build();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":142,"author":{"gitId":"zenlyj"},"content":"        // question"},{"lineNumber":143,"author":{"gitId":"yeoutzer"},"content":"        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"},{"lineNumber":144,"author":{"gitId":"yeoutzer"},"content":"        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_EINSTEIN;"},{"lineNumber":145,"author":{"gitId":"yeoutzer"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":146,"author":{"gitId":"yeoutzer"},"content":"                .withQuestion(VALID_QUESTION_EINSTEIN).build();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"zenlyj"},"content":"        // answer"},{"lineNumber":151,"author":{"gitId":"yeoutzer"},"content":"        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_EINSTEIN;"},{"lineNumber":152,"author":{"gitId":"yeoutzer"},"content":"        descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_EINSTEIN).build();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"zenlyj"},"content":"        // category"},{"lineNumber":157,"author":{"gitId":"yeoutzer"},"content":"        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EINSTEIN;"},{"lineNumber":158,"author":{"gitId":"yeoutzer"},"content":"        descriptor \u003d new EditCardDescriptorBuilder().withCategory(VALID_CATEGORY_EINSTEIN).build();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"zenlyj"},"content":"        // priority"},{"lineNumber":163,"author":{"gitId":"yeoutzer"},"content":"        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_EINSTEIN;"},{"lineNumber":164,"author":{"gitId":"yeoutzer"},"content":"        descriptor \u003d new EditCardDescriptorBuilder().withPriority(VALID_PRIORITY_EINSTEIN).build();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":169,"author":{"gitId":"yeoutzer"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_GENERAL;"},{"lineNumber":170,"author":{"gitId":"yeoutzer"},"content":"        descriptor \u003d new EditCardDescriptorBuilder().withTags(VALID_TAG_GENERAL).build();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":177,"author":{"gitId":"yeoutzer"},"content":"        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"},{"lineNumber":178,"author":{"gitId":"yeoutzer"},"content":"        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_EINSTEIN + PRIORITY_DESC_EINSTEIN"},{"lineNumber":179,"author":{"gitId":"yeoutzer"},"content":"                + CATEGORY_DESC_EINSTEIN + TAG_DESC_GENERAL + ANSWER_DESC_EINSTEIN"},{"lineNumber":180,"author":{"gitId":"yeoutzer"},"content":"                + PRIORITY_DESC_EINSTEIN + CATEGORY_DESC_EINSTEIN + TAG_DESC_GENERAL"},{"lineNumber":181,"author":{"gitId":"yeoutzer"},"content":"                + ANSWER_DESC_OCTOPUS + PRIORITY_DESC_OCTOPUS + CATEGORY_DESC_OCTOPUS + TAG_DESC_EQUATION;"},{"lineNumber":182,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":183,"author":{"gitId":"yeoutzer"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":184,"author":{"gitId":"yeoutzer"},"content":"                .withAnswer(VALID_ANSWER_OCTOPUS).withCategory(VALID_CATEGORY_OCTOPUS)"},{"lineNumber":185,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_OCTOPUS).withTags(VALID_TAG_GENERAL, VALID_TAG_EQUATION)"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":195,"author":{"gitId":"yeoutzer"},"content":"        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"},{"lineNumber":196,"author":{"gitId":"yeoutzer"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_ANSWER_DESC + ANSWER_DESC_OCTOPUS;"},{"lineNumber":197,"author":{"gitId":"yeoutzer"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":198,"author":{"gitId":"yeoutzer"},"content":"                .withAnswer(VALID_ANSWER_OCTOPUS).build();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":203,"author":{"gitId":"yeoutzer"},"content":"        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_OCTOPUS + INVALID_ANSWER_DESC + PRIORITY_DESC_OCTOPUS"},{"lineNumber":204,"author":{"gitId":"yeoutzer"},"content":"                + ANSWER_DESC_OCTOPUS;"},{"lineNumber":205,"author":{"gitId":"yeoutzer"},"content":"        descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_OCTOPUS)"},{"lineNumber":206,"author":{"gitId":"yeoutzer"},"content":"                .withCategory(VALID_CATEGORY_OCTOPUS).withPriority(VALID_PRIORITY_OCTOPUS).build();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":213,"author":{"gitId":"yeoutzer"},"content":"        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"zenlyj"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withTags().build();"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":81,"zenlyj":14,"vuminhhieunus2019":2,"linhns":3,"-":121}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindCategoryCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindPriorityCommand;"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindQuestionCommand;"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.CategoryContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.PriorityContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.QuestionContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"    public void parse_invalidCriteria_throwsParseException() {"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        // argument with no criteria input"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"history\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        // argument length lesser than 2"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"q\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"        // argument wrong criteria input"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"h/ history\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"    public void parse_emptyArgAfterCriteria_throwsParseException() {"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"        // empty arguments after given search criteria"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"q/ \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"q/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"c/ \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"c/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"p/ \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"p/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"t/ \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        assertParseFailure(parser, \"t/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"    public void parse_validArgs_returnsFindQuestionCommand() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"                new FindQuestionCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREFIX_QUESTION + \" Alice Bob\", expectedFindCommand);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREFIX_QUESTION + \"  \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"    public void parse_validArgs_returnsFindCategoryCommand() {"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":"                new FindCategoryCommand(new CategoryContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREFIX_CATEGORY + \" Alice Bob\", expectedFindCommand);"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREFIX_CATEGORY + \"  \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"yeoutzer"},"content":"    public void parse_validArgs_returnsFindPriorityCommand() {"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":103,"author":{"gitId":"yeoutzer"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":104,"author":{"gitId":"yeoutzer"},"content":"                new FindPriorityCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":105,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREFIX_PRIORITY + \" Alice Bob\", expectedFindCommand);"},{"lineNumber":106,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":107,"author":{"gitId":"yeoutzer"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":108,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREFIX_PRIORITY + \"  \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":109,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":111,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"yeoutzer"},"content":"    public void parse_validArgs_returnsFindTagCommand() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":115,"author":{"gitId":"yeoutzer"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":116,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREFIX_TAG + \" Alice Bob\", expectedFindCommand);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":119,"author":{"gitId":"yeoutzer"},"content":"        assertParseSuccess(parser, PREFIX_TAG + \"  \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":86,"linhns":1,"-":35}},{"path":"src/test/java/seedu/address/logic/parser/FlashBackParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindCategoryCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.FindQuestionCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.CategoryContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.QuestionContainsKeywordsPredicate;"},{"lineNumber":32,"author":{"gitId":"zenlyj"},"content":"import seedu.address.testutil.EditCardDescriptorBuilder;"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardUtil;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"public class FlashBackParserTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final FlashBackParser parser \u003d new FlashBackParser();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"        Flashcard flashcard \u003d new FlashcardBuilder().build();"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(FlashcardUtil.getAddCommand(flashcard));"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        assertEquals(new AddCommand(flashcard), command);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_FLASHCARD), command);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"        Flashcard flashcard \u003d new FlashcardBuilder().build();"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(flashcard).build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"                + INDEX_FIRST_FLASHCARD.getOneBased() + \" \""},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"                + FlashcardUtil.getEditFlashcardDescriptorDetails(descriptor));"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_FLASHCARD, descriptor), command);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"    public void parseCommand_findByQuestion() throws Exception {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.COMMAND_WORD + \" \" + PREFIX_QUESTION"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"                        + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(new FindQuestionCommand(new QuestionContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"    public void parseCommand_findByCategory() throws Exception {"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"                FindCommand.COMMAND_WORD + \" \" + PREFIX_CATEGORY"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"                        + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(new FindCategoryCommand(new CategoryContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":30,"vuminhhieunus2019":2,"zenlyj":1,"linhns":3,"-":80}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Answer;"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Category;"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Priority;"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Question;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    private static final String INVALID_NAME \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"    private static final String INVALID_PHONE \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    private static final String INVALID_EMAIL \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    private static final String VALID_ADDRESS \u003d \"High\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_NAME));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"        Question expectedQuestion \u003d new Question(VALID_NAME);"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_NAME));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        Question expectedQuestion \u003d new Question(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedQuestion, ParserUtil.parseQuestion(nameWithWhitespace));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_PHONE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":94,"author":{"gitId":"linhns"},"content":"        Answer expectedAnswer \u003d new Answer(VALID_PHONE);"},{"lineNumber":95,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_PHONE));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":101,"author":{"gitId":"linhns"},"content":"        Answer expectedAnswer \u003d new Answer(VALID_PHONE);"},{"lineNumber":102,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedAnswer, ParserUtil.parseAnswer(phoneWithWhitespace));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"linhns"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_ADDRESS));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":117,"author":{"gitId":"linhns"},"content":"        Priority expectedPriority \u003d new Priority(VALID_ADDRESS);"},{"lineNumber":118,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_ADDRESS));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":124,"author":{"gitId":"linhns"},"content":"        Priority expectedPriority \u003d new Priority(VALID_ADDRESS);"},{"lineNumber":125,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedPriority, ParserUtil.parsePriority(addressWithWhitespace));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory((String) null));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":135,"author":{"gitId":"linhns"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_EMAIL));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":140,"author":{"gitId":"linhns"},"content":"        Category expectedCategory \u003d new Category(VALID_EMAIL);"},{"lineNumber":141,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_EMAIL));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":147,"author":{"gitId":"linhns"},"content":"        Category expectedCategory \u003d new Category(VALID_EMAIL);"},{"lineNumber":148,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedCategory, ParserUtil.parseCategory(emailWithWhitespace));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":3,"vuminhhieunus2019":2,"linhns":30,"-":161}},{"path":"src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"public class ViewCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void parse_validArgs_returnsViewCommand() {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_FLASHCARD));"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertParseFailure(parser, \"-10\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":24}},{"path":"src/test/java/seedu/address/model/FlashBackTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_OCTOPUS;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EQUATION;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.PYTHAGOREAN;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"public class FlashBackTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    private final FlashBack flashBack \u003d new FlashBack();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"zenlyj"},"content":"        assertEquals(Collections.emptyList(), flashBack.getCardList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e flashBack.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        FlashBack newData \u003d getTypicalFlashBack();"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"        flashBack.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        assertEquals(newData, flashBack);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN)"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_OCTOPUS).withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(PYTHAGOREAN, editedAlice);"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"        FlashBackStub newData \u003d new FlashBackStub(newFlashcards);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"        assertThrows(DuplicateFlashcardException.class, () -\u003e flashBack.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"zenlyj"},"content":"        assertThrows(NullPointerException.class, () -\u003e flashBack.hasCard(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(flashBack.hasCard(PYTHAGOREAN));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"        flashBack.addCard(PYTHAGOREAN);"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(flashBack.hasCard(PYTHAGOREAN));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"        flashBack.addCard(PYTHAGOREAN);"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN)"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_OCTOPUS).withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":78,"author":{"gitId":"zenlyj"},"content":"        assertTrue(flashBack.hasCard(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"zenlyj"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e flashBack.getCardList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"    private static class FlashBackStub implements ReadOnlyFlashBack {"},{"lineNumber":90,"author":{"gitId":"linhns"},"content":"        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"linhns"},"content":"        FlashBackStub(Collection\u003cFlashcard\u003e flashcards) {"},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"            this.flashcards.setAll(flashcards);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"zenlyj"},"content":"        public ObservableList\u003cFlashcard\u003e getCardList() {"},{"lineNumber":98,"author":{"gitId":"linhns"},"content":"            return flashcards;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":15,"zenlyj":5,"linhns":14,"-":68}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.EINSTEIN;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.PYTHAGOREAN;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.QuestionContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashBackBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        assertEquals(new FlashBack(), new FlashBack(modelManager.getFlashBack()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"zenlyj"},"content":"        userPrefs.setFlashBackFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"zenlyj"},"content":"        userPrefs.setFlashBackFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setFlashBackFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"        modelManager.setFlashBackFilePath(path);"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"        assertEquals(path, modelManager.getFlashBackFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(modelManager.hasFlashcard(PYTHAGOREAN));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"        modelManager.addFlashcard(PYTHAGOREAN);"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(modelManager.hasFlashcard(PYTHAGOREAN));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFlashcardList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":"        FlashBack flashBack \u003d new FlashBackBuilder().withFlashcard(PYTHAGOREAN).withFlashcard(EINSTEIN).build();"},{"lineNumber":99,"author":{"gitId":"linhns"},"content":"        FlashBack differentFlashBack \u003d new FlashBack();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"        modelManager \u003d new ModelManager(flashBack, userPrefs);"},{"lineNumber":104,"author":{"gitId":"linhns"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(flashBack, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"linhns"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentFlashBack, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"yeoutzer"},"content":"        String[] keywords \u003d PYTHAGOREAN.getQuestion().fullQuestion.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"linhns"},"content":"        modelManager.updateFilteredFlashcardList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"linhns"},"content":"        assertFalse(modelManager.equals(new ModelManager(flashBack, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"linhns"},"content":"        modelManager.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"zenlyj"},"content":"        differentUserPrefs.setFlashBackFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"linhns"},"content":"        assertFalse(modelManager.equals(new ModelManager(flashBack, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":8,"zenlyj":3,"linhns":16,"-":105}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"zenlyj"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFlashBackFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":1,"-":20}},{"path":"src/test/java/seedu/address/model/flashcard/AnswerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":""},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"public class AnswerTest {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":""},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidPhone));"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    public void isValidPhone() {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"        // null phone number"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"        // invalid phone numbers"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        assertFalse(Answer.isValidAnswer(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":""},{"lineNumber":31,"author":{"gitId":"linhns"},"content":""},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"        // valid phone numbers"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        assertTrue(Answer.isValidAnswer(\"Fantasy\"));"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        assertTrue(Answer.isValidAnswer(\"-\")); // one character"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        assertTrue(Answer.isValidAnswer(\"Single-level Abstraction Principle\"));"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":37}},{"path":"src/test/java/seedu/address/model/flashcard/CategoryContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"public class CategoryContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"                new CategoryContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"                new CategoryContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"                new CategoryContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        // different object -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"    public void test_categoryContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"                new CategoryContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withCategory(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withCategory(\"Alice Bob\").build()));"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withCategory(\"Alice Carol\").build()));"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withCategory(\"Alice Bob\").build()));"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"    public void test_categoryDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"        CategoryContainsKeywordsPredicate predicate \u003d new CategoryContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withCategory(\"Alice\").build()));"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        // Non-matching keyword"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withCategory(\"Alice Bob\").build()));"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        // Non-matching partial keyword"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Ali\"));"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withCategory(\"Alice Bob\").build()));"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Bo\"));"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withCategory(\"Alice Bob\").build()));"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        // Keywords match question, answer, priority and tag, but does not match category"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"Theorem\", \"Test\", \"Mid\", \"Math\", \"Equation\"));"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Theorem\").withAnswer(\"Test\")"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"                .withCategory(\"Random\").withPriority(\"Mid\").withTags(\"Equation\").build()));"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":86}},{"path":"src/test/java/seedu/address/model/flashcard/CategoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":""},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"public class CategoryTest {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":""},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Category(null));"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidEmail));"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    public void isValidEmail() {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"        // null email"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"        // invalid category"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        assertFalse(Category.isValidCategory(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        assertFalse(Category.isValidCategory(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        assertFalse(Category.isValidCategory(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")); // 31 characters"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":""},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"        // valid category"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        assertTrue(Category.isValidCategory(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")); // 30 characters"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        assertTrue(Category.isValidCategory(\"aaaaaaaaaaaaaaaaaaaaa aaaaaaaa\")); // 30 characters with space"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":36}},{"path":"src/test/java/seedu/address/model/flashcard/FlashcardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_OCTOPUS;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_OCTOPUS;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_OCTOPUS;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_OCTOPUS;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EQUATION;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.AT;"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.PYTHAGOREAN;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"public class FlashcardTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"        Flashcard flashcard \u003d new FlashcardBuilder().build();"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e flashcard.getTags().remove(0));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(PYTHAGOREAN.isSameCard(PYTHAGOREAN));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.isSameCard(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN).withAnswer(VALID_ANSWER_OCTOPUS)"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"                .withCategory(VALID_CATEGORY_OCTOPUS)"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_OCTOPUS).withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(PYTHAGOREAN.isSameCard(editedAlice));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN).withQuestion(VALID_QUESTION_OCTOPUS).build();"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.isSameCard(editedAlice));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedBob \u003d new FlashcardBuilder(AT).withQuestion(VALID_QUESTION_OCTOPUS.toLowerCase()).build();"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(AT.isSameCard(editedBob));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        String nameWithTrailingSpaces \u003d VALID_QUESTION_OCTOPUS + \" \";"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"        editedBob \u003d new FlashcardBuilder(AT).withQuestion(nameWithTrailingSpaces).build();"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(AT.isSameCard(editedBob));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        Flashcard aliceCopy \u003d new FlashcardBuilder(PYTHAGOREAN).build();"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(PYTHAGOREAN.equals(aliceCopy));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(PYTHAGOREAN.equals(PYTHAGOREAN));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.equals(null));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.equals(5));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.equals(AT));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN).withQuestion(VALID_QUESTION_OCTOPUS).build();"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.equals(editedAlice));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"        editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN).withAnswer(VALID_ANSWER_OCTOPUS).build();"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.equals(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN).withCategory(VALID_CATEGORY_OCTOPUS).build();"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.equals(editedAlice));"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"        editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN).withPriority(VALID_PRIORITY_OCTOPUS).build();"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.equals(editedAlice));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"        editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN).withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(PYTHAGOREAN.equals(editedAlice));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":38,"linhns":3,"-":51}},{"path":"src/test/java/seedu/address/model/flashcard/PriorityContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"public class PriorityContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"                new PriorityContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"                new PriorityContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"                new PriorityContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        // different object -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"    public void test_priorityContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"                new PriorityContainsKeywordsPredicate(Collections.singletonList(\"Mid\"));"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withPriority(\"Mid\").build()));"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new PriorityContainsKeywordsPredicate(Arrays.asList(\"Mid\", \"Low\"));"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withPriority(\"Low\").build()));"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"        // Partial keyword"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new PriorityContainsKeywordsPredicate(Arrays.asList(\"Mi\"));"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withPriority(\"Mid\").build()));"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"        // Partial mixed-case keyword"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new PriorityContainsKeywordsPredicate(Arrays.asList(\"mI\"));"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withPriority(\"Mid\").build()));"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"        // Mixed-case keywords"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new PriorityContainsKeywordsPredicate(Arrays.asList(\"lOw\"));"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withPriority(\"Low\").build()));"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"    public void test_priorityDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        // Zero keywords"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        PriorityContainsKeywordsPredicate predicate \u003d new PriorityContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withPriority(\"Mid\").build()));"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        // Non-matching keyword"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new PriorityContainsKeywordsPredicate(Arrays.asList(\"Mid\"));"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withPriority(\"Low\").build()));"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        // Keywords match question, answer, category and tag, but does not match priority"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new PriorityContainsKeywordsPredicate(Arrays.asList(\"Test\", \"Random\", \"High\","},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"                \"Theorem\", \"Equation\"));"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Theorem\").withAnswer(\"Test\")"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"                .withCategory(\"Random\").withPriority(\"Mid\").withTags(\"Equation\").build()));"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":84}},{"path":"src/test/java/seedu/address/model/flashcard/PriorityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":""},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"public class PriorityTest {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":""},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    public void constructor_invalidPriority_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        String invalidPriority \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    public void isValidPriority() {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"        // invalid priorities"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        assertFalse(Priority.isValidPriority(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        assertFalse(Priority.isValidPriority(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        assertFalse(Priority.isValidPriority(\"mid\"));"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertFalse(Priority.isValidPriority(\"average\"));"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":""},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        // valid priorities"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        assertTrue(Priority.isValidPriority(\"High\"));"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        assertTrue(Priority.isValidPriority(\"Mid\"));"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        assertTrue(Priority.isValidPriority(\"Low\"));"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":1,"linhns":37}},{"path":"src/test/java/seedu/address/model/flashcard/QuestionContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"public class QuestionContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"        QuestionContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        QuestionContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"                new QuestionContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        // different object -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"    public void test_questionContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Alice Bob\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Alice Carol\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Alice Bob\").build()));"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"        // Partial keywords"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"ali\", \"b\"));"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Alice Bob\").build()));"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"        // Partial mixed-case keywords"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"alI\", \"bO\"));"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withQuestion(\"Alice Bob\").build()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"    public void test_questionDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Alice\").build()));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Alice Bob\").build()));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        // Keywords match answer, category, priority and tag, but does not match question"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Test\", \"Random\", \"Mid\", \"Math\", \"Equation\"));"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Theorem\").withAnswer(\"Test\")"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"                .withCategory(\"Random\").withPriority(\"Mid\").withTags(\"Equation\").build()));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":22,"vuminhhieunus2019":8,"linhns":7,"-":50}},{"path":"src/test/java/seedu/address/model/flashcard/QuestionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":""},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"public class QuestionTest {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":""},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Question(null));"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidName));"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    public void isValidQuestion() {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"        // null question"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        assertFalse(Question.isValidQuestion(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        assertFalse(Question.isValidQuestion(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":""},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        // valid name"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"        assertTrue(Question.isValidQuestion(\"What is the genre of Harry Potter?\")); // alphabets only"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        assertTrue(Question.isValidQuestion(\"-\")); // one character"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        assertTrue(Question.isValidQuestion(\"Explain SLAP in one sentence\")); // alphanumeric characters"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":36}},{"path":"src/test/java/seedu/address/model/flashcard/UniqueFlashcardListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package seedu.address.model.flashcard;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_OCTOPUS;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EQUATION;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.AT;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.PYTHAGOREAN;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":""},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":""},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"public class UniqueFlashcardListTest {"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":""},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":""},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":""},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(uniqueFlashcardList.contains(PYTHAGOREAN));"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":""},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(uniqueFlashcardList.contains(PYTHAGOREAN));"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":""},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN)"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_OCTOPUS).withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        assertTrue(uniqueFlashcardList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":""},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":""},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.add(PYTHAGOREAN));"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":""},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setCard(null, PYTHAGOREAN));"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":""},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setCard(PYTHAGOREAN, null));"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":""},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"                .setCard(PYTHAGOREAN, PYTHAGOREAN));"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":""},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.setCard(PYTHAGOREAN, PYTHAGOREAN);"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        expectedUniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":""},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"        Flashcard editedAlice \u003d new FlashcardBuilder(PYTHAGOREAN)"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"                .withPriority(VALID_PRIORITY_OCTOPUS).withTags(VALID_TAG_EQUATION).build();"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.setCard(PYTHAGOREAN, editedAlice);"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":"        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"        expectedUniqueFlashcardList.add(editedAlice);"},{"lineNumber":94,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":95,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"linhns"},"content":""},{"lineNumber":97,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"linhns"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.setCard(PYTHAGOREAN, AT);"},{"lineNumber":101,"author":{"gitId":"linhns"},"content":"        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"        expectedUniqueFlashcardList.add(AT);"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":104,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"linhns"},"content":""},{"lineNumber":106,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"linhns"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":108,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":109,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(AT);"},{"lineNumber":110,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.setCard(PYTHAGOREAN, AT));"},{"lineNumber":111,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"linhns"},"content":""},{"lineNumber":113,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"linhns"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":115,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"},{"lineNumber":116,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"linhns"},"content":""},{"lineNumber":118,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"linhns"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":120,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(PYTHAGOREAN));"},{"lineNumber":121,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"linhns"},"content":""},{"lineNumber":123,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"linhns"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":125,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":126,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.remove(PYTHAGOREAN);"},{"lineNumber":127,"author":{"gitId":"linhns"},"content":"        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":128,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":129,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"linhns"},"content":""},{"lineNumber":131,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"linhns"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":133,"author":{"gitId":"zenlyj"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setCards((UniqueFlashcardList) null));"},{"lineNumber":134,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"linhns"},"content":""},{"lineNumber":136,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"linhns"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":138,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":139,"author":{"gitId":"linhns"},"content":"        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":140,"author":{"gitId":"yeoutzer"},"content":"        expectedUniqueFlashcardList.add(AT);"},{"lineNumber":141,"author":{"gitId":"zenlyj"},"content":"        uniqueFlashcardList.setCards(expectedUniqueFlashcardList);"},{"lineNumber":142,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":143,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"linhns"},"content":""},{"lineNumber":145,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"linhns"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":147,"author":{"gitId":"zenlyj"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setCards((List\u003cFlashcard\u003e) null));"},{"lineNumber":148,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"linhns"},"content":""},{"lineNumber":150,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"linhns"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":152,"author":{"gitId":"yeoutzer"},"content":"        uniqueFlashcardList.add(PYTHAGOREAN);"},{"lineNumber":153,"author":{"gitId":"yeoutzer"},"content":"        List\u003cFlashcard\u003e flashcardList \u003d Collections.singletonList(AT);"},{"lineNumber":154,"author":{"gitId":"zenlyj"},"content":"        uniqueFlashcardList.setCards(flashcardList);"},{"lineNumber":155,"author":{"gitId":"linhns"},"content":"        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":156,"author":{"gitId":"yeoutzer"},"content":"        expectedUniqueFlashcardList.add(AT);"},{"lineNumber":157,"author":{"gitId":"linhns"},"content":"        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":158,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"linhns"},"content":""},{"lineNumber":160,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"linhns"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":162,"author":{"gitId":"yeoutzer"},"content":"        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(PYTHAGOREAN, PYTHAGOREAN);"},{"lineNumber":163,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertThrows(DuplicateFlashcardException.class, () -\u003e"},{"lineNumber":164,"author":{"gitId":"zenlyj"},"content":"                uniqueFlashcardList.setCards(listWithDuplicateFlashcards));"},{"lineNumber":165,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"linhns"},"content":""},{"lineNumber":167,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"linhns"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":169,"author":{"gitId":"linhns"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":170,"author":{"gitId":"linhns"},"content":"            -\u003e uniqueFlashcardList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":171,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"yeoutzer":39,"zenlyj":5,"vuminhhieunus2019":1,"linhns":127}},{"path":"src/test/java/seedu/address/model/tag/TagContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.FlashcardBuilder;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"public class TagContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"                new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"                new TagContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"                new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        // different object -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"    public void test_tagsContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Alice\", \"Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Alice\", \"Bob\").build()));"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        // Only one matching keyword"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Alice\", \"Carol\").build()));"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        // Mixed-case keywords"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"        assertTrue(predicate.test(new FlashcardBuilder().withTags(\"Alice\", \"Bob\").build()));"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"    public void test_tagsDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Alice\").build()));"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Alice\", \"Bob\").build()));"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"        // Non-matching partial keyword"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Ali\"));"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Alice\", \"Bob\").build()));"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Bo\"));"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withTags(\"Alice\", \"Bob\").build()));"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        // Keywords match question, answer, category and priority, but does not match tags"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Theorem\", \"Test\", \"Mid\", \"Random\","},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"                \"Equation\", \"Common\"));"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Theorem\").withAnswer(\"Test\")"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"                .withCategory(\"Random\").withPriority(\"Mid\").withTags(\"Formula\").build()));"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"        assertFalse(predicate.test(new FlashcardBuilder().withQuestion(\"Theorem\").withAnswer(\"Test\")"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"                .withCategory(\"Random\").withPriority(\"Mid\").withTags(\"Formula\", \"Famous\").build()));"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":90}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedFlashcardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.storage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.EINSTEIN;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Answer;"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Category;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"import seedu.address.model.flashcard.Priority;"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Question;"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":""},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"public class JsonAdaptedFlashcardTest {"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    private static final String INVALID_QUESTION \u003d \"\";"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"    private static final String INVALID_ANSWER \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"    private static final String INVALID_CATEGORY \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"    private static final String INVALID_PRIORITY \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    private static final String INVALID_TAG \u003d \"#Equation\";"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    private static final String VALID_QUESTION \u003d EINSTEIN.getQuestion().toString();"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    private static final String VALID_ANSWER \u003d EINSTEIN.getAnswer().toString();"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"    private static final String VALID_CATEGORY \u003d EINSTEIN.getCategory().toString();"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    private static final String VALID_PRIORITY \u003d EINSTEIN.getPriority().toString();"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"    private static final String VALID_REMARK \u003d EINSTEIN.getRemark().toString();"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d EINSTEIN.getTags().stream()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard person \u003d new JsonAdaptedFlashcard(EINSTEIN);"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(EINSTEIN, person.toModelType());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"                new JsonAdaptedFlashcard(INVALID_QUESTION, VALID_ANSWER,"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"                        VALID_CATEGORY, VALID_PRIORITY, VALID_REMARK, VALID_TAGS);"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null, VALID_ANSWER, VALID_CATEGORY,"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"                VALID_PRIORITY, VALID_REMARK, VALID_TAGS);"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"                new JsonAdaptedFlashcard(VALID_QUESTION, INVALID_ANSWER, VALID_CATEGORY,"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"                        VALID_PRIORITY, VALID_REMARK, VALID_TAGS);"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, null, VALID_CATEGORY,"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"                VALID_PRIORITY, VALID_REMARK, VALID_TAGS);"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"                new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, INVALID_PRIORITY,"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"                        VALID_PRIORITY, VALID_REMARK, VALID_TAGS);"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d Category.MESSAGE_CONSTRAINTS;"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, null,"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"                VALID_PRIORITY, VALID_REMARK, VALID_TAGS);"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName());"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d"},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":"                new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, VALID_CATEGORY,"},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":"                        INVALID_CATEGORY, VALID_REMARK, VALID_TAGS);"},{"lineNumber":98,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER,"},{"lineNumber":105,"author":{"gitId":"yeoutzer"},"content":"                VALID_CATEGORY, null, VALID_REMARK, VALID_TAGS);"},{"lineNumber":106,"author":{"gitId":"linhns"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"},{"lineNumber":107,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":114,"author":{"gitId":"yeoutzer"},"content":"        JsonAdaptedFlashcard flashcard \u003d"},{"lineNumber":115,"author":{"gitId":"yeoutzer"},"content":"                new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, VALID_CATEGORY,"},{"lineNumber":116,"author":{"gitId":"yeoutzer"},"content":"                        VALID_PRIORITY, VALID_REMARK, invalidTags);"},{"lineNumber":117,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(IllegalValueException.class, flashcard::toModelType);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":48,"vuminhhieunus2019":2,"linhns":12,"-":58}},{"path":"src/test/java/seedu/address/storage/JsonFlashBackStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.DARWIN;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.IDA;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.PYTHAGOREAN;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"public class JsonFlashBackStorageTest {"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFlashBackStorageTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    private java.util.Optional\u003cReadOnlyFlashBack\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"zenlyj"},"content":"        return new JsonFlashBackStorage(Paths.get(filePath)).readFlashBack(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatFlashBack.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidFlashcardFlashBack.json\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidFlashcardFlashBack.json\"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"        FlashBack original \u003d getTypicalFlashBack();"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"        JsonFlashBackStorage jsonFlashBackStorage \u003d new JsonFlashBackStorage(filePath);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"        jsonFlashBackStorage.saveFlashBack(original, filePath);"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"        ReadOnlyFlashBack readBack \u003d jsonFlashBackStorage.readFlashBack(filePath).get();"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"        assertEquals(original, new FlashBack(readBack));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"        // Modify data, overwrite existing file, and read back"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"        original.addCard(DARWIN);"},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"        original.removeCard(PYTHAGOREAN);"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"        jsonFlashBackStorage.saveFlashBack(original, filePath);"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        readBack \u003d jsonFlashBackStorage.readFlashBack(filePath).get();"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"        assertEquals(original, new FlashBack(readBack));"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":82,"author":{"gitId":"zenlyj"},"content":"        original.addCard(IDA);"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"        jsonFlashBackStorage.saveFlashBack(original); // file path not specified"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"        readBack \u003d jsonFlashBackStorage.readFlashBack().get(); // file path not specified"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"        assertEquals(original, new FlashBack(readBack));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"linhns"},"content":"    private void saveAddressBook(ReadOnlyFlashBack addressBook, String filePath) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"zenlyj"},"content":"            new JsonFlashBackStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"zenlyj"},"content":"                    .saveFlashBack(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"linhns"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new FlashBack(), null));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":17,"zenlyj":4,"linhns":11,"-":78}},{"path":"src/test/java/seedu/address/storage/JsonSerializableFlashBackTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.testutil.TypicalFlashcards;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"public class JsonSerializableFlashBackTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"            \"data\", \"JsonSerializableFlashBackTest\");"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    private static final Path TYPICAL_FLASHCARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFlashcardFlashBack.json\");"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    private static final Path INVALID_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFlashcardFlashBack.json\");"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"    private static final Path DUPLICATE_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFlashcardFlashBack.json\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    public void toModelType_typicalFlashcardsFile_success() throws Exception {"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"        JsonSerializableFlashBack dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARDS_FILE,"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"                JsonSerializableFlashBack.class).get();"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"        FlashBack flashBackFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"        FlashBack typicalFlashBack \u003d TypicalFlashcards.getTypicalFlashBack();"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"        assertEquals(flashBackFromFile, typicalFlashBack);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"    //TODO: Might need to change invalidFlashcardFlashBack.java question field"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"    public void toModelType_invalidFlashcardFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"        JsonSerializableFlashBack dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"                JsonSerializableFlashBack.class).get();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"    public void toModelType_duplicateFlashcards_throwsIllegalValueException() throws Exception {"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"        JsonSerializableFlashBack dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_FILE,"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"                JsonSerializableFlashBack.class).get();"},{"lineNumber":45,"author":{"gitId":"zenlyj"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableFlashBack.MESSAGE_DUPLICATE_CARD,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":17,"zenlyj":1,"linhns":4,"-":27}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"        userPrefs.setFlashBackFilePath(Paths.get(\"data\", \"flashback.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"linhns":1,"-":122}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashBack;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"import seedu.address.model.ReadOnlyFlashBack;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"zenlyj"},"content":"        JsonFlashBackStorage addressBookStorage \u003d new JsonFlashBackStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        FlashBack original \u003d getTypicalFlashBack();"},{"lineNumber":58,"author":{"gitId":"zenlyj"},"content":"        storageManager.saveFlashBack(original);"},{"lineNumber":59,"author":{"gitId":"zenlyj"},"content":"        ReadOnlyFlashBack retrieved \u003d storageManager.readFlashBack().get();"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"        assertEquals(original, new FlashBack(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":65,"author":{"gitId":"zenlyj"},"content":"        assertNotNull(storageManager.getFlashBackFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":2,"zenlyj":4,"linhns":3,"-":59}},{"path":"src/test/java/seedu/address/testutil/EditCardDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"zenlyj"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"},{"lineNumber":8,"author":{"gitId":"zenlyj"},"content":"import seedu.address.model.flashcard.Answer;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Category;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":11,"author":{"gitId":"zenlyj"},"content":"import seedu.address.model.flashcard.Priority;"},{"lineNumber":12,"author":{"gitId":"zenlyj"},"content":"import seedu.address.model.flashcard.Question;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"zenlyj"},"content":" * A utility class to help with building EditCardDescriptor objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"zenlyj"},"content":"public class EditCardDescriptorBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"zenlyj"},"content":"    private EditCardDescriptor descriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitId":"zenlyj"},"content":"        descriptor \u003d new EditCardDescriptor();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptorBuilder(EditCardDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitId":"zenlyj"},"content":"        this.descriptor \u003d new EditCardDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"zenlyj"},"content":"     * Returns an {@code EditCardDescriptor} with fields containing {@code flashcard}\u0027s details"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptorBuilder(Flashcard flashcard) {"},{"lineNumber":34,"author":{"gitId":"zenlyj"},"content":"        descriptor \u003d new EditCardDescriptor();"},{"lineNumber":35,"author":{"gitId":"zenlyj"},"content":"        descriptor.setQuestion(flashcard.getQuestion());"},{"lineNumber":36,"author":{"gitId":"zenlyj"},"content":"        descriptor.setAnswer(flashcard.getAnswer());"},{"lineNumber":37,"author":{"gitId":"zenlyj"},"content":"        descriptor.setCategory(flashcard.getCategory());"},{"lineNumber":38,"author":{"gitId":"zenlyj"},"content":"        descriptor.setPriority(flashcard.getPriority());"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"        descriptor.setTags(flashcard.getTags());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"zenlyj"},"content":"     * Sets the {@code Question} of the {@code EditCardDescriptor} that we are building."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptorBuilder withQuestion(String question) {"},{"lineNumber":46,"author":{"gitId":"zenlyj"},"content":"        descriptor.setQuestion(new Question(question));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"zenlyj"},"content":"     * Sets the {@code Answer} of the {@code EditCardDescriptor} that we are building."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptorBuilder withAnswer(String answer) {"},{"lineNumber":54,"author":{"gitId":"zenlyj"},"content":"        descriptor.setAnswer(new Answer(answer));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"zenlyj"},"content":"     * Sets the {@code Email} of the {@code EditCaradDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptorBuilder withCategory(String category) {"},{"lineNumber":62,"author":{"gitId":"zenlyj"},"content":"        descriptor.setCategory(new Category(category));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"zenlyj"},"content":"     * Sets the {@code Priority} of the {@code EditCardDescriptor} that we are building."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptorBuilder withPriority(String priority) {"},{"lineNumber":70,"author":{"gitId":"zenlyj"},"content":"        descriptor.setPriority(new Priority(priority));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"zenlyj"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCardDescriptor}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptorBuilder withTags(String... tags) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"zenlyj"},"content":"    public EditCardDescriptor build() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zenlyj":33,"linhns":3,"-":51}},{"path":"src/test/java/seedu/address/testutil/FlashBackBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":" * A utility class to help with building FlashBack objects."},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":" *     {@code FlashBack fb \u003d new FlashBackBuilder().withFlashcard(new Flashcard(new Question(\"Pythagorean theorem\"),"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":" *     new Answer(\"a^2 + b^2 \u003d c^2\"), new Category(\"Maths\"), new Priority(\"Low\"))).build();}"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"public class FlashBackBuilder {"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"    private FlashBack flashBack;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    public FlashBackBuilder() {"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"        flashBack \u003d new FlashBack();"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":"    public FlashBackBuilder(FlashBack flashBack) {"},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"        this.flashBack \u003d flashBack;"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"     * Adds a new {@code Flashcard} to {@code FlashBack} that we are building."},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"    public FlashBackBuilder withFlashcard(Flashcard flashcard) {"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"        flashBack.addCard(flashcard);"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"        return this;"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"    public FlashBack build() {"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"        return flashBack;"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":35}},{"path":"src/test/java/seedu/address/testutil/FlashcardBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.*;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":" * A utility class to help with building Flashcard objects."},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"public class FlashcardBuilder {"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"    public static final String DEFAULT_QUESTION \u003d \"Pythagorean theorem\";"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"    public static final String DEFAULT_ANSWER \u003d \"a^2 + b^2 \u003d c^2\";"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":"    public static final String DEFAULT_CATEGORY \u003d \"Maths\";"},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"High\";"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    private Question question;"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"    private Answer answer;"},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"    private Category category;"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"    private Priority priority;"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"    private Remark remark;"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"     * Creates a {@code FlashcardBuilder} with the default details."},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"    public FlashcardBuilder() {"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"        question \u003d new Question(DEFAULT_QUESTION);"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"        answer \u003d new Answer(DEFAULT_ANSWER);"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"        category \u003d new Category(DEFAULT_CATEGORY);"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"    public FlashcardBuilder(Flashcard flashcardToCopy) {"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"        question \u003d flashcardToCopy.getQuestion();"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"        answer \u003d flashcardToCopy.getAnswer();"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"        category \u003d flashcardToCopy.getCategory();"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"        priority \u003d flashcardToCopy.getPriority();"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"        remark \u003d flashcardToCopy.getRemark();"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        tags \u003d new HashSet\u003c\u003e(flashcardToCopy.getTags());"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"     * Sets the {@code Question} of the {@code Flashcard} that we are building."},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"    public FlashcardBuilder withQuestion(String question) {"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"        this.question \u003d new Question(question);"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Flashcard} that we are building."},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"    public FlashcardBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":"     * Sets the {@code Priority} of the {@code Flashcard} that we are building."},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":"    public FlashcardBuilder withPriority(String priority) {"},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"        this.priority \u003d new Priority(priority);"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"     * Sets the {@code Answer} of the {@code Flashcard} that we are building."},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"    public FlashcardBuilder withAnswer(String answer) {"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"        this.answer \u003d new Answer(answer);"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"     * Sets the {@code Category} of the {@code Flashcard} that we are building."},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"    public FlashcardBuilder withCategory(String category) {"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"        this.category \u003d new Category(category);"},{"lineNumber":89,"author":{"gitId":"yeoutzer"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":92,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"yeoutzer"},"content":"     * Sets the {@code Remark} of the {@code Flashcard} that we are building."},{"lineNumber":94,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"yeoutzer"},"content":"    public FlashcardBuilder withRemark(String remark) {"},{"lineNumber":96,"author":{"gitId":"yeoutzer"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":97,"author":{"gitId":"yeoutzer"},"content":"        return this;"},{"lineNumber":98,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":100,"author":{"gitId":"yeoutzer"},"content":"    public Flashcard build() {"},{"lineNumber":101,"author":{"gitId":"yeoutzer"},"content":"        return new Flashcard(question, answer, category, priority, remark, tags);"},{"lineNumber":102,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":104,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":104}},{"path":"src/test/java/seedu/address/testutil/FlashcardUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"zenlyj"},"content":"import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":" * A utility class for Flashcard."},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"public class FlashcardUtil {"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":"     * Returns an add command string for adding the {@code flashcard}."},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"    public static String getAddCommand(Flashcard flashcard) {"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getFlashcardDetails(flashcard);"},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"     * Returns the part of command string for the given {@code flashcard}\u0027s details."},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"    public static String getFlashcardDetails(Flashcard flashcard) {"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"        sb.append(PREFIX_QUESTION + flashcard.getQuestion().fullQuestion + \" \");"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"        sb.append(PREFIX_ANSWER + flashcard.getAnswer().value + \" \");"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"        sb.append(PREFIX_CATEGORY + flashcard.getCategory().value + \" \");"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"        sb.append(PREFIX_PRIORITY + flashcard.getPriority().value + \" \");"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"        flashcard.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"     * Returns the part of command string for the given {@code EditFlashcardDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"    public static String getEditFlashcardDescriptorDetails(EditCardDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"        descriptor.getQuestion().ifPresent(name -\u003e sb.append(PREFIX_QUESTION).append(name.fullQuestion).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"        descriptor.getAnswer().ifPresent(phone -\u003e sb.append(PREFIX_ANSWER).append(phone.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"        descriptor.getCategory().ifPresent(email -\u003e sb.append(PREFIX_CATEGORY).append(email.value).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":"        descriptor.getPriority().ifPresent(address -\u003e sb.append(PREFIX_PRIORITY).append(address.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":61,"zenlyj":1}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"     * Returns the middle index of the flashcard in the {@code model}\u0027s flashcard list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"        return Index.fromOneBased(model.getFilteredFlashcardList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"     * Returns the last index of the flashcard in the {@code model}\u0027s flashcard list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"        return Index.fromOneBased(model.getFilteredFlashcardList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"    public static Flashcard getPerson(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"        return model.getFilteredFlashcardList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":3,"linhns":5,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalFlashcards.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yeoutzer"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":3,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_EINSTEIN;"},{"lineNumber":4,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_OCTOPUS;"},{"lineNumber":5,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EINSTEIN;"},{"lineNumber":6,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_OCTOPUS;"},{"lineNumber":7,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_EINSTEIN;"},{"lineNumber":8,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_OCTOPUS;"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_EINSTEIN;"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_OCTOPUS;"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EQUATION;"},{"lineNumber":12,"author":{"gitId":"yeoutzer"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GENERAL;"},{"lineNumber":13,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":14,"author":{"gitId":"yeoutzer"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"yeoutzer"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"yeoutzer"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":18,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.FlashBack;"},{"lineNumber":19,"author":{"gitId":"yeoutzer"},"content":"import seedu.address.model.flashcard.Flashcard;"},{"lineNumber":20,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":21,"author":{"gitId":"yeoutzer"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"yeoutzer"},"content":" * A utility class containing a list of {@code Flashcard} objects to be used in tests."},{"lineNumber":23,"author":{"gitId":"yeoutzer"},"content":" */"},{"lineNumber":24,"author":{"gitId":"yeoutzer"},"content":"public class TypicalFlashcards {"},{"lineNumber":25,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":26,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard PYTHAGOREAN \u003d new FlashcardBuilder().withQuestion(\"Pythagorean theorem\")"},{"lineNumber":27,"author":{"gitId":"yeoutzer"},"content":"            .withPriority(\"Low\").withCategory(\"Maths\")"},{"lineNumber":28,"author":{"gitId":"yeoutzer"},"content":"            .withAnswer(\"a^2 + b^2 \u003d c^2\").withRemark(\"\")"},{"lineNumber":29,"author":{"gitId":"yeoutzer"},"content":"            .withTags(\"Equation\", \"Common\", \"Easy\").build();"},{"lineNumber":30,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard EINSTEIN \u003d new FlashcardBuilder().withQuestion(\"Einstein\u0027s Equation\")"},{"lineNumber":31,"author":{"gitId":"yeoutzer"},"content":"            .withPriority(\"Mid\")"},{"lineNumber":32,"author":{"gitId":"yeoutzer"},"content":"            .withCategory(\"Physics\").withAnswer(\"e \u003d mc^2\").withRemark(\"\")"},{"lineNumber":33,"author":{"gitId":"yeoutzer"},"content":"            .withTags(\"Equation\", \"Common\", \"Famous\").build();"},{"lineNumber":34,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard NEWTON \u003d new FlashcardBuilder().withQuestion(\"Newton\u0027s Second Law of Motion\")"},{"lineNumber":35,"author":{"gitId":"yeoutzer"},"content":"            .withAnswer(\"Force \u003d Mass * Acceleration\").withCategory(\"Physics\").withPriority(\"Low\")"},{"lineNumber":36,"author":{"gitId":"yeoutzer"},"content":"            .withRemark(\"\").withTags(\"Famous\", \"Common\").build();"},{"lineNumber":37,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard ATP \u003d new FlashcardBuilder().withQuestion(\"What is ATP?\")"},{"lineNumber":38,"author":{"gitId":"yeoutzer"},"content":"            .withAnswer(\"Adenosine Triphosphate\").withCategory(\"Biology\").withPriority(\"Low\")"},{"lineNumber":39,"author":{"gitId":"yeoutzer"},"content":"            .withTags(\"Acronym\", \"Biology\").withRemark(\"\").build();"},{"lineNumber":40,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard MERGE \u003d new FlashcardBuilder()"},{"lineNumber":41,"author":{"gitId":"yeoutzer"},"content":"            .withQuestion(\"What is the time complexity of merge sort?\").withAnswer(\"O(nlogn)\")"},{"lineNumber":42,"author":{"gitId":"yeoutzer"},"content":"            .withCategory(\"Computer Science\").withPriority(\"High\").withRemark(\"\")"},{"lineNumber":43,"author":{"gitId":"yeoutzer"},"content":"            .withTags(\"Runtime\", \"Sort\").build();"},{"lineNumber":44,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard RECURSION \u003d new FlashcardBuilder().withQuestion(\"What is recursion?\")"},{"lineNumber":45,"author":{"gitId":"yeoutzer"},"content":"            .withAnswer(\"recursion\").withCategory(\"Computer Science\").withPriority(\"Low\").withRemark(\"\")"},{"lineNumber":46,"author":{"gitId":"yeoutzer"},"content":"            .withTags(\"Random\", \"Fun\").build();"},{"lineNumber":47,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard ACID \u003d new FlashcardBuilder()"},{"lineNumber":48,"author":{"gitId":"yeoutzer"},"content":"            .withQuestion(\"What is the formula for hydrochloric acid?\").withAnswer(\"HCl\")"},{"lineNumber":49,"author":{"gitId":"yeoutzer"},"content":"            .withCategory(\"Chemistry\").withPriority(\"High\").withRemark(\"\")"},{"lineNumber":50,"author":{"gitId":"yeoutzer"},"content":"            .withTags(\"Formula\", \"Acid\").build();"},{"lineNumber":51,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":52,"author":{"gitId":"yeoutzer"},"content":"    // Manually added"},{"lineNumber":53,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard DARWIN \u003d new FlashcardBuilder()"},{"lineNumber":54,"author":{"gitId":"yeoutzer"},"content":"            .withQuestion(\"When did Charles Darwin stop believing in Christianity?\")"},{"lineNumber":55,"author":{"gitId":"yeoutzer"},"content":"            .withAnswer(\"After the Voyage of the Beagle\")"},{"lineNumber":56,"author":{"gitId":"yeoutzer"},"content":"            .withCategory(\"History\").withPriority(\"Mid\").withRemark(\"\")"},{"lineNumber":57,"author":{"gitId":"yeoutzer"},"content":"            .withTags(\"Darwin\", \"Religion\").build();"},{"lineNumber":58,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard IDA \u003d new FlashcardBuilder().withQuestion(\"What is no in German?\").withAnswer(\"nein\")"},{"lineNumber":59,"author":{"gitId":"yeoutzer"},"content":"            .withCategory(\"German\").withPriority(\"Low\").withRemark(\"\").withTags(\"Language\", \"Common\").build();"},{"lineNumber":60,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":61,"author":{"gitId":"yeoutzer"},"content":"    // Manually added - Flashcard\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":62,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard EINS \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_EINSTEIN)"},{"lineNumber":63,"author":{"gitId":"yeoutzer"},"content":"            .withAnswer(VALID_ANSWER_EINSTEIN).withCategory(VALID_CATEGORY_EINSTEIN)"},{"lineNumber":64,"author":{"gitId":"yeoutzer"},"content":"            .withPriority(VALID_PRIORITY_EINSTEIN).withTags(VALID_TAG_GENERAL).withRemark(\"\").build();"},{"lineNumber":65,"author":{"gitId":"yeoutzer"},"content":"    public static final Flashcard AT \u003d new FlashcardBuilder().withQuestion(VALID_QUESTION_OCTOPUS)"},{"lineNumber":66,"author":{"gitId":"yeoutzer"},"content":"            .withAnswer(VALID_ANSWER_OCTOPUS).withCategory(VALID_CATEGORY_OCTOPUS)"},{"lineNumber":67,"author":{"gitId":"yeoutzer"},"content":"            .withPriority(VALID_PRIORITY_OCTOPUS).withTags(VALID_TAG_EQUATION, VALID_TAG_GENERAL)"},{"lineNumber":68,"author":{"gitId":"yeoutzer"},"content":"            .withRemark(\"\").build();"},{"lineNumber":69,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":70,"author":{"gitId":"yeoutzer"},"content":"    public static final String KEYWORD_MATCHING_SCIENCE \u003d \"Science\"; // A keyword that matches Science"},{"lineNumber":71,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":72,"author":{"gitId":"yeoutzer"},"content":"    private TypicalFlashcards() {} // prevents instantiation"},{"lineNumber":73,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":74,"author":{"gitId":"yeoutzer"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"yeoutzer"},"content":"     * Returns an {@code FlashBack} with all the typical flashcards."},{"lineNumber":76,"author":{"gitId":"yeoutzer"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"yeoutzer"},"content":"    public static FlashBack getTypicalFlashBack() {"},{"lineNumber":78,"author":{"gitId":"yeoutzer"},"content":"        FlashBack fb \u003d new FlashBack();"},{"lineNumber":79,"author":{"gitId":"yeoutzer"},"content":"        for (Flashcard flashcard : getTypicalFlashcards()) {"},{"lineNumber":80,"author":{"gitId":"yeoutzer"},"content":"            fb.addCard(flashcard);"},{"lineNumber":81,"author":{"gitId":"yeoutzer"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"yeoutzer"},"content":"        return fb;"},{"lineNumber":83,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"yeoutzer"},"content":""},{"lineNumber":85,"author":{"gitId":"yeoutzer"},"content":"    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"},{"lineNumber":86,"author":{"gitId":"yeoutzer"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(PYTHAGOREAN, EINSTEIN, NEWTON, ATP, MERGE, RECURSION, ACID));"},{"lineNumber":87,"author":{"gitId":"yeoutzer"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"yeoutzer"},"content":"}"}],"authorContributionMap":{"yeoutzer":88}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"yeoutzer"},"content":"    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"yeoutzer"},"content":"    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"yeoutzer"},"content":"    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yeoutzer":3,"-":9}}]
