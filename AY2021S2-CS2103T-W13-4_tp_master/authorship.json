[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W13-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W13-4/tp/actions)"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"# Teaching Assistant"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":"Teaching Assistant is a desktop application that provides Secondary School or Junior College teachers with an efficient tool to keep track of their **schedules, contacts and tasks** easily."},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"While it has a GUI, most of the user interactions rely on typing commands as user inputs."},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":"## Getting Started"},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":"Head over to the [User Guide](https://github.com/AY2021S2-CS2103T-W13-4/tp/blob/master/docs/UserGuide.md) to start using Teaching Assistant!"},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":"## Developer Guide"},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":"Take a look at our [Developer Guide](https://github.com/AY2021S2-CS2103T-W13-4/tp/blob/master/docs/DeveloperGuide.md) if you want to know more about our project."},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"## Authors"},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":"Teaching Assistant is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org) and will be maintained by [our team](https://github.com/AY2021S2-CS2103T-W13-4/tp/blob/master/docs/AboutUs.md)."}],"authorContributionMap":{"nicholastanvis":15,"goatygoatygoat":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":"## Team Members"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"### Lee Rong Jieh"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"\u003cimg src\u003d\"images/lrj689.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"[[github](https://github.com/lrj689)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":"### Loh Jun Yong Kevin"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"\u003cimg src\u003d\"images/kevinlohjunyong.png\" width\u003d\"200px\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"[[github](https://github.com/kevinlohjunyong)]"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"### Nicholas Tanvis"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":"\u003cimg src\u003d\"images/nicholastanvis.png\" width\u003d\"200px\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"[[github](http://github.com/nicholastanvis)]"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"goatygoatygoat"},"content":"### Shen Yang"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"goatygoatygoat"},"content":"\u003cimg src\u003d\"images/goatygoatygoat.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"goatygoatygoat"},"content":"[[github](http://github.com/goatygoatygoat)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"### Toh Sihui"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"\u003cimg src\u003d\"images/tsh22.png\" width\u003d\"200px\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"[[github](http://github.com/tsh22)]"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"nicholastanvis"},"content":"## Responsibilities"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"nicholastanvis"},"content":"Member | Responsibility 1 | Responsibility 2"},{"lineNumber":45,"author":{"gitId":"nicholastanvis"},"content":"-- | -- | --"},{"lineNumber":46,"author":{"gitId":"nicholastanvis"},"content":"Rong Jieh | Deliverables | Task IC"},{"lineNumber":47,"author":{"gitId":"nicholastanvis"},"content":"Kevin Loh | Documentation | Schedule IC"},{"lineNumber":48,"author":{"gitId":"nicholastanvis"},"content":"Nicholas | Testing | Contact IC"},{"lineNumber":49,"author":{"gitId":"nicholastanvis"},"content":"Shen Yang | Code Quality | Scheduling"},{"lineNumber":50,"author":{"gitId":"nicholastanvis"},"content":"Toh Sihui | Tool Expert | Integration"}],"authorContributionMap":{"lrj689":3,"tsh22":3,"nicholastanvis":15,"-":26,"goatygoatygoat":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"## **Appendix: Requirements**"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"### Product Scope"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"**Target user profile**:"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"* Are JC/Secondary school teachers"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"* Do not have their schedules and students\u0027 contacts digitalised"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"* Prefer to use typing over mouse/voice commands"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"**Value proposition**: efficient tool to keep track of schedules and tasks as well as find and add student contact information easily."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"### User Stories"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"### Contacts"},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":"Priority | As a... | I want to... | So that I can..."},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"--- | --- | --- | ---"},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":"high | teacher | add a contact | have a consolidated list of contacts that I require"},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":"high | teacher | delete a contact | remove a contact I no longer need"},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"medium | teacher | edit a contact | modify contact details without going through the tedious process of removing and re-adding the contact"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":"high | teacher | find and view a contact based on name | quickly find the details of a specific contact I need"},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"high | teacher | list all contacts | keep track of the contacts of all the people I have saved"},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"medium | teacher | filter contacts via tags | categorise and find a group of contacts easily"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":"### Schedules"},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":"Priority | As a... | I want to... | So that I can..."},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":"--- | --- | --- | ---"},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"high | teacher | add an event into my schedule | have a consolidated list of events"},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"high | teacher | delete an event from my schedule | remove events that have been cancelled"},{"lineNumber":30,"author":{"gitId":"nicholastanvis"},"content":"medium | teacher | edit an event in my schedule | modify event details without going through the tedious process of removing and re-adding the event"},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"high | teacher | list my schedule according to day/week | view my schedule in a more organised way"},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":"high | teacher | find and view an event based on name | see the details of an event I have saved"},{"lineNumber":33,"author":{"gitId":"nicholastanvis"},"content":"low | teacher | list all the timings in my schedule when I am free | check the timings when I am free"},{"lineNumber":34,"author":{"gitId":"nicholastanvis"},"content":"low | teacher | view all events in my schedule for a specific time period | check if I am free during that timing"},{"lineNumber":35,"author":{"gitId":"nicholastanvis"},"content":"medium | teacher | filter events via tags | categorise and find events easily"},{"lineNumber":36,"author":{"gitId":"nicholastanvis"},"content":"medium | teacher | mark and event as done | keep track of what events are remaining"},{"lineNumber":37,"author":{"gitId":"nicholastanvis"},"content":"medium | teacher | link a contact with my schedule if necessary | easily access the contact details of the person relevant to my schedule"},{"lineNumber":38,"author":{"gitId":"nicholastanvis"},"content":"low | teacher | get notified of upcoming schedules on the same day | be reminded of upcoming events"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"### Tasks"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"Priority | As a... | I want to... | So that I can..."},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"---------|---------|--------------|-----------------"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"high|teacher|add a task into my tasks list|have a consolidated list of my tasks"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"high|teacher|delete a task from my tasks list| I can remove tasks that I no longer have to do"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"medium|teacher|edit a task in my tasks list|modify task details without going through the tedious process of removing and re-adding it"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"high|teacher| list my tasks according to module/week/day|view my tasks in a more organised way"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"high|teacher|find and view a task by name|see the details of a task I have saved"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"medium|teacher|filter for tasks via tags|categorise and find tasks easily"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"### Others"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"Priority | As a... | I want to... | So that I can..."},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"---------|---------|--------------|-----------------"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"high|forgetful user|be prompted for the commands’ syntax|type all commands without memorising their syntax"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":"medium|teacher|access the guide or the commands list|eliminate the need to memorise all the commands"},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"low|teacher|confirm crucial commands with a confirmation message|avoid entering the wrong command"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"low|user adopting this products|clear all my contacts from the address book|clear dummy data easily when I use the app for testing"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"### Use Cases"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"\u003cbr\u003e"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"**Use case: Delete a contact**"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":"1. User requests to list all contacts."},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"2. Teaching Assistant shows a list of all contacts."},{"lineNumber":68,"author":{"gitId":"lrj689"},"content":"3. User requests to delete a specific contact in this list."},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"4. Teaching Assistant deletes the contact. \\"},{"lineNumber":70,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":71,"author":{"gitId":"-"},"content":"   "},{"lineNumber":72,"author":{"gitId":"-"},"content":" **Extensions**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":75,"author":{"gitId":"lrj689"},"content":"  "},{"lineNumber":76,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":77,"author":{"gitId":"-"},"content":"    "},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"lrj689"},"content":"* 3a. The given index is empty."},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":" "},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"    * 3a1. Teaching Assistant shows an error message."},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Use case resumes at step 2."},{"lineNumber":84,"author":{"gitId":"-"},"content":"    "},{"lineNumber":85,"author":{"gitId":"lrj689"},"content":"\u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"lrj689"},"content":"**Use case: Add a schedule**"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"lrj689"},"content":"**MSS**"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"lrj689"},"content":"1. User requests to add a schedule."},{"lineNumber":92,"author":{"gitId":"lrj689"},"content":"2. AddressBook adds the schedule into the list. "},{"lineNumber":93,"author":{"gitId":"lrj689"},"content":"   "},{"lineNumber":94,"author":{"gitId":"lrj689"},"content":"    Use case ends."},{"lineNumber":95,"author":{"gitId":"-"},"content":"   "},{"lineNumber":96,"author":{"gitId":"lrj689"},"content":"**Extensions**"},{"lineNumber":97,"author":{"gitId":"lrj689"},"content":"* 2a. The given date(s) are invalid."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"lrj689"},"content":"  * 2a1. Teaching Assistant shows an error message."},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"lrj689"},"content":"    Use case ends."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"lrj689"},"content":"\u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"lrj689"},"content":"**Use case: Delete a schedule**"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"lrj689"},"content":"1. User request to list schedules."},{"lineNumber":110,"author":{"gitId":"lrj689"},"content":"2. Teaching Assistant shows a list of schedules."},{"lineNumber":111,"author":{"gitId":"lrj689"},"content":"3. User requests to delete a specific schedule in the list."},{"lineNumber":112,"author":{"gitId":"lrj689"},"content":"4. Teaching Assistant deletes the schedule."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"lrj689"},"content":"    Use case ends."},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"lrj689"},"content":"* 3a. The given schedule name is invalid."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"lrj689"},"content":"  * 3a1. Teaching Assistant shows an error message."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"lrj689"},"content":"    Use case ends."},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"lrj689"},"content":"\u003cbr\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"lrj689"},"content":"1. Should work on any mainstream OS as long as it has Java 11 or above installed."},{"lineNumber":133,"author":{"gitId":"lrj689"},"content":"2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":134,"author":{"gitId":"lrj689"},"content":"3. The system should be usable by a novice who has never used virtual management applications."},{"lineNumber":135,"author":{"gitId":"lrj689"},"content":"4. The user interface should be intuitive enough for users who are not IT-savvy."},{"lineNumber":136,"author":{"gitId":"lrj689"},"content":"5. The product is offered as an open source software."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"goatygoatygoat"},"content":"**JC**\u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"goatygoatygoat"},"content":"Junior College (JC) is the post-secondary education level where students are preparing for university."},{"lineNumber":142,"author":{"gitId":"goatygoatygoat"},"content":"JC is also the high-school equivalent in other countries. Hence, JC teachers may be packed with consultation"},{"lineNumber":143,"author":{"gitId":"goatygoatygoat"},"content":"schedules which can leverage our software."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"goatygoatygoat"},"content":"**Mainstream OS**\u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"goatygoatygoat"},"content":"Mainstream operating systems are the current operating systems with a significant market share, namely Windows, Linux,"},{"lineNumber":147,"author":{"gitId":"goatygoatygoat"},"content":"Unix, and OS-X."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"goatygoatygoat"},"content":"**MSS**\u003cbr\u003e"},{"lineNumber":150,"author":{"gitId":"goatygoatygoat"},"content":"Main Success Scenario (MSS) defines the optimal outcome of our commands, i.e. in the case where no errors occurred."}],"authorContributionMap":{"tsh22":27,"lrj689":39,"nicholastanvis":24,"-":51,"goatygoatygoat":9}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"_Teaching Assistant_ is a desktop application that helps **JC/Secondary school teachers** have an efficient tool to keep"},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"track of their **schedules, contacts and tasks easily.** While it has a GUI, most of the user interactions rely on typing commands as user inputs."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":"This is a mockup of our UI."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"---"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"## Features"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":"* Users will be prompted for further inputs upon entering any command with parameters."},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"* Items in the square brackets are optional. Users can choose to leave the field empty."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"---"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"### Viewing help"},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":"Shows a message with all the commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"---"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"### Adding a contact"},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":"Adds a person\u0027s information into the address book."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"nicholastanvis"},"content":"Format: `add contact`"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"nicholastanvis"},"content":"Prompts: `name`, `number`, `[tags]`"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"nicholastanvis"},"content":"Example(s):"},{"lineNumber":39,"author":{"gitId":"nicholastanvis"},"content":"* `add contact Danny 00000000`"},{"lineNumber":40,"author":{"gitId":"nicholastanvis"},"content":"* `add contact Amy 11111111 CS2101`"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"nicholastanvis"},"content":"### Finding a contact"},{"lineNumber":43,"author":{"gitId":"nicholastanvis"},"content":"Finds an existing contact by name in the address book."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"nicholastanvis"},"content":"Format: `find contact`"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"nicholastanvis"},"content":"Prompts: `name`"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"nicholastanvis"},"content":"Example(s):"},{"lineNumber":50,"author":{"gitId":"nicholastanvis"},"content":"* `find contact Amy`"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"nicholastanvis"},"content":"### Listing contacts"},{"lineNumber":53,"author":{"gitId":"nicholastanvis"},"content":"Lists all the contacts in the address book."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"nicholastanvis"},"content":"Format: `list contacts`"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"nicholastanvis"},"content":"### Deleting a contact"},{"lineNumber":58,"author":{"gitId":"nicholastanvis"},"content":"Deletes an existing contact with the specified name in the address book."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"nicholastanvis"},"content":"Format: `delete contact`"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"nicholastanvis"},"content":"Prompts: `name`"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"nicholastanvis"},"content":"Example(s):"},{"lineNumber":65,"author":{"gitId":"nicholastanvis"},"content":"* `delete contact Danny`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"nicholastanvis"},"content":"---"},{"lineNumber":68,"author":{"gitId":"KevinLohJunYong"},"content":"### Adding a schedule"},{"lineNumber":69,"author":{"gitId":"KevinLohJunYong"},"content":"Adds a new schedule into the schedule list."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"KevinLohJunYong"},"content":"Format: `add schedule`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"KevinLohJunYong"},"content":"Prompts: `start date and time`, `end date and time`, `[tags]`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"KevinLohJunYong"},"content":"Example(s):"},{"lineNumber":76,"author":{"gitId":"KevinLohJunYong"},"content":"* `add schedule meeting 2021-02-15,2100 2021-02-15,2300`"},{"lineNumber":77,"author":{"gitId":"KevinLohJunYong"},"content":"* `add schedule consultation 2021-02-15,2300 2021-02-15,2400 consultation`"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"KevinLohJunYong"},"content":"### Finding a schedule"},{"lineNumber":80,"author":{"gitId":"KevinLohJunYong"},"content":"Finds an existing schedule by name in the schedule list."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"KevinLohJunYong"},"content":"Format: `find schedule`"},{"lineNumber":83,"author":{"gitId":"KevinLohJunYong"},"content":"* `The search is case-insensitive e.g. meeting will match Meeting`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"KevinLohJunYong"},"content":"Prompt: `name`"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"KevinLohJunYong"},"content":"Example(s):"},{"lineNumber":88,"author":{"gitId":"KevinLohJunYong"},"content":"* `find schedule meeting`"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"KevinLohJunYong"},"content":"### Listing schedules today (of the same week)"},{"lineNumber":91,"author":{"gitId":"KevinLohJunYong"},"content":"List schedules today/this week."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"KevinLohJunYong"},"content":"Format: `list schedule`"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"KevinLohJunYong"},"content":"Prompt: `by day/week`"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"KevinLohJunYong"},"content":"Example(s):"},{"lineNumber":98,"author":{"gitId":"KevinLohJunYong"},"content":"* `list schedule by day`"},{"lineNumber":99,"author":{"gitId":"KevinLohJunYong"},"content":"* `list schedule by week`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"KevinLohJunYong"},"content":"### Deleting a schedule"},{"lineNumber":102,"author":{"gitId":"KevinLohJunYong"},"content":"Deletes an existing schedule with the specified name in the schedule list."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"KevinLohJunYong"},"content":"Format: `delete schedule`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"KevinLohJunYong"},"content":"Prompt: `name`"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"KevinLohJunYong"},"content":"Example(s):"},{"lineNumber":109,"author":{"gitId":"KevinLohJunYong"},"content":"* `delete schedule meeting`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"nicholastanvis"},"content":"---"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"lrj689"},"content":"### Adding a task"},{"lineNumber":114,"author":{"gitId":"lrj689"},"content":"Adds a task into the task list."},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"lrj689"},"content":"Format: `add task`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"lrj689"},"content":"Prompts: `name`, `date`, `[tags]`"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"lrj689"},"content":"Example(s):"},{"lineNumber":121,"author":{"gitId":"lrj689"},"content":"* `add task slides 2021-02-15 CS2105T`"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"lrj689"},"content":"### Finding a task"},{"lineNumber":124,"author":{"gitId":"lrj689"},"content":"Finds an existing task by name in the task list."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"lrj689"},"content":"Format: `find task`"},{"lineNumber":127,"author":{"gitId":"lrj689"},"content":"* The search is case-insensitive e.g. slides will match Slides"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"lrj689"},"content":"Prompts: `name`"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"lrj689"},"content":"Example(s):"},{"lineNumber":132,"author":{"gitId":"lrj689"},"content":"* `find task slides`"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"lrj689"},"content":"### Listing tasks by module/day/week"},{"lineNumber":135,"author":{"gitId":"lrj689"},"content":"Lists all the tasks by the specified module/today/this week."},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"lrj689"},"content":"Format: `list tasks`"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"KevinLohJunYong"},"content":"Prompts: `by module`, `by day`, `by week`"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"lrj689"},"content":"Example(s):"},{"lineNumber":142,"author":{"gitId":"lrj689"},"content":"* `list tasks by CS2103T`"},{"lineNumber":143,"author":{"gitId":"lrj689"},"content":"* `list tasks by day`"},{"lineNumber":144,"author":{"gitId":"lrj689"},"content":"* `list tasks by week`"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"lrj689"},"content":"### Deleting a task"},{"lineNumber":147,"author":{"gitId":"lrj689"},"content":"Deletes an existing task with the specified name in the task list."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"lrj689"},"content":"Format: `delete task`"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"lrj689"},"content":"Prompt: `name`"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":154,"author":{"gitId":"lrj689"},"content":"* `delete task slides`"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"lrj689"},"content":"---"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"tsh22"},"content":"## Command summary"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"tsh22"},"content":"### Others"},{"lineNumber":161,"author":{"gitId":"tsh22"},"content":"Action | Format"},{"lineNumber":162,"author":{"gitId":"tsh22"},"content":"-------|------------------"},{"lineNumber":163,"author":{"gitId":"tsh22"},"content":"**View all commands** | `help`"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"tsh22"},"content":"### Address Book"},{"lineNumber":166,"author":{"gitId":"tsh22"},"content":"Action | Format"},{"lineNumber":167,"author":{"gitId":"tsh22"},"content":"--------|------------------"},{"lineNumber":168,"author":{"gitId":"tsh22"},"content":"**Add** | `add contact`"},{"lineNumber":169,"author":{"gitId":"tsh22"},"content":"**Find and View (by name)** | `find contact`"},{"lineNumber":170,"author":{"gitId":"tsh22"},"content":"**List** | `list contacts`"},{"lineNumber":171,"author":{"gitId":"tsh22"},"content":"**Delete** | `delete contact`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"tsh22"},"content":"### Schedule"},{"lineNumber":174,"author":{"gitId":"tsh22"},"content":"Action | Format"},{"lineNumber":175,"author":{"gitId":"tsh22"},"content":"--------|------------------"},{"lineNumber":176,"author":{"gitId":"tsh22"},"content":"**Add** | `add schedule`"},{"lineNumber":177,"author":{"gitId":"tsh22"},"content":"**Find and View (by name)** | `find schedule`"},{"lineNumber":178,"author":{"gitId":"tsh22"},"content":"**List (by day/week)** | `list schedule`"},{"lineNumber":179,"author":{"gitId":"tsh22"},"content":"**Delete** | `delete schedule `"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"tsh22"},"content":"### Tasks"},{"lineNumber":182,"author":{"gitId":"tsh22"},"content":"Action | Format"},{"lineNumber":183,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":184,"author":{"gitId":"tsh22"},"content":"**Add** | `add task`"},{"lineNumber":185,"author":{"gitId":"tsh22"},"content":"**Find and View (by name)** | `find task`"},{"lineNumber":186,"author":{"gitId":"tsh22"},"content":"**List (by day/week)** | `list tasks`"},{"lineNumber":187,"author":{"gitId":"tsh22"},"content":"**Delete** | `delete task`"}],"authorContributionMap":{"lrj689":27,"tsh22":25,"nicholastanvis":33,"-":72,"goatygoatygoat":2,"KevinLohJunYong":28}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"title: Teaching Assistant"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W13-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W13-4/tp/actions)"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W13-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W13-4/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"_Teaching Assistant_ is a desktop application that helps **JC/Secondary school teachers** have an efficient tool to keep"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"track of their **schedules, contacts and tasks easily.** While it has a GUI, most of the user interactions relies on typing commands as user inputs."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"* If you are interested in using _Teaching Assistant_, head over to the [_Quick Start_ section of the **User"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"  Guide**](UserGuide.html#quick-start)."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"* If you are interested about developing _Teaching Assistant_, the [**Developer Guide**](DeveloperGuide.html) is a good place to"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"  start."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson)"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"  , [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"tsh22":11,"-":11}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":"    public static final String MESSAGE_SCHEDULES_LISTED_OVERVIEW \u003d \"%1$d schedules listed!\";"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":"    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"    public static final String MESSAGE_TASK_DOES_NOT_EXIST \u003d \"The task provided does not exist\";"},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"    public static final String MESSAGE_SCHEDULE_DOES_NOT_EXIST \u003d \"The schedule provided does not exist!\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":1,"nicholastanvis":2,"-":12,"goatygoatygoat":1}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"    /** Returns an unmodifiable view of the filtered list of schedules */"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"    ObservableList\u003cSchedule\u003e getFilteredScheduleList();"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tsh22":8,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":"        return model.getFilteredScheduleList();"},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tsh22":12,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/AddScheduleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KevinLohJunYong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinLohJunYong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":9,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":12,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":13,"author":{"gitId":"KevinLohJunYong"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"KevinLohJunYong"},"content":" * Adds a schedule to the address book."},{"lineNumber":15,"author":{"gitId":"KevinLohJunYong"},"content":" */"},{"lineNumber":16,"author":{"gitId":"KevinLohJunYong"},"content":"public class AddScheduleCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":18,"author":{"gitId":"KevinLohJunYong"},"content":"    public static final String COMMAND_WORD \u003d \"sadd\";"},{"lineNumber":19,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":20,"author":{"gitId":"KevinLohJunYong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a schedule to the address book. \""},{"lineNumber":21,"author":{"gitId":"KevinLohJunYong"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitId":"KevinLohJunYong"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"            + PREFIX_START_DATE + \"START_DATE \""},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"            + PREFIX_END_DATE + \"END_DATE \""},{"lineNumber":25,"author":{"gitId":"KevinLohJunYong"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":26,"author":{"gitId":"KevinLohJunYong"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":"            + PREFIX_NAME + \"Exam period \""},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"            + PREFIX_START_DATE + \"2021-04-20 \""},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"            + PREFIX_END_DATE + \"2021-04-27 \""},{"lineNumber":30,"author":{"gitId":"KevinLohJunYong"},"content":"            + PREFIX_TAG + \"is added\";"},{"lineNumber":31,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":32,"author":{"gitId":"KevinLohJunYong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New schedule added: %1$s\";"},{"lineNumber":33,"author":{"gitId":"KevinLohJunYong"},"content":"    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"This schedule already exists in the address book\";"},{"lineNumber":34,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":35,"author":{"gitId":"KevinLohJunYong"},"content":"    private final Schedule toAdd;"},{"lineNumber":36,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":37,"author":{"gitId":"KevinLohJunYong"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"KevinLohJunYong"},"content":"     * Creates an AddCommand to add the specified {@code Schedule}"},{"lineNumber":39,"author":{"gitId":"KevinLohJunYong"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"KevinLohJunYong"},"content":"    public AddScheduleCommand(Schedule schedule) {"},{"lineNumber":41,"author":{"gitId":"KevinLohJunYong"},"content":"        requireNonNull(schedule);"},{"lineNumber":42,"author":{"gitId":"KevinLohJunYong"},"content":"        toAdd \u003d schedule;"},{"lineNumber":43,"author":{"gitId":"KevinLohJunYong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":45,"author":{"gitId":"KevinLohJunYong"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"KevinLohJunYong"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":47,"author":{"gitId":"KevinLohJunYong"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":49,"author":{"gitId":"KevinLohJunYong"},"content":"        if (model.hasSchedule(toAdd)) {"},{"lineNumber":50,"author":{"gitId":"KevinLohJunYong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_SCHEDULE);"},{"lineNumber":51,"author":{"gitId":"KevinLohJunYong"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":53,"author":{"gitId":"KevinLohJunYong"},"content":"        model.addSchedule(toAdd);"},{"lineNumber":54,"author":{"gitId":"KevinLohJunYong"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":55,"author":{"gitId":"KevinLohJunYong"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":57,"author":{"gitId":"KevinLohJunYong"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"KevinLohJunYong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"KevinLohJunYong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitId":"KevinLohJunYong"},"content":"                || (other instanceof AddScheduleCommand // instanceof handles nulls"},{"lineNumber":61,"author":{"gitId":"KevinLohJunYong"},"content":"                \u0026\u0026 toAdd.equals(((AddScheduleCommand) other).toAdd));"},{"lineNumber":62,"author":{"gitId":"KevinLohJunYong"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"KevinLohJunYong"},"content":"}"},{"lineNumber":64,"author":{"gitId":"KevinLohJunYong"},"content":""}],"authorContributionMap":{"nicholastanvis":9,"KevinLohJunYong":55}},{"path":"src/main/java/seedu/address/logic/commands/AddTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":" * Adds a task to Teaching Assistant."},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"public class AddTaskCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"    public static final String COMMAND_WORD \u003d \"tadd\";"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list. \""},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"            + PREFIX_NAME + \"Complete assignment 1 \""},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"            + PREFIX_DATE + \"2021-03-17 \""},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"            + PREFIX_TAG + \"CS2100\";"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list\";"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"    private final Task toAdd;"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"     * Creates an AddTaskCommand"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"     * @param task task object"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"    public AddTaskCommand(Task task) {"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"        requireNonNull(task);"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"        toAdd \u003d task;"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"        requireNonNull(model);"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"        if (model.hasTask(toAdd)) {"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"        model.addTask(toAdd);"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":"        return other \u003d\u003d this"},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"                || (other instanceof AddTaskCommand"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":61}},{"path":"src/main/java/seedu/address/logic/commands/DeleteScheduleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.ScheduleDescription;"},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":" * Deletes a schedule identified using its description"},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":" */"},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":"public class DeleteScheduleCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":"    public static final String COMMAND_WORD \u003d \"sdelete\";"},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":"            + \": Deletes the schedule identified by the description used in the schedule list.\\n\""},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"            + \"Parameters: NAME\\n\""},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"            + \"Example: \" + COMMAND_WORD + \" meeting\";"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":"    public static final String MESSAGE_DELETE_SCHEDULE_SUCCESS \u003d \"Deleted schedule: %1$s\";"},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":"    private final ScheduleDescription targetScheduleDescription;"},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"    public DeleteScheduleCommand(ScheduleDescription targetScheduleDescription) {"},{"lineNumber":30,"author":{"gitId":"nicholastanvis"},"content":"        this.targetScheduleDescription \u003d targetScheduleDescription;"},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":33,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"nicholastanvis"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"nicholastanvis"},"content":"        List\u003cSchedule\u003e lastShownScheduleList \u003d model.getFilteredScheduleList();"},{"lineNumber":37,"author":{"gitId":"nicholastanvis"},"content":"        boolean scheduleDeleted \u003d false;"},{"lineNumber":38,"author":{"gitId":"nicholastanvis"},"content":"        for (Schedule schedule : lastShownScheduleList) {"},{"lineNumber":39,"author":{"gitId":"nicholastanvis"},"content":"            if (targetScheduleDescription.toString().equals(schedule.getScheduleDescription().toString())) {"},{"lineNumber":40,"author":{"gitId":"nicholastanvis"},"content":"                model.deleteSchedule(schedule);"},{"lineNumber":41,"author":{"gitId":"nicholastanvis"},"content":"                scheduleDeleted \u003d true;"},{"lineNumber":42,"author":{"gitId":"nicholastanvis"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"nicholastanvis"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"nicholastanvis"},"content":"        if (scheduleDeleted) {"},{"lineNumber":46,"author":{"gitId":"nicholastanvis"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_SCHEDULE_SUCCESS, targetScheduleDescription));"},{"lineNumber":47,"author":{"gitId":"nicholastanvis"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"nicholastanvis"},"content":"            throw new CommandException(Messages.MESSAGE_SCHEDULE_DOES_NOT_EXIST);"},{"lineNumber":49,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":52,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"nicholastanvis"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"nicholastanvis"},"content":"        return other \u003d\u003d this"},{"lineNumber":55,"author":{"gitId":"nicholastanvis"},"content":"                || (other instanceof DeleteScheduleCommand"},{"lineNumber":56,"author":{"gitId":"nicholastanvis"},"content":"                \u0026\u0026 targetScheduleDescription.equals(((DeleteScheduleCommand) other).targetScheduleDescription));"},{"lineNumber":57,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":58}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":" * Deletes a task identified using its description"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"public class DeleteTaskCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"    public static final String COMMAND_WORD \u003d \"tdelete\";"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"            + \": Deletes the task identified by the description used in the task list.\\n\""},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"            + \"Parameters: NAME\\n\""},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"            + \"Example: \" + COMMAND_WORD + \" exam\";"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"    private final TaskDescription targetTaskDescription;"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"    public DeleteTaskCommand(TaskDescription targetTaskDescription) {"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"        this.targetTaskDescription \u003d targetTaskDescription;"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"        List\u003cTask\u003e lastShownTaskList \u003d model.getFilteredTaskList();"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"        boolean taskDeleted \u003d false;"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"        for (Task task : lastShownTaskList) {"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"            if (targetTaskDescription.toString().equals(task.getTaskDescription().toString())) {"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"                model.deleteTask(task);"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"                taskDeleted \u003d true;"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"                break;"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"        if (taskDeleted) {"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, targetTaskDescription));"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"        } else {"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"            throw new CommandException(Messages.MESSAGE_TASK_DOES_NOT_EXIST);"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":"        return other \u003d\u003d this"},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"                || (other instanceof DeleteTaskCommand"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":"                \u0026\u0026 targetTaskDescription.equals(((DeleteTaskCommand) other).targetTaskDescription));"},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":59}},{"path":"src/main/java/seedu/address/logic/commands/FindScheduleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.ScheduleNameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":" * Finds and lists all schedules whose description contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":"public class FindScheduleCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"    public static final String COMMAND_WORD \u003d \"sfind\";"},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all schedules whose description contain any of \""},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"    private final ScheduleNameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"    public FindScheduleCommand(ScheduleNameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"        model.updateFilteredScheduleList(predicate);"},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"nicholastanvis"},"content":"                String.format(Messages.MESSAGE_SCHEDULES_LISTED_OVERVIEW, model.getFilteredScheduleList().size()));"},{"lineNumber":34,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":36,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"nicholastanvis"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"nicholastanvis"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"nicholastanvis"},"content":"                || (other instanceof FindScheduleCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"nicholastanvis"},"content":"                \u0026\u0026 predicate.equals(((FindScheduleCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":42}},{"path":"src/main/java/seedu/address/logic/commands/FindTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.task.TaskNameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"public class FindTaskCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    public static final String COMMAND_WORD \u003d \"tfind\";"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose descriptions contain any of \""},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"            + \"Example: \" + COMMAND_WORD + \" homework CS2103T\";"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    private final TaskNameContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    public FindTaskCommand(TaskNameContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        requireNonNull(model);"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"        model.updateFilteredTaskList(predicate);"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"        return new CommandResult("},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"                || (other instanceof FindTaskCommand // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"                \u0026\u0026 predicate.equals(((FindTaskCommand) other).predicate)); // state check"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":41}},{"path":"src/main/java/seedu/address/logic/commands/ListScheduleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.schedule.ListScheduleFormatPredicate;"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":"public class ListScheduleCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":"    public static final String COMMAND_WORD \u003d \"slist\";"},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all schedules by \""},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":"            + \"day or week and displays them as a list sorted by date.\\n\""},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"            + \"Parameters: day/week \\n\""},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":"            + \"Example: \" + COMMAND_WORD + \" week\";"},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":17,"author":{"gitId":"goatygoatygoat"},"content":"    private final ListScheduleFormatPredicate predicate;"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":"    public ListScheduleCommand(ListScheduleFormatPredicate predicate) {"},{"lineNumber":20,"author":{"gitId":"goatygoatygoat"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":21,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"        requireNonNull(model);"},{"lineNumber":26,"author":{"gitId":"goatygoatygoat"},"content":"        model.updateFilteredScheduleList(predicate);"},{"lineNumber":27,"author":{"gitId":"goatygoatygoat"},"content":"        return new CommandResult("},{"lineNumber":28,"author":{"gitId":"goatygoatygoat"},"content":"                String.format(Messages.MESSAGE_SCHEDULES_LISTED_OVERVIEW, model.getFilteredScheduleList().size()));"},{"lineNumber":29,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":31,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"goatygoatygoat"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"goatygoatygoat"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"goatygoatygoat"},"content":"                || (other instanceof ListScheduleCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"goatygoatygoat"},"content":"                \u0026\u0026 predicate.equals(((ListScheduleCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":37}},{"path":"src/main/java/seedu/address/logic/commands/ListTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.ListTaskFormatPredicate;"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":"public class ListTaskCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":"    public static final String COMMAND_WORD \u003d \"tlist\";"},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all tasks by \""},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"            + \"day or week and displays them as a list sorted by date.\\n\""},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":"            + \"Parameters: day/week \\n\""},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"            + \"Example: \" + COMMAND_WORD + \" week\";"},{"lineNumber":17,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"    private final ListTaskFormatPredicate predicate;"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":20,"author":{"gitId":"goatygoatygoat"},"content":"    public ListTaskCommand(ListTaskFormatPredicate predicate) {"},{"lineNumber":21,"author":{"gitId":"goatygoatygoat"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":26,"author":{"gitId":"goatygoatygoat"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitId":"goatygoatygoat"},"content":"        model.updateFilteredTaskList(predicate);"},{"lineNumber":28,"author":{"gitId":"goatygoatygoat"},"content":"        return new CommandResult("},{"lineNumber":29,"author":{"gitId":"goatygoatygoat"},"content":"                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"},{"lineNumber":30,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":32,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"goatygoatygoat"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitId":"goatygoatygoat"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitId":"goatygoatygoat"},"content":"                || (other instanceof ListTaskCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitId":"goatygoatygoat"},"content":"                \u0026\u0026 predicate.equals(((ListTaskCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":38}},{"path":"src/main/java/seedu/address/logic/parser/AddScheduleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"KevinLohJunYong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":3,"author":{"gitId":"KevinLohJunYong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"KevinLohJunYong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitId":"KevinLohJunYong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"KevinLohJunYong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":7,"author":{"gitId":"KevinLohJunYong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":9,"author":{"gitId":"KevinLohJunYong"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"KevinLohJunYong"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":12,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.logic.commands.AddScheduleCommand;"},{"lineNumber":13,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.schedule.DateTime;"},{"lineNumber":15,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":16,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.model.schedule.ScheduleDescription;"},{"lineNumber":17,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":19,"author":{"gitId":"KevinLohJunYong"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"KevinLohJunYong"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":21,"author":{"gitId":"KevinLohJunYong"},"content":" */"},{"lineNumber":22,"author":{"gitId":"KevinLohJunYong"},"content":"public class AddScheduleCommandParser implements Parser\u003cAddScheduleCommand\u003e {"},{"lineNumber":23,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":24,"author":{"gitId":"KevinLohJunYong"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"KevinLohJunYong"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":26,"author":{"gitId":"KevinLohJunYong"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":27,"author":{"gitId":"KevinLohJunYong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"KevinLohJunYong"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"KevinLohJunYong"},"content":"    public AddScheduleCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"KevinLohJunYong"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitId":"KevinLohJunYong"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_TAG);"},{"lineNumber":32,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":33,"author":{"gitId":"goatygoatygoat"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE)"},{"lineNumber":34,"author":{"gitId":"KevinLohJunYong"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"KevinLohJunYong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddScheduleCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitId":"KevinLohJunYong"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"KevinLohJunYong"},"content":"        String description \u003d argMultimap.getValue(PREFIX_NAME).get();"},{"lineNumber":38,"author":{"gitId":"KevinLohJunYong"},"content":"        ScheduleDescription scheduleDescription \u003d ParserUtil.parseScheduleDescription(description);"},{"lineNumber":39,"author":{"gitId":"goatygoatygoat"},"content":"        DateTime startDate \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE).get());"},{"lineNumber":40,"author":{"gitId":"goatygoatygoat"},"content":"        DateTime endDate \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE).get());"},{"lineNumber":41,"author":{"gitId":"KevinLohJunYong"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":42,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":43,"author":{"gitId":"KevinLohJunYong"},"content":"        Schedule schedule \u003d new Schedule(scheduleDescription, startDate, endDate, tags);"},{"lineNumber":44,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":45,"author":{"gitId":"KevinLohJunYong"},"content":"        return new AddScheduleCommand(schedule);"},{"lineNumber":46,"author":{"gitId":"KevinLohJunYong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":48,"author":{"gitId":"KevinLohJunYong"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"KevinLohJunYong"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitId":"KevinLohJunYong"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitId":"KevinLohJunYong"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"KevinLohJunYong"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitId":"KevinLohJunYong"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitId":"KevinLohJunYong"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":56,"author":{"gitId":"KevinLohJunYong"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":4,"KevinLohJunYong":52}},{"path":"src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.Date;"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":" * Parses input arguments and creates a new AddTaskCommand object"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"    public AddTaskCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_TAG);"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"        TaskDescription taskDescription \u003d ParserUtil.parseTaskDescription((argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":34,"author":{"gitId":"goatygoatygoat"},"content":"        Date date \u003d ParserUtil.parseDate((argMultimap.getValue(PREFIX_DATE).get()));"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"        Task task \u003d new Task(taskDescription, date, tagList);"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"        return new AddTaskCommand(task);"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":43,"goatygoatygoat":2}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.logic.commands.AddScheduleCommand;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.logic.commands.DeleteScheduleCommand;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.logic.commands.FindScheduleCommand;"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"import seedu.address.logic.commands.FindTaskCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.logic.commands.ListScheduleCommand;"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.logic.commands.ListTaskCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":54,"author":{"gitId":"KevinLohJunYong"},"content":"        case AddScheduleCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"KevinLohJunYong"},"content":"            return new AddScheduleCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"        case AddTaskCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"            return new AddTaskCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"        case DeleteTaskCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"            return new DeleteTaskCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":72,"author":{"gitId":"nicholastanvis"},"content":"        case DeleteScheduleCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"nicholastanvis"},"content":"            return new DeleteScheduleCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"nicholastanvis"},"content":"        case FindScheduleCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitId":"nicholastanvis"},"content":"            return new FindScheduleCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":84,"author":{"gitId":"tsh22"},"content":"        case FindTaskCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitId":"tsh22"},"content":"            return new FindTaskCommandParser().parse(arguments);"},{"lineNumber":86,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"goatygoatygoat"},"content":"        case ListScheduleCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitId":"goatygoatygoat"},"content":"            return new ListScheduleCommandParser().parse(arguments);"},{"lineNumber":92,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":93,"author":{"gitId":"goatygoatygoat"},"content":"        case ListTaskCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitId":"goatygoatygoat"},"content":"            return new ListTaskCommandParser().parse(arguments);"},{"lineNumber":95,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":8,"tsh22":4,"nicholastanvis":8,"-":76,"goatygoatygoat":8,"KevinLohJunYong":3}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"KevinLohJunYong"},"content":"    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"},{"lineNumber":15,"author":{"gitId":"KevinLohJunYong"},"content":"    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":1,"-":14,"KevinLohJunYong":2}},{"path":"src/main/java/seedu/address/logic/parser/DeleteScheduleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.logic.commands.DeleteScheduleCommand;"},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.ScheduleDescription;"},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":" * Parses input arguments and creates a new DeleteScheduleCommand object"},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":" */"},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":"public class DeleteScheduleCommandParser implements Parser\u003cDeleteScheduleCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":"     * Parses the given {@code String} of arguments in the context of DeleteScheduleCommand"},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"     * and returns a DeleteScheduleCommand object for execution"},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":"     * @throws ParseException if the user does not conform to the expected format"},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":"    public DeleteScheduleCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":"            throw new ParseException(String.format("},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"                    MESSAGE_INVALID_COMMAND_FORMAT, DeleteScheduleCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":"        ScheduleDescription scheduleDescription \u003d new ScheduleDescription(trimmedArgs);"},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":"        return new DeleteScheduleCommand(scheduleDescription);"},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":29}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":" * Parses input arguments and creates a new DeleteTaskCommand object"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"     * Parses the given {@code String} of arguments in the context of DeleteTaskCommand"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"     * and returns a DeleteTaskCommand object for execution"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"     * @throws ParseException if the user does not conform to the expected format"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"    public DeleteTaskCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"            throw new ParseException(String.format("},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"                    MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"        TaskDescription taskDescription \u003d new TaskDescription(trimmedArgs);"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"        return new DeleteTaskCommand(taskDescription);"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":29}},{"path":"src/main/java/seedu/address/logic/parser/FindScheduleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.logic.commands.FindScheduleCommand;"},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.ScheduleNameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":" * Parses input arguments and creates a new FindScheduleCommand object"},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":"public class FindScheduleCommandParser implements Parser\u003cFindScheduleCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"     * Parses the given {@code String} of arguments in the context of the FindScheduleCommand"},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":"     * and returns a FindScheduleCommand object for execution."},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":"    public FindScheduleCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindScheduleCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":30,"author":{"gitId":"nicholastanvis"},"content":"        return new FindScheduleCommand(new ScheduleNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":32}},{"path":"src/main/java/seedu/address/logic/parser/FindTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import seedu.address.logic.commands.FindTaskCommand;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.task.TaskNameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"public class FindTaskCommandParser implements Parser\u003cFindTaskCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     * and returns a FindTaskCommand object for execution."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    public FindTaskCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"            throw new ParseException("},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTaskCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"        return new FindTaskCommand(new TaskNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":29}},{"path":"src/main/java/seedu/address/logic/parser/ListScheduleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.logic.commands.ListScheduleCommand;"},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.schedule.ListScheduleFormatPredicate;"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":" * Parses input arguments and creates a new ListScheduleCommand object"},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":" */"},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":"public class ListScheduleCommandParser implements Parser\u003cListScheduleCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":"     * Parses the given {@code String} of arguments in the context of the ListScheduleCommand"},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"     * and returns a ListScheduleCommand object for execution."},{"lineNumber":17,"author":{"gitId":"goatygoatygoat"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":"    public ListScheduleCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"goatygoatygoat"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitId":"goatygoatygoat"},"content":"        if (trimmedArgs.isEmpty() || (!trimmedArgs.equals(\"day\") \u0026\u0026 !trimmedArgs.equals(\"week\"))) {"},{"lineNumber":22,"author":{"gitId":"goatygoatygoat"},"content":"            throw new ParseException("},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListScheduleCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":26,"author":{"gitId":"goatygoatygoat"},"content":"        return new ListScheduleCommand(new ListScheduleFormatPredicate(trimmedArgs));"},{"lineNumber":27,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":28}},{"path":"src/main/java/seedu/address/logic/parser/ListTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.logic.commands.ListTaskCommand;"},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.ListTaskFormatPredicate;"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":" * Parses input arguments and creates a new ListTaskCommand object"},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":" */"},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":"public class ListTaskCommandParser implements Parser\u003cListTaskCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":"     * Parses the given {@code String} of arguments in the context of the ListTaskCommand"},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"     * and returns a ListTaskCommand object for execution."},{"lineNumber":17,"author":{"gitId":"goatygoatygoat"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":"    public ListTaskCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"goatygoatygoat"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitId":"goatygoatygoat"},"content":"        if (trimmedArgs.isEmpty() || (!trimmedArgs.equals(\"day\") \u0026\u0026 !trimmedArgs.equals(\"week\"))) {"},{"lineNumber":22,"author":{"gitId":"goatygoatygoat"},"content":"            throw new ParseException("},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListTaskCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":26,"author":{"gitId":"goatygoatygoat"},"content":"        return new ListTaskCommand(new ListTaskFormatPredicate(trimmedArgs));"},{"lineNumber":27,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":28}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.schedule.DateTime;"},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.ScheduleDescription;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.Date;"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"nicholastanvis"},"content":"     * Parses a {@code String description} into a {@code ScheduleDescription}."},{"lineNumber":59,"author":{"gitId":"nicholastanvis"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":60,"author":{"gitId":"nicholastanvis"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"nicholastanvis"},"content":"     * @throws ParseException if the given {@code description} is invalid."},{"lineNumber":62,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"nicholastanvis"},"content":"    public static ScheduleDescription parseScheduleDescription(String description) throws ParseException {"},{"lineNumber":64,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(description);"},{"lineNumber":65,"author":{"gitId":"nicholastanvis"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":66,"author":{"gitId":"nicholastanvis"},"content":"        if (!ScheduleDescription.isValidName(trimmedDescription)) {"},{"lineNumber":67,"author":{"gitId":"nicholastanvis"},"content":"            throw new ParseException(ScheduleDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"nicholastanvis"},"content":"        return new ScheduleDescription(trimmedDescription);"},{"lineNumber":70,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":"     * Parses a {@code String task description} into a {@code TaskDescription}"},{"lineNumber":74,"author":{"gitId":"lrj689"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"lrj689"},"content":"     * @throws ParseException if the given {@code description} is invalid"},{"lineNumber":76,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"lrj689"},"content":"    public static TaskDescription parseTaskDescription(String description) throws ParseException {"},{"lineNumber":78,"author":{"gitId":"lrj689"},"content":"        requireNonNull(description);"},{"lineNumber":79,"author":{"gitId":"lrj689"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":"        if (!TaskDescription.isValidDescription(trimmedDescription)) {"},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"            throw new ParseException(TaskDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"lrj689"},"content":"        return new TaskDescription(trimmedDescription);"},{"lineNumber":84,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":158,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"goatygoatygoat"},"content":"     * Parses a {@code String dateStr} into a {@code Date}."},{"lineNumber":160,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"goatygoatygoat"},"content":"    public static Date parseDate(String dateStr) throws ParseException {"},{"lineNumber":162,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(dateStr);"},{"lineNumber":163,"author":{"gitId":"goatygoatygoat"},"content":"        String trimmedDate \u003d dateStr.trim();"},{"lineNumber":164,"author":{"gitId":"goatygoatygoat"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":165,"author":{"gitId":"goatygoatygoat"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"goatygoatygoat"},"content":"        return new Date(trimmedDate);"},{"lineNumber":168,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":170,"author":{"gitId":"goatygoatygoat"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"goatygoatygoat"},"content":"     * Parses a {@code String dateTimeStr} into a {@code DateTime}."},{"lineNumber":172,"author":{"gitId":"goatygoatygoat"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"goatygoatygoat"},"content":"    public static DateTime parseDateTime(String dateTimeStr) throws ParseException {"},{"lineNumber":174,"author":{"gitId":"goatygoatygoat"},"content":"        requireNonNull(dateTimeStr);"},{"lineNumber":175,"author":{"gitId":"goatygoatygoat"},"content":"        String trimmedDateTime \u003d dateTimeStr.trim();"},{"lineNumber":176,"author":{"gitId":"goatygoatygoat"},"content":"        if (!DateTime.isValidDateTime(trimmedDateTime)) {"},{"lineNumber":177,"author":{"gitId":"goatygoatygoat"},"content":"            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"goatygoatygoat"},"content":"        return new DateTime(trimmedDateTime);"},{"lineNumber":180,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":15,"nicholastanvis":21,"-":124,"goatygoatygoat":21}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.UniqueScheduleList;"},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.UniqueTaskList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"    private final UniqueScheduleList schedules;"},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":35,"author":{"gitId":"nicholastanvis"},"content":"        schedules \u003d new UniqueScheduleList();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"     * Replaces the contents of the task list with {@code tasks}."},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"     * {@code tasks} must not contain duplicate tasks."},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {"},{"lineNumber":63,"author":{"gitId":"lrj689"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":64,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"     * Replaces the contents of the schedule list with {@code schedules}."},{"lineNumber":68,"author":{"gitId":"lrj689"},"content":"     * {@code schedules} must not contain duplicate schedules."},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"    public void setSchedules(List\u003cSchedule\u003e schedules) {"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":"        this.schedules.setSchedules(schedules);"},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":"        setTasks(newData.getTaskList());"},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"        setSchedules(newData.getScheduleList());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"nicholastanvis"},"content":"    //// schedule methods"},{"lineNumber":122,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":123,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"nicholastanvis"},"content":"     * Returns true if a schedule with the same identity as {@code schedule} exists in the schedule list."},{"lineNumber":125,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"nicholastanvis"},"content":"    public boolean hasSchedule(Schedule schedule) {"},{"lineNumber":127,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(schedule);"},{"lineNumber":128,"author":{"gitId":"nicholastanvis"},"content":"        return schedules.contains(schedule);"},{"lineNumber":129,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":131,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"nicholastanvis"},"content":"     * Adds a schedule to the schedule list."},{"lineNumber":133,"author":{"gitId":"nicholastanvis"},"content":"     * The schedule must not already exist in the schedule list."},{"lineNumber":134,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"lrj689"},"content":"    public void addSchedule(Schedule schedule) {"},{"lineNumber":136,"author":{"gitId":"lrj689"},"content":"        schedules.add(schedule);"},{"lineNumber":137,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":139,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"nicholastanvis"},"content":"     * Removes a schedule {@code key} from the schedule list."},{"lineNumber":141,"author":{"gitId":"nicholastanvis"},"content":"     * {@code key} must exist in the schedule list."},{"lineNumber":142,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"nicholastanvis"},"content":"    public void removeSchedule(Schedule key) {"},{"lineNumber":144,"author":{"gitId":"nicholastanvis"},"content":"        schedules.remove(key);"},{"lineNumber":145,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":147,"author":{"gitId":"nicholastanvis"},"content":"    //// task methods"},{"lineNumber":148,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":149,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"nicholastanvis"},"content":"     * Returns true if a task with the same identity as {@code task} exists in the task list."},{"lineNumber":151,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"lrj689"},"content":"    public boolean hasTask(Task task) {"},{"lineNumber":153,"author":{"gitId":"lrj689"},"content":"        requireNonNull(task);"},{"lineNumber":154,"author":{"gitId":"lrj689"},"content":"        return tasks.contains(task);"},{"lineNumber":155,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":157,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"nicholastanvis"},"content":"     * Adds a task to the task list."},{"lineNumber":159,"author":{"gitId":"nicholastanvis"},"content":"     * The task must not already exist in the task list."},{"lineNumber":160,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"lrj689"},"content":"    public void addTask(Task t) {"},{"lineNumber":162,"author":{"gitId":"lrj689"},"content":"        tasks.add(t);"},{"lineNumber":163,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":165,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"lrj689"},"content":"     * Removes {@code target} from this {@code AddressBook}."},{"lineNumber":167,"author":{"gitId":"lrj689"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":168,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"lrj689"},"content":"    public void removeTask(Task target) {"},{"lineNumber":170,"author":{"gitId":"lrj689"},"content":"        tasks.remove(target);"},{"lineNumber":171,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"nicholastanvis"},"content":"    public ObservableList\u003cSchedule\u003e getScheduleList() {"},{"lineNumber":186,"author":{"gitId":"nicholastanvis"},"content":"        return schedules.asUnmodifiableObservableList();"},{"lineNumber":187,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":189,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":190,"author":{"gitId":"goatygoatygoat"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":191,"author":{"gitId":"goatygoatygoat"},"content":"        return tasks.asUnmodifiableObservableList();"},{"lineNumber":192,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":43,"nicholastanvis":35,"-":119,"goatygoatygoat":9}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"    Predicate\u003cSchedule\u003e PREDICATE_SHOW_ALL_SCHEDULES \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"nicholastanvis"},"content":"     * Returns true if a task with the same identity as {@code task} exists in the task list."},{"lineNumber":82,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"nicholastanvis"},"content":"    boolean hasTask(Task task);"},{"lineNumber":84,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":85,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"nicholastanvis"},"content":"     * Adds the given task."},{"lineNumber":87,"author":{"gitId":"nicholastanvis"},"content":"     * {@code task} must not already exist in the task list."},{"lineNumber":88,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"nicholastanvis"},"content":"    void addTask(Task task);"},{"lineNumber":90,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":106,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":107,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"nicholastanvis"},"content":"     * Deletes the given task."},{"lineNumber":109,"author":{"gitId":"nicholastanvis"},"content":"     * The task must exist in the address book."},{"lineNumber":110,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"nicholastanvis"},"content":"    void deleteTask(Task target);"},{"lineNumber":112,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":113,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"nicholastanvis"},"content":"     * Adds the given schedule."},{"lineNumber":115,"author":{"gitId":"nicholastanvis"},"content":"     * {@code schedule} must not already exist in the schedule list."},{"lineNumber":116,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"nicholastanvis"},"content":"    void addSchedule(Schedule schedule);"},{"lineNumber":118,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":119,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"nicholastanvis"},"content":"     * Returns true if a schedule with the same identity as {@code schedule} exists in the schedule list."},{"lineNumber":121,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"nicholastanvis"},"content":"    boolean hasSchedule(Schedule schedule);"},{"lineNumber":123,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":124,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"nicholastanvis"},"content":"     * Deletes the given schedule."},{"lineNumber":126,"author":{"gitId":"nicholastanvis"},"content":"     * The schedule must exist in the schedule list."},{"lineNumber":127,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"nicholastanvis"},"content":"    void deleteSchedule(Schedule schedule);"},{"lineNumber":129,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":130,"author":{"gitId":"nicholastanvis"},"content":"    /** Returns an unmodifiable view of the filtered schedule list */"},{"lineNumber":131,"author":{"gitId":"nicholastanvis"},"content":"    ObservableList\u003cSchedule\u003e getFilteredScheduleList();"},{"lineNumber":132,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":133,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"nicholastanvis"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":135,"author":{"gitId":"nicholastanvis"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":136,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"nicholastanvis"},"content":"    void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate);"},{"lineNumber":138,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":139,"author":{"gitId":"goatygoatygoat"},"content":"    /** Returns an unmodifiable view of the filtered task list */"},{"lineNumber":140,"author":{"gitId":"goatygoatygoat"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":141,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":142,"author":{"gitId":"goatygoatygoat"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"goatygoatygoat"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}."},{"lineNumber":144,"author":{"gitId":"goatygoatygoat"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":145,"author":{"gitId":"goatygoatygoat"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"goatygoatygoat"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":12,"nicholastanvis":37,"-":87,"goatygoatygoat":9,"KevinLohJunYong":2}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":"    private final FilteredList\u003cSchedule\u003e filteredSchedules;"},{"lineNumber":28,"author":{"gitId":"goatygoatygoat"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":42,"author":{"gitId":"nicholastanvis"},"content":"        filteredSchedules \u003d new FilteredList\u003c\u003e(this.addressBook.getScheduleList());"},{"lineNumber":43,"author":{"gitId":"goatygoatygoat"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"nicholastanvis"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d Address Book \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"lrj689"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d Schedule \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":122,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":123,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"nicholastanvis"},"content":"    public boolean hasSchedule(Schedule schedule) {"},{"lineNumber":125,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(schedule);"},{"lineNumber":126,"author":{"gitId":"nicholastanvis"},"content":"        return addressBook.hasSchedule(schedule);"},{"lineNumber":127,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":129,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"lrj689"},"content":"     * adds a {@code Schedule} into schedule list"},{"lineNumber":131,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"lrj689"},"content":"    public void addSchedule(Schedule schedule) {"},{"lineNumber":133,"author":{"gitId":"lrj689"},"content":"        addressBook.addSchedule(schedule);"},{"lineNumber":134,"author":{"gitId":"lrj689"},"content":"        updateFilteredScheduleList(PREDICATE_SHOW_ALL_SCHEDULES);"},{"lineNumber":135,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":137,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":138,"author":{"gitId":"lrj689"},"content":"    public void deleteSchedule(Schedule schedule) {"},{"lineNumber":139,"author":{"gitId":"lrj689"},"content":"        addressBook.removeSchedule(schedule);"},{"lineNumber":140,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":142,"author":{"gitId":"nicholastanvis"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":143,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":144,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":145,"author":{"gitId":"lrj689"},"content":"    public boolean hasTask(Task task) {"},{"lineNumber":146,"author":{"gitId":"lrj689"},"content":"        requireNonNull(task);"},{"lineNumber":147,"author":{"gitId":"lrj689"},"content":"        return addressBook.hasTask(task);"},{"lineNumber":148,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":150,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"lrj689"},"content":"    public void addTask(Task task) {"},{"lineNumber":152,"author":{"gitId":"lrj689"},"content":"        addressBook.addTask(task);"},{"lineNumber":153,"author":{"gitId":"lrj689"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":154,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":156,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"lrj689"},"content":"    public void deleteTask(Task target) {"},{"lineNumber":158,"author":{"gitId":"lrj689"},"content":"        addressBook.removeTask(target);"},{"lineNumber":159,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"lrj689"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Schedule List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":179,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":180,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"lrj689"},"content":"     * Returns an unmodifiable view of the list of {@code Schedule} backed by the internal list of"},{"lineNumber":182,"author":{"gitId":"lrj689"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":183,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":185,"author":{"gitId":"KevinLohJunYong"},"content":"    @Override"},{"lineNumber":186,"author":{"gitId":"lrj689"},"content":"    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"},{"lineNumber":187,"author":{"gitId":"lrj689"},"content":"        return filteredSchedules;"},{"lineNumber":188,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":190,"author":{"gitId":"KevinLohJunYong"},"content":"    @Override"},{"lineNumber":191,"author":{"gitId":"lrj689"},"content":"    public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"},{"lineNumber":192,"author":{"gitId":"lrj689"},"content":"        requireNonNull(predicate);"},{"lineNumber":193,"author":{"gitId":"lrj689"},"content":"        filteredSchedules.setPredicate(predicate);"},{"lineNumber":194,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":196,"author":{"gitId":"lrj689"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":197,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":198,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"lrj689"},"content":"     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"},{"lineNumber":200,"author":{"gitId":"lrj689"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":201,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":203,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":204,"author":{"gitId":"goatygoatygoat"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":205,"author":{"gitId":"goatygoatygoat"},"content":"        return filteredTasks;"},{"lineNumber":206,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":208,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":209,"author":{"gitId":"goatygoatygoat"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":210,"author":{"gitId":"goatygoatygoat"},"content":"        requireNonNull(predicate);"},{"lineNumber":211,"author":{"gitId":"goatygoatygoat"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":212,"author":{"gitId":"KevinLohJunYong"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":214,"author":{"gitId":"lrj689"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d misc \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":47,"nicholastanvis":21,"-":150,"goatygoatygoat":10,"KevinLohJunYong":6}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * Returns an unmodifiable view of the tasks list."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     * This list will not contain any duplicate tasks."},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"     * Returns an unmodifiable view of the schedules list."},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"     * This list will not contain any duplicate schedules."},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    ObservableList\u003cSchedule\u003e getScheduleList();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":7,"tsh22":6,"-":17}},{"path":"src/main/java/seedu/address/model/schedule/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":" * Represents a Schedule\u0027s datetime in Teaching Assistant."},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":" */"},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"public class DateTime {"},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitId":"goatygoatygoat"},"content":"            \"Dates should be in the format yyyy-mm-ddThh:mm:ss. Time must be in the 24-hour clock notation.\";"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"    public final LocalDateTime value;"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":20,"author":{"gitId":"goatygoatygoat"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"goatygoatygoat"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":22,"author":{"gitId":"goatygoatygoat"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":"     * @param datetime A valid datetime."},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"    public DateTime(String datetime) {"},{"lineNumber":26,"author":{"gitId":"goatygoatygoat"},"content":"        requireNonNull(datetime);"},{"lineNumber":27,"author":{"gitId":"goatygoatygoat"},"content":"        checkArgument(isValidDateTime(datetime), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"goatygoatygoat"},"content":"        value \u003d LocalDateTime.parse(datetime);"},{"lineNumber":29,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":31,"author":{"gitId":"goatygoatygoat"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"goatygoatygoat"},"content":"     * Returns true if a given string is a valid datetime."},{"lineNumber":33,"author":{"gitId":"goatygoatygoat"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"goatygoatygoat"},"content":"    public static boolean isValidDateTime(String dateStr) {"},{"lineNumber":35,"author":{"gitId":"goatygoatygoat"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME; //for LocalDate"},{"lineNumber":36,"author":{"gitId":"goatygoatygoat"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"goatygoatygoat"},"content":"            dateTimeFormatter.parse(dateStr);"},{"lineNumber":38,"author":{"gitId":"goatygoatygoat"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":39,"author":{"gitId":"goatygoatygoat"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"goatygoatygoat"},"content":"        return true;"},{"lineNumber":42,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":44,"author":{"gitId":"goatygoatygoat"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":45,"author":{"gitId":"goatygoatygoat"},"content":"        return value;"},{"lineNumber":46,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":48,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"goatygoatygoat"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"goatygoatygoat"},"content":"        return value.toString();"},{"lineNumber":51,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":53,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"goatygoatygoat"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitId":"goatygoatygoat"},"content":"        return other \u003d\u003d this"},{"lineNumber":56,"author":{"gitId":"goatygoatygoat"},"content":"                || (other instanceof DateTime"},{"lineNumber":57,"author":{"gitId":"goatygoatygoat"},"content":"                \u0026\u0026 value.equals(((DateTime) other).value));"},{"lineNumber":58,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":60,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"goatygoatygoat"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"goatygoatygoat"},"content":"        return value.hashCode();"},{"lineNumber":63,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":64}},{"path":"src/main/java/seedu/address/model/schedule/ListScheduleFormatPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"public class ListScheduleFormatPredicate implements Predicate\u003cSchedule\u003e {"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":"    private final String keyword;"},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":"    public ListScheduleFormatPredicate(String keyword) {"},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"    public boolean test(Schedule schedule) {"},{"lineNumber":17,"author":{"gitId":"goatygoatygoat"},"content":"        LocalDate today \u003d LocalDate.from(LocalDateTime.now());"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"        LocalDate yesterday \u003d today.plusDays(-1);"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":"        LocalDate lastday \u003d today.plusDays(7);"},{"lineNumber":20,"author":{"gitId":"goatygoatygoat"},"content":"        LocalDate startDate \u003d LocalDate.from(schedule.getStartDate());"},{"lineNumber":21,"author":{"gitId":"goatygoatygoat"},"content":"        if (keyword.equals(\"day\")) {"},{"lineNumber":22,"author":{"gitId":"goatygoatygoat"},"content":"            return today.equals(startDate);"},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":"        } else {"},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"            return startDate.isAfter(yesterday) \u0026\u0026 startDate.isBefore(lastday);"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":27}},{"path":"src/main/java/seedu/address/model/schedule/Schedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":" * Represents a Schedule in Teaching Assistant"},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":" */"},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"public class Schedule {"},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"    private final ScheduleDescription scheduleDescription;"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"    private final DateTime startDate;"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":"    private final DateTime endDate;"},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"     * Every field must be present and not null"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"    public Schedule(ScheduleDescription scheduleDescription, DateTime startDate,"},{"lineNumber":26,"author":{"gitId":"goatygoatygoat"},"content":"                    DateTime endDate, Set\u003cTag\u003e tags) {"},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":"        requireAllNonNull(scheduleDescription, startDate, endDate, tags);"},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"        this.scheduleDescription \u003d scheduleDescription;"},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":30,"author":{"gitId":"nicholastanvis"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"        this.tags.addAll(tags);"},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":34,"author":{"gitId":"nicholastanvis"},"content":"    public ScheduleDescription getScheduleDescription() {"},{"lineNumber":35,"author":{"gitId":"nicholastanvis"},"content":"        return scheduleDescription;"},{"lineNumber":36,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":38,"author":{"gitId":"goatygoatygoat"},"content":"    public LocalDateTime getStartDate() {"},{"lineNumber":39,"author":{"gitId":"goatygoatygoat"},"content":"        return startDate.getDateTime();"},{"lineNumber":40,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":42,"author":{"gitId":"goatygoatygoat"},"content":"    public LocalDateTime getEndDate() {"},{"lineNumber":43,"author":{"gitId":"goatygoatygoat"},"content":"        return endDate.getDateTime();"},{"lineNumber":44,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":46,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"nicholastanvis"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":48,"author":{"gitId":"nicholastanvis"},"content":"     * if modification is attempted."},{"lineNumber":49,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"nicholastanvis"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":51,"author":{"gitId":"nicholastanvis"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":52,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":54,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"nicholastanvis"},"content":"     * Returns true if both schedules have the same name."},{"lineNumber":56,"author":{"gitId":"nicholastanvis"},"content":"     * This defines a weaker notion of equality between two schedules."},{"lineNumber":57,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"nicholastanvis"},"content":"    public boolean isSameSchedule(Schedule otherSchedule) {"},{"lineNumber":59,"author":{"gitId":"nicholastanvis"},"content":"        if (otherSchedule \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitId":"nicholastanvis"},"content":"            return true;"},{"lineNumber":61,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":63,"author":{"gitId":"nicholastanvis"},"content":"        return otherSchedule !\u003d null"},{"lineNumber":64,"author":{"gitId":"nicholastanvis"},"content":"                \u0026\u0026 otherSchedule.getScheduleDescription().equals(getScheduleDescription());"},{"lineNumber":65,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":67,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"nicholastanvis"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitId":"nicholastanvis"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitId":"nicholastanvis"},"content":"        builder.append(getScheduleDescription())"},{"lineNumber":71,"author":{"gitId":"nicholastanvis"},"content":"                .append(\"; Start Date: \")"},{"lineNumber":72,"author":{"gitId":"nicholastanvis"},"content":"                .append(getStartDate())"},{"lineNumber":73,"author":{"gitId":"nicholastanvis"},"content":"                .append(\"; End Date: \")"},{"lineNumber":74,"author":{"gitId":"nicholastanvis"},"content":"                .append(getEndDate());"},{"lineNumber":75,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":76,"author":{"gitId":"nicholastanvis"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":77,"author":{"gitId":"nicholastanvis"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":78,"author":{"gitId":"nicholastanvis"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":79,"author":{"gitId":"nicholastanvis"},"content":"            tags.forEach(builder::append);"},{"lineNumber":80,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"nicholastanvis"},"content":"        return builder.toString();"},{"lineNumber":82,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":74,"goatygoatygoat":9}},{"path":"src/main/java/seedu/address/model/schedule/ScheduleComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"public class ScheduleComparator implements Comparator\u003cSchedule\u003e {"},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":"    public int compare(Schedule a, Schedule b) {"},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":"        if (a.getStartDate().isBefore(b.getStartDate())) {"},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":"            return -1;"},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":"        } else {"},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":"            return 1;"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":15}},{"path":"src/main/java/seedu/address/model/schedule/ScheduleDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"public class ScheduleDescription {"},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"    public final String description;"},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"     * Constructs a ScheduleDescription"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"     * @param description valid description"},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"    public ScheduleDescription(String description) {"},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(description);"},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":"        checkArgument(isValidName(description), MESSAGE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":"        this.description \u003d description;"},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":30,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nicholastanvis"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":34,"author":{"gitId":"nicholastanvis"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":37,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"nicholastanvis"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"nicholastanvis"},"content":"        return description;"},{"lineNumber":40,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":42,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"nicholastanvis"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"nicholastanvis"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"nicholastanvis"},"content":"                || (other instanceof seedu.address.model.schedule.ScheduleDescription // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"nicholastanvis"},"content":"                \u0026\u0026 description.equals(((ScheduleDescription) other).description)); // state check"},{"lineNumber":47,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":49,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"nicholastanvis"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitId":"nicholastanvis"},"content":"        return description.hashCode();"},{"lineNumber":52,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":53}},{"path":"src/main/java/seedu/address/model/schedule/ScheduleNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":" * Tests that a {@code Schedule}\u0027s {@code ScheduleDescription} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":" */"},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":"public class ScheduleNameContainsKeywordsPredicate implements Predicate\u003cSchedule\u003e {"},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":"    public ScheduleNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"    public boolean test(Schedule schedule) {"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":"        String scheduleDescription \u003d schedule.getScheduleDescription().description;"},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(scheduleDescription, keyword));"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"                || (other instanceof ScheduleNameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitId":"nicholastanvis"},"content":"                \u0026\u0026 keywords.equals(((ScheduleNameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":32}},{"path":"src/main/java/seedu/address/model/schedule/UniqueScheduleList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.model.schedule;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholastanvis"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"nicholastanvis"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.exceptions.DuplicateScheduleException;"},{"lineNumber":12,"author":{"gitId":"nicholastanvis"},"content":"import seedu.address.model.schedule.exceptions.ScheduleNotFoundException;"},{"lineNumber":13,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":14,"author":{"gitId":"nicholastanvis"},"content":"public class UniqueScheduleList implements Iterable\u003cSchedule\u003e {"},{"lineNumber":15,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholastanvis"},"content":"    private final ObservableList\u003cSchedule\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":17,"author":{"gitId":"nicholastanvis"},"content":"    private final ObservableList\u003cSchedule\u003e internalUnmodifiableList \u003d"},{"lineNumber":18,"author":{"gitId":"nicholastanvis"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":19,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":20,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nicholastanvis"},"content":"     * Returns true if the list contains an equivalent schedule as the given argument."},{"lineNumber":22,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nicholastanvis"},"content":"    public boolean contains(Schedule toCheck) {"},{"lineNumber":24,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(toCheck);"},{"lineNumber":25,"author":{"gitId":"nicholastanvis"},"content":"        return internalList.stream().anyMatch(toCheck::isSameSchedule);"},{"lineNumber":26,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":28,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nicholastanvis"},"content":"     * Adds a schedule to the list."},{"lineNumber":30,"author":{"gitId":"nicholastanvis"},"content":"     * The schedule must not already exist in the list."},{"lineNumber":31,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nicholastanvis"},"content":"    public void add(Schedule toAdd) {"},{"lineNumber":33,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(toAdd);"},{"lineNumber":34,"author":{"gitId":"nicholastanvis"},"content":"        if (contains(toAdd)) {"},{"lineNumber":35,"author":{"gitId":"nicholastanvis"},"content":"            throw new DuplicateScheduleException();"},{"lineNumber":36,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nicholastanvis"},"content":"        internalList.add(toAdd);"},{"lineNumber":38,"author":{"gitId":"goatygoatygoat"},"content":"        FXCollections.sort(internalList, new ScheduleComparator());"},{"lineNumber":39,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":41,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"nicholastanvis"},"content":"     * Replaces the schedule {@code target} in the list with {@code editedSchedule}."},{"lineNumber":43,"author":{"gitId":"nicholastanvis"},"content":"     * {@code target} must exist in the list."},{"lineNumber":44,"author":{"gitId":"nicholastanvis"},"content":"     * The schedule identity of {@code editedSchedule} must not be the same as another existing schedule in the list."},{"lineNumber":45,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"nicholastanvis"},"content":"    public void setSchedule(Schedule target, Schedule editedSchedule) {"},{"lineNumber":47,"author":{"gitId":"nicholastanvis"},"content":"        requireAllNonNull(target, editedSchedule);"},{"lineNumber":48,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":49,"author":{"gitId":"nicholastanvis"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":50,"author":{"gitId":"nicholastanvis"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":51,"author":{"gitId":"nicholastanvis"},"content":"            throw new ScheduleNotFoundException();"},{"lineNumber":52,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":54,"author":{"gitId":"nicholastanvis"},"content":"        if (!target.isSameSchedule(editedSchedule) \u0026\u0026 contains(editedSchedule)) {"},{"lineNumber":55,"author":{"gitId":"nicholastanvis"},"content":"            throw new DuplicateScheduleException();"},{"lineNumber":56,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":58,"author":{"gitId":"nicholastanvis"},"content":"        internalList.set(index, editedSchedule);"},{"lineNumber":59,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":61,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nicholastanvis"},"content":"     * Removes the equivalent schedule from the list."},{"lineNumber":63,"author":{"gitId":"nicholastanvis"},"content":"     * The schedule must exist in the list."},{"lineNumber":64,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nicholastanvis"},"content":"    public void remove(Schedule toRemove) {"},{"lineNumber":66,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(toRemove);"},{"lineNumber":67,"author":{"gitId":"nicholastanvis"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":68,"author":{"gitId":"nicholastanvis"},"content":"            throw new ScheduleNotFoundException();"},{"lineNumber":69,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":72,"author":{"gitId":"nicholastanvis"},"content":"    public void setSchedules(UniqueScheduleList replacement) {"},{"lineNumber":73,"author":{"gitId":"nicholastanvis"},"content":"        requireNonNull(replacement);"},{"lineNumber":74,"author":{"gitId":"nicholastanvis"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":75,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":77,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"nicholastanvis"},"content":"     * Replaces the contents of this list with {@code schedules}."},{"lineNumber":79,"author":{"gitId":"nicholastanvis"},"content":"     * {@code schedules} must not contain duplicate schedules."},{"lineNumber":80,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"nicholastanvis"},"content":"    public void setSchedules(List\u003cSchedule\u003e schedules) {"},{"lineNumber":82,"author":{"gitId":"nicholastanvis"},"content":"        requireAllNonNull(schedules);"},{"lineNumber":83,"author":{"gitId":"nicholastanvis"},"content":"        if (!schedulesAreUnique(schedules)) {"},{"lineNumber":84,"author":{"gitId":"nicholastanvis"},"content":"            throw new DuplicateScheduleException();"},{"lineNumber":85,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":87,"author":{"gitId":"nicholastanvis"},"content":"        internalList.setAll(schedules);"},{"lineNumber":88,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":90,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"nicholastanvis"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":92,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"nicholastanvis"},"content":"    public ObservableList\u003cSchedule\u003e asUnmodifiableObservableList() {"},{"lineNumber":94,"author":{"gitId":"nicholastanvis"},"content":"        return internalUnmodifiableList;"},{"lineNumber":95,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":97,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"nicholastanvis"},"content":"    public Iterator\u003cSchedule\u003e iterator() {"},{"lineNumber":99,"author":{"gitId":"nicholastanvis"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":102,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"nicholastanvis"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitId":"nicholastanvis"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":105,"author":{"gitId":"nicholastanvis"},"content":"                || (other instanceof UniqueScheduleList // instanceof handles nulls"},{"lineNumber":106,"author":{"gitId":"nicholastanvis"},"content":"                \u0026\u0026 internalList.equals(((UniqueScheduleList) other).internalList));"},{"lineNumber":107,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":109,"author":{"gitId":"nicholastanvis"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"nicholastanvis"},"content":"    public int hashCode() {"},{"lineNumber":111,"author":{"gitId":"nicholastanvis"},"content":"        return internalList.hashCode();"},{"lineNumber":112,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":114,"author":{"gitId":"nicholastanvis"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"nicholastanvis"},"content":"     * Returns true if {@code schedules} contains only unique schedules."},{"lineNumber":116,"author":{"gitId":"nicholastanvis"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"nicholastanvis"},"content":"    private boolean schedulesAreUnique(List\u003cSchedule\u003e schedules) {"},{"lineNumber":118,"author":{"gitId":"nicholastanvis"},"content":"        for (int i \u003d 0; i \u003c schedules.size() - 1; i++) {"},{"lineNumber":119,"author":{"gitId":"nicholastanvis"},"content":"            for (int j \u003d i + 1; j \u003c schedules.size(); j++) {"},{"lineNumber":120,"author":{"gitId":"nicholastanvis"},"content":"                if (schedules.get(i).isSameSchedule(schedules.get(j))) {"},{"lineNumber":121,"author":{"gitId":"nicholastanvis"},"content":"                    return false;"},{"lineNumber":122,"author":{"gitId":"nicholastanvis"},"content":"                }"},{"lineNumber":123,"author":{"gitId":"nicholastanvis"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"nicholastanvis"},"content":"        return true;"},{"lineNumber":126,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":126,"goatygoatygoat":1}},{"path":"src/main/java/seedu/address/model/schedule/exceptions/DuplicateScheduleException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.model.schedule.exceptions;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"public class DuplicateScheduleException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":"    public DuplicateScheduleException() {"},{"lineNumber":5,"author":{"gitId":"nicholastanvis"},"content":"        super(\"Operation would result in duplicate schedules\");"},{"lineNumber":6,"author":{"gitId":"nicholastanvis"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":7}},{"path":"src/main/java/seedu/address/model/schedule/exceptions/ScheduleNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholastanvis"},"content":"package seedu.address.model.schedule.exceptions;"},{"lineNumber":2,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholastanvis"},"content":"public class ScheduleNotFoundException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"nicholastanvis"},"content":"}"}],"authorContributionMap":{"nicholastanvis":4}},{"path":"src/main/java/seedu/address/model/task/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":" * Represents a Task\u0027s datetime in Teaching Assistant."},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":" */"},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"public class Date {"},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitId":"goatygoatygoat"},"content":"            \"Dates should be in the format yyyy-mm-dd.\";"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"    public final LocalDate value;"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":20,"author":{"gitId":"goatygoatygoat"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"goatygoatygoat"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":22,"author":{"gitId":"goatygoatygoat"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":"     * @param date A valid date."},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"    public Date(String date) {"},{"lineNumber":26,"author":{"gitId":"goatygoatygoat"},"content":"        requireNonNull(date);"},{"lineNumber":27,"author":{"gitId":"goatygoatygoat"},"content":"        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"goatygoatygoat"},"content":"        value \u003d LocalDate.parse(date);"},{"lineNumber":29,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":31,"author":{"gitId":"goatygoatygoat"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"goatygoatygoat"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":33,"author":{"gitId":"goatygoatygoat"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"goatygoatygoat"},"content":"    public static boolean isValidDate(String dateStr) {"},{"lineNumber":35,"author":{"gitId":"goatygoatygoat"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ISO_LOCAL_DATE; //for LocalDate"},{"lineNumber":36,"author":{"gitId":"goatygoatygoat"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"goatygoatygoat"},"content":"            dateTimeFormatter.parse(dateStr);"},{"lineNumber":38,"author":{"gitId":"goatygoatygoat"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":39,"author":{"gitId":"goatygoatygoat"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"goatygoatygoat"},"content":"        return true;"},{"lineNumber":42,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":44,"author":{"gitId":"goatygoatygoat"},"content":"    public LocalDate getDate() {"},{"lineNumber":45,"author":{"gitId":"goatygoatygoat"},"content":"        return value;"},{"lineNumber":46,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":48,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"goatygoatygoat"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"goatygoatygoat"},"content":"        return value.toString();"},{"lineNumber":51,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":53,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"goatygoatygoat"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitId":"goatygoatygoat"},"content":"        return other \u003d\u003d this"},{"lineNumber":56,"author":{"gitId":"goatygoatygoat"},"content":"                || (other instanceof Date"},{"lineNumber":57,"author":{"gitId":"goatygoatygoat"},"content":"                \u0026\u0026 value.equals(((Date) other).value));"},{"lineNumber":58,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":60,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"goatygoatygoat"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"goatygoatygoat"},"content":"        return value.hashCode();"},{"lineNumber":63,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":64}},{"path":"src/main/java/seedu/address/model/task/ListTaskFormatPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":"public class ListTaskFormatPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":"    private final String keyword;"},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":"    public ListTaskFormatPredicate(String keyword) {"},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":"    public boolean test(Task task) {"},{"lineNumber":16,"author":{"gitId":"goatygoatygoat"},"content":"        LocalDate today \u003d LocalDate.now();"},{"lineNumber":17,"author":{"gitId":"goatygoatygoat"},"content":"        LocalDate yesterday \u003d today.plusDays(-1);"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"        LocalDate lastday \u003d today.plusDays(7);"},{"lineNumber":19,"author":{"gitId":"goatygoatygoat"},"content":"        if (keyword.equals(\"day\")) {"},{"lineNumber":20,"author":{"gitId":"goatygoatygoat"},"content":"            return today.equals(task.getDate());"},{"lineNumber":21,"author":{"gitId":"goatygoatygoat"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"goatygoatygoat"},"content":"            return task.getDate().isAfter(yesterday) \u0026\u0026 task.getDate().isBefore(lastday);"},{"lineNumber":23,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":25}},{"path":"src/main/java/seedu/address/model/task/Task.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":" * Represents a Task in the Teaching Assistant"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"public class Task {"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"    private final TaskDescription taskDescription;"},{"lineNumber":18,"author":{"gitId":"goatygoatygoat"},"content":"    private final Date date;"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"     * Every field must be present and not null"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"    public Task(TaskDescription taskDescription, Date date, Set\u003cTag\u003e tags) {"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"        requireAllNonNull(taskDescription, date, tags);"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"        this.date \u003d date;"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"        this.tags.addAll(tags);"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"    public TaskDescription getTaskDescription() {"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"        return taskDescription;"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"    public LocalDate getDate() {"},{"lineNumber":36,"author":{"gitId":"goatygoatygoat"},"content":"        return date.getDate();"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"     * if modification is attempted."},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"     * Returns true if both tasks have the same name."},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"     * This defines a weaker notion of equality between two tasks."},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"    public boolean isSameTask(Task otherTask) {"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"        if (otherTask \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"        return otherTask !\u003d null"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":"                \u0026\u0026 otherTask.getTaskDescription().equals(getTaskDescription());"},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":63,"author":{"gitId":"lrj689"},"content":"        builder.append(getTaskDescription())"},{"lineNumber":64,"author":{"gitId":"lrj689"},"content":"                .append(\"; Date: \")"},{"lineNumber":65,"author":{"gitId":"lrj689"},"content":"                .append(getDate());"},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":68,"author":{"gitId":"lrj689"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"            tags.forEach(builder::append);"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":"        return builder.toString();"},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":71,"goatygoatygoat":3}},{"path":"src/main/java/seedu/address/model/task/TaskComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"goatygoatygoat"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":3,"author":{"gitId":"goatygoatygoat"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":5,"author":{"gitId":"goatygoatygoat"},"content":"public class TaskComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":6,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":7,"author":{"gitId":"goatygoatygoat"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"goatygoatygoat"},"content":"    public int compare(Task a, Task b) {"},{"lineNumber":9,"author":{"gitId":"goatygoatygoat"},"content":"        if (a.getDate().isBefore(b.getDate())) {"},{"lineNumber":10,"author":{"gitId":"goatygoatygoat"},"content":"            return -1;"},{"lineNumber":11,"author":{"gitId":"goatygoatygoat"},"content":"        } else {"},{"lineNumber":12,"author":{"gitId":"goatygoatygoat"},"content":"            return 1;"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"goatygoatygoat"},"content":"}"}],"authorContributionMap":{"goatygoatygoat":15}},{"path":"src/main/java/seedu/address/model/task/TaskDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"public class TaskDescription {"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"    public final String description;"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"     * Constructs a TaskDescription"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"     * @param description valid description"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"    public TaskDescription(String description) {"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"        requireNonNull(description);"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"        this.description \u003d description;"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"        return description;"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"                || (other instanceof seedu.address.model.task.TaskDescription // instanceof handles nulls"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"                \u0026\u0026 description.equals(((TaskDescription) other).description)); // state check"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":"        return description.hashCode();"},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":56}},{"path":"src/main/java/seedu/address/model/task/TaskNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":" * Tests that a {@code Task}\u0027s {@code TaskDescription} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"public class TaskNameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"    public TaskNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"    public boolean test(Task task) {"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTaskDescription().description, keyword));"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"                || (other instanceof TaskNameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"                \u0026\u0026 keywords.equals(((TaskNameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":31}},{"path":"src/main/java/seedu/address/model/task/UniqueTaskList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"     * Returns true if the list contains an equivalent task as the given argument."},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"        requireNonNull(toCheck);"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"        return internalList.stream().anyMatch(toCheck::isSameTask);"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"     * Adds a task to the list."},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"     * The task must not already exist in the list."},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"    public void add(Task toAdd) {"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"        requireNonNull(toAdd);"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"        if (contains(toAdd)) {"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"        internalList.add(toAdd);"},{"lineNumber":38,"author":{"gitId":"goatygoatygoat"},"content":"        FXCollections.sort(internalList, new TaskComparator());"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"     * {@code target} must exist in the list."},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing task in the list."},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"    public void setTask(Task target, Task editedTask) {"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":63,"author":{"gitId":"lrj689"},"content":"     * The task must exist in the list."},{"lineNumber":64,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"lrj689"},"content":"    public void remove(Task toRemove) {"},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":"        requireNonNull(toRemove);"},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":68,"author":{"gitId":"lrj689"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":"    public void setTasks(UniqueTaskList replacement) {"},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":"        requireNonNull(replacement);"},{"lineNumber":74,"author":{"gitId":"lrj689"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":75,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":77,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"lrj689"},"content":"     * Replaces the contents of this list with {@code task}."},{"lineNumber":79,"author":{"gitId":"lrj689"},"content":"     * {@code tasks} must not contain duplicate task."},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {"},{"lineNumber":82,"author":{"gitId":"lrj689"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":83,"author":{"gitId":"lrj689"},"content":"        if (!tasksAreUnique(tasks)) {"},{"lineNumber":84,"author":{"gitId":"lrj689"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":85,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":87,"author":{"gitId":"lrj689"},"content":"        internalList.setAll(tasks);"},{"lineNumber":88,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":90,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"lrj689"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":92,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"lrj689"},"content":"    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"},{"lineNumber":94,"author":{"gitId":"lrj689"},"content":"        return internalUnmodifiableList;"},{"lineNumber":95,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":97,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"lrj689"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":99,"author":{"gitId":"lrj689"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":102,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"lrj689"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitId":"lrj689"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":105,"author":{"gitId":"lrj689"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":106,"author":{"gitId":"lrj689"},"content":"                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":107,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":109,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"lrj689"},"content":"    public int hashCode() {"},{"lineNumber":111,"author":{"gitId":"lrj689"},"content":"        return internalList.hashCode();"},{"lineNumber":112,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":114,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"lrj689"},"content":"     * Returns true if {@code tasks} contains only unique persons."},{"lineNumber":116,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"lrj689"},"content":"    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"},{"lineNumber":118,"author":{"gitId":"lrj689"},"content":"        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"},{"lineNumber":119,"author":{"gitId":"lrj689"},"content":"            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"},{"lineNumber":120,"author":{"gitId":"lrj689"},"content":"                if (tasks.get(i).isSameTask(tasks.get(j))) {"},{"lineNumber":121,"author":{"gitId":"lrj689"},"content":"                    return false;"},{"lineNumber":122,"author":{"gitId":"lrj689"},"content":"                }"},{"lineNumber":123,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"lrj689"},"content":"        return true;"},{"lineNumber":126,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":126,"goatygoatygoat":1}},{"path":"src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"public class DuplicateTaskException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"    public DuplicateTaskException() {"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"        super(\"Operation would result in duplicate tasks\");"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":7}},{"path":"src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"public class TaskNotFoundException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":4}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.schedule.DateTime;"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.schedule.ScheduleDescription;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"public class JsonAdaptedSchedule {"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule\u0027s %s field is missing!\";"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"    private final String scheduleDescription;"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"    private final String startDateTime;"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"    private final String endDateTime;"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"     * Constructs a {@code JsonAdaptedSchedule} with the given schedule details."},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"    @JsonCreator"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"    public JsonAdaptedSchedule(@JsonProperty(\"scheduleDescription\") String scheduleDescription,"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"                               @JsonProperty(\"startDateTime\") String startDateTime,"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"                               @JsonProperty(\"endDateTime\") String endDateTime,"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"        this.scheduleDescription \u003d scheduleDescription;"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"        this.startDateTime \u003d startDateTime;"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"     * converts a given {@code Schedule} into this class for Jackson use"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"     * @param source"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"    public JsonAdaptedSchedule(Schedule source) {"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"        scheduleDescription \u003d source.getScheduleDescription().description;"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"        startDateTime \u003d source.getStartDate().toString();"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"        endDateTime \u003d source.getEndDate().toString();"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":"     * Converts this Jackson-friendly adapted schedule object into the model\u0027s {@code Schedule} object."},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"    public Schedule toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"        final List\u003cTag\u003e scheduleTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"lrj689"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":64,"author":{"gitId":"lrj689"},"content":"            scheduleTags.add(tag.toModelType());"},{"lineNumber":65,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":"        if (scheduleDescription \u003d\u003d null) {"},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"            throw new IllegalValueException("},{"lineNumber":68,"author":{"gitId":"lrj689"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ScheduleDescription.class.getSimpleName()));"},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"        if (!ScheduleDescription.isValidName(scheduleDescription)) {"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":"            throw new IllegalValueException(ScheduleDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":"        final ScheduleDescription modelScheduleDescription \u003d new ScheduleDescription(scheduleDescription);"},{"lineNumber":74,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":75,"author":{"gitId":"lrj689"},"content":"        if (startDateTime \u003d\u003d null) {"},{"lineNumber":76,"author":{"gitId":"lrj689"},"content":"            throw new IllegalValueException("},{"lineNumber":77,"author":{"gitId":"goatygoatygoat"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"},{"lineNumber":78,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"goatygoatygoat"},"content":"        final DateTime modelStartDateTime \u003d new DateTime(startDateTime);"},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"        if (endDateTime \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitId":"lrj689"},"content":"            throw new IllegalValueException("},{"lineNumber":83,"author":{"gitId":"goatygoatygoat"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"goatygoatygoat"},"content":"        final DateTime modelEndDateTime \u003d new DateTime(endDateTime);"},{"lineNumber":86,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":87,"author":{"gitId":"lrj689"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(scheduleTags);"},{"lineNumber":88,"author":{"gitId":"lrj689"},"content":"        return new Schedule(modelScheduleDescription, modelStartDateTime, modelEndDateTime, modelTags);"},{"lineNumber":89,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":91,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":86,"goatygoatygoat":5}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTask.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.Date;"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":" * Jackson-friendly version of {@link Task}"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"public class JsonAdaptedTask {"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"    private final String taskDescription;"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    private final String taskDeadline;"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"     * Constructs a {@code JsonAdaptedTask} with the given task details."},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"    @JsonCreator"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"    public JsonAdaptedTask(@JsonProperty(\"taskDescription\") String taskDescription,"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"                           @JsonProperty(\"taskDeadline\") String taskDeadline,"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"        this.taskDeadline \u003d taskDeadline;"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"     * Converts a given {@code Task} into this class for Jackson use."},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"    public JsonAdaptedTask(Task source) {"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"        taskDescription \u003d source.getTaskDescription().description;"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"        taskDeadline \u003d source.getDate().toString();"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":"     * Converts this Jackson-friendly adapted schedule oject into the model\u0027s {@code Task} object."},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"            taskTags.add(tag.toModelType());"},{"lineNumber":63,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"lrj689"},"content":"        if (taskDescription \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitId":"lrj689"},"content":"            throw new IllegalValueException("},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskDescription.class.getSimpleName()));"},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"lrj689"},"content":"        if (!TaskDescription.isValidDescription(taskDescription)) {"},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"            throw new IllegalValueException(TaskDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":"        final TaskDescription modelTaskDescription \u003d new TaskDescription(taskDescription);"},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":"        if (taskDeadline \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"lrj689"},"content":"            throw new IllegalValueException("},{"lineNumber":75,"author":{"gitId":"goatygoatygoat"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"goatygoatygoat"},"content":"        final Date modelTaskDeadline \u003d new Date(taskDeadline);"},{"lineNumber":78,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":79,"author":{"gitId":"lrj689"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":"        return new Task(modelTaskDescription, modelTaskDeadline, modelTags);"},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":83,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":80,"goatygoatygoat":3}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")"},{"lineNumber":22,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s)\";"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    private static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"Schedule list contains duplicate schedule(s)\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"    private final List\u003cJsonAdaptedSchedule\u003e schedules \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"                                       @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks,"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"                                       @JsonProperty(\"schedules\") List\u003cJsonAdaptedSchedule\u003e schedules) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"        this.schedules.addAll(schedules);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"        schedules.addAll(source.getScheduleList().stream().map(JsonAdaptedSchedule::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":"            Task task \u003d jsonAdaptedTask.toModelType();"},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":"            if (addressBook.hasTask(task)) {"},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":74,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"lrj689"},"content":"            addressBook.addTask(task);"},{"lineNumber":76,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":78,"author":{"gitId":"lrj689"},"content":"        for (JsonAdaptedSchedule jsonAdaptedSchedule : schedules) {"},{"lineNumber":79,"author":{"gitId":"lrj689"},"content":"            Schedule schedule \u003d jsonAdaptedSchedule.toModelType();"},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":"            if (addressBook.hasSchedule(schedule)) {"},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_SCHEDULE);"},{"lineNumber":82,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"lrj689"},"content":"            addressBook.addSchedule(schedule);"},{"lineNumber":84,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":29,"-":59}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"    private ScheduleListPanel scheduleListPanel;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"    private StackPane taskListPanelPlaceholder;"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"    private StackPane scheduleListPanelPlaceholder;"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":98,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":108,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"tsh22"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":125,"author":{"gitId":"tsh22"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":126,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":127,"author":{"gitId":"tsh22"},"content":"        scheduleListPanel \u003d new ScheduleListPanel(logic.getFilteredScheduleList());"},{"lineNumber":128,"author":{"gitId":"tsh22"},"content":"        scheduleListPanelPlaceholder.getChildren().add(scheduleListPanel.getRoot());"},{"lineNumber":129,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":186,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tsh22":14,"-":196}},{"path":"src/main/java/seedu/address/ui/ScheduleCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":" * An UI component that displays information of a {@code Schedule}."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"public class ScheduleCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    private static final String FXML \u003d \"ScheduleListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    public final Schedule schedule;"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    private HBox cardPane;"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    private Label scheduleDescription;"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    private Label startDate;"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    private Label endDate;"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    private Label startTime;"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    private Label endTime;"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"    private FlowPane tags;"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"     * Creates a {@code ScheduleCode} to display."},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"    public ScheduleCard(Schedule schedule) {"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"        scheduleDescription.setText(schedule.getScheduleDescription().description);"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"        startDate.setText(\"From: \""},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"                + schedule.getStartDate().format(DateTimeFormatter.ofPattern(\"E, dd MMM yyyy h:mm a\")));"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"        endDate.setText(\"To: \""},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"                + schedule.getEndDate().format(DateTimeFormatter.ofPattern(\"E, dd MMM yyyy h:mm a\")));"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"        schedule.getTags().stream()"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":51}},{"path":"src/main/java/seedu/address/ui/ScheduleListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":" * Panel containing the list of schedules."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"public class ScheduleListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    private static final String FXML \u003d \"ScheduleListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ScheduleListPanel.class);"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    private ListView\u003cSchedule\u003e scheduleListView;"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"     * Creates a {@code ScheduleListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    public ScheduleListPanel(ObservableList\u003cSchedule\u003e scheduleList) {"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"        scheduleListView.setItems(scheduleList);"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        scheduleListView.setCellFactory(listView -\u003e new ScheduleListPanel.ScheduleListViewCell());"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Schedule} using a {@code ScheduleCard}."},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"    class ScheduleListViewCell extends ListCell\u003cSchedule\u003e {"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"        protected void updateItem(Schedule schedule, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"            super.updateItem(schedule, empty);"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"            if (empty || schedule \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"                setGraphic(new ScheduleCard(schedule).getRoot());"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":48}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    public final Task task;"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    private HBox cardPane;"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    private Label taskDescription;"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    private Label date;"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    private FlowPane tags;"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"     * Creates a {@code TaskCode} to display."},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"    public TaskCard(Task task) {"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"        this.task \u003d task;"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"        taskDescription.setText(task.getTaskDescription().description);"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"        date.setText(task.getDate().format(DateTimeFormatter.ofPattern(\"E, dd MMM yyyy\")));"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"        task.getTags().stream()"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"        // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"            return true;"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"        // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"            return false;"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"        // state check"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":"        return taskDescription.getText().equals(card.taskDescription.getText())"},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":60}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":" * Panel containing the list of tasks."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    private ListView\u003cTask\u003e taskListView;"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"        taskListView.setItems(taskList);"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListPanel.TaskListViewCell());"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"    class TaskListViewCell extends ListCell\u003cTask\u003e {"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"        protected void updateItem(Task task, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"            super.updateItem(task, empty);"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"                setGraphic(new TaskCard(task).getRoot());"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":48}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"         title\u003d\"Teaching Assistant\" minWidth\u003d\"700\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cicons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cscene\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cScene\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Extensions.css\"/\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cVBox\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                \u003c/MenuBar\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"                \u003cGridPane\u003e"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"                    \u003ccolumnConstraints\u003e"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"                        \u003cColumnConstraints percentWidth\u003d\"33.333\"/\u003e"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":"                        \u003cColumnConstraints percentWidth\u003d\"33.333\"/\u003e"},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"                        \u003cColumnConstraints percentWidth\u003d\"33.333\"/\u003e"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"                    \u003c/columnConstraints\u003e"},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":"                    \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"                          VBox.vgrow\u003d\"ALWAYS\" GridPane.columnIndex\u003d\"0\" alignment\u003d\"CENTER\"\u003e"},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"                        \u003cLabel text\u003d\"Contacts\"/\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                        \u003cpadding\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                        \u003c/padding\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                    \u003c/VBox\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":"                    \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":"                          VBox.vgrow\u003d\"ALWAYS\" GridPane.columnIndex\u003d\"1\" alignment\u003d\"CENTER\"\u003e"},{"lineNumber":68,"author":{"gitId":"tsh22"},"content":"                        \u003cLabel text\u003d\"Tasks\"/\u003e"},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":"                        \u003cpadding\u003e"},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":"                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"                        \u003c/padding\u003e"},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":"                        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":"                    \u003c/VBox\u003e"},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"                    \u003cVBox fx:id\u003d\"scheduleList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":"                          VBox.vgrow\u003d\"ALWAYS\" GridPane.columnIndex\u003d\"2\" alignment\u003d\"CENTER\"\u003e"},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":"                        \u003cLabel text\u003d\"Schedules\"/\u003e"},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":"                        \u003cpadding\u003e"},{"lineNumber":79,"author":{"gitId":"tsh22"},"content":"                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"},{"lineNumber":80,"author":{"gitId":"tsh22"},"content":"                        \u003c/padding\u003e"},{"lineNumber":81,"author":{"gitId":"tsh22"},"content":"                        \u003cStackPane fx:id\u003d\"scheduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":82,"author":{"gitId":"tsh22"},"content":"                    \u003c/VBox\u003e"},{"lineNumber":83,"author":{"gitId":"tsh22"},"content":"                \u003c/GridPane\u003e"},{"lineNumber":84,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"tsh22":32,"-":57}},{"path":"src/main/resources/view/ScheduleListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"            \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"            \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"                \u003cLabel fx:id\u003d\"scheduleDescription\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"            \u003c/HBox\u003e"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"            \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"            \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"        \u003c/VBox\u003e"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"tsh22":28}},{"path":"src/main/resources/view/ScheduleListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"    \u003cListView fx:id\u003d\"scheduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"tsh22":8}},{"path":"src/main/resources/view/TaskListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"            \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"            \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"                \u003cLabel fx:id\u003d\"taskDescription\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"            \u003c/HBox\u003e"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"        \u003c/VBox\u003e"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"tsh22":27}},{"path":"src/main/resources/view/TaskListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"tsh22":8}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"  } ],"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"  \"tasks\" : [ ],"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"  \"schedules\" : [ ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":3,"-":12}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"  } ],"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"  \"tasks\" : [ ],"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"  \"schedules\" : [ ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":3,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"  } ],"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"  \"tasks\" : [ ],"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"  \"schedules\" : [ ]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":3,"-":13}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"  } ],"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"  \"tasks\" : [ ],"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"  \"schedules\" : [ ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":3,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"  } ],"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"  \"tasks\" : [ ],"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"  \"schedules\" : [ ]"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":3,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"KevinLohJunYong"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":25,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":83,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"lrj689"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"lrj689"},"content":"        public boolean hasTask(Task toAdd) {"},{"lineNumber":121,"author":{"gitId":"lrj689"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":124,"author":{"gitId":"lrj689"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"lrj689"},"content":"        public void addTask(Task toAdd) {"},{"lineNumber":126,"author":{"gitId":"lrj689"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":129,"author":{"gitId":"lrj689"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"lrj689"},"content":"        public void deleteTask(Task target) {"},{"lineNumber":131,"author":{"gitId":"lrj689"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"nicholastanvis"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"nicholastanvis"},"content":"        public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"},{"lineNumber":166,"author":{"gitId":"nicholastanvis"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":174,"author":{"gitId":"KevinLohJunYong"},"content":"        @Override"},{"lineNumber":175,"author":{"gitId":"nicholastanvis"},"content":"        public boolean hasSchedule(Schedule schedule) {"},{"lineNumber":176,"author":{"gitId":"nicholastanvis"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":179,"author":{"gitId":"nicholastanvis"},"content":"        @Override"},{"lineNumber":180,"author":{"gitId":"nicholastanvis"},"content":"        public void deleteSchedule(Schedule schedule) {"},{"lineNumber":181,"author":{"gitId":"KevinLohJunYong"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitId":"KevinLohJunYong"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"KevinLohJunYong"},"content":""},{"lineNumber":184,"author":{"gitId":"goatygoatygoat"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"goatygoatygoat"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":186,"author":{"gitId":"goatygoatygoat"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":189,"author":{"gitId":"KevinLohJunYong"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"nicholastanvis"},"content":"        public void addSchedule(Schedule schedule) {"},{"lineNumber":191,"author":{"gitId":"KevinLohJunYong"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitId":"KevinLohJunYong"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":194,"author":{"gitId":"nicholastanvis"},"content":"        @Override"},{"lineNumber":195,"author":{"gitId":"nicholastanvis"},"content":"        public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"},{"lineNumber":196,"author":{"gitId":"nicholastanvis"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitId":"nicholastanvis"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"nicholastanvis"},"content":""},{"lineNumber":199,"author":{"gitId":"goatygoatygoat"},"content":"        @Override"},{"lineNumber":200,"author":{"gitId":"goatygoatygoat"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":201,"author":{"gitId":"goatygoatygoat"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":15,"nicholastanvis":19,"-":194,"goatygoatygoat":10,"KevinLohJunYong":9}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"import seedu.address.model.schedule.Schedule;"},{"lineNumber":24,"author":{"gitId":"goatygoatygoat"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":93,"author":{"gitId":"goatygoatygoat"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":94,"author":{"gitId":"lrj689"},"content":"        private final ObservableList\u003cSchedule\u003e schedules \u003d FXCollections.observableArrayList();"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"goatygoatygoat"},"content":""},{"lineNumber":105,"author":{"gitId":"goatygoatygoat"},"content":"        @Override"},{"lineNumber":106,"author":{"gitId":"goatygoatygoat"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":107,"author":{"gitId":"goatygoatygoat"},"content":"            return tasks;"},{"lineNumber":108,"author":{"gitId":"goatygoatygoat"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":110,"author":{"gitId":"lrj689"},"content":"        @Override"},{"lineNumber":111,"author":{"gitId":"lrj689"},"content":"        public ObservableList\u003cSchedule\u003e getScheduleList() {"},{"lineNumber":112,"author":{"gitId":"lrj689"},"content":"            return schedules;"},{"lineNumber":113,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":7,"-":102,"goatygoatygoat":7}}]
