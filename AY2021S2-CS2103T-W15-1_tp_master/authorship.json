[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W15-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W15-1/tp/actions)"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W15-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W15-1/tp)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"RemindMe is a desktop app for keeping track of student\u0027s assignments, events and exams,"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"optimized for use via Command Line Interface(CLI) while still having the benefits of a Graphic User Interface(GUI)."},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"* Objectives of RemindMe is to allow students to be aware of deadlines of events, assignments and exams and enables students to have a calendar view of their school curriculums/schedules. "},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":" "},{"lineNumber":11,"author":{"gitId":"-"},"content":"  Example usages:"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"  * as a reminder for student"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"  * as a schedule manager  "},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"* For the detailed documentation of this project, see the **[RemindMe Product Website](https://nus-cs2103-ay2021s2.github.io/tp/)"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"### Site Map"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"[User Guide](docs/UserGuide.md)"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"[Developers Guide](docs/DeveloperGuide.md)"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"[About Us](docs/AboutUs.md)"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"### Acknowledgement"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"Hzxin":22,"-":4}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":56,"author":{"gitId":"banchiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"banchiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"banchiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"banchiang":3,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"### Michael Ong"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"\u003cimg src\u003d\"images/maikongeh.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"[[github](https://github.com/maikongeh)]"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"[[portfolio](team/maikongeh.md)]"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":"* Role: Developer"},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"* Responsibility: Testing"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"### Huang Zhenxin"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\u003cimg src\u003d\"images/hzxin.png\" width\u003d\"200px\"\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"[[github](http://github.com/Hzxin)]"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"[[portfolio](team/hzxin.md)]"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"* Role: Integration"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* Responsibilities: UI"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"### Jeremias Shae"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"\u003cimg src\u003d\"images/jellymias.png\" width\u003d\"200px\"\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"[[github](http://github.com/jellymias)]"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"[[portfolio](team/jellymias.md)]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"* Responsibilities: Documentation, Testing"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"banchiang"},"content":"### Chiang Kee Woon Jonathan"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"\u003cimg src\u003d\"images/banchiang.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"banchiang"},"content":"[[github](http://github.com/banchiang)]"},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"[[portfolio](team/banchiang.md)]"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"* Responsibilities: Code Quality checking"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"### Marcus Ong"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"\u003cimg src\u003d\"images/markuz5116.png\" width\u003d\"200px\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"[[github](http://github.com/markuz5116)]"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"[[portfolio](team/markuz5116.md)]"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"* Role: Team Lead"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"* Responsibilities: Deliverables and Deadlines"}],"authorContributionMap":{"markuz5116":6,"Hzxin":5,"jellymias":5,"banchiang":5,"maikongeh":6,"-":33}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"Hzxin"},"content":"* has a need to manage exams or events deadlines"},{"lineNumber":240,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":241,"author":{"gitId":"Hzxin"},"content":"* tend to forget upcoming events/exams"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"Hzxin"},"content":"**Value proposition**: manage deadlines and events faster than a typical mouse/GUI driven app"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":253,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":254,"author":{"gitId":"Hzxin"},"content":"| `* * *`  | new user                                   | see instructions help page     | refer to help page when I forget how to use the App                 |"},{"lineNumber":255,"author":{"gitId":"Hzxin"},"content":"| `* * *`  | student taking numerous modules            | add events/exams/assignments deadlines              |                                                                        |"},{"lineNumber":256,"author":{"gitId":"Hzxin"},"content":"| `* * *`  | user                                       | delete a deadline               | view the ones that matter                                  |"},{"lineNumber":257,"author":{"gitId":"Hzxin"},"content":"| `* * *`  | user                                       | edit a deadline          | can adjust schedule when there is a change of plan |"},{"lineNumber":258,"author":{"gitId":"Hzxin"},"content":"| `* *`    | user                                       | view events in a calendar view   | to have a better sense of the upcoming events                |"},{"lineNumber":259,"author":{"gitId":"Hzxin"},"content":"| `* *`      | forgetful student | get reminded about the most urgent events/assignments/exams          | finish the deadlines on time   "},{"lineNumber":260,"author":{"gitId":"Hzxin"},"content":"| `* `    | student                                    | distinguish among modules,exams and assignments | |"},{"lineNumber":261,"author":{"gitId":"Hzxin"},"content":"| `* `    | student                                     | view which friend of mine is enrolled in the same module/event | seek help from them |"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"Hzxin"},"content":"(For all use cases below, the **System** is the `RemindMe` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC01` - add assignment"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"banchiang"},"content":"1. User enters the details of assignment."},{"lineNumber":275,"author":{"gitId":"banchiang"},"content":"2. System adds assignment and displays assignments info."},{"lineNumber":276,"author":{"gitId":"banchiang"},"content":"\u003cbr\u003e Use case ends."},{"lineNumber":277,"author":{"gitId":"banchiang"},"content":"   "},{"lineNumber":278,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in format in entered data."},{"lineNumber":281,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":282,"author":{"gitId":"banchiang"},"content":"    \u003cbr\u003e Use case ends."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC02` - delete assignment"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"banchiang"},"content":"1. User enters number to delete a assignment."},{"lineNumber":289,"author":{"gitId":"banchiang"},"content":"2. System deletes assignment and displays assignments info."},{"lineNumber":290,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in number in entered data (out of range)."},{"lineNumber":295,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":296,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC03` - view assignments"},{"lineNumber":299,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":300,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":301,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":302,"author":{"gitId":"banchiang"},"content":"1. User enters the command to view assignments."},{"lineNumber":303,"author":{"gitId":"banchiang"},"content":"2. System shows list of assignments."},{"lineNumber":304,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":305,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":306,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":307,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":308,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":309,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":310,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":311,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":312,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC04` - view events"},{"lineNumber":313,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":314,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":315,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":316,"author":{"gitId":"banchiang"},"content":"1. User enters the command to view events."},{"lineNumber":317,"author":{"gitId":"banchiang"},"content":"2. System shows list of events."},{"lineNumber":318,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":319,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":320,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":321,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":322,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":323,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":324,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":325,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":326,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC05` - toggle reminder"},{"lineNumber":327,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":328,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":329,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":330,"author":{"gitId":"banchiang"},"content":"1. User wants to turn on reminder for system."},{"lineNumber":331,"author":{"gitId":"banchiang"},"content":"2. User enters command to turn on reminder."},{"lineNumber":332,"author":{"gitId":"banchiang"},"content":"3. System display message that reminder is on."},{"lineNumber":333,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Step 1 - 3 are the same for off."},{"lineNumber":334,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends at step 3."},{"lineNumber":335,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":336,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":337,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":338,"author":{"gitId":"banchiang"},"content":"* 2a. System detects an error in formatting of command."},{"lineNumber":339,"author":{"gitId":"banchiang"},"content":"    * 2a1. System display error message."},{"lineNumber":340,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":341,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":342,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC06` - view help"},{"lineNumber":343,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":344,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":345,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":346,"author":{"gitId":"banchiang"},"content":"1. User enters the command to view help."},{"lineNumber":347,"author":{"gitId":"banchiang"},"content":"2. System shows help and url for more in depth help."},{"lineNumber":348,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":349,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":350,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":351,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":352,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":353,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":354,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":355,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":356,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC07` - view calendar"},{"lineNumber":357,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":358,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":359,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":360,"author":{"gitId":"banchiang"},"content":"1. User enters the command to view calendar."},{"lineNumber":361,"author":{"gitId":"banchiang"},"content":"2. System shows calendar."},{"lineNumber":362,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":363,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":364,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":365,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":366,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":367,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":368,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":369,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":370,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC08` - save data"},{"lineNumber":371,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":372,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":373,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":374,"author":{"gitId":"banchiang"},"content":"1. User enters the command to sava data."},{"lineNumber":375,"author":{"gitId":"banchiang"},"content":"2. System saves data and show saved message."},{"lineNumber":376,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":377,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":378,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":379,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":380,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":381,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":382,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":383,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":384,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC09` - edit data"},{"lineNumber":385,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":386,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":387,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":388,"author":{"gitId":"banchiang"},"content":"1. User enters the command to edit data."},{"lineNumber":389,"author":{"gitId":"banchiang"},"content":"2. System edit data and show edited message."},{"lineNumber":390,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":391,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":392,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":393,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":394,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":395,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":396,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":397,"author":{"gitId":"banchiang"},"content":"      "},{"lineNumber":398,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":403,"author":{"gitId":"markuz5116"},"content":"2.  Should be able to hold up to 1000 persons and tasks without a noticeable sluggishness in performance for typical usage."},{"lineNumber":404,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":405,"author":{"gitId":"markuz5116"},"content":"4.  RemindMe should be able to respond within one seconds."},{"lineNumber":406,"author":{"gitId":"markuz5116"},"content":"5.  RemindMe should be usable by novice who has no prior experience with coding."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":413,"author":{"gitId":"Hzxin"},"content":"* **Module**: A school module consists of module ID and module name. "},{"lineNumber":414,"author":{"gitId":"Hzxin"},"content":"* **Examination**: Consists of a start time, end time and date which it occurs on and the relevant module."},{"lineNumber":415,"author":{"gitId":"Hzxin"},"content":"* **Event**: Consists of a start time, end time, and the date which it occurs on."},{"lineNumber":416,"author":{"gitId":"Hzxin"},"content":"* **Assignment**: Consists of a deadlines and the relevant module."},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":425,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":442,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"markuz5116":3,"Hzxin":16,"banchiang":119,"-":316}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"RemindMe User Guide v1.1"},{"lineNumber":7,"author":{"gitId":"-"},"content":"---"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"This user guide provide [start-up](#start--up) instructions as well as detailed descriptions and usage of"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"all the [features](#features) in the RemindMe app. You can also access the product website via this [link.](https://ay2021s2-cs2103t-w15-1.github.io/tp/)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"## Table of Contents"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"* **[Introduction](#introduction)**"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"* **[Start-up](#start-up)**"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"* **[Features](#features)**"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    * **[1. Show Help Page : `help`](#show-help-page--help)**"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    * **[2. Turn On/Off Reminder: `remind`](#turn-onoff-reminder-remind)**"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    * **[3. Add a Module: `add m/MODULE`](#add-a-module-add)**"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"      * [3.1 Add an Assignment](#add-an-assignment)"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"      * [3.2 Add an Exam](#add-an-exam)"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    * **[4. Add an Event: `event`](#add-an-event-event)**  "},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    * **[5. Add a Person as friend: `add`](#add-a-person-as-friend-add)**  "},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    * **[6. Delete a Module: `delete`](#delete-a-module-delete)**"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"      * [6.1 Delete an Assignment/Exam/Event](#delete-an-assignmentexamevent)"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    * **[7. List Entries: `list`](#list-entries--list)**"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"      * [7.1 List Modules: `list module`](#list-modules-list-modules)"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"      * [7.2 List Assignments: `list assignments`](#list-assignments--list-assignments)"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"      * [7.3 List Events: `list events`](#list-events--list-events)"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"      * [7.4 List Exams: `list exams`](#list-exams--list-exams)"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    * **[8. Edit an Entry: `edit`](#edit-an-entry--edit)**"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    * **[9. Locate Entries: `find`](#locate-entries-find)**"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    * **[10. Calendar View: `calendar`](#calendar-view--calendar)**"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    * **[11. Clear Entries: `clear`](#clear-entries--clear)**"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    * **[12. Save the data](#save-the-data)**"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    * **[13. Edit the data file](#edit-an-entry--edit)**"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    * **[14. Exit the program: `exit`](#exit-the-program--exit)**"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"   "},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"* **[Glossary](#glossary)**"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"* **[Command summary](#command-summary-(RemindMe))**"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"## Introduction"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"RemindMe is a desktop app for keeping track of user events and deadlines,"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"optimized for use via Command Line Interface(CLI) while still having the benefits of a Graphic User Interface(GUI)."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"Objectives of RemindMe:"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"1. Allow students to be aware of deadlines of school events and exams."},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"2. Allow students to have a calendar view of their school curriculums/schedules. "},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"## Start-up"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"1. Ensure you have Java 11 or above installed on your computer. You can download Java 11 via this [link.](https://www.oracle.com/sg/java/technologies/javase-jdk11-downloads.html)"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"   * If you are a Windows user, [here](https://java.tutorials24x7.com/blog/how-to-install-java-11-on-windows) is a tutorial on how to set up Java 11:"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"2. Download the latest RemindMe.jar from our GitHub release page."},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"Copy the file to the folder you want to use as the home folder for your RemindMe."},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"Double click the file to start the app. "},{"lineNumber":69,"author":{"gitId":"-"},"content":"   "},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"3. Alternatively, you can run the command line java -jar RemindMe.jar in your terminal to start the application."},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"Type the command in the command box and press Enter to execute it."},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"   ![Ui](images/Ui.png)   "},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"4. Refer to the Features below for details of each command."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"   * **`deadline`** `description by DD/MM/YYYY TIME`: Adds a task with a deadline."},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"     "},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"   * **`ordered list`**: Displays an order list of items."},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"     "},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"   * **`calendar`**: Dsiplays the calendar with the tasks\u0027 deadlines and friends\u0027 birthdays."},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"     "},{"lineNumber":84,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":"**Notes about the command format:**\u003cbr\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"  e.g. in `exam m/MODULE`, `MODULE` is a parameter which can be used as `add m/CS2103`."},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":"  e.g `m/MODULE [t/TAG]` can be used as `m/CS21O3 t/final` or as `m/CS2103`."},{"lineNumber":101,"author":{"gitId":"-"},"content":"  "},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"### Show Help Page : `help`"},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":"Shows a help page"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":"### Turn On/Off Reminder: `remind`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"banchiang"},"content":"Turns on and off the reminder system. If remind is on,"},{"lineNumber":120,"author":{"gitId":"banchiang"},"content":"a reminder would pop out when starting the app RemindMe regarding"},{"lineNumber":121,"author":{"gitId":"banchiang"},"content":"the upcoming tasks."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":"![Reminder](images/Reminder.png)"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"banchiang"},"content":"Format: `remind`"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"banchiang"},"content":"Outcome:"},{"lineNumber":128,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":129,"author":{"gitId":"banchiang"},"content":"* `reminder is turned on!`"},{"lineNumber":130,"author":{"gitId":"banchiang"},"content":"* `reminder is turned off!`"},{"lineNumber":131,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":132,"author":{"gitId":"Hzxin"},"content":"### Add a Module: `add`"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"Hzxin"},"content":"Adds a module to the calendar."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"jellymias"},"content":"Format: "},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"Hzxin"},"content":"* `add m/MODULE`"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":141,"author":{"gitId":"Hzxin"},"content":"* `add m/cs2103`"},{"lineNumber":142,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":143,"author":{"gitId":"Hzxin"},"content":"### Add an Assignment"},{"lineNumber":144,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":145,"author":{"gitId":"Hzxin"},"content":"Adds an assignment under a module to a calendar with a date or/and with an optional tag/time."},{"lineNumber":146,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":147,"author":{"gitId":"Hzxin"},"content":"Format:"},{"lineNumber":148,"author":{"gitId":"Hzxin"},"content":"* `add m/MODULE a/assignment d/DATE [t/TAG/TIME] `"},{"lineNumber":149,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":150,"author":{"gitId":"Hzxin"},"content":"Examples:"},{"lineNumber":151,"author":{"gitId":"Hzxin"},"content":"* `add m/cs2103 a/tut2 d/2021-01-12 t/23:59`"},{"lineNumber":152,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":153,"author":{"gitId":"Hzxin"},"content":"### Add an Exam"},{"lineNumber":154,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":155,"author":{"gitId":"Hzxin"},"content":"Add an exam under a module to a calendar with a date or/and with an optional tag/time."},{"lineNumber":156,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":157,"author":{"gitId":"Hzxin"},"content":"Format:"},{"lineNumber":158,"author":{"gitId":"Hzxin"},"content":"* `add m/MODULE e/exam d/DATE [t/TAG/TIME]`"},{"lineNumber":159,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":160,"author":{"gitId":"Hzxin"},"content":"Examples:"},{"lineNumber":161,"author":{"gitId":"Hzxin"},"content":"* `add m/cs2103 e/final d/2021-01-12 t/23:59`"},{"lineNumber":162,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":163,"author":{"gitId":"Hzxin"},"content":"### Add an Event: `event`"},{"lineNumber":164,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":165,"author":{"gitId":"Hzxin"},"content":"Add an event with content and date specified."},{"lineNumber":166,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":167,"author":{"gitId":"Hzxin"},"content":"Format:"},{"lineNumber":168,"author":{"gitId":"Hzxin"},"content":"* `event c/CONTENT d/DATE [t/TAG]`"},{"lineNumber":169,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":170,"author":{"gitId":"jellymias"},"content":"Examples:"},{"lineNumber":171,"author":{"gitId":"Hzxin"},"content":"* `event c/floor party d/2021-4-30`"},{"lineNumber":172,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":173,"author":{"gitId":"Hzxin"},"content":"### Add a Person as friend: `add`"},{"lineNumber":174,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":175,"author":{"gitId":"Hzxin"},"content":"Add a person as friend with its birthday in RemindMe"},{"lineNumber":176,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":177,"author":{"gitId":"jellymias"},"content":"Format:"},{"lineNumber":178,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":179,"author":{"gitId":"Hzxin"},"content":"* `add n/Name b/BIRTHDAY`"},{"lineNumber":180,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":181,"author":{"gitId":"Hzxin"},"content":"Example:"},{"lineNumber":182,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":183,"author":{"gitId":"Hzxin"},"content":"* `add n/Marcus b/2000-01-01`"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"Hzxin"},"content":"### Delete a Module: `delete`"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"Hzxin"},"content":"Deletes a module from RemindMe. Removing the module will remove all the relevant "},{"lineNumber":188,"author":{"gitId":"Hzxin"},"content":"exams and assignments."},{"lineNumber":189,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":190,"author":{"gitId":"Hzxin"},"content":"Format: "},{"lineNumber":191,"author":{"gitId":"Hzxin"},"content":"* `delete m/MODULE`"},{"lineNumber":192,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":195,"author":{"gitId":"Hzxin"},"content":"* `delete m/cs2103T`"},{"lineNumber":196,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":197,"author":{"gitId":"Hzxin"},"content":"### Delete an Assignment/Exam/Event"},{"lineNumber":198,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":199,"author":{"gitId":"Hzxin"},"content":"Deletes an assignment/exam/event from the calendar."},{"lineNumber":200,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":201,"author":{"gitId":"Hzxin"},"content":"Format:"},{"lineNumber":202,"author":{"gitId":"Hzxin"},"content":"* `delete i/index d/date`"},{"lineNumber":203,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":204,"author":{"gitId":"Hzxin"},"content":"Examples:"},{"lineNumber":205,"author":{"gitId":"Hzxin"},"content":"* `delete i/1 d/2020-11-22`"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"Hzxin"},"content":"### List Entries : `list`"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"Hzxin"},"content":"Shows a list of all assignments/events/exam deadlines sorted by date."},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"Hzxin"},"content":"### List Modules: `list modules`"},{"lineNumber":214,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":215,"author":{"gitId":"Hzxin"},"content":"Show a list of modules currently registered in RemindMe."},{"lineNumber":216,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":217,"author":{"gitId":"Hzxin"},"content":"Format: `list modules`"},{"lineNumber":218,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":219,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":220,"author":{"gitId":"Hzxin"},"content":"### List Assignments : `list assignments`"},{"lineNumber":221,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":222,"author":{"gitId":"Hzxin"},"content":"Shows a list of all assignments sorted by date."},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"Hzxin"},"content":"Format: `list assignments`"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"Hzxin"},"content":"### List Events : `list events`"},{"lineNumber":227,"author":{"gitId":"Hzxin"},"content":"Shows a list of all events sorted by date."},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"Hzxin"},"content":"Format: `list events`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"Hzxin"},"content":"### List Exams : `list exams`"},{"lineNumber":232,"author":{"gitId":"Hzxin"},"content":"Shows a list of all exams sorted by date."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"Hzxin"},"content":"Format: `list exams`"},{"lineNumber":235,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":236,"author":{"gitId":"Hzxin"},"content":"### Edit an Entry : `edit`"},{"lineNumber":237,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":238,"author":{"gitId":"Hzxin"},"content":"Edits an existing exam/event/assignment\u0027s date/module/tag in the RemindMe."},{"lineNumber":239,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":240,"author":{"gitId":"Hzxin"},"content":"Format: `edit INDEX [m/MODULE] [d/DATE] [dd/deadline] [from/TIME to/TIME] [t/TAG]…​`"},{"lineNumber":241,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":242,"author":{"gitId":"Hzxin"},"content":"* Edits the exam/event/assignment\u0027s deadline at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":244,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":245,"author":{"gitId":"Hzxin"},"content":"* When editing tags, the existing tags of the exam/event/assignment will be removed i.e adding of tags is not cumulative."},{"lineNumber":246,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":250,"author":{"gitId":"Hzxin"},"content":"*  `edit 1 p/exam d/2021-01-22` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":251,"author":{"gitId":"Hzxin"},"content":"*  `edit 2 p/assignment t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"Hzxin"},"content":"### Locate Entries: `find`"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"Hzxin"},"content":"Finds entries whose contents contain any of the given keywords."},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"Hzxin"},"content":"* The search is case-insensitive. e.g `math` will match `MATH`"},{"lineNumber":260,"author":{"gitId":"Hzxin"},"content":"* Only full words will be matched e.g. `math` will not match `maths`"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":264,"author":{"gitId":"Hzxin"},"content":"* `find math` returns `math exams` and `math assignment`"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"Hzxin"},"content":"### Calendar View : `calendar`"},{"lineNumber":269,"author":{"gitId":"markuz5116"},"content":"Shows an image of the calendar with your reminders (e.g. tasks, assignments datelines, and friends’ birthday) for each specific dates.  "},{"lineNumber":270,"author":{"gitId":"markuz5116"},"content":"![result for \u0027calendar\u0027](images/calendarResult.png)  "},{"lineNumber":271,"author":{"gitId":"markuz5116"},"content":"Format: `calendar`"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"Hzxin"},"content":"### Clear Entries : `clear`"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"Clears all entries from the address book."},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"markuz5116"},"content":"Format: `clear``"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"Hzxin"},"content":"### Save the data"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"markuz5116"},"content":"RemindMe save your data in the hard disk automatically after every command that changes the data. There is no need for you to save manually."},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"Hzxin"},"content":"### Edit the data file"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"Hzxin"},"content":"RemindME data are saved as a JSON file `[JAR file location]/data/remindme.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":288,"author":{"gitId":"markuz5116"},"content":"If your changes to the data file makes its format invalid, RemindMe will discard all data and start with an empty data file at the next run."},{"lineNumber":289,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"Hzxin"},"content":"### Exit the program : `exit`"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"markuz5116"},"content":"Exits the program."},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"markuz5116"},"content":"Format: `exit"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"Hzxin"},"content":"## Glossary"},{"lineNumber":298,"author":{"gitId":"Hzxin"},"content":"* Module: Consists of a module ID and name."},{"lineNumber":299,"author":{"gitId":"Hzxin"},"content":"* Assignment: Consists of the name of the assignment and deadline with an optional tag."},{"lineNumber":300,"author":{"gitId":"Hzxin"},"content":"* Exam: Consists of the name, date and start-time with an optional tag."},{"lineNumber":301,"author":{"gitId":"Hzxin"},"content":"* Event: Consists of the event content and date with an optional tag."},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"Hzxin"},"content":"## Command Summary (RemindMe) "},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":307,"author":{"gitId":"banchiang"},"content":"--------|----------------"},{"lineNumber":308,"author":{"gitId":"banchiang"},"content":"Add assignment | `(assignment type) (assignment description) (assignment details)`"},{"lineNumber":309,"author":{"gitId":"banchiang"},"content":"Delete assignment | `delete (assignment description)`"},{"lineNumber":310,"author":{"gitId":"banchiang"},"content":"View assignments | `view A`"},{"lineNumber":311,"author":{"gitId":"banchiang"},"content":"View events | `view E`"},{"lineNumber":312,"author":{"gitId":"banchiang"},"content":"Turn on/off reminder | `remind`"},{"lineNumber":313,"author":{"gitId":"banchiang"},"content":"See commands available | `help`"},{"lineNumber":314,"author":{"gitId":"banchiang"},"content":"View calendar | `calendar`"},{"lineNumber":315,"author":{"gitId":"banchiang"},"content":"Save data | `save`"},{"lineNumber":316,"author":{"gitId":"banchiang"},"content":"Edit data | `edit`"},{"lineNumber":317,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":318,"author":{"gitId":"banchiang"},"content":""}],"authorContributionMap":{"markuz5116":16,"Hzxin":163,"banchiang":21,"jellymias":8,"maikongeh":1,"-":109}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"title: RemindMe"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W15-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W15-1/tp/actions)"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W15-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W15-1/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"**RemindMe is a desktop app for keeping track of student\u0027s assignments, events and exams.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"* If you are interested in using RemindMe, head over to the [_Start-up_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"Hzxin":5,"-":14}},{"path":"docs/team/banchiang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"---"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":"#Chiang Kee Woon Jonathan\u0027s Project Portfolio Page \u003cbr\u003e"},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":"---"},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":"## Introduction"},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"This page serves to document my contributions "},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"to the project RemindMe under NUS module CS2103T in AY20/21 semester 2."},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"## Project: RemindMe"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"RemindMe is a desktop app for keeping track of user events and deadlines,"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"optimized for use via Command Line Interface(CLI) while still having the benefits of a"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"Graphic User e user interacts with it using a CLI, and it has a GUI created with JavaFX."},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"It is written in Java."},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":"### Code contributed: \u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"banchiang"},"content":"[RepoSense Link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003dbanchiang\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-02-19\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dbanchiang\u0026tabRepo\u003dAY2021S2-CS2103T-W15-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d)"}],"authorContributionMap":{"banchiang":19}},{"path":"docs/team/hzxin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"title: Huang Zhenxin\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"## Introduction"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"This page serves to document my contributions to the project RemindMe under NUS module CS2103T in AY20/21 semester 2."},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"## Project: RemindMe"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"RemindMe is a desktop app for keeping track of user events and deadlines,"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"optimized for use via Command Line Interface(CLI) while still having the benefits of a"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"Graphic User e user interacts with it using a CLI, and it has a GUI created with JavaFX. "},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"It is written in Java."},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"Given below are my contributions to the project."},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"* **New Feature**: To be updated"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    * What it does: "},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    * Justification: "},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    * Highlights:"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    * Credits: "},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"* **Project management**:"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    * to be updated"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"* **Enhancements to existing features**:"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    * Come out with Ui-mockup(Pull requests [\\#23](https://github.com/AY2021S2-CS2103T-W15-1/tp/pull/23))"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"* **Documentation**:"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    * User Guide:"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"        * Added documentations for the introduction and Quick Start [\\#25](https://github.com/AY2021S2-CS2103T-W15-1/tp/pull/25)"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    * Developer Guide:"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        * Added documentations for Target user profile, value proposition, and user stories."},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"* **Community**:"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#]()"}],"authorContributionMap":{"Hzxin":40}},{"path":"docs/team/jellymias.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"---"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"title: Jeremias Shae\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"---"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"## Introduction"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"This page serves to document my contributions to the RemindMe project."},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"## Project: RemindMe"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"RemindMe is a desktop application to help users track their deadlines and important events. "},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"It is optimised for Command Line Interface (CLI) while still having the benefits of a "},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"Graphic User e user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java. "},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"Given below are my contributions to the project:"}],"authorContributionMap":{"jellymias":13}},{"path":"docs/team/maikongeh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"---"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"title: Michael\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"---"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"## Project: RemindMe"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"RemindMe is a desktop application for keeping track of user events and deadlines, optimised for use via Command Line "},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"Interface(CLI) while still having the benefits of a Graphic User Interface(GUI)."},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"RemindMe allows students to always be aware of exams and events deadline as there will be reminder pop-ups and calendar"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"for students to see!"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"Given below are my contributions to the project."},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"* **New Feature**: Upcoming"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"  * What it does: NIL"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":" "},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"  * Managed releases `v1.3` - `v1.5rc` [EXAMPLE-"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":"  "},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"* **Documentation**:"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"  * User Guide:"},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"    * Added documentation for the features `list assignments` and `list evetns` [\\#72]()"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"  * Developer Guide:"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"    * NIL"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"    "},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"* **Community**:"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":"* **Tools**:"},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":""}],"authorContributionMap":{"maikongeh":37}},{"path":"docs/team/markuz5116.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"---"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"title: Marcus Ong\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"---"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"## Project: RemindMe"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"RemindMe is a desktop application for keeping track of user events and deadlines, optimised for use via Command Line "},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"Interface(CLI) while still having the benefits of a Graphic User Interface(GUI)."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"RemindMe allows students to always be aware of exams and events deadline as there will be reminder pop-ups and calendar"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"for students to see!"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"Given below are my contributions to the project.\\"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"[to be added]"}],"authorContributionMap":{"markuz5116":14}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":66,"author":{"gitId":"-"},"content":"..."},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"..."},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":75,"author":{"gitId":"-"},"content":"..."},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"..."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"},{"lineNumber":98,"author":{"gitId":"-"},"content":"```"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field."}],"authorContributionMap":{"markuz5116":1,"-":99}},{"path":"gradle/wrapper/gradle-wrapper.properties","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"#Mon Mar 15 20:53:15 SGT 2021"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":"distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.2.1-all.zip"},{"lineNumber":3,"author":{"gitId":"-"},"content":"distributionBase\u003dGRADLE_USER_HOME"},{"lineNumber":4,"author":{"gitId":"-"},"content":"distributionPath\u003dwrapper/dists"},{"lineNumber":5,"author":{"gitId":"-"},"content":"zipStorePath\u003dwrapper/dists"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"zipStoreBase\u003dGRADLE_USER_HOME"}],"authorContributionMap":{"maikongeh":3,"-":3}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"import seedu.address.storage.JsonRemindMeStorage;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"import seedu.address.storage.RemindMeStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"        RemindMeStorage remindMeStorage \u003d new JsonRemindMeStorage(userPrefs.getRemindMeFilePath());"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"        storage \u003d new StorageManager(remindMeStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"        Optional\u003cReadOnlyModulePlanner\u003e remindMeOptional;"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"        ReadOnlyModulePlanner initialData;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"            remindMeOptional \u003d storage.readRemindMe();"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"            if (!remindMeOptional.isPresent()) {"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"                logger.info(\"Data file not found. Will be starting with a sample RemindMe\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"            initialData \u003d remindMeOptional.orElseGet(SampleDataUtil::getSampleRemindMe);"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"            storage.saveRemindMe(initialData);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":"            initialData \u003d new ModulePlanner();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"            initialData \u003d new ModulePlanner();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":124,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":152,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":15,"-":169}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX \u003d \"The assignment index provided is invalid\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_INVALID_EXAM_DISPLAYED_INDEX \u003d \"The exam index provided is invalid\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_MODULE_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_INVALID_MODULE_TITLE \u003d \"The module title provided does not exist\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"maikongeh":3,"-":13}},{"path":"src/main/java/seedu/address/commons/util/LocalDateTimeUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"public class LocalDateTimeUtil {"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"    public static final String DATE_TIME_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"            \"DateTime should be a valid date and time in the format of dd-MM-yyyy HH:mm. e.g. 29-11-2020 23:59\";"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\")"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    public static final DateTimeFormatter DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu HHmm\")"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"     * Returns true if a given string is a valid date number."},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"     * @param test the string value to be put to test."},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"     * @return true if the test string is valid and false otherwise"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    public static boolean isValidDateTime(String test) {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        requireNonNull(test);"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"            LocalDateTime.parse(test, DATETIME_FORMATTER);"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"            return false;"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        return true;"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":33}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"     * Returns the RemindMe."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"     * @see seedu.address.model.Model#getRemindMe()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    ReadOnlyModulePlanner getRemindMe();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"    /** Returns an unmodifiable view of the filtered list of modules */"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    ObservableList\u003cModule\u003e getFilteredModuleList();"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"     * Returns the user prefs\u0027 remindME file path."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    Path getRemindMeFilePath();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":13,"-":44}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.parser.RemindMeParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":30,"author":{"gitId":"banchiang"},"content":"    private final RemindMeParser remindMeParser;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":38,"author":{"gitId":"banchiang"},"content":"        remindMeParser \u003d new RemindMeParser();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"        Command command \u003d remindMeParser.parseCommand(commandText);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"            storage.saveRemindMe(model.getRemindMe());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"    public ReadOnlyModulePlanner getRemindMe() {"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        return model.getRemindMe();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"    public ObservableList\u003cModule\u003e getFilteredModuleList() {"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"        return model.getFilteredModuleList();"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"    public Path getRemindMeFilePath() {"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"        return model.getRemindMeFilePath();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":4,"Hzxin":17,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/CalendarCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"public class CalendarCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"    public static final String COMMAND_CHAR \u003d \"C\";"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    public static final String SHOWING_CALENDAR \u003d \"Opened Calendar window.\";"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"        return new CommandResult(SHOWING_CALENDAR, false,"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"                true, false);"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":22,"banchiang":1}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"RemindMe has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"        model.setRemindMe(new ModulePlanner());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"Hzxin":2,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    /** Calendar window should be shown to the user. */"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    private final boolean showCalendar;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** The application should exit. */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        this.showCalendar \u003d false;"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        this.exit \u003d exit;"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean showCalendar,"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"                         boolean exit) {"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"        this.showCalendar \u003d showCalendar;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"    public boolean isShowCalendar() {"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"        return showCalendar;"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":19,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"    public static final String COMMAND_CHAR \u003d \"E\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":1,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"    public static final String COMMAND_CHAR \u003d \"H\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/addcommand/AddAssignmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.commands.addcommand;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"public class AddAssignmentCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an assignment to the module. \""},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"            + PREFIX_MODULE + \"TITLE \""},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"            + PREFIX_ASSIGNMENT + \"DESCRIPTION \""},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"            + PREFIX_DEADLINE + \"DEADLINE\""},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"            + \"\\nExample: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"            + PREFIX_MODULE + \"CS2103T \""},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"            + PREFIX_ASSIGNMENT + \"TP v1.2 \""},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"            + PREFIX_DEADLINE + \"28/3/2021 2359\";"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New assignment added: %1$s\";"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the module\";"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module for assignment has to be \""},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"            + \"created first\";"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    private final Module target;"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"    private final Assignment toAdd;"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    public AddAssignmentCommand(Module module, Assignment assignment) {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        requireNonNull(assignment);"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        target \u003d module;"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        toAdd \u003d assignment;"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        if (!model.hasModule(target)) {"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"        if (model.hasAssignment(target, toAdd)) {"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"        model.addAssignment(target, toAdd);"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"                || (other instanceof AddAssignmentCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 toAdd.equals(((AddAssignmentCommand) other).toAdd));"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"markuz5116":8,"jellymias":59}},{"path":"src/main/java/seedu/address/logic/commands/addcommand/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.commands.addcommand;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"public abstract class AddCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_USAGE \u003d AddPersonCommand.MESSAGE_USAGE"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"            + \"\\n\" + AddModuleCommand.MESSAGE_USAGE"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"            + \"\\n\" + AddAssignmentCommand.MESSAGE_USAGE"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"            + \"\\n\" + AddExamCommand.MESSAGE_USAGE;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":14}},{"path":"src/main/java/seedu/address/logic/commands/addcommand/AddExamCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.commands.addcommand;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"public class AddExamCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exam to the module. \""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_MODULE + \"MODULE NAME \""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_EXAM + \"EXAM DATE \""},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"            + \"\\nExample: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_MODULE + \"CS2103T \""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_EXAM + \"25/3/2021 0900\";"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New exam added: %1$s\";"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_DUPLICATE_EXAM \u003d \"This exam already exists at this date\";"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module for exam has to be created \""},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"            + \"first\";"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    private final Module target;"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"    private final Exam toAdd;"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"     * Creates an AddExamComamnd to add the specified {@code Exam}."},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"    public AddExamCommand(Module module, Exam exam) {"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        requireAllNonNull(module, exam);"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        target \u003d module;"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        toAdd \u003d exam;"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"     * Executes the AddExamComamnd get add an {@code Exam} into RemindMe."},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"     * @param model {@code Model} which the command should operate on."},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"     * @return The CommandResult for the success of the command."},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"     * @throws CommandException when the exam to add is already in RemindMe."},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"        if (!model.hasModule(target)) {"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"        if (model.hasExam(target, toAdd)) {"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EXAM);"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"        model.addExam(target, toAdd);"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"     * Checks whether {@code other} is of the same Command and Exam."},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"     * @param other other Object to compare with this."},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"     * @return true if they are similar, else false."},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"        return other \u003d\u003d this"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"                || (other instanceof AddExamCommand)"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 toAdd.equals(((AddExamCommand) other).toAdd);"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":70,"jellymias":8}},{"path":"src/main/java/seedu/address/logic/commands/addcommand/AddModuleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.commands.addcommand;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"public class AddModuleCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to RemindMe.\""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"            + \"Parameters: \""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_MODULE + \"MODULE TITLE\\n\""},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_MODULE + \"CS2103\";"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in RemindMe\";"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    private final Module toAdd;"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"     * Creates an AddModuleCommand to add the specified {@code Module}."},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    public AddModuleCommand(Module module) {"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(module);"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        toAdd \u003d module;"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        if (model.hasModule(toAdd)) {"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"        model.addModule(toAdd);"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"        return other \u003d\u003d this"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"                || (other instanceof AddModuleCommand)"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd);"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":50,"jellymias":3}},{"path":"src/main/java/seedu/address/logic/commands/addcommand/AddPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.commands.addcommand;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"public class AddPersonCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to RemindMe. \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"            + PREFIX_BIRTHDAY + \"BIRTHDAY \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"    public AddPersonCommand(Person person) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":9,"maikongeh":2,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/deletecommand/DeleteAssignmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.logic.commands.deletecommand;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.AssignmentList;"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":" */"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"public class DeleteAssignmentCommand extends Command {"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"            + \": Deletes the assignment identified by the index in Assignment list of the module\\n\""},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"            + \"Parameters: Index (must be a int value)\\n\""},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"            + PREFIX_MODULE + \"CS2103T\""},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"            + PREFIX_ASSIGNMENT + \"1\";"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_DELETE_ASSIGNMENT_SUCCESS \u003d \"Deleted Assignment: %1$s\";"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":"    private final Title moduleTitle;"},{"lineNumber":38,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"    private final Index assignmentIndex;"},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":41,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"maikongeh"},"content":"     * creates new DeleteAssignmentCommand object"},{"lineNumber":43,"author":{"gitId":"maikongeh"},"content":"     * @param moduleTitle"},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":"     * @param assignmentIndex"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":"    public DeleteAssignmentCommand(Title moduleTitle, Index assignmentIndex) {"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"        requireAllNonNull(moduleTitle, assignmentIndex);"},{"lineNumber":48,"author":{"gitId":"maikongeh"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":49,"author":{"gitId":"maikongeh"},"content":"        this.assignmentIndex \u003d assignmentIndex;"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":52,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"maikongeh"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":54,"author":{"gitId":"maikongeh"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"},{"lineNumber":56,"author":{"gitId":"maikongeh"},"content":"        //check for Title"},{"lineNumber":57,"author":{"gitId":"maikongeh"},"content":"        Module moduleToCheck \u003d new Module(moduleTitle);"},{"lineNumber":58,"author":{"gitId":"maikongeh"},"content":"        if (!listContainsModule(lastShownList, moduleToCheck)) {"},{"lineNumber":59,"author":{"gitId":"maikongeh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_TITLE);"},{"lineNumber":60,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"maikongeh"},"content":"        int indexOfModule \u003d getIndex(lastShownList, moduleToCheck);"},{"lineNumber":62,"author":{"gitId":"maikongeh"},"content":"        Module moduleToGet \u003d lastShownList.get(indexOfModule);"},{"lineNumber":63,"author":{"gitId":"maikongeh"},"content":"        AssignmentList assignmentList \u003d moduleToGet.getAssignments();"},{"lineNumber":64,"author":{"gitId":"maikongeh"},"content":"        if (assignmentIndex.getZeroBased() \u003e\u003d assignmentList.size()) {"},{"lineNumber":65,"author":{"gitId":"maikongeh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"maikongeh"},"content":"        Assignment assignmentToDelete \u003d moduleToGet.getAssignment(assignmentIndex.getZeroBased());"},{"lineNumber":68,"author":{"gitId":"maikongeh"},"content":"        moduleToGet.deleteAssignment(assignmentIndex.getZeroBased());"},{"lineNumber":69,"author":{"gitId":"maikongeh"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ASSIGNMENT_SUCCESS, assignmentToDelete));"},{"lineNumber":70,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":72,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"maikongeh"},"content":"     * Checks whether the module title matches any in the moduleList"},{"lineNumber":74,"author":{"gitId":"maikongeh"},"content":"     * @param moduleList"},{"lineNumber":75,"author":{"gitId":"maikongeh"},"content":"     * @param moduleCheck"},{"lineNumber":76,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":77,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"maikongeh"},"content":"    public boolean listContainsModule(List\u003cModule\u003e moduleList, Module moduleCheck) {"},{"lineNumber":79,"author":{"gitId":"maikongeh"},"content":"        boolean hasSameModule \u003d false;"},{"lineNumber":80,"author":{"gitId":"maikongeh"},"content":"        for (int i \u003d 0; i \u003c moduleList.size(); i++) {"},{"lineNumber":81,"author":{"gitId":"maikongeh"},"content":"            if (moduleCheck.isSameModule(moduleList.get(i))) {"},{"lineNumber":82,"author":{"gitId":"maikongeh"},"content":"                hasSameModule \u003d true;"},{"lineNumber":83,"author":{"gitId":"maikongeh"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"maikongeh"},"content":"        return hasSameModule;"},{"lineNumber":86,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":88,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"maikongeh"},"content":"     * Gets Index of module in moduleList with same title as input module"},{"lineNumber":90,"author":{"gitId":"maikongeh"},"content":"     * @param moduleList"},{"lineNumber":91,"author":{"gitId":"maikongeh"},"content":"     * @param moduleCheck"},{"lineNumber":92,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":93,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"maikongeh"},"content":"    public int getIndex(List\u003cModule\u003e moduleList, Module moduleCheck) {"},{"lineNumber":95,"author":{"gitId":"maikongeh"},"content":"        int index \u003d 0;"},{"lineNumber":96,"author":{"gitId":"maikongeh"},"content":"        for (int i \u003d 0; i \u003c moduleList.size(); i++) {"},{"lineNumber":97,"author":{"gitId":"maikongeh"},"content":"            if (moduleCheck.isSameModule(moduleList.get(i))) {"},{"lineNumber":98,"author":{"gitId":"maikongeh"},"content":"                index \u003d i;"},{"lineNumber":99,"author":{"gitId":"maikongeh"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"maikongeh"},"content":"        return index;"},{"lineNumber":102,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":104,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"maikongeh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitId":"maikongeh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":107,"author":{"gitId":"maikongeh"},"content":"                || (other instanceof DeleteAssignmentCommand // instanceof handles nulls"},{"lineNumber":108,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 moduleTitle.equals(((DeleteAssignmentCommand) other).moduleTitle)"},{"lineNumber":109,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 assignmentIndex.equals(((DeleteAssignmentCommand) other).assignmentIndex)); // state check"},{"lineNumber":110,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":112,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":111}},{"path":"src/main/java/seedu/address/logic/commands/deletecommand/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.logic.commands.deletecommand;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"public abstract class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"            + \": Deletes the assignment identified by the index in ExamList of the module\\n\""},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"            + \"Parameters: Index (must be a int value)\\n\""},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"            + PREFIX_MODULE + \"CS2103T\""},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"            + PREFIX_ASSIGNMENT + \"1\";"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":17}},{"path":"src/main/java/seedu/address/logic/commands/deletecommand/DeleteExamCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.logic.commands.deletecommand;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.ExamList;"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":" */"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"public class DeleteExamCommand extends Command {"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"            + \": Deletes the assignment identified by the index in ExamList of the module\\n\""},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"            + \"Parameters: Index (must be a int value)\\n\""},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"            + PREFIX_MODULE + \"CS2103T\""},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"            + PREFIX_ASSIGNMENT + \"1\";"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_DELETE_EXAM_SUCCESS \u003d \"Deleted Exam: %1$s\";"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":"    private final Title moduleTitle;"},{"lineNumber":38,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"    private final Index examIndex;"},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":41,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"maikongeh"},"content":"     * creates new DeleteAssignmentCommand object"},{"lineNumber":43,"author":{"gitId":"maikongeh"},"content":"     * @param moduleTitle"},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":"     * @param examIndex"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":"    public DeleteExamCommand(Title moduleTitle, Index examIndex) {"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"        requireAllNonNull(moduleTitle, examIndex);"},{"lineNumber":48,"author":{"gitId":"maikongeh"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":49,"author":{"gitId":"maikongeh"},"content":"        this.examIndex \u003d examIndex;"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":52,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"maikongeh"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":54,"author":{"gitId":"maikongeh"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"},{"lineNumber":56,"author":{"gitId":"maikongeh"},"content":"        //check for Title"},{"lineNumber":57,"author":{"gitId":"maikongeh"},"content":"        Module moduleToCheck \u003d new Module(moduleTitle);"},{"lineNumber":58,"author":{"gitId":"maikongeh"},"content":"        if (!listContainsModule(lastShownList, moduleToCheck)) {"},{"lineNumber":59,"author":{"gitId":"maikongeh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_TITLE);"},{"lineNumber":60,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"maikongeh"},"content":"        int indexOfModule \u003d getIndex(lastShownList, moduleToCheck);"},{"lineNumber":62,"author":{"gitId":"maikongeh"},"content":"        Module moduleToGet \u003d lastShownList.get(indexOfModule);"},{"lineNumber":63,"author":{"gitId":"maikongeh"},"content":"        ExamList examList \u003d moduleToGet.getExams();"},{"lineNumber":64,"author":{"gitId":"maikongeh"},"content":"        if (examIndex.getZeroBased() \u003e\u003d examList.size()) {"},{"lineNumber":65,"author":{"gitId":"maikongeh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"maikongeh"},"content":"        Exam assignmentToDelete \u003d moduleToGet.getExamAt(examIndex.getZeroBased());"},{"lineNumber":68,"author":{"gitId":"maikongeh"},"content":"        moduleToGet.deleteExam(examIndex.getZeroBased());"},{"lineNumber":69,"author":{"gitId":"maikongeh"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EXAM_SUCCESS, assignmentToDelete));"},{"lineNumber":70,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":72,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"maikongeh"},"content":"     * Checks whether the module title matches any in the moduleList"},{"lineNumber":74,"author":{"gitId":"maikongeh"},"content":"     * @param moduleList"},{"lineNumber":75,"author":{"gitId":"maikongeh"},"content":"     * @param moduleCheck"},{"lineNumber":76,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":77,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"maikongeh"},"content":"    public boolean listContainsModule(List\u003cModule\u003e moduleList, Module moduleCheck) {"},{"lineNumber":79,"author":{"gitId":"maikongeh"},"content":"        boolean hasSameModule \u003d false;"},{"lineNumber":80,"author":{"gitId":"maikongeh"},"content":"        for (int i \u003d 0; i \u003c moduleList.size(); i++) {"},{"lineNumber":81,"author":{"gitId":"maikongeh"},"content":"            if (moduleCheck.isSameModule(moduleList.get(i))) {"},{"lineNumber":82,"author":{"gitId":"maikongeh"},"content":"                hasSameModule \u003d true;"},{"lineNumber":83,"author":{"gitId":"maikongeh"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"maikongeh"},"content":"        return hasSameModule;"},{"lineNumber":86,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":88,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"maikongeh"},"content":"     * Gets Index of module in moduleList with same title as input module"},{"lineNumber":90,"author":{"gitId":"maikongeh"},"content":"     * @param moduleList"},{"lineNumber":91,"author":{"gitId":"maikongeh"},"content":"     * @param moduleCheck"},{"lineNumber":92,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":93,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"maikongeh"},"content":"    public int getIndex(List\u003cModule\u003e moduleList, Module moduleCheck) {"},{"lineNumber":95,"author":{"gitId":"maikongeh"},"content":"        int index \u003d 0;"},{"lineNumber":96,"author":{"gitId":"maikongeh"},"content":"        for (int i \u003d 0; i \u003c moduleList.size(); i++) {"},{"lineNumber":97,"author":{"gitId":"maikongeh"},"content":"            if (moduleCheck.isSameModule(moduleList.get(i))) {"},{"lineNumber":98,"author":{"gitId":"maikongeh"},"content":"                index \u003d i;"},{"lineNumber":99,"author":{"gitId":"maikongeh"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"maikongeh"},"content":"        return index;"},{"lineNumber":102,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":104,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"maikongeh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitId":"maikongeh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":107,"author":{"gitId":"maikongeh"},"content":"                || (other instanceof DeleteExamCommand // instanceof handles nulls"},{"lineNumber":108,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 moduleTitle.equals(((DeleteExamCommand) other).moduleTitle)"},{"lineNumber":109,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 examIndex.equals(((DeleteExamCommand) other).examIndex)); // state check"},{"lineNumber":110,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":112,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":111}},{"path":"src/main/java/seedu/address/logic/commands/deletecommand/DeleteModuleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.logic.commands.deletecommand;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":" */"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"public class DeleteModuleCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"            + \": Deletes the module identified by the title used list of modules\\n\""},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":"            + \"Parameters: Title (must be a string value)\\n\""},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":"            + PREFIX_MODULE + \" CS2103T\";"},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"    private final Title moduleTitle;"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"    public DeleteModuleCommand(Title moduleTitle) {"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"maikongeh"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"        requireNonNull(model);"},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":"        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"},{"lineNumber":41,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":42,"author":{"gitId":"maikongeh"},"content":"        //check for Title"},{"lineNumber":43,"author":{"gitId":"maikongeh"},"content":"        Module moduleToCheck \u003d new Module(moduleTitle);"},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":"        System.out.println(lastShownList);"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"        System.out.println(moduleToCheck.toString());"},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":"        if (!listContainsModule(lastShownList, moduleToCheck)) {"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"            System.out.println(\"Nope\");"},{"lineNumber":48,"author":{"gitId":"maikongeh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_TITLE);"},{"lineNumber":49,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":"        int indexOfModule \u003d getIndex(lastShownList, moduleToCheck);"},{"lineNumber":51,"author":{"gitId":"maikongeh"},"content":"        System.out.println(\"index: \" + indexOfModule);"},{"lineNumber":52,"author":{"gitId":"maikongeh"},"content":"        Module moduleToDelete \u003d lastShownList.get(indexOfModule);"},{"lineNumber":53,"author":{"gitId":"maikongeh"},"content":"        model.deleteModule(moduleToDelete);"},{"lineNumber":54,"author":{"gitId":"maikongeh"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":57,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"maikongeh"},"content":"     * Checks whether the module title matches any in the moduleList"},{"lineNumber":59,"author":{"gitId":"maikongeh"},"content":"     * @param moduleList"},{"lineNumber":60,"author":{"gitId":"maikongeh"},"content":"     * @param moduleCheck"},{"lineNumber":61,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":62,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"maikongeh"},"content":"    public boolean listContainsModule(List\u003cModule\u003e moduleList, Module moduleCheck) {"},{"lineNumber":64,"author":{"gitId":"maikongeh"},"content":"        boolean hasSameModule \u003d false;"},{"lineNumber":65,"author":{"gitId":"maikongeh"},"content":"        for (int i \u003d 0; i \u003c moduleList.size(); i++) {"},{"lineNumber":66,"author":{"gitId":"maikongeh"},"content":"            if (moduleCheck.isSameModule(moduleList.get(i))) {"},{"lineNumber":67,"author":{"gitId":"maikongeh"},"content":"                hasSameModule \u003d true;"},{"lineNumber":68,"author":{"gitId":"maikongeh"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"maikongeh"},"content":"        return hasSameModule;"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":73,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"maikongeh"},"content":"     * Gets Index of module in moduleList with same title as input module"},{"lineNumber":75,"author":{"gitId":"maikongeh"},"content":"     * @param moduleList"},{"lineNumber":76,"author":{"gitId":"maikongeh"},"content":"     * @param moduleCheck"},{"lineNumber":77,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":78,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"maikongeh"},"content":"    public int getIndex(List\u003cModule\u003e moduleList, Module moduleCheck) {"},{"lineNumber":80,"author":{"gitId":"maikongeh"},"content":"        int index \u003d 0;"},{"lineNumber":81,"author":{"gitId":"maikongeh"},"content":"        for (int i \u003d 0; i \u003c moduleList.size(); i++) {"},{"lineNumber":82,"author":{"gitId":"maikongeh"},"content":"            if (moduleCheck.isSameModule(moduleList.get(i))) {"},{"lineNumber":83,"author":{"gitId":"maikongeh"},"content":"                index \u003d i;"},{"lineNumber":84,"author":{"gitId":"maikongeh"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"maikongeh"},"content":"        return index;"},{"lineNumber":87,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":89,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"maikongeh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitId":"maikongeh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":92,"author":{"gitId":"maikongeh"},"content":"                || (other instanceof DeleteModuleCommand // instanceof handles nulls"},{"lineNumber":93,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 moduleTitle.equals(((DeleteModuleCommand) other).moduleTitle)); // state check"},{"lineNumber":94,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":94}},{"path":"src/main/java/seedu/address/logic/commands/deletecommand/DeletePersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.logic.commands.deletecommand;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"public class DeletePersonCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"    public DeletePersonCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"maikongeh"},"content":"                || (other instanceof DeletePersonCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 targetIndex.equals(((DeletePersonCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":6,"-":48}},{"path":"src/main/java/seedu/address/logic/commands/editcommand/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.logic.commands.editcommand;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"public abstract class EditCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_USAGE \u003d EditPersonCommand.MESSAGE_USAGE"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"            + \"\\n\" + EditModuleCommand.MESSAGE_USAGE;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"//            + \"\\n\" + EditAssignmentCommand.MESSAGE_USAGE"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"//            + \"\\n\" + EditExamCommand.MESSAGE_USAGE;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":14}},{"path":"src/main/java/seedu/address/logic/commands/editcommand/EditModuleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.logic.commands.editcommand;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"public class EditModuleCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a module in RemindMe.\""},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"            + \"Parameters: \""},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"            + PREFIX_MODULE + \"MODULE TITLE \""},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"            + PREFIX_MODULE + \"NEW MODULE TITLE\\n\""},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"            + PREFIX_MODULE + \"CS2103 \""},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"            + PREFIX_MODULE + \"CS2103T\";"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Module edited: %1$s\";"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_NO_MODULE \u003d \"This module does not exists in RemindMe\";"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"    private final int toEdit;"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"    private final Title edit;"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"     * Creates an EditModuleCommand to edit the specified {@code Module}."},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"    public EditModuleCommand(int index, Title title) {"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"        requireNonNull(title);"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"        toEdit \u003d index;"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"        edit \u003d title;"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        requireNonNull(model);"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        if (!model.hasModule(toEdit)) {"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"            throw new CommandException(MESSAGE_NO_MODULE);"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"        model.editModule(toEdit, edit);"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, edit));"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"        return other \u003d\u003d this"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"                || (other instanceof EditModuleCommand)"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 edit.equals(((EditModuleCommand) other).edit)"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 toEdit \u003d\u003d ((EditModuleCommand) other).toEdit;"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":58}},{"path":"src/main/java/seedu/address/logic/commands/editcommand/EditPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.logic.commands.editcommand;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"public class EditPersonCommand extends Command {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":91,"author":{"gitId":"maikongeh"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"maikongeh"},"content":"        return new Person(updatedName, updatedBirthday, updatedTags);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":105,"author":{"gitId":"markuz5116"},"content":"        if (!(other instanceof EditPersonCommand)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":110,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":121,"author":{"gitId":"maikongeh"},"content":"        private Birthday birthday;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":129,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":132,"author":{"gitId":"maikongeh"},"content":"            setBirthday(toCopy.birthday);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":138,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":140,"author":{"gitId":"markuz5116"},"content":"            return CollectionUtil.isAnyNonNull(name, tags);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"maikongeh"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":152,"author":{"gitId":"maikongeh"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"maikongeh"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":156,"author":{"gitId":"maikongeh"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":161,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":162,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":168,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":169,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":170,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":171,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":192,"author":{"gitId":"maikongeh"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":6,"jellymias":3,"maikongeh":12,"-":175}},{"path":"src/main/java/seedu/address/logic/commands/findcommand/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.commands.findcommand;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"public abstract class FindCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_USAGE \u003d FindPersonCommand.MESSAGE_USAGE"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"            + \"\\n\" + FindModuleCommand.MESSAGE_USAGE;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":10}},{"path":"src/main/java/seedu/address/logic/commands/findcommand/FindModuleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.commands.findcommand;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.TitleContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"public class FindModuleCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all modules whose names \""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"            + \"contain any  of the specified keywords (case-insensitive) and displays them as a \""},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"            + \"list with index numbers.\\n\""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_MODULE + \"KEYWORD [MORE KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_MODULE + \"CS2103\";"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    private final TitleContainsKeywordsPredicate predicate;"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    public FindModuleCommand(TitleContainsKeywordsPredicate predicate) {"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(model);"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        model.updateFilteredModuleList(predicate);"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        return new CommandResult(String.format(Messages.MESSAGE_MODULE_LISTED_OVERVIEW,"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"                model.getFilteredModuleList().size()));"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    public boolean equals(Object object) {"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        return object \u003d\u003d this"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"                || (object instanceof FindModuleCommand)"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 predicate.equals(((FindModuleCommand) object).predicate);"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":45}},{"path":"src/main/java/seedu/address/logic/commands/findcommand/FindPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.commands.findcommand;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"public class FindPersonCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_NAME + \"KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"            + PREFIX_NAME + \"alice bob charlie\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    public FindPersonCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":38,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":"                || (other instanceof FindPersonCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 predicate.equals(((FindPersonCommand) other).predicate)); // state check"},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":10,"maikongeh":3,"-":35}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    public static final Prefix PREFIX_EXAM \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    public static final Prefix PREFIX_ASSIGNMENT \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"by/\");"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"jellymias":3,"maikongeh":1,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Description;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":85,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"     * Parses a {@code String description} into a {@code Description}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"jellymias"},"content":"     * @throws ParseException if the given {@code description} is invalid."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"jellymias"},"content":"    public static Description parseAssignmentDescription(String description) throws ParseException {"},{"lineNumber":92,"author":{"gitId":"jellymias"},"content":"        requireNonNull(description);"},{"lineNumber":93,"author":{"gitId":"jellymias"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {"},{"lineNumber":95,"author":{"gitId":"jellymias"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"jellymias"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"jellymias"},"content":"     * Parses a {@code String deadline} into a {@code LocalDateTime}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"jellymias"},"content":"     * @throws ParseException if the given {@code deadline} is invalid."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"jellymias"},"content":"    public static LocalDateTime parseAssignmentDeadline(String deadline) throws ParseException {"},{"lineNumber":107,"author":{"gitId":"jellymias"},"content":"        requireNonNull(deadline);"},{"lineNumber":108,"author":{"gitId":"jellymias"},"content":"        String trimmedDeadline \u003d deadline.trim();"},{"lineNumber":109,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":110,"author":{"gitId":"jellymias"},"content":"            LocalDateTime assignmentDeadline \u003d LocalDateTime.parse(trimmedDeadline,"},{"lineNumber":111,"author":{"gitId":"jellymias"},"content":"                                                                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":112,"author":{"gitId":"jellymias"},"content":"            return assignmentDeadline;"},{"lineNumber":113,"author":{"gitId":"jellymias"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":114,"author":{"gitId":"jellymias"},"content":"            throw new ParseException(Assignment.MESSAGE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"markuz5116"},"content":"     * Parses a {@code String examDateInput} into {@code LocalDateTime}."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"markuz5116"},"content":"     * @throws ParseException if the {@code examDateIput} is of an invalid format."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"markuz5116"},"content":"    public static LocalDateTime parseExamDate(String examDateInput) throws ParseException {"},{"lineNumber":125,"author":{"gitId":"markuz5116"},"content":"        String trimmedExamDateInput \u003d examDateInput.trim();"},{"lineNumber":126,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"markuz5116"},"content":"            LocalDateTime examDate \u003d LocalDateTime.parse(trimmedExamDateInput,"},{"lineNumber":128,"author":{"gitId":"markuz5116"},"content":"                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":129,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":130,"author":{"gitId":"markuz5116"},"content":"            return examDate;"},{"lineNumber":131,"author":{"gitId":"markuz5116"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":132,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(Exam.MESSAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"maikongeh"},"content":"     * Parses a {@code String examDateInput} into {@code LocalDateTime}."},{"lineNumber":138,"author":{"gitId":"maikongeh"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":139,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"maikongeh"},"content":"     * @throws ParseException if the {@code examDateIput} is of an invalid format."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"maikongeh"},"content":"    public static Birthday parseBirthday(String birthdayInput) throws ParseException {"},{"lineNumber":143,"author":{"gitId":"maikongeh"},"content":"        requireNonNull(birthdayInput);"},{"lineNumber":144,"author":{"gitId":"maikongeh"},"content":"        String trimmedBirthdayInput \u003d birthdayInput.trim();"},{"lineNumber":145,"author":{"gitId":"maikongeh"},"content":"        if (!Birthday.isValidBirthday(trimmedBirthdayInput)) {"},{"lineNumber":146,"author":{"gitId":"maikongeh"},"content":"            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":149,"author":{"gitId":"maikongeh"},"content":"        return new Birthday(birthdayInput);"},{"lineNumber":150,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":152,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"markuz5116"},"content":"     * Parses a {@code String titleInput} into a {@code Title}."},{"lineNumber":154,"author":{"gitId":"markuz5116"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":155,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"markuz5116"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":157,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":"    public static Title parseTitle(String titleInput) throws ParseException {"},{"lineNumber":159,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(titleInput);"},{"lineNumber":160,"author":{"gitId":"markuz5116"},"content":"        String trimmedTitle \u003d titleInput.trim();"},{"lineNumber":161,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":162,"author":{"gitId":"markuz5116"},"content":"        if (!Title.isValidTitle(trimmedTitle)) {"},{"lineNumber":163,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":166,"author":{"gitId":"markuz5116"},"content":"        return new Title(trimmedTitle);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":28,"jellymias":26,"maikongeh":14,"-":100}},{"path":"src/main/java/seedu/address/logic/parser/RemindMeParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import seedu.address.logic.commands.CalendarCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.addcommand.AddCommand;"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeleteCommand;"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.editcommand.EditCommand;"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.findcommand.FindCommand;"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.addcommandparser.AddCommandParser;"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.deletecommandparser.DeleteCommandParser;"},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.editcommandparser.EditCommandParser;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.findcommandparser.FindCommandParser;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"banchiang"},"content":"public class RemindMeParser {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"            return new AddCommandParser().parseCommand(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"            return new EditCommandParser().parseCommand(arguments);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"maikongeh"},"content":"            return new DeleteCommandParser().parseCommand(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        case CalendarCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"banchiang"},"content":"        case CalendarCommand.COMMAND_CHAR:"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"            return new CalendarCommand();"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"            return new FindCommandParser().parseCommand(arguments);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitId":"banchiang"},"content":"        case ExitCommand.COMMAND_CHAR:"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitId":"banchiang"},"content":"        case HelpCommand.COMMAND_CHAR:"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":5,"Hzxin":4,"banchiang":5,"jellymias":1,"maikongeh":6,"-":68}},{"path":"src/main/java/seedu/address/logic/parser/addcommandparser/AddAssignmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.parser.addcommandparser;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddAssignmentCommand;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Description;"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":" * Parses input arguments and creates a new AddAssignmentCommand object"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":" */"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"public class AddAssignmentCommandParser extends AddCommandParser implements Parser\u003cAddAssignmentCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAssignmentCommand"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"     * and returns an AddAssignmentCommand object for execution."},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    public AddAssignmentCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_ASSIGNMENT, PREFIX_DEADLINE);"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT, PREFIX_DEADLINE)"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssignmentCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_MODULE).get());"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        Module module \u003d new Module(title);"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        //todo create a date class for assignment and exam."},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        Description description \u003d ParserUtil.parseAssignmentDescription(argMultimap.getValue(PREFIX_ASSIGNMENT).get());"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"        LocalDateTime deadline \u003d ParserUtil.parseAssignmentDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        Assignment assignment \u003d new Assignment(description, deadline, new Tag(title.modTitle));"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"        return new AddAssignmentCommand(module, assignment);"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"}"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":""}],"authorContributionMap":{"markuz5116":7,"jellymias":45,"Hzxin":2}},{"path":"src/main/java/seedu/address/logic/parser/addcommandparser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.parser.addcommandparser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddCommand;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":" * Parses input arguments, identifies which Add Command it refers to and"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":" * creates the corresponding Add Command."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"public class AddCommandParser {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     * Parses the given {@code String} of arguments in the context of an Add Command"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"     * and returns an Command object for execution."},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    public Command parseCommand(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        Command command;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME, PREFIX_EXAM, PREFIX_ASSIGNMENT);"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        if (addModuleCondition(argMultimap)) {"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"            command \u003d new AddModuleCommandParser().parse(args);"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        } else if (addAssigmentCondition(argMultimap)) {"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"            command \u003d new AddAssignmentCommandParser().parse(args);"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        } else if (addExamCondition(argMultimap)) {"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"            command \u003d new AddExamCommandParser().parse(args);"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"        } else if (addPersonCondition(argMultimap)) {"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"            command \u003d new AddPersonCommandParser().parse(args);"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"                    AddCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"        return command;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"    private boolean addModuleCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_MODULE)"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 argMultimap.getPreamble().isEmpty()"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT)"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_EXAM);"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"    private boolean addAssigmentCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_MODULE)"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT)"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 argMultimap.getPreamble().isEmpty()"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_EXAM);"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"    private boolean addExamCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_MODULE)"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_EXAM)"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 argMultimap.getPreamble().isEmpty()"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT);"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"    private boolean addPersonCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 argMultimap.getPreamble().isEmpty();"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":"    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"jellymias"},"content":""}],"authorContributionMap":{"markuz5116":42,"jellymias":18,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/addcommandparser/AddExamCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.parser.addcommandparser;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddExamCommand;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"public class AddExamCommandParser extends AddCommandParser implements Parser\u003cAddExamCommand\u003e {"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    public AddExamCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EXAM, PREFIX_MODULE);"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        boolean isPreamblePresent \u003d !argMultimap.getPreamble().isEmpty();"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        boolean isModulePrefixAbsent \u003d !arePrefixesPresent(argMultimap, PREFIX_EXAM);"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"        boolean isExamPrefixAbsent \u003d !arePrefixesPresent(argMultimap, PREFIX_EXAM);"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        if (isModulePrefixAbsent || isExamPrefixAbsent || isPreamblePresent) {"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"                    AddExamCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_MODULE).get());"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        Module module \u003d new Module(title);"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"        LocalDateTime examDate \u003d ParserUtil.parseExamDate(argMultimap.getValue(PREFIX_EXAM).get());"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"        Exam exam \u003d new Exam(examDate, new Tag(title.modTitle));"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"        return new AddExamCommand(module, exam);"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":33,"jellymias":11,"Hzxin":2}},{"path":"src/main/java/seedu/address/logic/parser/addcommandparser/AddModuleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.parser.addcommandparser;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddModuleCommand;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":" * Parses input arguments and create a new AddModuleCommand object."},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"public class AddModuleCommandParser extends AddCommandParser implements Parser\u003cAddModuleCommand\u003e {"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"     * Parses the given {@code String} of arguments in the context of the AddModuleCommand and"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"     * returns an AddModuleCommand object for execution."},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    public AddModuleCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_EXAM, PREFIX_ASSIGNMENT);"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_MODULE).get());"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        Module module \u003d new Module(title);"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        return new AddModuleCommand(module);"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":36}},{"path":"src/main/java/seedu/address/logic/parser/addcommandparser/AddPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.parser.addcommandparser;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddPersonCommand;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":" * Parses input arguments and creates a new AddPersonCommand object"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":" */"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"public class AddPersonCommandParser extends AddCommandParser implements Parser\u003cAddPersonCommand\u003e {"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     * and returns an AddPersonCommand object for execution."},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"    public AddPersonCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_BIRTHDAY, PREFIX_TAG);"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        boolean isPreambleEmpty \u003d argMultimap.getPreamble().isEmpty();"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        boolean isNamePrefixPresent \u003d arePrefixesPresent(argMultimap, PREFIX_NAME);"},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":"        boolean isBirthdayPrefixPresent \u003d arePrefixesPresent(argMultimap, PREFIX_BIRTHDAY);"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"        if (!isNamePrefixPresent || !isPreambleEmpty || !isBirthdayPrefixPresent) {"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"                    AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":"        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"        Person person \u003d new Person(name, birthday, tagList);"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"        return new AddPersonCommand(person);"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"markuz5116":14,"jellymias":31,"maikongeh":7}},{"path":"src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteAssignmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"package seedu.address.logic.parser.deletecommandparser;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeleteAssignmentCommand;"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":" *  Parses input arguments and creates new DeleteAssignmentCommand object"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":" */"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"public class DeleteAssignmentCommandParser extends DeleteCommandParser implements Parser\u003cDeleteAssignmentCommand\u003e {"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":"     * Parses the {@code String} of arguments of a delete assignment command"},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"     * to execute the specific delete command"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"     * @param args"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":"     * @return DeleteAssignmentCommand"},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"     * @throws ParseException"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"    public DeleteAssignmentCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_EXAM, PREFIX_ASSIGNMENT);"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_MODULE).get());"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_ASSIGNMENT).get());"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"        return new DeleteAssignmentCommand(title, index);"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":35}},{"path":"src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"package seedu.address.logic.parser.deletecommandparser;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeletePersonCommand;"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":" * Parses input arguments and creates new parseCommand Object"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":" */"},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"public class DeleteCommandParser {"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"     * Parses the {@code String} of arguments of a delete command"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"     * to execute the specific delete command"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":"     * @param args"},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"     * @return parseCommand"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":"     * @throws ParseException"},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"    public Command parseCommand(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"        Command command;"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME, PREFIX_EXAM, PREFIX_ASSIGNMENT);"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"        if (deleteModuleCondition(argMultimap)) {"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"            command \u003d new DeleteModuleCommandParser().parse(args);"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"        } else if (deleteAssignmentCondition(argMultimap)) {"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":"            command \u003d new DeleteAssignmentCommandParser().parse(args);"},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":"        } else if (deleteExamCondition(argMultimap)) {"},{"lineNumber":38,"author":{"gitId":"maikongeh"},"content":"            command \u003d new DeleteExamCommandParser().parse(args);"},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"        } else if (deletePersonCondition(argMultimap)) {"},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":"            command \u003d new DeletePersonCommandParser().parse(args);"},{"lineNumber":41,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":42,"author":{"gitId":"maikongeh"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"maikongeh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":"                    DeletePersonCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":"        return command;"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":49,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":"     * returns true when arguments match input for deleteModule command"},{"lineNumber":51,"author":{"gitId":"maikongeh"},"content":"     * @param argMultimap"},{"lineNumber":52,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":53,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"maikongeh"},"content":"    public boolean deleteModuleCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_MODULE)"},{"lineNumber":56,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 argMultimap.getPreamble().isEmpty()"},{"lineNumber":57,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT)"},{"lineNumber":58,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_EXAM);"},{"lineNumber":59,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":61,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"maikongeh"},"content":"     * returns true when arguments match input for deleteAssignment command"},{"lineNumber":63,"author":{"gitId":"maikongeh"},"content":"     * @param argMultimap"},{"lineNumber":64,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":65,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"maikongeh"},"content":"    public boolean deleteAssignmentCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":67,"author":{"gitId":"maikongeh"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_MODULE)"},{"lineNumber":68,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 argMultimap.getPreamble().isEmpty()"},{"lineNumber":69,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT)"},{"lineNumber":70,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_EXAM);"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":73,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"maikongeh"},"content":"     * returns true when arguments match input for deleteExam command"},{"lineNumber":75,"author":{"gitId":"maikongeh"},"content":"     * @param argMultimap"},{"lineNumber":76,"author":{"gitId":"maikongeh"},"content":"     * @return"},{"lineNumber":77,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"maikongeh"},"content":"    public boolean deleteExamCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":79,"author":{"gitId":"maikongeh"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_MODULE)"},{"lineNumber":80,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 argMultimap.getPreamble().isEmpty()"},{"lineNumber":81,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT)"},{"lineNumber":82,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_EXAM);"},{"lineNumber":83,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":85,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"maikongeh"},"content":"     * returns true when arguments match input for deletePerson command"},{"lineNumber":87,"author":{"gitId":"maikongeh"},"content":"     * @param argMultimap"},{"lineNumber":88,"author":{"gitId":"maikongeh"},"content":"     * @return boolean value if it fits deletePerson conditional statement"},{"lineNumber":89,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"maikongeh"},"content":"    public boolean deletePersonCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":91,"author":{"gitId":"maikongeh"},"content":"        return !arePrefixesPresent(argMultimap, PREFIX_NAME);"},{"lineNumber":92,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":94,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":95,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"maikongeh"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":97,"author":{"gitId":"maikongeh"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":98,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"maikongeh"},"content":"    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":100,"author":{"gitId":"maikongeh"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":101,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":103,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":102}},{"path":"src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteExamCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"package seedu.address.logic.parser.deletecommandparser;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeleteExamCommand;"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"public class DeleteExamCommandParser extends DeleteCommandParser implements Parser\u003cDeleteExamCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"    public DeleteExamCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_EXAM, PREFIX_ASSIGNMENT);"},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":"        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_MODULE).get());"},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"        Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_EXAM).get());"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"        return new DeleteExamCommand(title, index);"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":25}},{"path":"src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteModuleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"package seedu.address.logic.parser.deletecommandparser;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeleteModuleCommand;"},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":" */"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"public class DeleteModuleCommandParser extends DeleteCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"    public DeleteModuleCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_EXAM, PREFIX_ASSIGNMENT);"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_MODULE).get());"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"        return new DeleteModuleCommand(title);"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":33}},{"path":"src/main/java/seedu/address/logic/parser/deletecommandparser/DeletePersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"package seedu.address.logic.parser.deletecommandparser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeletePersonCommand;"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"public class DeletePersonCommandParser extends DeleteCommandParser implements Parser\u003cDeletePersonCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"    public DeletePersonCommand parse(String args) throws ParseException {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":"            return new DeletePersonCommand(index);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE), pe);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":7,"-":18}},{"path":"src/main/java/seedu/address/logic/parser/editcommandparser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.logic.parser.editcommandparser;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditCommand;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":" * Parses input arguments, identifies which Edit Command it refers to and"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":" * creates the corresponding Edit Command."},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":" */"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"public class EditCommandParser {"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     * Parses the given {@code String} of arguments in the context of an Edit Command"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"     * and returns a Command object for execution."},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    public Command parseCommand(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        Command command;"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"        if (editModuleCondition(argMultimap)) {"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"            command \u003d new EditModuleCommandParser().parse(args);"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"        } else if (editPersonCondition(argMultimap)) {"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"            command \u003d new EditPersonCommandParser().parse(args);"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"                    EditCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        return command;"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"    private boolean editModuleCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_MODULE)"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 !argMultimap.getPreamble().isEmpty()"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_NAME);"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"    private boolean editPersonCondition(ArgumentMultimap argMultimap) {"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"        return arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 !argMultimap.getPreamble().isEmpty()"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_MODULE);"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"}"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":""}],"authorContributionMap":{"jellymias":66}},{"path":"src/main/java/seedu/address/logic/parser/editcommandparser/EditModuleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.logic.parser.editcommandparser;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditModuleCommand;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":" * Parses input arguments and create a new EditModuleCommand object."},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":" */"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"public class EditModuleCommandParser extends EditCommandParser implements Parser\u003cEditModuleCommand\u003e {"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     * Parses the given {@code String} of arguments in the context of the EditModuleCommand and"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     * returns an EditModuleCommand object for execution."},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    public EditModuleCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        Index index;"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"        } catch (ParseException pe) {"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"                    EditPersonCommand.MESSAGE_USAGE), pe);"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        int intIndex \u003d index.getOneBased();"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        Title edited \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_MODULE).get());"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        return new EditModuleCommand(intIndex, edited);"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"}"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":""}],"authorContributionMap":{"jellymias":45}},{"path":"src/main/java/seedu/address/logic/parser/editcommandparser/EditPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.logic.parser.editcommandparser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand;"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":" * Parses input arguments and creates a new EditPersonCommand object"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"public class EditPersonCommandParser extends EditCommandParser implements Parser\u003cEditPersonCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPersonCommand"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"     * and returns an EditPersonCommand object for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"    public EditPersonCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_BIRTHDAY, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"                    EditPersonCommand.MESSAGE_USAGE), pe);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":51,"author":{"gitId":"maikongeh"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"maikongeh"},"content":"            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"        return new EditPersonCommand(index, editPersonDescriptor);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":8,"jellymias":8,"maikongeh":5,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/findcommandparser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.parser.findcommandparser;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.findcommand.FindCommand;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"public class FindCommandParser {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"     * Parses the given {@code String} of arguments in the context of an Find Command and returns"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"     * a Command object for execution."},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    public Command parseCommand(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        Command command;"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        ArgumentMultimap argumentMultimap \u003d"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME, PREFIX_EXAM,"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"                PREFIX_ASSIGNMENT);"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        //todo searching based on assignment and exam."},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"        if (findModuleCondition(argumentMultimap)) {"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"            command \u003d new FindModuleCommandParser().parse(args);"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        } else if (findPersonCondition(argumentMultimap)) {"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"            command \u003d new FindPersonCommandParser().parse(args);"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"                    FindCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"        return command;"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    private boolean findModuleCondition(ArgumentMultimap argumentMultimap) {"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        return arePrefixesPresent(argumentMultimap, PREFIX_MODULE)"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 argumentMultimap.getPreamble().isEmpty()"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 !arePrefixesPresent(argumentMultimap, PREFIX_ASSIGNMENT)"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 !arePrefixesPresent(argumentMultimap, PREFIX_EXAM);"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"    private boolean findAssignmentCondition(ArgumentMultimap argumentMultimap) {"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"        return arePrefixesPresent(argumentMultimap, PREFIX_MODULE)"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 arePrefixesPresent(argumentMultimap, PREFIX_ASSIGNMENT)"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 argumentMultimap.getPreamble().isEmpty()"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 !arePrefixesPresent(argumentMultimap, PREFIX_EXAM);"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"    private boolean findExamCondition(ArgumentMultimap argumentMultimap) {"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"        return arePrefixesPresent(argumentMultimap, PREFIX_MODULE)"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 arePrefixesPresent(argumentMultimap, PREFIX_EXAM)"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 argumentMultimap.getPreamble().isEmpty()"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 !arePrefixesPresent(argumentMultimap, PREFIX_ASSIGNMENT);"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"    private boolean findPersonCondition(ArgumentMultimap argumentMultimap) {"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"        return arePrefixesPresent(argumentMultimap, PREFIX_NAME)"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 argumentMultimap.getPreamble().isEmpty();"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"                                                Prefix... prefixes) {"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":75}},{"path":"src/main/java/seedu/address/logic/parser/findcommandparser/FindModuleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.parser.findcommandparser;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.findcommand.FindModuleCommand;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.TitleContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"public class FindModuleCommandParser extends FindCommandParser implements Parser\u003cFindModuleCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"     * Parses the given {@code String} of arguments in the context of the FindModuleCommand"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"     * and returns a FindModuleCommand object for execution."},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    public FindModuleCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"        if (earlyExitCondition(argumentMultimap)) {"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindModuleCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"        String trimmedArgs \u003d argumentMultimap.getValue(PREFIX_MODULE).get().trim();"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"                    FindModuleCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        String[] titleKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        return new FindModuleCommand(new TitleContainsKeywordsPredicate(Arrays.asList(titleKeywords)));"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    private boolean earlyExitCondition(ArgumentMultimap argumentMultimap) {"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        return !arePrefixesPresent(argumentMultimap, PREFIX_MODULE)"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"                || !argumentMultimap.getPreamble().isEmpty()"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"                || argumentMultimap.getValue(PREFIX_MODULE).isEmpty();"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":45}},{"path":"src/main/java/seedu/address/logic/parser/findcommandparser/FindPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.logic.parser.findcommandparser;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.findcommand.FindPersonCommand;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":" * Parses input arguments and creates a new FindPersonCommand object"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"public class FindPersonCommandParser extends FindCommandParser implements Parser\u003cFindPersonCommand\u003e {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"     * and returns a FindPersonCommand object for execution."},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    public FindPersonCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        if (earlyExitCondition(argumentMultimap)) {"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"        String trimmedArgs \u003d argumentMultimap.getValue(PREFIX_NAME).get().trim();"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException("},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"        return new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"    private boolean earlyExitCondition(ArgumentMultimap argumentMultimap) {"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        return !arePrefixesPresent(argumentMultimap, PREFIX_NAME)"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"                || !argumentMultimap.getPreamble().isEmpty()"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"                || argumentMultimap.getValue(PREFIX_NAME).isEmpty();"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":48}},{"path":"src/main/java/seedu/address/model/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"import java.time.LocalTime;"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.Description;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":" * Represent an event that occurs"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"public abstract class Event implements Comparable\u003cEvent\u003e {"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":"    protected final Description description;"},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":"    protected final LocalDateTime dateTime;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    protected final Tag tag;"},{"lineNumber":20,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    protected Event(Description description, LocalDateTime dateTime, Tag tag) {"},{"lineNumber":22,"author":{"gitId":"banchiang"},"content":"        requireAllNonNull(description, dateTime);"},{"lineNumber":23,"author":{"gitId":"banchiang"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"banchiang"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        this.tag \u003d tag;"},{"lineNumber":26,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":28,"author":{"gitId":"banchiang"},"content":"    public Description getDescription() {"},{"lineNumber":29,"author":{"gitId":"banchiang"},"content":"        return description;"},{"lineNumber":30,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":32,"author":{"gitId":"banchiang"},"content":"    public LocalDate getDate() {"},{"lineNumber":33,"author":{"gitId":"banchiang"},"content":"        return dateTime.toLocalDate();"},{"lineNumber":34,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":36,"author":{"gitId":"banchiang"},"content":"    public LocalTime getTime() {"},{"lineNumber":37,"author":{"gitId":"banchiang"},"content":"        return dateTime.toLocalTime();"},{"lineNumber":38,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    public Tag getTag() {"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"        return tag;"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"    public int compareTo(Event otherEvent) {"},{"lineNumber":46,"author":{"gitId":"banchiang"},"content":"        return dateTime.compareTo(otherEvent.dateTime);"},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":49,"author":{"gitId":"banchiang"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"    public abstract boolean equals(Object other);"},{"lineNumber":51,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":52,"author":{"gitId":"banchiang"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"banchiang"},"content":"    public abstract int hashCode();"},{"lineNumber":54,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":55,"author":{"gitId":"banchiang"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"banchiang"},"content":"    public abstract String toString();"},{"lineNumber":57,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":58,"author":{"gitId":"banchiang"},"content":"}"}],"authorContributionMap":{"banchiang":50,"Hzxin":8}},{"path":"src/main/java/seedu/address/model/EventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":"public class EventList {"},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":"    public static final String NO_ASSIGNMENTS_OUTPUT \u003d \"You have no events! Yay! :)\\n\";"},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"    private ArrayList\u003cEvent\u003e events;"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"    public EventList() {"},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"        this.events \u003d new ArrayList\u003cEvent\u003e();"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"    public void add(Event e) {"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"        events.add(e);"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":"    public ArrayList\u003cEvent\u003e getEvents() {"},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":"        return new ArrayList\u003c\u003e(events);"},{"lineNumber":19,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    public boolean isEmpty() {"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"        return events.isEmpty();"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"        String displayString \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"        for (Event event : events) {"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"            displayString +\u003d event.tag + \": \" + event.toString() + \"\\n\";"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"        return displayString;"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"banchiang"},"content":"}"}],"authorContributionMap":{"banchiang":20,"Hzxin":14}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.TitleContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"     * Returns the user prefs\u0027 remind me file path."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"    Path getRemindMeFilePath();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"    void setRemindMeFilePath(Path remindMeFilePath);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":87,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"     * Returns true if a module with the same title, exams, and assignments as {@code module}"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"     * exists in the address book."},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"    boolean hasModule(Module module);"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"jellymias"},"content":"     * Returns true if there exists a module in the module list at {@code index}"},{"lineNumber":96,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"jellymias"},"content":"    boolean hasModule(int index);"},{"lineNumber":98,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":99,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"markuz5116"},"content":"     * Adds the given module."},{"lineNumber":101,"author":{"gitId":"markuz5116"},"content":"     * {@code module} must not already exists in RemindMe."},{"lineNumber":102,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"markuz5116"},"content":"    void addModule(Module module);"},{"lineNumber":104,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":105,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"maikongeh"},"content":"     * Deletes the given module."},{"lineNumber":107,"author":{"gitId":"maikongeh"},"content":"     * The Module must exist in the RemindMe."},{"lineNumber":108,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"maikongeh"},"content":"    void deleteModule(Module target);"},{"lineNumber":110,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":111,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"jellymias"},"content":"     * Returns true if an assignment that has the same description and deadline"},{"lineNumber":113,"author":{"gitId":"jellymias"},"content":"     * as {@code assignment} exists in the same module."},{"lineNumber":114,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":116,"author":{"gitId":"jellymias"},"content":"    boolean hasAssignment(Module module, Assignment assignment);"},{"lineNumber":117,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":118,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"maikongeh"},"content":"     * Edits the given module at index"},{"lineNumber":120,"author":{"gitId":"maikongeh"},"content":"     * @param index"},{"lineNumber":121,"author":{"gitId":"maikongeh"},"content":"     * @param target"},{"lineNumber":122,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"maikongeh"},"content":"    void editModule(int index, Title target);"},{"lineNumber":124,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":125,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"jellymias"},"content":"     * Adds the given assignment."},{"lineNumber":127,"author":{"gitId":"jellymias"},"content":"     * {@code assignment} must not already exist in the module it is to be added to."},{"lineNumber":128,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"jellymias"},"content":"    void addAssignment(Module module, Assignment assignment);"},{"lineNumber":130,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":131,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"markuz5116"},"content":"     * Returns true if an exam with the same date and time as {@code module} exists in the"},{"lineNumber":133,"author":{"gitId":"markuz5116"},"content":"     * address book."},{"lineNumber":134,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"jellymias"},"content":"    boolean hasExam(Module module, Exam exam);"},{"lineNumber":136,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":137,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"markuz5116"},"content":"     * Adds the given exam."},{"lineNumber":139,"author":{"gitId":"markuz5116"},"content":"     * {@code exam} must not already exist in the module it is to be added to."},{"lineNumber":140,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"jellymias"},"content":"    void addExam(Module module, Exam exam);"},{"lineNumber":142,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":143,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"Hzxin"},"content":"     * Replaces remindMe data with the data in {@code remindMe}."},{"lineNumber":145,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"Hzxin"},"content":"    void setRemindMe(ModulePlanner modulePlanner);"},{"lineNumber":147,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":148,"author":{"gitId":"Hzxin"},"content":"    /** Returns the RemindMe */"},{"lineNumber":149,"author":{"gitId":"Hzxin"},"content":"    ReadOnlyModulePlanner getRemindMe();"},{"lineNumber":150,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":151,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"markuz5116"},"content":"     * Updates the filter of the filtered module list to filter by the given {@code predicate}."},{"lineNumber":153,"author":{"gitId":"markuz5116"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":154,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"markuz5116"},"content":"    void updateFilteredModuleList(TitleContainsKeywordsPredicate predicate);"},{"lineNumber":156,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":157,"author":{"gitId":"markuz5116"},"content":"    /** Returns an unmodifiable view of the filtered module list */"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":"    ObservableList\u003cModule\u003e getFilteredModuleList();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":38,"jellymias":20,"Hzxin":10,"maikongeh":14,"-":77}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.TitleContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"    private final ModulePlanner modulePlanner;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    private final FilteredList\u003cModule\u003e filteredModules;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    public ModelManager(ReadOnlyModulePlanner remindMeApp,"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"                        ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        requireAllNonNull(remindMeApp, userPrefs);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"        logger.fine(\"Initializing with RemindMe: \" + remindMeApp + \" and user prefs \" + userPrefs);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"        this.modulePlanner \u003d new ModulePlanner(remindMeApp);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.modulePlanner.getPersonList());"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"        filteredModules \u003d new FilteredList\u003c\u003e(this.modulePlanner.getModuleList());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"        this(new ModulePlanner(), new UserPrefs());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"    public Path getRemindMeFilePath () {"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"        return userPrefs.getRemindMeFilePath();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"    public void setRemindMeFilePath(Path remindMeFilePath) {"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"        requireNonNull(remindMeFilePath);"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"        userPrefs.setRemindMeFilePath(remindMeFilePath);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RemindMe Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":"        return modulePlanner.hasPerson(person);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"        modulePlanner.removePerson(target);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"        modulePlanner.addPerson(person);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"Hzxin"},"content":"        modulePlanner.setPerson(target, editedPerson);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":146,"author":{"gitId":"Hzxin"},"content":"        return modulePlanner.equals(other.modulePlanner)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":148,"author":{"gitId":"Hzxin"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":149,"author":{"gitId":"Hzxin"},"content":"                \u0026\u0026 filteredModules.equals(other.filteredModules);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"Hzxin"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RemindMe \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":153,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":154,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":155,"author":{"gitId":"Hzxin"},"content":"    public void setRemindMe(ModulePlanner modulePlanner) {"},{"lineNumber":156,"author":{"gitId":"markuz5116"},"content":"        this.modulePlanner.resetData(modulePlanner);"},{"lineNumber":157,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":159,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":160,"author":{"gitId":"Hzxin"},"content":"    public ReadOnlyModulePlanner getRemindMe() {"},{"lineNumber":161,"author":{"gitId":"Hzxin"},"content":"        return modulePlanner;"},{"lineNumber":162,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":164,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":165,"author":{"gitId":"markuz5116"},"content":"    public void updateFilteredModuleList(TitleContainsKeywordsPredicate predicate) {"},{"lineNumber":166,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(predicate);"},{"lineNumber":167,"author":{"gitId":"markuz5116"},"content":"        filteredModules.setPredicate(predicate);"},{"lineNumber":168,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":170,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":171,"author":{"gitId":"markuz5116"},"content":"    public ObservableList\u003cModule\u003e getFilteredModuleList() {"},{"lineNumber":172,"author":{"gitId":"markuz5116"},"content":"        return filteredModules;"},{"lineNumber":173,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":175,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":176,"author":{"gitId":"markuz5116"},"content":"    public boolean hasModule(Module module) {"},{"lineNumber":177,"author":{"gitId":"jellymias"},"content":"        requireNonNull(module);"},{"lineNumber":178,"author":{"gitId":"jellymias"},"content":"        return modulePlanner.hasModule(module);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":182,"author":{"gitId":"jellymias"},"content":"    public boolean hasModule(int index) {"},{"lineNumber":183,"author":{"gitId":"jellymias"},"content":"        return modulePlanner.hasModule(index);"},{"lineNumber":184,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":186,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":187,"author":{"gitId":"markuz5116"},"content":"    public void addModule(Module module) {"},{"lineNumber":188,"author":{"gitId":"jellymias"},"content":"        requireNonNull(module);"},{"lineNumber":189,"author":{"gitId":"jellymias"},"content":"        modulePlanner.addModule(module);"},{"lineNumber":190,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":192,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":193,"author":{"gitId":"maikongeh"},"content":"    public void deleteModule(Module target) {"},{"lineNumber":194,"author":{"gitId":"maikongeh"},"content":"        modulePlanner.removeModule(target);"},{"lineNumber":195,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":197,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":198,"author":{"gitId":"jellymias"},"content":"    public void editModule(int index, Title title) {"},{"lineNumber":199,"author":{"gitId":"jellymias"},"content":"        requireNonNull(title);"},{"lineNumber":200,"author":{"gitId":"jellymias"},"content":"        modulePlanner.editModule(index, title);"},{"lineNumber":201,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":203,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":204,"author":{"gitId":"jellymias"},"content":"    public boolean hasAssignment(Module module, Assignment assignment) {"},{"lineNumber":205,"author":{"gitId":"jellymias"},"content":"        requireAllNonNull(module, assignment);"},{"lineNumber":206,"author":{"gitId":"jellymias"},"content":"        return modulePlanner.hasAssignment(module, assignment);"},{"lineNumber":207,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":209,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":210,"author":{"gitId":"jellymias"},"content":"    public void addAssignment(Module module, Assignment assignment) {"},{"lineNumber":211,"author":{"gitId":"jellymias"},"content":"        requireAllNonNull(module, assignment);"},{"lineNumber":212,"author":{"gitId":"jellymias"},"content":"        modulePlanner.addAssignment(module, assignment);"},{"lineNumber":213,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":215,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":216,"author":{"gitId":"jellymias"},"content":"    public boolean hasExam(Module module, Exam exam) {"},{"lineNumber":217,"author":{"gitId":"jellymias"},"content":"        requireAllNonNull(module, exam);"},{"lineNumber":218,"author":{"gitId":"jellymias"},"content":"        return modulePlanner.hasExam(module, exam);"},{"lineNumber":219,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":221,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":222,"author":{"gitId":"jellymias"},"content":"    public void addExam(Module module, Exam exam) {"},{"lineNumber":223,"author":{"gitId":"jellymias"},"content":"        requireAllNonNull(module, exam);"},{"lineNumber":224,"author":{"gitId":"jellymias"},"content":"        modulePlanner.addExam(module, exam);"},{"lineNumber":225,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":35,"jellymias":35,"Hzxin":24,"maikongeh":7,"-":125}},{"path":"src/main/java/seedu/address/model/ModulePlanner.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.UniqueModuleList;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"public class ModulePlanner implements ReadOnlyModulePlanner {"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    private final UniqueModuleList modules;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    private final UniquePersonList persons;"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"    /*"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"     *   among constructors."},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    {"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        modules \u003d new UniqueModuleList();"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    public ModulePlanner() {}"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"    public ModulePlanner(ReadOnlyModulePlanner toBeCopied) {"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        this();"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        resetData(toBeCopied);"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    public void setModules(List\u003cModule\u003e modules) {"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        this.modules.setModules(modules);"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"     * Resets the existing data of this {@code ModulePlanner} with {@code newData}."},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"    public void resetData(ReadOnlyModulePlanner newData) {"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"        requireNonNull(newData);"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"        setModules(newData.getModuleList());"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":69,"author":{"gitId":"jellymias"},"content":"    //// module-level operations"},{"lineNumber":70,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":71,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"jellymias"},"content":"     * Returns true if a module with the same title as {@code module} exists in the module planner."},{"lineNumber":73,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"jellymias"},"content":"    public boolean hasModule(Module module) {"},{"lineNumber":75,"author":{"gitId":"jellymias"},"content":"        requireNonNull(module);"},{"lineNumber":76,"author":{"gitId":"jellymias"},"content":"        return modules.contains(module);"},{"lineNumber":77,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"jellymias"},"content":"     * Returns true if the {@code index} is a valid index within the range of the module planner."},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"jellymias"},"content":"    public boolean hasModule(int index) {"},{"lineNumber":83,"author":{"gitId":"jellymias"},"content":"        return index \u003e 0 \u0026\u0026 index \u003c\u003d modules.size();"},{"lineNumber":84,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"jellymias"},"content":"     * Returns true if {@code module} has an assignment with the same description and date as {@code assignment}."},{"lineNumber":88,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"jellymias"},"content":"    public boolean hasAssignment(Module module, Assignment assignment) {"},{"lineNumber":90,"author":{"gitId":"jellymias"},"content":"        requireAllNonNull(module, assignment);"},{"lineNumber":91,"author":{"gitId":"jellymias"},"content":"        Module mod \u003d modules.getModule(module);"},{"lineNumber":92,"author":{"gitId":"jellymias"},"content":"        return mod.hasAssignment(assignment);"},{"lineNumber":93,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":95,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"jellymias"},"content":"     * Returns true if {@code module} has an exam with the same date as {@code exam}."},{"lineNumber":97,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"jellymias"},"content":"    public boolean hasExam(Module module, Exam exam) {"},{"lineNumber":99,"author":{"gitId":"jellymias"},"content":"        requireAllNonNull(module, exam);"},{"lineNumber":100,"author":{"gitId":"jellymias"},"content":"        Module mod \u003d modules.getModule(module);"},{"lineNumber":101,"author":{"gitId":"jellymias"},"content":"        return mod.hasExam(exam);"},{"lineNumber":102,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"Hzxin"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":106,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Hzxin"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":108,"author":{"gitId":"Hzxin"},"content":"        requireNonNull(person);"},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"        return persons.contains(person);"},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":112,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"Hzxin"},"content":"     * Adds a person to the address book."},{"lineNumber":114,"author":{"gitId":"Hzxin"},"content":"     * The person must not already exist in the address book."},{"lineNumber":115,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Hzxin"},"content":"    public void addPerson(Person p) {"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":"        persons.add(p);"},{"lineNumber":118,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":120,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"Hzxin"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":122,"author":{"gitId":"Hzxin"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":124,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"Hzxin"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":126,"author":{"gitId":"Hzxin"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":127,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":128,"author":{"gitId":"Hzxin"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":129,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":131,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"Hzxin"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":133,"author":{"gitId":"Hzxin"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":134,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"Hzxin"},"content":"    public void removePerson(Person key) {"},{"lineNumber":136,"author":{"gitId":"Hzxin"},"content":"        persons.remove(key);"},{"lineNumber":137,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":139,"author":{"gitId":"Hzxin"},"content":"    //// util methods"},{"lineNumber":140,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":141,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"jellymias"},"content":"     * Adds a module to the module planner."},{"lineNumber":143,"author":{"gitId":"jellymias"},"content":"     * The module must not already exist in the module planner."},{"lineNumber":144,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"jellymias"},"content":"    public void addModule(Module mod) {"},{"lineNumber":146,"author":{"gitId":"jellymias"},"content":"        modules.add(mod);"},{"lineNumber":147,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":149,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"jellymias"},"content":"     * Adds an assignment to the module in the module planner."},{"lineNumber":151,"author":{"gitId":"jellymias"},"content":"     * The module must already exist in the module planner."},{"lineNumber":152,"author":{"gitId":"jellymias"},"content":"     * The assignment must not already exist in the module."},{"lineNumber":153,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"jellymias"},"content":"    public void addAssignment(Module mod, Assignment assignment) {"},{"lineNumber":155,"author":{"gitId":"jellymias"},"content":"        Module editedMod \u003d modules.getModule(mod);"},{"lineNumber":156,"author":{"gitId":"jellymias"},"content":"        editedMod.addAssignment(assignment);"},{"lineNumber":157,"author":{"gitId":"jellymias"},"content":"        modules.setModule(mod, editedMod);"},{"lineNumber":158,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":160,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"jellymias"},"content":"     * Adds an exam to the module in the module planner."},{"lineNumber":162,"author":{"gitId":"jellymias"},"content":"     * The module must already exist in the module planner."},{"lineNumber":163,"author":{"gitId":"jellymias"},"content":"     * The exam must not already exist in the module."},{"lineNumber":164,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"jellymias"},"content":"    public void addExam(Module mod, Exam exam) {"},{"lineNumber":166,"author":{"gitId":"jellymias"},"content":"        Module editedMod \u003d modules.getModule(mod);"},{"lineNumber":167,"author":{"gitId":"jellymias"},"content":"        editedMod.addExam(exam);"},{"lineNumber":168,"author":{"gitId":"jellymias"},"content":"        modules.setModule(mod, editedMod);"},{"lineNumber":169,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":171,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"jellymias"},"content":"     * Replaces the given module {@code target} in the list with {@code editedModule}."},{"lineNumber":173,"author":{"gitId":"jellymias"},"content":"     * {@code target} must exist in the module planner."},{"lineNumber":174,"author":{"gitId":"jellymias"},"content":"     * The title of {@code editedModule} must not be the same as another existing module in the module planner."},{"lineNumber":175,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"jellymias"},"content":"    public void setModule(Module target, Module editedModule) {"},{"lineNumber":177,"author":{"gitId":"jellymias"},"content":"        requireNonNull(editedModule);"},{"lineNumber":178,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":179,"author":{"gitId":"jellymias"},"content":"        modules.setModule(target, editedModule);"},{"lineNumber":180,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":182,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"jellymias"},"content":"     * Removes {@code key} from this {@code ModulePlanner}."},{"lineNumber":184,"author":{"gitId":"jellymias"},"content":"     * {@code key} must exist in the module planner."},{"lineNumber":185,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"jellymias"},"content":"    public void removeModule(Module key) {"},{"lineNumber":187,"author":{"gitId":"jellymias"},"content":"        modules.remove(key);"},{"lineNumber":188,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":190,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"jellymias"},"content":"     * Removes {@code key} from {@code module} in the module planner."},{"lineNumber":192,"author":{"gitId":"jellymias"},"content":"     * {@code module} must exist in the module planner."},{"lineNumber":193,"author":{"gitId":"jellymias"},"content":"     * {@code key} must exist in {@code module}."},{"lineNumber":194,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"jellymias"},"content":"    public void removeAssignment(Module module, Assignment key) {"},{"lineNumber":196,"author":{"gitId":"jellymias"},"content":"        Module editedModule \u003d modules.getModule(module);"},{"lineNumber":197,"author":{"gitId":"jellymias"},"content":"        editedModule.deleteAssignment(key);"},{"lineNumber":198,"author":{"gitId":"jellymias"},"content":"        setModule(module, editedModule);"},{"lineNumber":199,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":201,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"jellymias"},"content":"     * Removes {@code key} from {@code module} in the module planner."},{"lineNumber":203,"author":{"gitId":"jellymias"},"content":"     * {@code module} must exist in the module planner."},{"lineNumber":204,"author":{"gitId":"jellymias"},"content":"     * {@code key} must exist in {@code module}."},{"lineNumber":205,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"jellymias"},"content":"    public void removeExam(Module module, Exam key) {"},{"lineNumber":207,"author":{"gitId":"jellymias"},"content":"        Module editedModule \u003d modules.getModule(module);"},{"lineNumber":208,"author":{"gitId":"jellymias"},"content":"        editedModule.deleteExam(key);"},{"lineNumber":209,"author":{"gitId":"jellymias"},"content":"        setModule(module, editedModule);"},{"lineNumber":210,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":212,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"jellymias"},"content":"     * Edits module at {@code index} and changes its title to {@code title} in the module planner."},{"lineNumber":214,"author":{"gitId":"jellymias"},"content":"     * {@code index} must be within the bounds of the module planner."},{"lineNumber":215,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"jellymias"},"content":"    public void editModule(int index, Title title) {"},{"lineNumber":217,"author":{"gitId":"jellymias"},"content":"        Module target \u003d modules.getModule(index);"},{"lineNumber":218,"author":{"gitId":"jellymias"},"content":"        Module editedModule \u003d target;"},{"lineNumber":219,"author":{"gitId":"jellymias"},"content":"        editedModule.editTitle(title);"},{"lineNumber":220,"author":{"gitId":"jellymias"},"content":"        setModule(target, editedModule);"},{"lineNumber":221,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":223,"author":{"gitId":"jellymias"},"content":"    //// util methods"},{"lineNumber":224,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":225,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":226,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":227,"author":{"gitId":"Hzxin"},"content":"        return modules.asUnmodifiableObservableList().size() + \" modules\";"},{"lineNumber":228,"author":{"gitId":"jellymias"},"content":"        // TODO: refine later"},{"lineNumber":229,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":231,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":232,"author":{"gitId":"jellymias"},"content":"    public ObservableList\u003cModule\u003e getModuleList() {"},{"lineNumber":233,"author":{"gitId":"jellymias"},"content":"        return modules.asUnmodifiableObservableList();"},{"lineNumber":234,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":236,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":237,"author":{"gitId":"Hzxin"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":238,"author":{"gitId":"Hzxin"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":239,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":241,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":242,"author":{"gitId":"jellymias"},"content":"    public boolean equals(Object other) {"},{"lineNumber":243,"author":{"gitId":"jellymias"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":244,"author":{"gitId":"Hzxin"},"content":"                || (other instanceof ModulePlanner // instanceof handles nulls"},{"lineNumber":245,"author":{"gitId":"Hzxin"},"content":"                \u0026\u0026 modules.equals(((ModulePlanner) other).modules));"},{"lineNumber":246,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":248,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":249,"author":{"gitId":"jellymias"},"content":"    public int hashCode() {"},{"lineNumber":250,"author":{"gitId":"jellymias"},"content":"        return modules.hashCode();"},{"lineNumber":251,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":185,"Hzxin":67}},{"path":"src/main/java/seedu/address/model/ReadOnlyModulePlanner.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":" * Unmodifiable view of the RemindMe App."},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"public interface ReadOnlyModulePlanner {"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"     * @return"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    ObservableList\u003cModule\u003e getModuleList();"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":15,"Hzxin":8}},{"path":"src/main/java/seedu/address/model/TimeSlot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":" * Objects implement TimeSlot so that clashes between it and other TimeSLots can be prevented in RemindMe."},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"public interface TimeSlot {"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"     * Returns the start time of a time slot in LocalDateTime."},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"     * @return start time of a timeslot."},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"    LocalDateTime getStartDateTime();"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":"     * Returns the end time of a time slot in LocalDateTime."},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":"     * @return end time of a time slot."},{"lineNumber":19,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"banchiang"},"content":"    LocalDateTime getEndDateTime();"},{"lineNumber":21,"author":{"gitId":"banchiang"},"content":"}"}],"authorContributionMap":{"banchiang":21}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    private Path remindMeFilePath \u003d Paths.get(\"data\", \"remindMe.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"    public Path getRemindMeFilePath() {"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"        return remindMeFilePath;"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"    public void setRemindMeFilePath(Path remindMeFilePath) {"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        requireNonNull(remindMeFilePath);"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        this.remindMeFilePath \u003d remindMeFilePath;"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":10,"-":87}},{"path":"src/main/java/seedu/address/model/module/Assignment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.Event;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"public class Assignment extends Event {"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    // todo change message constraints"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Assignment deadline must be formatted \""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"            + \"to a valid DD/MM/YYYY TIME\";"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    public final Description description;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    public final LocalDateTime deadline;"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"     * Constructs an {@code Assignment}."},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"     * @param description A valid assignment description."},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     * @param deadline A valid date and time."},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    public Assignment(Description description, LocalDateTime deadline, Tag tag) {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        super(description, deadline, tag);"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        this.description \u003d description;"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    public boolean isSameAssignment(Assignment other) {"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        return this.equals(other);"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        return description + \" due: \" + deadline.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"                || (other instanceof Assignment // instanceof handles nulls"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 description.equals(((Assignment) other).description)"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 deadline.equals(((Assignment) other).deadline));"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"        return Objects.hash(description, deadline);"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"markuz5116":3,"jellymias":41,"banchiang":3,"Hzxin":4}},{"path":"src/main/java/seedu/address/model/module/AssignmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"public class AssignmentList {"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"    public static final String NO_ASSIGNMENTS_OUTPUT \u003d \"You have no assignments~  \\n\";"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    private List\u003cAssignment\u003e assignments;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"     * Constructs an {@code AssignmentList} to store {@code Assignments}"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    public AssignmentList() {"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"        this.assignments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"     * Constructs an {@code AssignmentList} to store {@code Assignments} with given {@code ArrayList\u003cAssignment\u003e};"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"     * @param assignments assignments to construct the AssignmentList."},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    public AssignmentList(List\u003cAssignment\u003e assignments) {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"        this.assignments \u003d assignments;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"     * Get the assignment at the index from the list."},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"     * @param index Index of the assignment."},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"     * @return Assignment at index."},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    public Assignment get(int index) {"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        return assignments.get(index);"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"     * Gets the index of the {@code assignment} in the assignment list."},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"     * {@code assignment} must exist in the assignment list."},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    public int getIndex(Assignment assignment) {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        int index \u003d -1;"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 0; i \u003c assignments.size(); i++) {"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"            if (assignments.get(i).equals(assignment)) {"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"                index \u003d i;"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"        return index;"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"     * Adds an assignment to the list."},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"     * @param assignment Assignment to be added."},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"    public void add(Assignment assignment) {"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"        assignments.add(assignment);"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"     * Removes the assignment at the index from the list."},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"     * @param index Index of assignment to be removed."},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"     * @return Removed assignment."},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":"    public Assignment delete(int index) {"},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"        Assignment deleted \u003d assignments.remove(index);"},{"lineNumber":68,"author":{"gitId":"jellymias"},"content":"        return deleted;"},{"lineNumber":69,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":71,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"jellymias"},"content":"     * Delete the {@code assignment} from assignment list."},{"lineNumber":73,"author":{"gitId":"jellymias"},"content":"     * {@code assignment} must exist in the assignment list."},{"lineNumber":74,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"jellymias"},"content":"    public Assignment delete(Assignment assignment) {"},{"lineNumber":76,"author":{"gitId":"jellymias"},"content":"        int index \u003d getIndex(assignment);"},{"lineNumber":77,"author":{"gitId":"jellymias"},"content":"        return delete(index);"},{"lineNumber":78,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":80,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"     * Checks if the assignment list contains the given assignment."},{"lineNumber":82,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"jellymias"},"content":"     * @param assignment Assignment to check."},{"lineNumber":84,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":85,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"    public boolean contains(Assignment assignment) {"},{"lineNumber":87,"author":{"gitId":"jellymias"},"content":"        boolean hasAssignment \u003d false;"},{"lineNumber":88,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 0; i \u003c assignments.size() \u0026\u0026 !hasAssignment; i++) {"},{"lineNumber":89,"author":{"gitId":"jellymias"},"content":"            if (assignments.get(i).equals(assignment)) {"},{"lineNumber":90,"author":{"gitId":"jellymias"},"content":"                hasAssignment \u003d true;"},{"lineNumber":91,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"jellymias"},"content":"        return hasAssignment;"},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"    public List\u003cAssignment\u003e getAssignments() {"},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":"        return new ArrayList\u003c\u003e(assignments);"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":100,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"jellymias"},"content":"     * Gets the size of the list."},{"lineNumber":102,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"jellymias"},"content":"     * @return List size."},{"lineNumber":104,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"jellymias"},"content":"    public int size() {"},{"lineNumber":106,"author":{"gitId":"jellymias"},"content":"        return assignments.size();"},{"lineNumber":107,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":112,"author":{"gitId":"Hzxin"},"content":"            return true;"},{"lineNumber":113,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":115,"author":{"gitId":"Hzxin"},"content":"        if (!(other instanceof AssignmentList)) {"},{"lineNumber":116,"author":{"gitId":"Hzxin"},"content":"            return false;"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":"        AssignmentList otherList \u003d (AssignmentList) other;"},{"lineNumber":120,"author":{"gitId":"Hzxin"},"content":"        if (assignments.size() !\u003d otherList.size()) {"},{"lineNumber":121,"author":{"gitId":"Hzxin"},"content":"            return false;"},{"lineNumber":122,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":"            for (int i \u003d 0; i \u003c otherList.size(); i++) {"},{"lineNumber":124,"author":{"gitId":"Hzxin"},"content":"                if (!assignments.get(i).equals(otherList.assignments.get(i))) {"},{"lineNumber":125,"author":{"gitId":"Hzxin"},"content":"                    return false;"},{"lineNumber":126,"author":{"gitId":"Hzxin"},"content":"                }"},{"lineNumber":127,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":130,"author":{"gitId":"Hzxin"},"content":"        return true;"},{"lineNumber":131,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":133,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":135,"author":{"gitId":"jellymias"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":136,"author":{"gitId":"banchiang"},"content":"        if (size() \u003d\u003d 0) {"},{"lineNumber":137,"author":{"gitId":"banchiang"},"content":"            return NO_ASSIGNMENTS_OUTPUT;"},{"lineNumber":138,"author":{"gitId":"banchiang"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"Hzxin"},"content":"        builder.append(\"Assignment: \\n\");"},{"lineNumber":140,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {"},{"lineNumber":141,"author":{"gitId":"jellymias"},"content":"            builder.append(i + 1).append(\". \")"},{"lineNumber":142,"author":{"gitId":"jellymias"},"content":"                    .append(get(i)).append(\"\\n\");"},{"lineNumber":143,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"jellymias"},"content":"        return builder.toString();"},{"lineNumber":145,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"markuz5116":5,"jellymias":101,"Hzxin":37,"banchiang":3}},{"path":"src/main/java/seedu/address/model/module/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"public class Description {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    // todo change message constraints"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"            \"Description can contain any message, and it should not be blank\";"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    /*"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    // todo change regex"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    public final String description;"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"     * Constructs a {@code Description}."},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     * @param description A valid assignment description."},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"    public Description(String description) {"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        requireNonNull(description);"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        this.description \u003d description;"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    public static Description defaultDescription() {"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"        return new Description(\"default\");"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"     * Returns true if a given string is a valid assignment description."},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"    public static boolean isValidDescription(String description) {"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        return description.matches(VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        return description;"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 description.equals(((Description) other).description)); // state check"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"        return description.hashCode();"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":55,"Hzxin":4}},{"path":"src/main/java/seedu/address/model/module/Exam.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.Event;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"public class Exam extends Event {"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"    // todo change message constraints"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Exam names should be numerical and not \""},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"            + \"empty. It should follow a valid DD/MM/YYYY HHMM\";"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[0-9]{4}-[01-12]{2}-[00-31]{2}T[00-23]{2}:[00-59]{2}$\";"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    public static final DateTimeFormatter EXAM_DATE_FORMATTER \u003d"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    public final LocalDateTime examDate;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"     * Constructs an {@code Exam} with {@code examDate} as input representing the date of the Exam."},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    public Exam(LocalDateTime examDate, Tag tag) {"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"        super(new Description(\"exam\"), examDate, tag);"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        this.examDate \u003d examDate;"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    public boolean isAt(LocalDateTime localDateTime) {"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        return examDate \u003d\u003d localDateTime;"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"     * Returns a string representation of {@code Exam} with date of format YYYY-MM-DD HH:TT."},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        return \"Exam is on: \" + EXAM_DATE_FORMATTER.format(examDate);"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"     * Returns true if {@code other} is the same instance or is instance of Exam and has the same"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"     * date."},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"                || (other instanceof Exam // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 examDate.equals(((Exam) other).examDate)); // state check"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"     * Returns the hashcode representation of {@code Exam}."},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"        return examDate.hashCode();"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":51,"banchiang":3,"Hzxin":3}},{"path":"src/main/java/seedu/address/model/module/ExamList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":" * Represents a ExamList in Module."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"public class ExamList {"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"    public static final String NO_EXAMS_OUTPUT \u003d \"    You have no exams~\";"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    // Identity fields."},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    private List\u003cExam\u003e exams;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"     * Constructs an {@code ExamList} to store {@code Exam}."},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    public ExamList() {"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"        exams \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"     * Constucts an {@code ExamList} that stores existing {@code Exams} from input."},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"     * @param exams exams to be contained in {@code ExamList}."},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    public ExamList(List\u003cExam\u003e exams) {"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        this.exams \u003d exams;"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"     * Returns if {@code exam} exists inside the exam list."},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"    public boolean contains(Exam exam) {"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        boolean hasExam \u003d false;"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 0; i \u003c exams.size() \u0026\u0026 !hasExam; i++) {"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"            if (exams.contains(exam)) {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"                hasExam \u003d true;"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"        return hasExam;"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"     * Gets the index of the {@code exam} in the exam list."},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"     * {@code exam} must exist in the exam list."},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"    public int getIndex(Exam exam) {"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"        int index \u003d -1;"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 0; i \u003c exams.size(); i++) {"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"            if (exams.get(i).equals(exam)) {"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"                index \u003d i;"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"        return index;"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"     * Adds an {@code Exam} into the ExamList."},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"     * @param exam Exam to be added."},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"    public void add(Exam exam) {"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"        exams.add(exam);"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"     * Removes {@code Exam} at the index from the ExamList."},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"     * @param index Index of the {@code Exam} to be removed."},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"     * @return Removed Exam."},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"    public Exam deleteAt(int index) {"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"        Exam deletedExam \u003d exams.remove(index);"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"        return deletedExam;"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"jellymias"},"content":"     * Delete the {@code exam} from exam list."},{"lineNumber":83,"author":{"gitId":"jellymias"},"content":"     * {@code exam} must exist in the exam list."},{"lineNumber":84,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"jellymias"},"content":"    public Exam delete(Exam exam) {"},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"        int index \u003d getIndex(exam);"},{"lineNumber":87,"author":{"gitId":"jellymias"},"content":"        return deleteAt(index);"},{"lineNumber":88,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"     * Gets size of the {@code ExamList}."},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"     * @return size of {@code ExamList}."},{"lineNumber":94,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"    public int size() {"},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"        return exams.size();"},{"lineNumber":97,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":99,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"markuz5116"},"content":"     * Finds the exams of the specific {@code localDateTime}."},{"lineNumber":101,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"markuz5116"},"content":"     * @param localDateTime localDateTime used to find {@code Exam} of the same {@code"},{"lineNumber":103,"author":{"gitId":"markuz5116"},"content":"     *     localDateTime}."},{"lineNumber":104,"author":{"gitId":"markuz5116"},"content":"     * @return {@code ExamList} with the {@code localDateTime}."},{"lineNumber":105,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"markuz5116"},"content":"    public ExamList find(LocalDateTime localDateTime) {"},{"lineNumber":107,"author":{"gitId":"markuz5116"},"content":"        ArrayList\u003cExam\u003e examsFound \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitId":"markuz5116"},"content":"        for (Exam exam : exams) {"},{"lineNumber":109,"author":{"gitId":"markuz5116"},"content":"            if (exam.isAt(localDateTime)) {"},{"lineNumber":110,"author":{"gitId":"markuz5116"},"content":"                examsFound.add(exam);"},{"lineNumber":111,"author":{"gitId":"markuz5116"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"        return new ExamList(examsFound);"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":116,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":"     * Get the exam at the index from the list."},{"lineNumber":118,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":"     * @param index Index of the exam."},{"lineNumber":120,"author":{"gitId":"Hzxin"},"content":"     * @return Exam at index."},{"lineNumber":121,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"Hzxin"},"content":"    public Exam get(int index) {"},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":"        return exams.get(index);"},{"lineNumber":124,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":126,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"markuz5116"},"content":"     * Checks whether the {@code ExamList} is empty."},{"lineNumber":128,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"markuz5116"},"content":"     * @return true if {@code ExamList} is empty, else false."},{"lineNumber":130,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"markuz5116"},"content":"    public boolean hasNoExam() {"},{"lineNumber":132,"author":{"gitId":"markuz5116"},"content":"        return exams.isEmpty();"},{"lineNumber":133,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":135,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"markuz5116"},"content":"     * Sorts the ExamList chronologically."},{"lineNumber":137,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"markuz5116"},"content":"    public void sort() {"},{"lineNumber":139,"author":{"gitId":"markuz5116"},"content":"        Collections.sort(exams);"},{"lineNumber":140,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":142,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"markuz5116"},"content":"     * Gets the List of {@code Exams}."},{"lineNumber":144,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"markuz5116"},"content":"     * @return List of {@code Exams}."},{"lineNumber":146,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"markuz5116"},"content":"    public ArrayList\u003cExam\u003e getExams() {"},{"lineNumber":148,"author":{"gitId":"markuz5116"},"content":"        return new ArrayList\u003c\u003e(exams);"},{"lineNumber":149,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":151,"author":{"gitId":"markuz5116"},"content":"    public Exam getExamAt(int index) {"},{"lineNumber":152,"author":{"gitId":"markuz5116"},"content":"        return exams.get(index);"},{"lineNumber":153,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":155,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"markuz5116"},"content":"     * Returns String representation of {@code ExamList}."},{"lineNumber":157,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":"     * @return ExamList."},{"lineNumber":159,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":161,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":162,"author":{"gitId":"Hzxin"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":163,"author":{"gitId":"markuz5116"},"content":"        if (hasNoExam()) {"},{"lineNumber":164,"author":{"gitId":"markuz5116"},"content":"            return NO_EXAMS_OUTPUT;"},{"lineNumber":165,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"Hzxin"},"content":"        builder.append(\"Exams: \\n\");"},{"lineNumber":167,"author":{"gitId":"Hzxin"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {"},{"lineNumber":168,"author":{"gitId":"Hzxin"},"content":"            builder.append(i + 1).append(\". \")"},{"lineNumber":169,"author":{"gitId":"Hzxin"},"content":"                .append(get(i)).append(\"\\n\");"},{"lineNumber":170,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"Hzxin"},"content":"        return builder.toString();"},{"lineNumber":172,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":174,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"markuz5116"},"content":"     * Checks whether ExamList is the same as {@code input}. Checks based on the list of {@code"},{"lineNumber":176,"author":{"gitId":"markuz5116"},"content":"     * Exams}."},{"lineNumber":177,"author":{"gitId":"markuz5116"},"content":"     *"},{"lineNumber":178,"author":{"gitId":"markuz5116"},"content":"     * @param other The other object to check with {@code ExamList}."},{"lineNumber":179,"author":{"gitId":"markuz5116"},"content":"     * @return true if the {@code exams} is the same as {@code exams} of other."},{"lineNumber":180,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":182,"author":{"gitId":"markuz5116"},"content":"    public boolean equals(Object other) {"},{"lineNumber":183,"author":{"gitId":"markuz5116"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":184,"author":{"gitId":"markuz5116"},"content":"            return true;"},{"lineNumber":185,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":187,"author":{"gitId":"markuz5116"},"content":"        if (!(other instanceof ExamList)) {"},{"lineNumber":188,"author":{"gitId":"markuz5116"},"content":"            return false;"},{"lineNumber":189,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":191,"author":{"gitId":"Hzxin"},"content":"        ExamList otherList \u003d (ExamList) other;"},{"lineNumber":192,"author":{"gitId":"Hzxin"},"content":"        if (exams.size() !\u003d otherList.size()) {"},{"lineNumber":193,"author":{"gitId":"Hzxin"},"content":"            return false;"},{"lineNumber":194,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":195,"author":{"gitId":"Hzxin"},"content":"            for (int i \u003d 0; i \u003c otherList.size(); i++) {"},{"lineNumber":196,"author":{"gitId":"Hzxin"},"content":"                if (!exams.get(i).equals(otherList.exams.get(i))) {"},{"lineNumber":197,"author":{"gitId":"Hzxin"},"content":"                    return false;"},{"lineNumber":198,"author":{"gitId":"Hzxin"},"content":"                }"},{"lineNumber":199,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":200,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":202,"author":{"gitId":"Hzxin"},"content":"        return true;"},{"lineNumber":203,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":138,"Hzxin":30,"jellymias":36}},{"path":"src/main/java/seedu/address/model/module/Module.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"public class Module implements Comparable\u003cModule\u003e {"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"    private Title title;"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":"    private AssignmentList assignments;"},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"    private ExamList exams;"},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"     * Constructs a {@code Module} with {@code Title} as the input representing the module title."},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"    public Module(Title title) {"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"        this.title \u003d title;"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"        this.assignments \u003d new AssignmentList();"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"        this.exams \u003d new ExamList();"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"     * Constructs a {@code Module} with {@code Title}, {@code AssignmentList} and {@code ExamList} as the inputs."},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    public Module(Title title, AssignmentList assignments, ExamList exams) {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"        this.title \u003d title;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"        this.assignments \u003d assignments;"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        this.exams \u003d exams;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"     * Gets the title of the module."},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"     * @return Module title."},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"    public Title getTitle() {"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"        return title;"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"     * Changes the title of the module with the given {@code title}"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    public void editTitle(Title title) {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        this.title \u003d title;"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"     * Gets the assignment list in the module."},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"     * @return List of module assignments."},{"lineNumber":48,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"maikongeh"},"content":"    public AssignmentList getAssignments() {"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":"        return assignments;"},{"lineNumber":51,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":53,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"maikongeh"},"content":"     * Gets the assignment at the specified index."},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"maikongeh"},"content":"     * @param index Index of assignment."},{"lineNumber":57,"author":{"gitId":"maikongeh"},"content":"     * @return Assignment at index."},{"lineNumber":58,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"maikongeh"},"content":"    public Assignment getAssignment(int index) {"},{"lineNumber":60,"author":{"gitId":"maikongeh"},"content":"        return assignments.get(index);"},{"lineNumber":61,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":63,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"maikongeh"},"content":"     * Gets the exams of the module."},{"lineNumber":65,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"maikongeh"},"content":"     * @return List of module exams."},{"lineNumber":67,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"maikongeh"},"content":"    public ExamList getExams() {"},{"lineNumber":69,"author":{"gitId":"maikongeh"},"content":"        return exams;"},{"lineNumber":70,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":72,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"maikongeh"},"content":"     * Gets {@code exam} at specific index."},{"lineNumber":74,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"maikongeh"},"content":"     * @param index index of the examList."},{"lineNumber":76,"author":{"gitId":"maikongeh"},"content":"     * @return {@code exam} at index."},{"lineNumber":77,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"maikongeh"},"content":"    public Exam getExamAt(int index) {"},{"lineNumber":79,"author":{"gitId":"maikongeh"},"content":"        return exams.getExamAt(index);"},{"lineNumber":80,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":82,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"maikongeh"},"content":"     * Checks if the module has the given assignment in its assignment list."},{"lineNumber":84,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"maikongeh"},"content":"     * @param assignment Assignment to be checked."},{"lineNumber":86,"author":{"gitId":"maikongeh"},"content":"     * @return Boolean"},{"lineNumber":87,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"maikongeh"},"content":"    public boolean hasAssignment(Assignment assignment) {"},{"lineNumber":89,"author":{"gitId":"maikongeh"},"content":"        return assignments.contains(assignment);"},{"lineNumber":90,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":92,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"maikongeh"},"content":"     * Checks if the module has the given exam in its exam list."},{"lineNumber":94,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"maikongeh"},"content":"     * @param exam Exam to be checked."},{"lineNumber":96,"author":{"gitId":"maikongeh"},"content":"     * @return Boolean"},{"lineNumber":97,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"maikongeh"},"content":"    public boolean hasExam(Exam exam) {"},{"lineNumber":99,"author":{"gitId":"maikongeh"},"content":"        return exams.contains(exam);"},{"lineNumber":100,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":102,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"maikongeh"},"content":"     * Adds an assignment to the assignment list of the module."},{"lineNumber":104,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"maikongeh"},"content":"     * @param assignment Assignment to be added."},{"lineNumber":106,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"maikongeh"},"content":"    public void addAssignment(Assignment assignment) {"},{"lineNumber":108,"author":{"gitId":"maikongeh"},"content":"        this.assignments.add(assignment);"},{"lineNumber":109,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":111,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"maikongeh"},"content":"     * Adds an exam to the exam list of the module."},{"lineNumber":113,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"maikongeh"},"content":"     * @param exam Exam to be added."},{"lineNumber":115,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"maikongeh"},"content":"    public void addExam(Exam exam) {"},{"lineNumber":117,"author":{"gitId":"maikongeh"},"content":"        this.exams.add(exam);"},{"lineNumber":118,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":120,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"maikongeh"},"content":"     * Delete {@code assignment} from {@code assignments}"},{"lineNumber":122,"author":{"gitId":"maikongeh"},"content":"     * {@code assignment} must exist in {@code assignments}"},{"lineNumber":123,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"maikongeh"},"content":"    public void deleteAssignment(Assignment assignment) {"},{"lineNumber":125,"author":{"gitId":"maikongeh"},"content":"        this.assignments.delete(assignment);"},{"lineNumber":126,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":128,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"maikongeh"},"content":"     * Delete {@code index} from {@code assignments}"},{"lineNumber":130,"author":{"gitId":"maikongeh"},"content":"     * {@code assignment} must exist in {@code assignments}"},{"lineNumber":131,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"maikongeh"},"content":"    public void deleteAssignment(int index) {"},{"lineNumber":133,"author":{"gitId":"maikongeh"},"content":"        this.assignments.delete(index);"},{"lineNumber":134,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":136,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"maikongeh"},"content":"     * Delete {@code exam} from {@code exams}"},{"lineNumber":138,"author":{"gitId":"maikongeh"},"content":"     * {@code assignment} must exist in {@code exams}"},{"lineNumber":139,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"maikongeh"},"content":"    public void deleteExam(Exam exam) {"},{"lineNumber":141,"author":{"gitId":"maikongeh"},"content":"        this.exams.delete(exam);"},{"lineNumber":142,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":144,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"maikongeh"},"content":"     * Delete {@code index} from {@code exams}"},{"lineNumber":146,"author":{"gitId":"maikongeh"},"content":"     * {@code index} must exist in {@code exams}"},{"lineNumber":147,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"maikongeh"},"content":"    public void deleteExam(int index) {"},{"lineNumber":149,"author":{"gitId":"maikongeh"},"content":"        this.exams.deleteAt(index);"},{"lineNumber":150,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":152,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"maikongeh"},"content":"     * Returns true if both modules have the same title."},{"lineNumber":154,"author":{"gitId":"maikongeh"},"content":"     * This defines a weaker notion of equality between two modules."},{"lineNumber":155,"author":{"gitId":"maikongeh"},"content":"     * todo Remove if this is useless."},{"lineNumber":156,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"maikongeh"},"content":"    public boolean isSameModule(Module otherModule) {"},{"lineNumber":158,"author":{"gitId":"maikongeh"},"content":"        if (otherModule \u003d\u003d this) {"},{"lineNumber":159,"author":{"gitId":"maikongeh"},"content":"            return true;"},{"lineNumber":160,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":162,"author":{"gitId":"maikongeh"},"content":"        return otherModule !\u003d null"},{"lineNumber":163,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 otherModule.getTitle().equals(getTitle());"},{"lineNumber":164,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":166,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":167,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"maikongeh"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":169,"author":{"gitId":"maikongeh"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":170,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":172,"author":{"gitId":"maikongeh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":173,"author":{"gitId":"maikongeh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":174,"author":{"gitId":"maikongeh"},"content":"            return true;"},{"lineNumber":175,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":177,"author":{"gitId":"maikongeh"},"content":"        if (!(other instanceof Module)) {"},{"lineNumber":178,"author":{"gitId":"maikongeh"},"content":"            return false;"},{"lineNumber":179,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":181,"author":{"gitId":"maikongeh"},"content":"        Module otherModule \u003d (Module) other;"},{"lineNumber":182,"author":{"gitId":"maikongeh"},"content":"        return otherModule.getTitle().equals(getTitle())"},{"lineNumber":183,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 otherModule.getAssignments().equals(getAssignments())"},{"lineNumber":184,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 otherModule.getExams().equals(getExams());"},{"lineNumber":185,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":187,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":188,"author":{"gitId":"maikongeh"},"content":"    public int hashCode() {"},{"lineNumber":189,"author":{"gitId":"maikongeh"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":190,"author":{"gitId":"maikongeh"},"content":"        return Objects.hash(title, assignments, exams);"},{"lineNumber":191,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":193,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":194,"author":{"gitId":"maikongeh"},"content":"    public String toString() {"},{"lineNumber":195,"author":{"gitId":"maikongeh"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":196,"author":{"gitId":"maikongeh"},"content":"        builder.append(getTitle())"},{"lineNumber":197,"author":{"gitId":"maikongeh"},"content":"                .append(\";\\nAssignments: \")"},{"lineNumber":198,"author":{"gitId":"maikongeh"},"content":"                .append(getAssignments())"},{"lineNumber":199,"author":{"gitId":"maikongeh"},"content":"                .append(\"\\n\")"},{"lineNumber":200,"author":{"gitId":"maikongeh"},"content":"                .append(getExams());"},{"lineNumber":201,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":202,"author":{"gitId":"maikongeh"},"content":"        return builder.toString();"},{"lineNumber":203,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":205,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":206,"author":{"gitId":"maikongeh"},"content":"    public int compareTo(Module o) {"},{"lineNumber":207,"author":{"gitId":"maikongeh"},"content":"        return title.compareTo(o.title);"},{"lineNumber":208,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"Hzxin":9,"jellymias":7,"maikongeh":193}},{"path":"src/main/java/seedu/address/model/module/Title.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"public class Title implements Comparable\u003cTitle\u003e {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    // todo change message constraints\\"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"            \"Modules must contain alphanumeric letters followed by numbers, and it should not be blank.\";"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"    /*"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    public final String modTitle;"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"     * Constructs a {@code Title}."},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     * @param modTitle A valid module title."},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"    public Title(String modTitle) {"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        requireNonNull(modTitle);"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        checkArgument(isValidTitle(modTitle), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        this.modTitle \u003d modTitle;"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"     * Returns true if a given string is a valid module title."},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        return modTitle;"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"                || (other instanceof Title // instanceof handles nulls"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"                \u0026\u0026 modTitle.equals(((Title) other).modTitle)); // state check"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"        return modTitle.hashCode();"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"    public int compareTo(Title other) {"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        return modTitle.compareTo(other.modTitle);"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"markuz5116":7,"jellymias":53}},{"path":"src/main/java/seedu/address/model/module/TitleContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"public class TitleContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    public boolean test(Module module) {"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"        return keywords.stream()"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"                .anyMatch(keyword -\u003e"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"                        StringUtil.containsWordIgnoreCase(module.getTitle().modTitle, keyword));"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    public boolean equals(Object other) {"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        return other \u003d\u003d this"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"                || (other instanceof TitleContainsKeywordsPredicate)"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords);"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":27}},{"path":"src/main/java/seedu/address/model/module/UniqueModuleList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.exceptions.DuplicateModuleException;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.exceptions.ModuleNotFoundException;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"public class UniqueModuleList implements Iterable\u003cModule\u003e {"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"     * Returns true if the list contains an equivalent module as the given argument."},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    public boolean contains(Module toCheck) {"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(toCheck);"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        return internalList.stream().anyMatch(toCheck::isSameModule);"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"     * Adds a module to the list."},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"     * The module must not already exist in the list."},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    public void add(Module toAdd) {"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(toAdd);"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        if (contains(toAdd)) {"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"            throw new DuplicateModuleException();"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        internalList.add(toAdd);"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"     * Gets the module with the same module title as {@code module}"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"     * {@code module} must already exist in the list."},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"    public Module getModule(Module module) {"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"        requireNonNull(module);"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"        Predicate\u003cModule\u003e hasModuleTitle \u003d (x) -\u003e x.isSameModule(module);"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"        FilteredList\u003cModule\u003e filteredModule \u003d internalList.filtered(hasModuleTitle);"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"        if (filteredModule.size() !\u003d 1) {"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"            throw new ModuleNotFoundException();"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"        return filteredModule.get(0);"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"     * Gets the module at {@code index}"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"     * {@code index} must be within the bounds of the list size."},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"    public Module getModule(int index) {"},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"        if (index - 1 \u003e\u003d 0 \u0026\u0026 index - 1 \u003c size()) {"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"            return internalList.get(index - 1);"},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"            throw new ModuleNotFoundException();"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"     * Replaces the module {@code target} in the list with {@code editedPerson}."},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"     * {@code target} must exist in the list."},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"     * The module identity of {@code editedModule} must not be the same as another existing"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"     * module in the list."},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"    //todo I think this is for editCommand. Delete if not used."},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"    public void setModule(Module target, Module editedModule) {"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        requireAllNonNull(target, editedModule);"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":78,"author":{"gitId":"jellymias"},"content":"        Module foundModule \u003d getModule(target);"},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":"        int index \u003d internalList.indexOf(foundModule);"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"        boolean hasDuplicate \u003d !foundModule.equals(editedModule) \u0026\u0026 contains(editedModule);"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"        if (hasDuplicate) {"},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"            throw new DuplicateModuleException();"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"        internalList.set(index, editedModule);"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"     * Removes the equivalent module from the list."},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"     * The module must exist in the list."},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"    public void remove(Module toRemove) {"},{"lineNumber":94,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(toRemove);"},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"            throw new ModuleNotFoundException();"},{"lineNumber":97,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":100,"author":{"gitId":"markuz5116"},"content":"    public void setModules(UniqueModuleList replaceModules) {"},{"lineNumber":101,"author":{"gitId":"markuz5116"},"content":"        requireNonNull(replaceModules);"},{"lineNumber":102,"author":{"gitId":"markuz5116"},"content":"        internalList.setAll(replaceModules.internalList);"},{"lineNumber":103,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":105,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"markuz5116"},"content":"     * Replaces the contents of this list with {@code modules}."},{"lineNumber":107,"author":{"gitId":"markuz5116"},"content":"     * {@code modules} must not contain duplicate modules."},{"lineNumber":108,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"markuz5116"},"content":"    public void setModules(List\u003cModule\u003e modules) {"},{"lineNumber":110,"author":{"gitId":"markuz5116"},"content":"        requireAllNonNull(modules);"},{"lineNumber":111,"author":{"gitId":"markuz5116"},"content":"        if (!areModulesUnique(modules)) {"},{"lineNumber":112,"author":{"gitId":"markuz5116"},"content":"            throw new DuplicateModuleException();"},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":115,"author":{"gitId":"markuz5116"},"content":"        internalList.setAll(modules);"},{"lineNumber":116,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":118,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"markuz5116"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":120,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"markuz5116"},"content":"    // todo not sure if we need this"},{"lineNumber":122,"author":{"gitId":"markuz5116"},"content":"    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"},{"lineNumber":123,"author":{"gitId":"markuz5116"},"content":"        return internalUnmodifiableList;"},{"lineNumber":124,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":126,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"jellymias"},"content":"     * Returns the number of items in the list."},{"lineNumber":128,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"jellymias"},"content":"    public int size() {"},{"lineNumber":130,"author":{"gitId":"jellymias"},"content":"        return internalList.size();"},{"lineNumber":131,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":133,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"markuz5116"},"content":"    public Iterator\u003cModule\u003e iterator() {"},{"lineNumber":135,"author":{"gitId":"markuz5116"},"content":"        return internalList.iterator();"},{"lineNumber":136,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":138,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":139,"author":{"gitId":"markuz5116"},"content":"    public boolean equals(Object other) {"},{"lineNumber":140,"author":{"gitId":"markuz5116"},"content":"        return other \u003d\u003d this"},{"lineNumber":141,"author":{"gitId":"markuz5116"},"content":"                || (other instanceof UniqueModuleList)"},{"lineNumber":142,"author":{"gitId":"markuz5116"},"content":"                    \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList);"},{"lineNumber":143,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":145,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":146,"author":{"gitId":"markuz5116"},"content":"    public int hashCode() {"},{"lineNumber":147,"author":{"gitId":"markuz5116"},"content":"        return internalList.hashCode();"},{"lineNumber":148,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":150,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"markuz5116"},"content":"     * Returns true if {@code modules} contains only unique modules."},{"lineNumber":152,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"markuz5116"},"content":"    private boolean areModulesUnique(List\u003cModule\u003e modules) {"},{"lineNumber":154,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":155,"author":{"gitId":"Hzxin"},"content":"        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"},{"lineNumber":156,"author":{"gitId":"Hzxin"},"content":"            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"},{"lineNumber":157,"author":{"gitId":"Hzxin"},"content":"                if (modules.get(i).isSameModule(modules.get(j))) {"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":"                    return false;"},{"lineNumber":159,"author":{"gitId":"markuz5116"},"content":"                }"},{"lineNumber":160,"author":{"gitId":"markuz5116"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":163,"author":{"gitId":"Hzxin"},"content":"        return true;"},{"lineNumber":164,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":166,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":167,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":121,"jellymias":39,"Hzxin":7}},{"path":"src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"public class DuplicateModuleException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"    public DuplicateModuleException() {"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"        super(\"Operation would result in duplicate modules.\");"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":7}},{"path":"src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"public class ModuleNotFoundException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":4}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.Event;"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.Description;"},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":" * Represents a Person\u0027s birthday in the address book."},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":" */"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"public class Birthday extends Event {"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"            \"Birthdays should be in the form of YYYY-MM-DD\";"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[0-9]{4}-(1[0-2]|0[1-9])-(3[01]|[12][0-9]|0[1-9])$\";"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"    private final LocalDate birthday;"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":"     * Constructs a {@code Birthday}."},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"     * @param birthday A valid birthday."},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"    public Birthday(String birthday) {"},{"lineNumber":32,"author":{"gitId":"banchiang"},"content":"        super(new Description(\"someone bday\"), LocalDate.parse(birthday).atStartOfDay(), new Tag(\"bday\"));"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"        requireNonNull(birthday);"},{"lineNumber":34,"author":{"gitId":"banchiang"},"content":"        checkArgument(isValidBirthday(birthday), VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"        this.birthday \u003d LocalDate.parse(birthday);"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":38,"author":{"gitId":"maikongeh"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"     * Returns true if a given string is a valid birthday."},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"maikongeh"},"content":"    public static boolean isValidBirthday(String test) {"},{"lineNumber":42,"author":{"gitId":"maikongeh"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":43,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"banchiang"},"content":"     * Checks if birthday lies on a certain date of any year."},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"     * @param date to check with."},{"lineNumber":48,"author":{"gitId":"banchiang"},"content":"     * @return true if date and birthday lies on same date, else false."},{"lineNumber":49,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"    public boolean isDate(LocalDate date) {"},{"lineNumber":51,"author":{"gitId":"banchiang"},"content":"        return birthday.getMonth() \u003d\u003d date.getMonth()"},{"lineNumber":52,"author":{"gitId":"banchiang"},"content":"            \u0026\u0026 birthday.getDayOfMonth() \u003d\u003d date.getDayOfMonth();"},{"lineNumber":53,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"maikongeh"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"maikongeh"},"content":"        return this.birthday.toString();"},{"lineNumber":58,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":60,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"maikongeh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"maikongeh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"maikongeh"},"content":"                || (other instanceof Birthday // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 this.birthday.equals(((Birthday) other).birthday)); // state check"},{"lineNumber":65,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":67,"author":{"gitId":"maikongeh"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"maikongeh"},"content":"    public int hashCode() {"},{"lineNumber":69,"author":{"gitId":"maikongeh"},"content":"        return birthday.hashCode();"},{"lineNumber":70,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":72,"author":{"gitId":"maikongeh"},"content":"    public LocalDate getBirthday() {"},{"lineNumber":73,"author":{"gitId":"maikongeh"},"content":"        return this.birthday;"},{"lineNumber":74,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":76,"author":{"gitId":"maikongeh"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"banchiang":18,"maikongeh":57}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"    private final Birthday birthday;"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"    public Person(Name name, Birthday birthday, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"        requireAllNonNull(name, birthday, tags);"},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"    public Birthday getBirthday() {"},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":"        return birthday;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":80,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())"},{"lineNumber":81,"author":{"gitId":"maikongeh"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(getBirthday());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":87,"author":{"gitId":"maikongeh"},"content":"        return Objects.hash(name, birthday, tags);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitId":"maikongeh"},"content":"        builder.append(getName() + \"\\n\");"},{"lineNumber":94,"author":{"gitId":"maikongeh"},"content":"        builder.append(\"Birthday: \");"},{"lineNumber":95,"author":{"gitId":"maikongeh"},"content":"        builder.append(getBirthday());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":98,"author":{"gitId":"maikongeh"},"content":"            builder.append(\"\\nTags: \");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"maikongeh":14,"-":90}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.AssignmentList;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Description;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.ExamList;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"            new Person(new Name(\"Alice Pauline\"), new Birthday(\"2000-12-12\"),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"            new Person(new Name(\"Benson Meier\"), new Birthday(\"2000-12-12\"),"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"                getTagSet(\"owesMoney\", \"friends\")),"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"            new Person(new Name(\"Carl Kurz\"), new Birthday(\"2000-12-12\"),"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"                getTagSet()),"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"            new Person(new Name(\"Daniel Meier\"), new Birthday(\"2000-12-12\"),"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":"            new Person(new Name(\"Elle Meyer\"), new Birthday(\"2000-12-12\"),"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"                getTagSet()),"},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"            new Person(new Name(\"Fiona Kunz\"), new Birthday(\"2000-12-12\"),"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"                getTagSet()),"},{"lineNumber":41,"author":{"gitId":"maikongeh"},"content":"            new Person(new Name(\"George Best\"), new Birthday(\"2000-12-12\"),"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"                getTagSet())"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    public static Module[] getSampleModules() {"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"        return new Module[] {"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"            new Module(new Title(\"CS2103\"), new AssignmentList(),"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"                        new ExamList())"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"    public static ReadOnlyModulePlanner getSampleRemindMe() {"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner sampleRm \u003d new ModulePlanner();"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"        for (Module sampleMod : getSampleModules()) {"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"            sampleRm.addModule(sampleMod);"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"            sampleRm.addPerson(samplePerson);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        return sampleRm;"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"    public static List\u003cAssignment\u003e getAssignments(String... assignments) {"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        //todo either take in str representation of date"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2021, 03, 20, 23, 59);"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"        return Arrays.stream(assignments)"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"                .map(Description::new)"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"                .map(description -\u003e new Assignment(description, dateTime, new Tag(\"FAKE\")))"},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"                .collect(Collectors.toList());"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"    public static List\u003cExam\u003e getExams(String... exams) {"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"        return Arrays.stream(exams)"},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"                .map(date -\u003e LocalDateTime.parse(date, Exam.EXAM_DATE_FORMATTER))"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"                .map(date -\u003e new Exam(date, new Tag(\"PLACEHOLDER\")))"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"                .collect(Collectors.toList());"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":23,"Hzxin":22,"maikongeh":8,"-":37}},{"path":"src/main/java/seedu/address/storage/CalendarStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.Event;"},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.EventList;"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.AssignmentList;"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.ExamList;"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":19,"author":{"gitId":"banchiang"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"banchiang"},"content":" * A Calendar storage using hash map to store date map to events of that date."},{"lineNumber":21,"author":{"gitId":"banchiang"},"content":" */"},{"lineNumber":22,"author":{"gitId":"banchiang"},"content":"public class CalendarStorage {"},{"lineNumber":23,"author":{"gitId":"banchiang"},"content":"    private HashMap\u003cLocalDate, EventList\u003e storage;"},{"lineNumber":24,"author":{"gitId":"banchiang"},"content":"    private ArrayList\u003cBirthday\u003e birthdays;"},{"lineNumber":25,"author":{"gitId":"banchiang"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":27,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"banchiang"},"content":"     * Creates new storage for Calendar."},{"lineNumber":29,"author":{"gitId":"banchiang"},"content":"     * @param logic that calender uses."},{"lineNumber":30,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"banchiang"},"content":"    public CalendarStorage(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"banchiang"},"content":"        storage \u003d new HashMap\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"banchiang"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"banchiang"},"content":"        this.birthdays \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":37,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"banchiang"},"content":"     * Returns events in a events list that occurs on a certain date."},{"lineNumber":39,"author":{"gitId":"banchiang"},"content":"     * @param date the date which event occurs."},{"lineNumber":40,"author":{"gitId":"banchiang"},"content":"     * @return event list that contains all events for a certain date."},{"lineNumber":41,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"banchiang"},"content":"    public EventList getDateEvents(LocalDate date) {"},{"lineNumber":43,"author":{"gitId":"banchiang"},"content":"        EventList events \u003d new EventList();"},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"        if (!isDateFree(date)) {"},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"            events \u003d storage.get(date);"},{"lineNumber":46,"author":{"gitId":"banchiang"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":48,"author":{"gitId":"banchiang"},"content":"        for (Birthday bday : birthdays) {"},{"lineNumber":49,"author":{"gitId":"banchiang"},"content":"            if (bday.isDate(date)) {"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"                events.add(bday);"},{"lineNumber":51,"author":{"gitId":"banchiang"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"banchiang"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":54,"author":{"gitId":"banchiang"},"content":"        return events;"},{"lineNumber":55,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":57,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"banchiang"},"content":"     * Store the event via date into storage."},{"lineNumber":59,"author":{"gitId":"banchiang"},"content":"     * @param date date in which the event occurs."},{"lineNumber":60,"author":{"gitId":"banchiang"},"content":"     * @param event event that occurs."},{"lineNumber":61,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"banchiang"},"content":"    public void storeEvent(LocalDate date, Event event) {"},{"lineNumber":63,"author":{"gitId":"banchiang"},"content":"        EventList events \u003d storage.getOrDefault(date, new EventList());"},{"lineNumber":64,"author":{"gitId":"banchiang"},"content":"        events.add(event);"},{"lineNumber":65,"author":{"gitId":"banchiang"},"content":"        storage.put(date, events);"},{"lineNumber":66,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":68,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"banchiang"},"content":"     * Check if calendar date is free of events."},{"lineNumber":70,"author":{"gitId":"banchiang"},"content":"     * @param date date to check in calendar."},{"lineNumber":71,"author":{"gitId":"banchiang"},"content":"     * @return true if date free, else return false."},{"lineNumber":72,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"banchiang"},"content":"    public boolean isDateFree(LocalDate date) {"},{"lineNumber":74,"author":{"gitId":"banchiang"},"content":"        return !storage.containsKey(date);"},{"lineNumber":75,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":77,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"banchiang"},"content":"     * At the start of calendar of RemindMe, start up the storage."},{"lineNumber":79,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"banchiang"},"content":"    public void refreshStorage() {"},{"lineNumber":81,"author":{"gitId":"banchiang"},"content":"        storage.clear();"},{"lineNumber":82,"author":{"gitId":"banchiang"},"content":"        loadModuleEvents();"},{"lineNumber":83,"author":{"gitId":"banchiang"},"content":"        birthdays.clear();"},{"lineNumber":84,"author":{"gitId":"banchiang"},"content":"        loadBirthdays();"},{"lineNumber":85,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":87,"author":{"gitId":"banchiang"},"content":"    public ArrayList\u003cBirthday\u003e getBirthdays() {"},{"lineNumber":88,"author":{"gitId":"banchiang"},"content":"        return new ArrayList\u003c\u003e(birthdays);"},{"lineNumber":89,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":91,"author":{"gitId":"banchiang"},"content":"    private void loadModuleEvents() {"},{"lineNumber":92,"author":{"gitId":"banchiang"},"content":"        ObservableList\u003cModule\u003e moduleList \u003d logic.getFilteredModuleList();"},{"lineNumber":93,"author":{"gitId":"banchiang"},"content":"        for (Module m : moduleList) {"},{"lineNumber":94,"author":{"gitId":"banchiang"},"content":"            ExamList exams \u003d m.getExams();"},{"lineNumber":95,"author":{"gitId":"banchiang"},"content":"            for (Exam e : exams.getExams()) {"},{"lineNumber":96,"author":{"gitId":"banchiang"},"content":"                LocalDate date \u003d e.getDate();"},{"lineNumber":97,"author":{"gitId":"banchiang"},"content":"                storeEvent(date, e);"},{"lineNumber":98,"author":{"gitId":"banchiang"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"banchiang"},"content":"            AssignmentList assignments \u003d m.getAssignments();"},{"lineNumber":100,"author":{"gitId":"banchiang"},"content":"            for (Assignment a: assignments.getAssignments()) {"},{"lineNumber":101,"author":{"gitId":"banchiang"},"content":"                LocalDate date \u003d a.getDate();"},{"lineNumber":102,"author":{"gitId":"banchiang"},"content":"                storeEvent(date, a);"},{"lineNumber":103,"author":{"gitId":"banchiang"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"banchiang"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":107,"author":{"gitId":"banchiang"},"content":"    private void loadBirthdays() {"},{"lineNumber":108,"author":{"gitId":"banchiang"},"content":"        ObservableList\u003cPerson\u003e personList \u003d logic.getFilteredPersonList();"},{"lineNumber":109,"author":{"gitId":"banchiang"},"content":"        for (Person p : personList) {"},{"lineNumber":110,"author":{"gitId":"banchiang"},"content":"            Birthday bday \u003d p.getBirthday();"},{"lineNumber":111,"author":{"gitId":"banchiang"},"content":"            birthdays.add(bday);"},{"lineNumber":112,"author":{"gitId":"banchiang"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"banchiang"},"content":"}"}],"authorContributionMap":{"banchiang":114}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAssignment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.util.LocalDateTimeUtil;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Description;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":" * Jackson-friendly version of {@link Assignment}."},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"class JsonAdaptedAssignment {"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Assignment\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedAssignment.class);"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    public final String description;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    public final String deadline;"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    public final String tag;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"     * Constructs a {@code JsonAdaptedAssignment} with the given {@code description} and {@code deadline}."},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    @JsonCreator"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    public JsonAdaptedAssignment(@JsonProperty(\"description\") String description,"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"                                 @JsonProperty(\"deadline\") String deadline,"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"                                 @JsonProperty(\"tag\") String tag) {"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"        this.description \u003d description;"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        this.tag \u003d tag;"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"     * Converts a given {@code source} into this class for Jackson use."},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"    public JsonAdaptedAssignment(Assignment source) {"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"        if (source !\u003d null) {"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"            description \u003d source.description.description;"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"            deadline \u003d source.deadline.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"            tag \u003d source.getTag().tagName;"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"            description \u003d \"Empty\";"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"            deadline \u003d \"Empty\";"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"            tag \u003d \"Empty\";"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code assignment} object."},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"    public Assignment toModelType() throws IllegalValueException {"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"        if (description \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"                    Description.class.getSimpleName()));"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        final Description modelDescription;"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"            logger.info(\"Description for Assignment is empty. Assigning default description\");"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"            modelDescription \u003d Description.defaultDescription();"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"        } else if (!Description.isValidDescription(description)) {"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"            modelDescription \u003d new Description(description);"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"        if (deadline \u003d\u003d null || !LocalDateTimeUtil.isValidDateTime(deadline)) {"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"                    LocalDateTime.class.getSimpleName()));"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"        final LocalDateTime modelDeadline \u003d LocalDateTime.parse(deadline,"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"                LocalDateTimeUtil.DATETIME_FORMATTER);"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"        if (tag \u003d\u003d null) {"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":"                Tag.class.getSimpleName()));"},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":"        final Tag modelTag;"},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":"        if (!Tag.isValidTagName(tag)) {"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":92,"author":{"gitId":"Hzxin"},"content":"            modelTag \u003d new Tag(tag);"},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"        return new Assignment(modelDescription, modelDeadline, modelTag);"},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":98}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedExam.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.util.LocalDateTimeUtil;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":" * Jackson-friendly version of {@link Exam}."},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"class JsonAdaptedExam {"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exam\u0027s %s field is missing!\";"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedExam.class);"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    public final String examDate;"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    public final String tag;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"     * Constructs a {@code JsonAdaptedExam} with the given {@code examDate} and {@code tag}."},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    @JsonCreator"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    public JsonAdaptedExam(@JsonProperty(\"examDate\") String examDate,"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"                           @JsonProperty(\"tag\") String tag) {"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        this.examDate \u003d examDate;"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"        this.tag \u003d tag;"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"     * Converts a given {@code source} into this class for Jackson use."},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    public JsonAdaptedExam(Exam source) {"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"        examDate \u003d source.examDate.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"        tag \u003d source.getTag().tagName;"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"     * Converts this Jackson-friendly adapted exam object into the model\u0027s {@code assignment} object."},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"    public Exam toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"        if (examDate \u003d\u003d null || !LocalDateTimeUtil.isValidDateTime(examDate)) {"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"                    LocalDateTime.class.getSimpleName()));"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"        final LocalDateTime modelExamDate \u003d LocalDateTime.parse(examDate,"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"                LocalDateTimeUtil.DATETIME_FORMATTER);"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"        if (tag \u003d\u003d null) {"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"                Tag.class.getSimpleName()));"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"        final Tag modelTag;"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"        if (!Tag.isValidTagName(tag)) {"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"            modelTag \u003d new Tag(tag);"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"        return new Exam(modelExamDate, modelTag);"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":72}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedModule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.AssignmentList;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.ExamList;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":" * Jackson-friendly version of {@link Module}."},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"class JsonAdaptedModule {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    private String title;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    private ArrayList\u003cJsonAdaptedAssignment\u003e assignmentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    private ArrayList\u003cJsonAdaptedExam\u003e examList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"     * Constructs a {@code JsonAdaptedModule} with the given person details."},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    @JsonCreator"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    public JsonAdaptedModule(@JsonProperty(\"title\") String title,"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"                             @JsonProperty(\"assignmentList\") ArrayList\u003cJsonAdaptedAssignment\u003e assignmentList,"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"                             @JsonProperty(\"examList\") ArrayList\u003cJsonAdaptedExam\u003e examList) {"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        this.title \u003d title;"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        if (assignmentList !\u003d null) {"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"            this.assignmentList.addAll(assignmentList);"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"        if (examList !\u003d null) {"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"            this.examList \u003d examList;"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"     * Converts a given {@code Module} into this class for Jackson use."},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"    public JsonAdaptedModule(Module source) {"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"        title \u003d source.getTitle().modTitle;"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"        assignmentList.addAll(source.getAssignments().getAssignments().stream()"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"                .map(JsonAdaptedAssignment::new)"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"        examList.addAll(source.getExams().getExams().stream()"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"                .map(JsonAdaptedExam::new)"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"     * Converts this Jackson-friendly adapted Module object into the model\u0027s {@code Module} object."},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted Module."},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"    public Module toModelType() throws IllegalValueException {"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        final ArrayList\u003cAssignment\u003e modelAssignments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        final ArrayList\u003cExam\u003e modelExams \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        if (assignmentList !\u003d null \u0026\u0026 !assignmentList.isEmpty()) {"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"            for (JsonAdaptedAssignment assignment : assignmentList) {"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"                modelAssignments.add(assignment.toModelType());"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"        if (examList !\u003d null \u0026\u0026 !examList.isEmpty()) {"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"            for (JsonAdaptedExam exam : examList) {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"                modelExams.add(exam.toModelType());"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"        if (title \u003d\u003d null) {"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"        if (!Title.isValidTitle(title)) {"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"        final Title modelTitle \u003d new Title(title);"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"        final AssignmentList modelAssignmentLists \u003d new AssignmentList(modelAssignments);"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"        final ExamList modelExamList \u003d new ExamList(modelExams);"},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":"        return new Module(modelTitle, modelAssignmentLists, modelExamList);"},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":89}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"    private final String birthday;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"birthday\") String birthday,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"        birthday \u003d source.getBirthday().toString();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"maikongeh"},"content":"        if (birthday \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":72,"author":{"gitId":"maikongeh"},"content":"                    Birthday.class.getSimpleName()));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":75,"author":{"gitId":"maikongeh"},"content":"        final Birthday modelBirthday \u003d new Birthday(birthday);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":77,"author":{"gitId":"maikongeh"},"content":"        return new Person(modelName, modelBirthday, modelTags);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"maikongeh":10,"-":70}},{"path":"src/main/java/seedu/address/storage/JsonRemindMeStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":" * A class to access AddressBook data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"public class JsonRemindMeStorage implements RemindMeStorage {"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonRemindMeStorage.class);"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    public JsonRemindMeStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    public Path getRemindMeFilePath() {"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    public Optional\u003cReadOnlyModulePlanner\u003e readRemindMe() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        return readRemindMe(filePath);"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"     * Similar to {@link #readRemindMe()}."},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"    public Optional\u003cReadOnlyModulePlanner\u003e readRemindMe(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        Optional\u003cJsonSerializableRemindMe\u003e jsonRemindMeApp \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"                filePath, JsonSerializableRemindMe.class);"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"        if (!jsonRemindMeApp.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"            return Optional.of(jsonRemindMeApp.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"    public void saveRemindMe(ReadOnlyModulePlanner remindMe) throws IOException {"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        saveRemindMe(remindMe, filePath);"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"     * Similar to {@link #saveRemindMe(ReadOnlyModulePlanner)}."},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"    public void saveRemindMe(ReadOnlyModulePlanner remindMeApp, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"        requireNonNull(remindMeApp);"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableRemindMe(remindMeApp), filePath);"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":80}},{"path":"src/main/java/seedu/address/storage/JsonSerializableRemindMe.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":" * An Immutable AddressBook that is serializable to JSON format."},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"@JsonRootName(value \u003d \"remindMe\")"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"class JsonSerializableRemindMe {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Person list contains duplicate person(s).\";"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"     * Constructs a {@code JsonSerializableRemindMeApp} with the given modules and persons."},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    @JsonCreator"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    public JsonSerializableRemindMe(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"                                       @JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        this.modules.addAll(modules);"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        this.persons.addAll(persons);"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"     * Converts a given {@code ReadOnlyRemindMeApp} into this class for Jackson use."},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableRemindMeApp}."},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    public JsonSerializableRemindMe(ReadOnlyModulePlanner source) {"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object."},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"    public ModulePlanner toModelType() throws IllegalValueException {"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner modulePlanner \u003d new ModulePlanner();"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"        for (JsonAdaptedModule jsonAdaptedModule : modules) {"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"            Module module \u003d jsonAdaptedModule.toModelType();"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"            if (modulePlanner.hasModule(module)) {"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"            modulePlanner.addModule(module);"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"            if (modulePlanner.hasPerson(person)) {"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"            modulePlanner.addPerson(person);"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"        return modulePlanner;"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":75}},{"path":"src/main/java/seedu/address/storage/RemindMeStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"public interface RemindMeStorage {"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"     * Returns the file path of the data file."},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    Path getRemindMeFilePath();"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"     * Returns RemindMe data as a {@link ReadOnlyModulePlanner}."},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    Optional\u003cReadOnlyModulePlanner\u003e readRemindMe() throws DataConversionException, IOException;"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"     * @see #getRemindMeFilePath()"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    Optional\u003cReadOnlyModulePlanner\u003e readRemindMe(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"     * @param remindMeApp cannot be null."},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    void saveRemindMe(ReadOnlyModulePlanner remindMeApp) throws IOException;"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"     * @see #saveRemindMe(ReadOnlyModulePlanner)"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    void saveRemindMe(ReadOnlyModulePlanner remindMeApp, Path filePath) throws IOException;"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":43}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"public interface Storage extends RemindMeStorage, UserPrefsStorage {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    Optional\u003cReadOnlyModulePlanner\u003e readRemindMe() throws DataConversionException, IOException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    void saveRemindMe(ReadOnlyModulePlanner remindMeApp) throws IOException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":4,"-":25}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    private RemindMeStorage remindMeStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    public StorageManager(RemindMeStorage remindMeStorage,"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        this.remindMeStorage \u003d remindMeStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RemindMeApp methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"    public Path getRemindMeFilePath() {"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"        return remindMeStorage.getRemindMeFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"    public Optional\u003cReadOnlyModulePlanner\u003e readRemindMe() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"        return readRemindMe(remindMeStorage.getRemindMeFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"    public Optional\u003cReadOnlyModulePlanner\u003e readRemindMe(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        return remindMeStorage.readRemindMe(filePath);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"    public void saveRemindMe(ReadOnlyModulePlanner remindMeApp) throws IOException {"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"        saveRemindMe(remindMeApp, remindMeStorage.getRemindMeFilePath());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"    public void saveRemindMe(ReadOnlyModulePlanner remindMeApp, Path filePath) throws IOException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"        remindMeStorage.saveRemindMe(remindMeApp, filePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":16,"-":63}},{"path":"src/main/java/seedu/address/ui/DisplayPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"public class DisplayPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    private static final String FXML \u003d \"DisplayPanel.fxml\";"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    private Logic logic;"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    private ModuleListPanel moduleListPanel;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    private TabPane tabPane;"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    private StackPane moduleListPanelPlaceholder;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    private Tab modules;"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    private Tab contacts;"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"     * Creates a display panel to hold all feature related contents"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"     * @param logic the logic object that manages the ui and the data"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    public DisplayPanel(Logic logic) {"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"        this.logic \u003d logic;"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"        fillInnerPart();"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"        listenerOnChange();"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"    private void listenerOnChange() {"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"        addTabPaneListener();"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"    private void addTabPaneListener() {"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"        tabPane.widthProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"            tabPane.setTabMinWidth((tabPane.getWidth() - 50) / tabPane.getTabs().size());"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"            tabPane.setTabMaxWidth((tabPane.getWidth() - 70) / tabPane.getTabs().size());"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"        });"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"    private void fillInnerPart() {"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"    public void showModules() {"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"        tabPane.getSelectionModel().select(modules);"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"    public void showContacts() {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"        tabPane.getSelectionModel().select(contacts);"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":76}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w15-1.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"banchiang"},"content":"import seedu.address.storage.CalendarStorage;"},{"lineNumber":21,"author":{"gitId":"banchiang"},"content":"import seedu.address.ui.calendar.CalendarWindow;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"banchiang"},"content":"    private static final String FXML \u003d \"MainWindow2.fxml\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    private DisplayPanel displayPanel;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    private CalendarWindow calendarWindow;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"    private MenuItem calendarMenuItem;"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"    private StackPane displayPanelPlaceholder;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":69,"author":{"gitId":"banchiang"},"content":"        // When main window is closed, all other window closes."},{"lineNumber":70,"author":{"gitId":"banchiang"},"content":"        primaryStage.setOnHidden(e -\u003e Platform.exit());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"banchiang"},"content":"        //Create calendarStorage"},{"lineNumber":78,"author":{"gitId":"banchiang"},"content":"        CalendarStorage calendarStorage \u003d new CalendarStorage(logic);"},{"lineNumber":79,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":81,"author":{"gitId":"banchiang"},"content":"        calendarWindow \u003d new CalendarWindow(calendarStorage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"        setAccelerator(calendarMenuItem, KeyCombination.keyCombination(\"F2\"));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":110,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":114,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":127,"author":{"gitId":"Hzxin"},"content":"        displayPanel \u003d new DisplayPanel(logic);"},{"lineNumber":128,"author":{"gitId":"Hzxin"},"content":"        displayPanelPlaceholder.getChildren().add(displayPanel.getRoot());"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"Hzxin"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRemindMeFilePath());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":138,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"Hzxin"},"content":"     * Opens the calendar window or focuses on it if it\u0027s already opened."},{"lineNumber":155,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":157,"author":{"gitId":"Hzxin"},"content":"    public void handleCalendar() {"},{"lineNumber":158,"author":{"gitId":"Hzxin"},"content":"        if (!calendarWindow.isShowing()) {"},{"lineNumber":159,"author":{"gitId":"Hzxin"},"content":"            calendarWindow.show();"},{"lineNumber":160,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":161,"author":{"gitId":"Hzxin"},"content":"            calendarWindow.focus();"},{"lineNumber":162,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"Hzxin"},"content":"    public DisplayPanel getDisplayPanel() {"},{"lineNumber":194,"author":{"gitId":"Hzxin"},"content":"        return displayPanel;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":199,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"Hzxin"},"content":"            if (commandResult.isShowCalendar()) {"},{"lineNumber":214,"author":{"gitId":"Hzxin"},"content":"                handleCalendar();"},{"lineNumber":215,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":216,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":11,"Hzxin":29,"-":188}},{"path":"src/main/java/seedu/address/ui/ModuleCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"public class ModuleCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    private static final String FXML \u003d \"ModuleListCard.fxml\";"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    public final Module module;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    private Label title;"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    private Label assignments;"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    private Label exams;"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    private FlowPane tags;"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"     * Creates a {@code ModuleCard} with the given {@code Module} and index to display."},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    public ModuleCard(Module module) {"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"        this.module \u003d module;"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"        title.setText(module.getTitle().modTitle + \": \");"},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"        assignments.setWrapText(true);"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"        assignments.setText(module.getAssignments().toString());"},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"        exams.setWrapText(true);"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        exams.setText(module.getExams().toString());"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"        // short circuit if same object"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"            return true;"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"        // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"        // state check"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"        ModuleCard card \u003d (ModuleCard) other;"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        return title.getText().equals(card.title.getText())"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"                \u0026\u0026 module.equals(card.module);"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":66,"banchiang":2}},{"path":"src/main/java/seedu/address/ui/ModuleListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":" * Panel containing the list of persons."},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"public class ModuleListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    private static final String FXML \u003d \"ModuleListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    private ListView\u003cModule\u003e moduleListView;"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"     * Creates a {@code ModuleListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"        moduleListView.setItems(moduleList);"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    class ModuleListViewCell extends ListCell\u003cModule\u003e {"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        protected void updateItem(Module module, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"            super.updateItem(module, empty);"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"            if (empty || module \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"                setGraphic(new ModuleCard(module).getRoot());"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":49}},{"path":"src/main/java/seedu/address/ui/ReminderWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.text.Text;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.EventList;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.storage.CalendarStorage;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":" * The Reminder Window. Provides the user schedule within a week."},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"public class ReminderWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    private static final String FXML \u003d \"ReminderWindow.fxml\";"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    private LocalDate todayDate;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    private CalendarStorage calendarStorage;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    private Text content;"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"     * Creates a new ReminderWindow."},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    public ReminderWindow(CalendarStorage calendarStorage) {"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        this.todayDate \u003d LocalDate.now();"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        this.calendarStorage \u003d calendarStorage;"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        calendarStorage.refreshStorage();"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"        setWindowDefaultSize(new GuiSettings());"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"        content.setText(generateReminderContent());"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    private String generateReminderContent() {"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        String eventContent \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"            EventList eventList \u003d calendarStorage.getDateEvents(todayDate.plusDays(i));"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"            if (eventList.isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"                continue;"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"            eventContent +\u003d eventList.toString() + \"\\n\";"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"        if (eventContent.length() \u003d\u003d 0) {"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"            eventContent \u003d \"You have no events!\";"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"        return eventContent;"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"    void show() {"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"        getRoot().show();"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"        this.getRoot().setHeight(guiSettings.getWindowHeight());"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"        this.getRoot().setWidth(guiSettings.getWindowWidth());"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"            this.getRoot().setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"            this.getRoot().setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"     * This method closes the reminder window."},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"    private void close() {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"        getRoot().hide();"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":76}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"import java.net.URISyntaxException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"import javafx.scene.media.Media;"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"import javafx.scene.media.MediaPlayer;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"import javafx.util.Duration;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"import seedu.address.storage.CalendarStorage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":28,"author":{"gitId":"banchiang"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/logo.png\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    private ReminderWindow reminderWindow;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":47,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"            //start a thread to run background music"},{"lineNumber":51,"author":{"gitId":"banchiang"},"content":"            Runnable music \u003d playMusic();"},{"lineNumber":52,"author":{"gitId":"banchiang"},"content":"            Thread thread \u003d new Thread(music);"},{"lineNumber":53,"author":{"gitId":"banchiang"},"content":"            thread.start();"},{"lineNumber":54,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"            CalendarStorage calendarStorage \u003d new CalendarStorage(logic);"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"            reminderWindow \u003d new ReminderWindow(calendarStorage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"            reminderWindow.show();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"banchiang"},"content":"     * Creates new runnable that plays the background music for the RemindMe."},{"lineNumber":70,"author":{"gitId":"banchiang"},"content":"     * @return music playing Runnable."},{"lineNumber":71,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"banchiang"},"content":"    private Runnable playMusic() {"},{"lineNumber":73,"author":{"gitId":"banchiang"},"content":"        Runnable runnable \u003d () -\u003e {"},{"lineNumber":74,"author":{"gitId":"banchiang"},"content":"            Media media \u003d null;"},{"lineNumber":75,"author":{"gitId":"banchiang"},"content":"            try {"},{"lineNumber":76,"author":{"gitId":"banchiang"},"content":"                media \u003d new Media(getClass().getResource(\"/audio/MSLogin.mp3\").toURI().toString());"},{"lineNumber":77,"author":{"gitId":"banchiang"},"content":"            } catch (URISyntaxException e) {"},{"lineNumber":78,"author":{"gitId":"banchiang"},"content":"                e.printStackTrace();"},{"lineNumber":79,"author":{"gitId":"banchiang"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"banchiang"},"content":"            MediaPlayer mediaPlayer \u003d new MediaPlayer(media);"},{"lineNumber":81,"author":{"gitId":"banchiang"},"content":"            mediaPlayer.setOnReady(new Runnable() {"},{"lineNumber":82,"author":{"gitId":"banchiang"},"content":"                @Override"},{"lineNumber":83,"author":{"gitId":"banchiang"},"content":"                public void run() {"},{"lineNumber":84,"author":{"gitId":"banchiang"},"content":"                    mediaPlayer.play();"},{"lineNumber":85,"author":{"gitId":"banchiang"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"banchiang"},"content":"            });"},{"lineNumber":87,"author":{"gitId":"banchiang"},"content":"            mediaPlayer.setOnEndOfMedia(new Runnable() {"},{"lineNumber":88,"author":{"gitId":"banchiang"},"content":"                @Override"},{"lineNumber":89,"author":{"gitId":"banchiang"},"content":"                public void run() {"},{"lineNumber":90,"author":{"gitId":"banchiang"},"content":"                    mediaPlayer.seek(Duration.ZERO);"},{"lineNumber":91,"author":{"gitId":"banchiang"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"banchiang"},"content":"            });"},{"lineNumber":93,"author":{"gitId":"banchiang"},"content":"            //mediaPlayer.play();"},{"lineNumber":94,"author":{"gitId":"banchiang"},"content":"        };"},{"lineNumber":95,"author":{"gitId":"banchiang"},"content":"        return runnable;"},{"lineNumber":96,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":113,"author":{"gitId":"banchiang"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/dark/DarkTheme.css\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":41,"Hzxin":5,"-":87}},{"path":"src/main/java/seedu/address/ui/calendar/CalendarBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.ui.calendar;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.Event;"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.EventList;"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"public class CalendarBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    private static final String FXML \u003d \"CalendarBox.fxml\";"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CalendarBox.class);"},{"lineNumber":21,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    private LocalDate dateTime;"},{"lineNumber":23,"author":{"gitId":"banchiang"},"content":"    private EventList events;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    private VBox dateHolder;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    private Label date;"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"banchiang"},"content":"    private Label birthday;"},{"lineNumber":30,"author":{"gitId":"banchiang"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    private Label assignment;"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    private Label exam;"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"banchiang"},"content":"    private Label meeting;"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"     * Create a CalendarBox object to display the entries on that day."},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"     * @param dateTime the date time of the day cell in the calendar view"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"banchiang"},"content":"    public CalendarBox(LocalDate dateTime, EventList events) {"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"        this.events \u003d events;"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"        initializeCalenderBoxInfo(dateTime);"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"    private void initializeCalenderBoxInfo(LocalDate dateTime) {"},{"lineNumber":49,"author":{"gitId":"banchiang"},"content":"        loadDate();"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"        loadEventsCount();"},{"lineNumber":51,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":53,"author":{"gitId":"banchiang"},"content":"    private void loadDate() {"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"        date.setText(dateTime.getMonth().toString().substring(0, 3) + \" \" + dateTime.getDayOfMonth());"},{"lineNumber":55,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":57,"author":{"gitId":"banchiang"},"content":"    private void loadEventsCount() {"},{"lineNumber":58,"author":{"gitId":"banchiang"},"content":"        int assignmentCount \u003d 0;"},{"lineNumber":59,"author":{"gitId":"banchiang"},"content":"        int examCount \u003d 0;"},{"lineNumber":60,"author":{"gitId":"banchiang"},"content":"        int birthdayCount \u003d 0;"},{"lineNumber":61,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":62,"author":{"gitId":"banchiang"},"content":"        for (Event e : events.getEvents()) {"},{"lineNumber":63,"author":{"gitId":"banchiang"},"content":"            if (e instanceof Assignment) {"},{"lineNumber":64,"author":{"gitId":"banchiang"},"content":"                assignmentCount++;"},{"lineNumber":65,"author":{"gitId":"banchiang"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"banchiang"},"content":"            if (e instanceof Exam) {"},{"lineNumber":67,"author":{"gitId":"banchiang"},"content":"                examCount++;"},{"lineNumber":68,"author":{"gitId":"banchiang"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"banchiang"},"content":"            if (e instanceof Birthday) {"},{"lineNumber":70,"author":{"gitId":"banchiang"},"content":"                birthdayCount++;"},{"lineNumber":71,"author":{"gitId":"banchiang"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"banchiang"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":74,"author":{"gitId":"banchiang"},"content":"        birthday.setText(birthdayCount + \" Birthday(s)\");"},{"lineNumber":75,"author":{"gitId":"banchiang"},"content":"        assignment.setText(assignmentCount + \" Assignment(s)\");"},{"lineNumber":76,"author":{"gitId":"banchiang"},"content":"        exam.setText(examCount + \" Exam(s)\");"},{"lineNumber":77,"author":{"gitId":"banchiang"},"content":"        meeting.setText(\"0 Event(s)\");"},{"lineNumber":78,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"banchiang":44,"Hzxin":36}},{"path":"src/main/java/seedu/address/ui/calendar/CalendarWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"package seedu.address.ui.calendar;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":"import java.time.Year;"},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":"import java.time.YearMonth;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"import seedu.address.model.EventList;"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"import seedu.address.storage.CalendarStorage;"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"public class CalendarWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CalendarWindow.class);"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    private static final String FXML \u003d \"CalendarWindow.fxml\";"},{"lineNumber":22,"author":{"gitId":"banchiang"},"content":"    private static final int FIRST_ROW \u003d 0;"},{"lineNumber":23,"author":{"gitId":"banchiang"},"content":"    private static final int DAY_ONE \u003d 1;"},{"lineNumber":24,"author":{"gitId":"banchiang"},"content":"    private static final int CALENDER_SIDE_SIZE \u003d 7;"},{"lineNumber":25,"author":{"gitId":"banchiang"},"content":"    private static final int CALENDAR_SIZE \u003d 35;"},{"lineNumber":26,"author":{"gitId":"banchiang"},"content":"    private static final int[] DAYS_IN_MONTH \u003d {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"},{"lineNumber":27,"author":{"gitId":"banchiang"},"content":"    private static final String[] MONTHS \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","},{"lineNumber":28,"author":{"gitId":"banchiang"},"content":"        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"},{"lineNumber":29,"author":{"gitId":"banchiang"},"content":"    private static final String[] DAYS \u003d {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"};"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":31,"author":{"gitId":"banchiang"},"content":"    private int day;"},{"lineNumber":32,"author":{"gitId":"banchiang"},"content":"    private int month;"},{"lineNumber":33,"author":{"gitId":"banchiang"},"content":"    private int year;"},{"lineNumber":34,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":35,"author":{"gitId":"banchiang"},"content":"    private YearMonth yearMonth;"},{"lineNumber":36,"author":{"gitId":"banchiang"},"content":"    private LocalDate todayDate;"},{"lineNumber":37,"author":{"gitId":"banchiang"},"content":"    private LocalDate firstDayOfTheMonth;"},{"lineNumber":38,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":39,"author":{"gitId":"banchiang"},"content":"    private int prevMonthDays;"},{"lineNumber":40,"author":{"gitId":"banchiang"},"content":"    private int nextMonthDays;"},{"lineNumber":41,"author":{"gitId":"banchiang"},"content":"    private int thisMonthDays;"},{"lineNumber":42,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":43,"author":{"gitId":"banchiang"},"content":"    private CalendarStorage calendarStorage;"},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"banchiang"},"content":"    private Label monthYearLabel;"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"banchiang"},"content":"    private Label dummyLabel;"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"    private GridPane calendar;"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"     * Creates a new CalendarWindow."},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"    public CalendarWindow(Stage root) {"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"        super(FXML, root);"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"     * Creates a new CalendarWindow."},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"banchiang"},"content":"    public CalendarWindow(CalendarStorage calendarStorage) {"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        super(FXML);"},{"lineNumber":67,"author":{"gitId":"banchiang"},"content":"        this.todayDate \u003d LocalDate.now();"},{"lineNumber":68,"author":{"gitId":"banchiang"},"content":"        this.day \u003d todayDate.getDayOfMonth();"},{"lineNumber":69,"author":{"gitId":"banchiang"},"content":"        this.month \u003d todayDate.getMonthValue();"},{"lineNumber":70,"author":{"gitId":"banchiang"},"content":"        this.year \u003d todayDate.getYear();"},{"lineNumber":71,"author":{"gitId":"banchiang"},"content":"        this.yearMonth \u003d YearMonth.of(this.year, this.month);"},{"lineNumber":72,"author":{"gitId":"banchiang"},"content":"        this.firstDayOfTheMonth \u003d yearMonth.atDay(DAY_ONE);"},{"lineNumber":73,"author":{"gitId":"banchiang"},"content":"        this.calendarStorage \u003d calendarStorage;"},{"lineNumber":74,"author":{"gitId":"banchiang"},"content":"        setMonthYearLabel();"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"        loadCalendar();"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // @@author banchiang-reused"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    // Reused from"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    // https://github.com/AY2021S1-CS2103-W14-1/tp/blob/master/src/main/resources/view/CalendarView.fxml"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // with minor modifications."},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * It will update the attributes in the class according to the meetingDate parse in"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param date the new meetingDate"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void updateDayMonthYear(LocalDate date) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.year \u003d date.getYear();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.month \u003d date.getMonthValue();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        this.day \u003d date.getDayOfMonth();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.yearMonth \u003d YearMonth.of(this.year, this.month);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.firstDayOfTheMonth \u003d yearMonth.atDay(DAY_ONE);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    // @@author"},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"    private void loadCalendar() {"},{"lineNumber":96,"author":{"gitId":"banchiang"},"content":"        //update the number of days for the months showing in calendar"},{"lineNumber":97,"author":{"gitId":"banchiang"},"content":"        updateMonthDays();"},{"lineNumber":98,"author":{"gitId":"banchiang"},"content":"        //load day names"},{"lineNumber":99,"author":{"gitId":"banchiang"},"content":"        loadDayNames();"},{"lineNumber":100,"author":{"gitId":"banchiang"},"content":"        //fill up the calendar with the dates"},{"lineNumber":101,"author":{"gitId":"banchiang"},"content":"        loadDayDates();"},{"lineNumber":102,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":104,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"banchiang"},"content":"     * Refresh init storage."},{"lineNumber":106,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"banchiang"},"content":"    private void initStorage() {"},{"lineNumber":108,"author":{"gitId":"banchiang"},"content":"        calendarStorage.refreshStorage();"},{"lineNumber":109,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":111,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"banchiang"},"content":"     * load the day names into Calendar"},{"lineNumber":113,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"banchiang"},"content":"    private void loadDayNames() {"},{"lineNumber":115,"author":{"gitId":"banchiang"},"content":"        for (int col \u003d 0; col \u003c CALENDER_SIDE_SIZE; col++) {"},{"lineNumber":116,"author":{"gitId":"banchiang"},"content":"            Label dayName \u003d new Label(DAYS[col]);"},{"lineNumber":117,"author":{"gitId":"banchiang"},"content":"            VBox dayNameBox \u003d new VBox();"},{"lineNumber":118,"author":{"gitId":"banchiang"},"content":"            dayNameBox.getChildren().add(dayName);"},{"lineNumber":119,"author":{"gitId":"banchiang"},"content":"            dayNameBox.setPrefHeight(20);"},{"lineNumber":120,"author":{"gitId":"banchiang"},"content":"            dayNameBox.setPrefWidth(20);"},{"lineNumber":121,"author":{"gitId":"banchiang"},"content":"            dayNameBox.setAlignment(Pos.CENTER);"},{"lineNumber":122,"author":{"gitId":"banchiang"},"content":"            calendar.add(dayNameBox, col, FIRST_ROW);"},{"lineNumber":123,"author":{"gitId":"banchiang"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":126,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"banchiang"},"content":"     * load the day dates into Calendar"},{"lineNumber":128,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"banchiang"},"content":"    private void loadDayDates() {"},{"lineNumber":130,"author":{"gitId":"banchiang"},"content":"        //refresh storage to load dates"},{"lineNumber":131,"author":{"gitId":"banchiang"},"content":"        initStorage();"},{"lineNumber":132,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":133,"author":{"gitId":"banchiang"},"content":"        LocalDate currentDate \u003d firstDayOfTheMonth.minusDays(prevMonthDays);"},{"lineNumber":134,"author":{"gitId":"banchiang"},"content":"        for (int row \u003d 2; row \u003c CALENDER_SIDE_SIZE; row++) {"},{"lineNumber":135,"author":{"gitId":"banchiang"},"content":"            for (int col \u003d 0; col \u003c CALENDER_SIDE_SIZE; col++) {"},{"lineNumber":136,"author":{"gitId":"banchiang"},"content":"                CalendarBox calendarBox \u003d loadInfo(currentDate);"},{"lineNumber":137,"author":{"gitId":"banchiang"},"content":"                calendar.add(calendarBox.getRoot(), col, row);"},{"lineNumber":138,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":139,"author":{"gitId":"banchiang"},"content":"                //change today date background color to orange"},{"lineNumber":140,"author":{"gitId":"banchiang"},"content":"                if (todayDate.compareTo(currentDate) \u003d\u003d 0) {"},{"lineNumber":141,"author":{"gitId":"banchiang"},"content":"                    calendarBox.getRoot().setStyle(\"-fx-background-color: #FF7F50\");"},{"lineNumber":142,"author":{"gitId":"banchiang"},"content":"                }"},{"lineNumber":143,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":144,"author":{"gitId":"banchiang"},"content":"                //check if date is not within the month and"},{"lineNumber":145,"author":{"gitId":"banchiang"},"content":"                //change the day background color to grey"},{"lineNumber":146,"author":{"gitId":"banchiang"},"content":"                if (currentDate.getMonthValue() !\u003d this.month) {"},{"lineNumber":147,"author":{"gitId":"Hzxin"},"content":"                    calendarBox.getRoot().setDisable(true);"},{"lineNumber":148,"author":{"gitId":"Hzxin"},"content":"                    calendarBox.getRoot().setStyle(\"-fx-background-color: grey\");"},{"lineNumber":149,"author":{"gitId":"Hzxin"},"content":"                }"},{"lineNumber":150,"author":{"gitId":"Hzxin"},"content":"                currentDate \u003d currentDate.plusDays(1);"},{"lineNumber":151,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":155,"author":{"gitId":"banchiang"},"content":"    private CalendarBox loadInfo(LocalDate date) {"},{"lineNumber":156,"author":{"gitId":"banchiang"},"content":"        EventList events \u003d calendarStorage.getDateEvents(date);"},{"lineNumber":157,"author":{"gitId":"banchiang"},"content":"        return new CalendarBox(date, events);"},{"lineNumber":158,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":160,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"Hzxin"},"content":"     * Shows the calendar window."},{"lineNumber":162,"author":{"gitId":"Hzxin"},"content":"     * @throws IllegalStateException"},{"lineNumber":163,"author":{"gitId":"Hzxin"},"content":"     * \u003cul\u003e"},{"lineNumber":164,"author":{"gitId":"Hzxin"},"content":"     *     \u003cli\u003e"},{"lineNumber":165,"author":{"gitId":"Hzxin"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":166,"author":{"gitId":"Hzxin"},"content":"     *     \u003c/li\u003e"},{"lineNumber":167,"author":{"gitId":"Hzxin"},"content":"     *     \u003cli\u003e"},{"lineNumber":168,"author":{"gitId":"Hzxin"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":169,"author":{"gitId":"Hzxin"},"content":"     *     \u003c/li\u003e"},{"lineNumber":170,"author":{"gitId":"Hzxin"},"content":"     *     \u003cli\u003e"},{"lineNumber":171,"author":{"gitId":"Hzxin"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":172,"author":{"gitId":"Hzxin"},"content":"     *     \u003c/li\u003e"},{"lineNumber":173,"author":{"gitId":"Hzxin"},"content":"     *     \u003cli\u003e"},{"lineNumber":174,"author":{"gitId":"Hzxin"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":175,"author":{"gitId":"Hzxin"},"content":"     *     \u003c/li\u003e"},{"lineNumber":176,"author":{"gitId":"Hzxin"},"content":"     * \u003c/ul\u003e"},{"lineNumber":177,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"Hzxin"},"content":"    public void show() {"},{"lineNumber":179,"author":{"gitId":"Hzxin"},"content":"        logger.fine(\"Showing calendar page about the application.\");"},{"lineNumber":180,"author":{"gitId":"banchiang"},"content":"        refreshCalenderView();"},{"lineNumber":181,"author":{"gitId":"Hzxin"},"content":"        getRoot().show();"},{"lineNumber":182,"author":{"gitId":"Hzxin"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":183,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":185,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":186,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"Hzxin"},"content":"     * Returns true if the calendar window is currently being shown."},{"lineNumber":188,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"Hzxin"},"content":"    public boolean isShowing() {"},{"lineNumber":190,"author":{"gitId":"Hzxin"},"content":"        return getRoot().isShowing();"},{"lineNumber":191,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":193,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"Hzxin"},"content":"     * Hides the calendar window."},{"lineNumber":195,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"Hzxin"},"content":"    public void hide() {"},{"lineNumber":197,"author":{"gitId":"Hzxin"},"content":"        getRoot().hide();"},{"lineNumber":198,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":200,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"Hzxin"},"content":"     * Focuses on the calendar window."},{"lineNumber":202,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"Hzxin"},"content":"    public void focus() {"},{"lineNumber":204,"author":{"gitId":"Hzxin"},"content":"        getRoot().requestFocus();"},{"lineNumber":205,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    // @@author banchiang-reused"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    // Reused from"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    // https://github.com/AY2021S1-CS2103-W14-1/tp/blob/master/src/main/resources/view/CalendarView.fxml"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    // with no modifications."},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * Find the number of days in a month given the year and month."},{"lineNumber":213,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * @return return the number of days."},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public int findNumberOfDaysInTheMonth() {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        if (this.month \u003d\u003d 2) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            if (this.yearMonth.isLeapYear()) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                return 29;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                return DAYS_IN_MONTH[month - 1];"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return DAYS_IN_MONTH[month - 1];"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Find the number of days in a month given the year and month."},{"lineNumber":230,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * @return return the number of days."},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public int findNumberOfDaysOfAMonth(int month, int year) {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        if (month \u003d\u003d 2) {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            if (Year.isLeap(year)) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                return 29;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                return DAYS_IN_MONTH[month - 1];"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            return DAYS_IN_MONTH[month - 1];"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * Find the number of days in the previous month given the year and month."},{"lineNumber":247,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * @return return the number of days."},{"lineNumber":249,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    public int findNumberOfDaysInPreviousMonth() {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        if (this.month \u003e\u003d 2) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            return findNumberOfDaysOfAMonth(this.month - 1, this.year);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            return DAYS_IN_MONTH[11];"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitId":"-"},"content":"     * Updates number of days of previous month,"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * current month and next month that are to"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * be viewed on the Calendar."},{"lineNumber":262,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    private void updateMonthDays() {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        this.thisMonthDays \u003d findNumberOfDaysInTheMonth();"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        int firstDayOfMonth \u003d this.firstDayOfTheMonth.getDayOfWeek().getValue();"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        this.prevMonthDays \u003d firstDayOfMonth % 7 - 1;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        this.nextMonthDays \u003d CALENDAR_SIZE - this.thisMonthDays - prevMonthDays;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitId":"-"},"content":"     * Set the monthYear Label\u0027s content."},{"lineNumber":272,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    private void setMonthYearLabel() {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        StringBuilder monthYear \u003d new StringBuilder();"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        monthYear.append(MONTHS[this.firstDayOfTheMonth.getMonthValue() - 1]);"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        monthYear.append(\"  \");"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        monthYear.append(this.firstDayOfTheMonth.getYear());"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        String output \u003d monthYear.toString();"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        this.monthYearLabel.setText(output);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitId":"-"},"content":"     * Refresh the whole dateGridPane to show latest UI."},{"lineNumber":284,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    private void refreshCalenderView() {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        calendar.getChildren().clear();"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        setMonthYearLabel();"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        loadCalendar();"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    // @@author"},{"lineNumber":291,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":292,"author":{"gitId":"banchiang"},"content":"    //Solution below adapted from"},{"lineNumber":293,"author":{"gitId":"banchiang"},"content":"    //https://github.com/AY2021S1-CS2103-W14-1/tp/blob/master/src/main/resources/view/CalendarView.fxml"},{"lineNumber":294,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":295,"author":{"gitId":"banchiang"},"content":"     * Initialise calendar to previous month data when the prev button is clicked."},{"lineNumber":296,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":297,"author":{"gitId":"banchiang"},"content":"    @FXML"},{"lineNumber":298,"author":{"gitId":"banchiang"},"content":"    public void handleToPrev() {"},{"lineNumber":299,"author":{"gitId":"banchiang"},"content":"        this.firstDayOfTheMonth \u003d firstDayOfTheMonth.minusMonths(1);"},{"lineNumber":300,"author":{"gitId":"banchiang"},"content":"        updateDayMonthYear(firstDayOfTheMonth);"},{"lineNumber":301,"author":{"gitId":"banchiang"},"content":"        refreshCalenderView();"},{"lineNumber":302,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":304,"author":{"gitId":"banchiang"},"content":"    //Solution below adapted from"},{"lineNumber":305,"author":{"gitId":"banchiang"},"content":"    //https://github.com/AY2021S1-CS2103-W14-1/tp/blob/master/src/main/resources/view/CalendarView.fxml"},{"lineNumber":306,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":307,"author":{"gitId":"banchiang"},"content":"     * Initialise calendar to next month data when the next button is clicked."},{"lineNumber":308,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":309,"author":{"gitId":"banchiang"},"content":"    @FXML"},{"lineNumber":310,"author":{"gitId":"banchiang"},"content":"    public void handleToNext() {"},{"lineNumber":311,"author":{"gitId":"banchiang"},"content":"        this.firstDayOfTheMonth \u003d firstDayOfTheMonth.plusMonths(1);"},{"lineNumber":312,"author":{"gitId":"banchiang"},"content":"        updateDayMonthYear(firstDayOfTheMonth);"},{"lineNumber":313,"author":{"gitId":"banchiang"},"content":"        refreshCalenderView();"},{"lineNumber":314,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":316,"author":{"gitId":"banchiang"},"content":"    //Solution below adapted from"},{"lineNumber":317,"author":{"gitId":"banchiang"},"content":"    //https://github.com/AY2021S1-CS2103-W14-1/tp/blob/master/src/main/resources/view/CalendarView.fxml"},{"lineNumber":318,"author":{"gitId":"banchiang"},"content":"    /**"},{"lineNumber":319,"author":{"gitId":"banchiang"},"content":"     * Initialise calendar to current month of today\u0027s date."},{"lineNumber":320,"author":{"gitId":"banchiang"},"content":"     */"},{"lineNumber":321,"author":{"gitId":"banchiang"},"content":"    @FXML"},{"lineNumber":322,"author":{"gitId":"banchiang"},"content":"    public void viewToday() {"},{"lineNumber":323,"author":{"gitId":"banchiang"},"content":"        updateDayMonthYear(todayDate);"},{"lineNumber":324,"author":{"gitId":"banchiang"},"content":"        refreshCalenderView();"},{"lineNumber":325,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"banchiang":133,"Hzxin":93,"-":100}},{"path":"src/main/resources/view/CalendarBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\u003cVBox fx:id\u003d\"dateHolder\" alignment\u003d\"CENTER\" prefHeight\u003d\"58.0\" prefWidth\u003d\"44.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"    \u003cchildren\u003e"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"label-bright\" text\u003d\"Label\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"        \u003cLabel fx:id\u003d\"birthday\" text\u003d\"Label\" /\u003e"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"        \u003cLabel fx:id\u003d\"assignment\" text\u003d\"Label\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"        \u003cLabel fx:id\u003d\"exam\" text\u003d\"Label\" /\u003e"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"        \u003cLabel fx:id\u003d\"meeting\" text\u003d\"Label\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    \u003c/children\u003e"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"Hzxin":12,"banchiang":2}},{"path":"src/main/resources/view/CalendarWindow.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"/* current css not in use */"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":".weekday {"},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Abyssinica SIL\";"},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":".weekend {"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Abyssinica SIL\";"},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: red;"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":".button {"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 12px;"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"DejaVu Serif Bold\";"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #B0C4DE;"},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":"}"}],"authorContributionMap":{"banchiang":18}},{"path":"src/main/resources/view/CalendarWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\u003cStage resizable\u003d\"false\" title\u003d\"Calendar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":20,"author":{"gitId":"banchiang"},"content":"    \u003cicons\u003e"},{"lineNumber":21,"author":{"gitId":"banchiang"},"content":"        \u003cImage url\u003d\"@/images/logo.png\" /\u003e"},{"lineNumber":22,"author":{"gitId":"banchiang"},"content":"    \u003c/icons\u003e"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"   \u003cscene\u003e"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"      \u003cScene\u003e"},{"lineNumber":25,"author":{"gitId":"banchiang"},"content":"          \u003cstylesheets\u003e"},{"lineNumber":26,"author":{"gitId":"banchiang"},"content":"              \u003cURL value\u003d\"@CalendarWindow.css\" /\u003e"},{"lineNumber":27,"author":{"gitId":"banchiang"},"content":"          \u003c/stylesheets\u003e"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"         \u003croot\u003e"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"            \u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"650.0\" prefWidth\u003d\"1050.0\" style\u003d\"-fx-background-color: grey;\"\u003e"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"               \u003cchildren\u003e"},{"lineNumber":31,"author":{"gitId":"banchiang"},"content":"                  \u003cVBox prefHeight\u003d\"650.0\" prefWidth\u003d\"269.0\" style\u003d\"-fx-background-color: #7FFFD4;\"\u003e"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"                     \u003cchildren\u003e"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"                        \u003cImageView fitHeight\u003d\"181.0\" fitWidth\u003d\"191.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" translateX\u003d\"40.0\" translateY\u003d\"40.0\"\u003e"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"                           \u003cimage\u003e"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"                              \u003cImage url\u003d\"@../images/logo.png\" /\u003e"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"                           \u003c/image\u003e"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"                        \u003c/ImageView\u003e"},{"lineNumber":38,"author":{"gitId":"banchiang"},"content":"                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Welcome\" textAlignment\u003d\"CENTER\" translateX\u003d\"65.0\" translateY\u003d\"50.0\"\u003e"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"                           \u003cfont\u003e"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"                              \u003cFont name\u003d\"Chandas\" size\u003d\"30.0\" /\u003e"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"                           \u003c/font\u003e"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"                        \u003c/Label\u003e"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"                     \u003c/children\u003e"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"                  \u003c/VBox\u003e"},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"                  \u003cAnchorPane prefHeight\u003d\"650.0\" prefWidth\u003d\"783.0\" style\u003d\"-fx-background-color: #F8F8FF;\"\u003e"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"                     \u003cchildren\u003e"},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"                        \u003cLabel fx:id\u003d\"monthYearLabel\" layoutX\u003d\"26.0\" layoutY\u003d\"14.0\" text\u003d\"Text\"\u003e"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"                           \u003cfont\u003e"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"                              \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"26.0\" /\u003e"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"                           \u003c/font\u003e"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"                        \u003c/Label\u003e"},{"lineNumber":52,"author":{"gitId":"banchiang"},"content":"                         \u003cButton onAction\u003d\"#handleToNext\" ellipsisString\u003d\"\" layoutX\u003d\"600.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"40.0\" prefWidth\u003d\"29.0\" text\u003d\"\u0026gt;\" textOverrun\u003d\"CLIP\"\u003e\u003c/Button\u003e"},{"lineNumber":53,"author":{"gitId":"banchiang"},"content":"                         \u003cButton onAction\u003d\"#viewToday\" ellipsisString\u003d\"\" layoutX\u003d\"540.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"40.0\" prefWidth\u003d\"55.0\" text\u003d\"Today\" textOverrun\u003d\"CLIP\"\u003e\u003c/Button\u003e"},{"lineNumber":54,"author":{"gitId":"banchiang"},"content":"                         \u003cButton onAction\u003d\"#handleToPrev\" ellipsisString\u003d\"\" layoutX\u003d\"500.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"40.0\" prefWidth\u003d\"29.0\" text\u003d\"\u0026lt;\"\u003e\u003c/Button\u003e"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"                        \u003cGridPane fx:id\u003d\"calendar\" alignment\u003d\"CENTER\" gridLinesVisible\u003d\"true\" layoutX\u003d\"-6.0\" layoutY\u003d\"56.0\" prefHeight\u003d\"589.0\" prefWidth\u003d\"815.0\"\u003e"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"                          \u003ccolumnConstraints\u003e"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"                            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"                            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"                          \u003c/columnConstraints\u003e"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"                          \u003crowConstraints\u003e"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"                              \u003cRowConstraints fillHeight\u003d\"false\" minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" valignment\u003d\"CENTER\" vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"                              \u003cRowConstraints fillHeight\u003d\"false\" minHeight\u003d\"0.0\" prefHeight\u003d\"0.0\" valignment\u003d\"CENTER\" vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"                            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"                            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"                            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"                              \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"                              \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"                          \u003c/rowConstraints\u003e"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"                           \u003cpadding\u003e"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"                           \u003c/padding\u003e"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"                        \u003c/GridPane\u003e"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"                     \u003c/children\u003e"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"                  \u003c/AnchorPane\u003e"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"               \u003c/children\u003e"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"            \u003c/HBox\u003e"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"         \u003c/root\u003e"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"      \u003c/Scene\u003e"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"   \u003c/scene\u003e"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"\u003c/Stage\u003e"}],"authorContributionMap":{"Hzxin":71,"banchiang":14}},{"path":"src/main/resources/view/DisplayPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Tab?\u003e"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\u003cTabPane fx:id\u003d\"tabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\" tabMaxWidth\u003d\"Infinity\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"   \u003ctabs\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"      \u003cTab fx:id\u003d\"modules\" closable\u003d\"false\" text\u003d\"Modules\"\u003e"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"         \u003ccontent\u003e"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"            \u003cStackPane\u003e"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"               \u003cchildren\u003e"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"                  \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"10.0\" StackPane.alignment\u003d\"TOP_LEFT\"\u003e"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"                     \u003cchildren\u003e"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"                        \u003cVBox fx:id\u003d\"moduleList\" minWidth\u003d\"250.0\" styleClass\u003d\"vbox-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"                           \u003cchildren\u003e"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"                              \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" styleClass\u003d\"empty-container\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"                           \u003c/children\u003e"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"                        \u003c/VBox\u003e"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"                        \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"vbox-with-border\" /\u003e"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"                     \u003c/children\u003e"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"                     \u003cStackPane.margin\u003e"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"                     \u003c/StackPane.margin\u003e"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"                     \u003cpadding\u003e"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"                     \u003c/padding\u003e"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"                  \u003c/HBox\u003e"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"               \u003c/children\u003e"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"            \u003c/StackPane\u003e"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"         \u003c/content\u003e"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"      \u003c/Tab\u003e"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"      \u003cTab fx:id\u003d\"contacts\" text\u003d\"Contacts\"\u003e"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"         \u003ccontent\u003e"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"            \u003cStackPane\u003e"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"               \u003cchildren\u003e"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"                  \u003cHBox StackPane.alignment\u003d\"TOP_LEFT\"\u003e"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"                     \u003cchildren\u003e"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"                     \u003c/children\u003e"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"                  \u003c/HBox\u003e"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"               \u003c/children\u003e"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"            \u003c/StackPane\u003e"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"         \u003c/content\u003e"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"      \u003c/Tab\u003e"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"   \u003c/tabs\u003e"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"\u003c/TabPane\u003e"}],"authorContributionMap":{"Hzxin":50}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"         \u003cHBox alignment\u003d\"CENTER\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \u003cchildren\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                  \u003cHBox.margin\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                     \u003cInsets right\u003d\"5.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                  \u003c/HBox.margin\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"               \u003c/Label\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                  \u003cHBox.margin\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                     \u003cInsets left\u003d\"5.0\" /\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                  \u003c/HBox.margin\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"               \u003c/Button\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003c/children\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003copaqueInsets\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003c/opaqueInsets\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"         \u003c/HBox\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Hzxin":1,"-":38}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"RemindMe\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"    \u003cImage url\u003d\"@/images/logo.png\" /\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":21,"author":{"gitId":"banchiang"},"content":"        \u003cURL value\u003d\"@dark/DarkTheme.css\" /\u003e"},{"lineNumber":22,"author":{"gitId":"banchiang"},"content":"        \u003cURL value\u003d\"@dark/Extensions.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Calendar\"\u003e"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"            \u003cMenuItem fx:id\u003d\"calendarMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCalendar\" text\u003d\"Calendar\" /\u003e"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"          \u003c/Menu\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150.0\" minHeight\u003d\"150.0\" prefHeight\u003d\"150.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"        \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Hzxin":10,"banchiang":4,"-":47}},{"path":"src/main/resources/view/MainWindow2.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"RemindMe\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":"  \u003cicons\u003e"},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":"    \u003cImage url\u003d\"@/images/logo.png\" /\u003e"},{"lineNumber":19,"author":{"gitId":"banchiang"},"content":"  \u003c/icons\u003e"},{"lineNumber":20,"author":{"gitId":"banchiang"},"content":"  \u003cscene\u003e"},{"lineNumber":21,"author":{"gitId":"banchiang"},"content":"    \u003cScene\u003e"},{"lineNumber":22,"author":{"gitId":"banchiang"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"        \u003cURL value\u003d\"@customizedStyle/CustomizedTheme.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"        \u003cURL value\u003d\"@customizedStyle/CustomisedExtensions.css\" /\u003e"},{"lineNumber":25,"author":{"gitId":"banchiang"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":26,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":27,"author":{"gitId":"banchiang"},"content":"      \u003cVBox prefWidth\u003d\"800.0\"\u003e"},{"lineNumber":28,"author":{"gitId":"banchiang"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":29,"author":{"gitId":"banchiang"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":30,"author":{"gitId":"banchiang"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":31,"author":{"gitId":"banchiang"},"content":"          \u003c/Menu\u003e"},{"lineNumber":32,"author":{"gitId":"banchiang"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":33,"author":{"gitId":"banchiang"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":34,"author":{"gitId":"banchiang"},"content":"          \u003c/Menu\u003e"},{"lineNumber":35,"author":{"gitId":"banchiang"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Calendar\"\u003e"},{"lineNumber":36,"author":{"gitId":"banchiang"},"content":"            \u003cMenuItem fx:id\u003d\"calendarMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCalendar\" text\u003d\"Calendar\" /\u003e"},{"lineNumber":37,"author":{"gitId":"banchiang"},"content":"          \u003c/Menu\u003e"},{"lineNumber":38,"author":{"gitId":"banchiang"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":39,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":40,"author":{"gitId":"banchiang"},"content":"              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":41,"author":{"gitId":"banchiang"},"content":"          \u003cpadding\u003e"},{"lineNumber":42,"author":{"gitId":"banchiang"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":43,"author":{"gitId":"banchiang"},"content":"          \u003c/padding\u003e"},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"            \u003cSplitPane dividerPositions\u003d\"0.5\"\u003e"},{"lineNumber":46,"author":{"gitId":"banchiang"},"content":"               \u003citems\u003e"},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"                  \u003cVBox prefWidth\u003d\"400.0\"\u003e"},{"lineNumber":48,"author":{"gitId":"banchiang"},"content":"                     \u003cchildren\u003e"},{"lineNumber":49,"author":{"gitId":"banchiang"},"content":"                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"                      \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"banchiang"},"content":"                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":52,"author":{"gitId":"banchiang"},"content":"                      \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"banchiang"},"content":"                    \u003c/StackPane\u003e"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"                   \u003cStackPane fx:id\u003d\"displayPanelPlaceholder\" /\u003e"},{"lineNumber":55,"author":{"gitId":"banchiang"},"content":"                         \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":56,"author":{"gitId":"banchiang"},"content":"                      \u003cpadding\u003e"},{"lineNumber":57,"author":{"gitId":"banchiang"},"content":"                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"},{"lineNumber":58,"author":{"gitId":"banchiang"},"content":"                      \u003c/padding\u003e"},{"lineNumber":59,"author":{"gitId":"banchiang"},"content":"                    \u003c/VBox\u003e"},{"lineNumber":60,"author":{"gitId":"banchiang"},"content":"                     \u003c/children\u003e"},{"lineNumber":61,"author":{"gitId":"banchiang"},"content":"                  \u003c/VBox\u003e"},{"lineNumber":62,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":63,"author":{"gitId":"banchiang"},"content":"               \u003c/items\u003e"},{"lineNumber":64,"author":{"gitId":"banchiang"},"content":"            \u003c/SplitPane\u003e"},{"lineNumber":65,"author":{"gitId":"banchiang"},"content":"          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" /\u003e"},{"lineNumber":66,"author":{"gitId":"banchiang"},"content":"      \u003c/VBox\u003e"},{"lineNumber":67,"author":{"gitId":"banchiang"},"content":"    \u003c/Scene\u003e"},{"lineNumber":68,"author":{"gitId":"banchiang"},"content":"  \u003c/scene\u003e"},{"lineNumber":69,"author":{"gitId":"banchiang"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"banchiang":65,"Hzxin":4}},{"path":"src/main/resources/view/ModuleListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"      \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"      \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"         \u003cHBox prefHeight\u003d\"19.0\" prefWidth\u003d\"73.0\"\u003e"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"            \u003cchildren\u003e"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"           \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"             \u003cminWidth\u003e"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"               \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"               \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"             \u003c/minWidth\u003e"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"           \u003c/Label\u003e"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"            \u003c/children\u003e"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"         \u003c/HBox\u003e"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"        \u003cLabel fx:id\u003d\"assignments\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"        \u003cLabel fx:id\u003d\"exams\" alignment\u003d\"CENTER_RIGHT\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" translateX\u003d\"35.0\" /\u003e"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"      \u003c/HBox\u003e"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    \u003c/VBox\u003e"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    \u003crowConstraints\u003e"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"      \u003cRowConstraints /\u003e"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    \u003c/rowConstraints\u003e"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"Hzxin":42}},{"path":"src/main/resources/view/ModuleListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"  \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"Hzxin":8}},{"path":"src/main/resources/view/ReminderWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.text.Text?\u003e"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\u003cStage title\u003d\"Reminder\" minHeight\u003d\"570.0\" minWidth\u003d\"750.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"    \u003cicons\u003e"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"        \u003cImage url\u003d\"@/images/logo.png\" /\u003e"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"    \u003c/icons\u003e"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    \u003cscene\u003e"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"        \u003cScene\u003e"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"            \u003cAnchorPane minHeight\u003d\"570.0\" minWidth\u003d\"750.0\"\u003e"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"            \u003cchildren\u003e"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"               \u003cAnchorPane minHeight\u003d\"570.0\" minWidth\u003d\"750.0\" style\u003d\"-fx-background-color: #E0C9BF;\"\u003e"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"                  \u003cchildren\u003e"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"                     \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"225.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"                        \u003cimage\u003e"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"                           \u003cImage url\u003d\"@/images/logoCalligraphy.png\" /\u003e"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"                        \u003c/image\u003e"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"                     \u003c/ImageView\u003e"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"                     \u003cButton fx:id\u003d\"startButton\" layoutX\u003d\"328.0\" layoutY\u003d\"511.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#close\" text\u003d\"Start\" textFill\u003d\"#805555\" wrapText\u003d\"true\"\u003e"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"                        \u003cfont\u003e"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"                           \u003cFont name\u003d\"FreeMono\" size\u003d\"17.0\" /\u003e"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"                        \u003c/font\u003e"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"                     \u003c/Button\u003e"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"                     \u003cText fx:id\u003d\"header\" fill\u003d\"WHITE\" layoutX\u003d\"23.0\" layoutY\u003d\"82.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"In the next 3 days:\"\u003e"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"                        \u003cfont\u003e"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"                           \u003cFont name\u003d\"FreeSerif\" size\u003d\"20.0\" /\u003e"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"                        \u003c/font\u003e"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"                     \u003c/Text\u003e"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"                     \u003cText fx:id\u003d\"content\" fill\u003d\"WHITE\" layoutX\u003d\"53.0\" layoutY\u003d\"112.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"midterm  (2020-12-01)\"\u003e"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"                        \u003cfont\u003e"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"                           \u003cFont name\u003d\"FreeSerif\" size\u003d\"20.0\" /\u003e"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"                        \u003c/font\u003e"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"                     \u003c/Text\u003e"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"                  \u003c/children\u003e"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"               \u003c/AnchorPane\u003e"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"            \u003c/children\u003e\u003c/AnchorPane\u003e"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"        \u003c/Scene\u003e"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    \u003c/scene\u003e"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"\u003c/Stage\u003e"}],"authorContributionMap":{"Hzxin":44,"banchiang":3}},{"path":"src/main/resources/view/customizedStyle/CustomisedExtensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":".error {"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":".list-cell:empty {"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"    /* Empty cells will not have alternating colours */"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"    -fx-background: #F8b195;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":".tag-selector {"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 1;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: white;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 3;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 3;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":".tooltip-text {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":20}},{"path":"src/main/resources/view/customizedStyle/CustomizedTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":".root {"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"    -fx-focus-color: transparent;"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":".background {"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 20%);"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"    background-color: #5D6475; /* Used in the default.html file */"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":".label {"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":".label-bright {"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    -fx-opacity: 1;"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":".label-header {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 25pt;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: Candara;"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    -fx-font-style: italic;"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    -fx-font-weight: 700;"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":".text-field {"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 20%);"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    -fx-prompt-text-fill: derive(black, 65%);"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":".tab-pane {"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 8 8 8 8;"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 8 8 8 8;"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":".tab-pane .tab-header-area {"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#717786, 20%);"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":".tab-pane .tab-header-background {"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#717786, 20%);"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":".tab-pane .tab-content-area {"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#717786, 20%);"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":".tab-pane .tab:selected {"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#5D6475, 10%);"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"    -fx-pref-height: 60;"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: innershadow(gaussian, #485063, 10, 0.1, -2, 2);"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":".tab-pane .tab {"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#5D6475, 50%);"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"    -fx-pref-height: 60;"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: innershadow(gaussian, #485063, 10, 0.1, -2, 2);"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":".tab-pane .tab-label {"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Sitka Banner\";"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"    -fx-font-weight: 600;"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":".table-view {"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 5;"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":".table-view .column-header-background {"},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent;"},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"    -fx-size: 35;"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":92,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent;"},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color:"},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":"            transparent"},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"            transparent"},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"            derive(-fx-base, 80%)"},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":"            transparent;"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":101,"author":{"gitId":"Hzxin"},"content":".table-view .column-header .label {"},{"lineNumber":102,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":103,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":105,"author":{"gitId":"Hzxin"},"content":"    -fx-alignment: center-left;"},{"lineNumber":106,"author":{"gitId":"Hzxin"},"content":"    -fx-opacity: 1;"},{"lineNumber":107,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":108,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":112,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":113,"author":{"gitId":"Hzxin"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":114,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":115,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":116,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":118,"author":{"gitId":"Hzxin"},"content":".split-pane {"},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 1;"},{"lineNumber":120,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 1;"},{"lineNumber":121,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":122,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":124,"author":{"gitId":"Hzxin"},"content":".list-view-task-lesson {"},{"lineNumber":125,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0;"},{"lineNumber":126,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 3;"},{"lineNumber":127,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#5D6475, 20%);"},{"lineNumber":128,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":129,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":130,"author":{"gitId":"Hzxin"},"content":".list-view-task-lesson .list-cell {"},{"lineNumber":131,"author":{"gitId":"Hzxin"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":132,"author":{"gitId":"Hzxin"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":133,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 5;"},{"lineNumber":134,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 18 18 18 18;"},{"lineNumber":135,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 18 18 18 18;"},{"lineNumber":136,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":137,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":138,"author":{"gitId":"Hzxin"},"content":".list-view-task-lesson .list-cell:filled:even {"},{"lineNumber":139,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent, #02B68F;"},{"lineNumber":140,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0, 3;"},{"lineNumber":141,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: dropshadow(gaussian, #0B2B37, 10, 0, 1, 1);"},{"lineNumber":142,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":143,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":144,"author":{"gitId":"Hzxin"},"content":".list-view-task-lesson .list-cell:filled:odd {"},{"lineNumber":145,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent, #018D6F;"},{"lineNumber":146,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0, 3;"},{"lineNumber":147,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: dropshadow(gaussian, #0B2B37, 10, 0, 1, 1);"},{"lineNumber":148,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":149,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":150,"author":{"gitId":"Hzxin"},"content":".list-view-task-lesson .list-cell:filled:selected {"},{"lineNumber":151,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: dropshadow(gaussian, #0B2B37, 10, 0, 5, 5);"},{"lineNumber":152,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":153,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":154,"author":{"gitId":"Hzxin"},"content":".list-view-task-lesson .list-cell:filled:selected #cardPane {"},{"lineNumber":155,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: null;"},{"lineNumber":156,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":157,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":158,"author":{"gitId":"Hzxin"},"content":".list-view-task-lesson .list-cell .label {"},{"lineNumber":159,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":160,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":161,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":162,"author":{"gitId":"Hzxin"},"content":".list-view-task-lesson .list-cell:empty {"},{"lineNumber":163,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 2 ;"},{"lineNumber":164,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent ;"},{"lineNumber":165,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0 ;"},{"lineNumber":166,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":167,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":168,"author":{"gitId":"Hzxin"},"content":".list-view-module {"},{"lineNumber":169,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0;"},{"lineNumber":170,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 3;"},{"lineNumber":171,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#5D6475, 20%);"},{"lineNumber":172,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":173,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":174,"author":{"gitId":"Hzxin"},"content":".list-view-module .list-cell {"},{"lineNumber":175,"author":{"gitId":"Hzxin"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":176,"author":{"gitId":"Hzxin"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":177,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 3;"},{"lineNumber":178,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 18 18 18 18;"},{"lineNumber":179,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 18 18 18 18;"},{"lineNumber":180,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":181,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":182,"author":{"gitId":"Hzxin"},"content":".list-view-module .list-cell:filled:even {"},{"lineNumber":183,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent, #02B68F;"},{"lineNumber":184,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0, 3;"},{"lineNumber":185,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: dropshadow(gaussian, #0B2B37, 10, 0, 1, 1);"},{"lineNumber":186,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":187,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":188,"author":{"gitId":"Hzxin"},"content":".list-view-module .list-cell:filled:odd {"},{"lineNumber":189,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent, #018D6F;"},{"lineNumber":190,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0, 3;"},{"lineNumber":191,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: dropshadow(gaussian, #0B2B37, 10, 0, 1, 1);"},{"lineNumber":192,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":193,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":194,"author":{"gitId":"Hzxin"},"content":".list-view-module .list-cell:filled:selected {"},{"lineNumber":195,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: dropshadow(gaussian, #0B2B37, 10, 0, 5, 5);"},{"lineNumber":196,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":197,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":198,"author":{"gitId":"Hzxin"},"content":".list-view-module .list-cell:filled:selected #cardPane {"},{"lineNumber":199,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: null;"},{"lineNumber":200,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":201,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":202,"author":{"gitId":"Hzxin"},"content":".list-view-module .list-cell .label {"},{"lineNumber":203,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":204,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":205,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":206,"author":{"gitId":"Hzxin"},"content":".list-view-module .list-cell:empty {"},{"lineNumber":207,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 2 ;"},{"lineNumber":208,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent ;"},{"lineNumber":209,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0 ;"},{"lineNumber":210,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":211,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":212,"author":{"gitId":"Hzxin"},"content":".cell_big_label {"},{"lineNumber":213,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":214,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 16px;"},{"lineNumber":215,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":216,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":217,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":218,"author":{"gitId":"Hzxin"},"content":".cell_small_label {"},{"lineNumber":219,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":220,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 13px;"},{"lineNumber":221,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":222,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":223,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":224,"author":{"gitId":"Hzxin"},"content":".stack-pane {"},{"lineNumber":225,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 50%);"},{"lineNumber":226,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":227,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":228,"author":{"gitId":"Hzxin"},"content":".pane-with-border {"},{"lineNumber":229,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 20%);"},{"lineNumber":230,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: derive(#858b97, 10%);"},{"lineNumber":231,"author":{"gitId":"Hzxin"},"content":"    -fx-border-top-width: 1px;"},{"lineNumber":232,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 5 10 5 10;"},{"lineNumber":233,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":234,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":235,"author":{"gitId":"Hzxin"},"content":".pane-with-border-rounded {"},{"lineNumber":236,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 20%);"},{"lineNumber":237,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: derive(#858b97, 10%);"},{"lineNumber":238,"author":{"gitId":"Hzxin"},"content":"    -fx-border-top-width: 1px;"},{"lineNumber":239,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 5 10 5 10;"},{"lineNumber":240,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 18 18 18 18;"},{"lineNumber":241,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 18 18 18 18;"},{"lineNumber":242,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":243,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":244,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":245,"author":{"gitId":"Hzxin"},"content":".vbox-with-border {"},{"lineNumber":246,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#5D6475, 20%);"},{"lineNumber":247,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: derive(#5D6475, 10%);"},{"lineNumber":248,"author":{"gitId":"Hzxin"},"content":"    -fx-border-top-width: 1px;"},{"lineNumber":249,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 18 18 0 0;"},{"lineNumber":250,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 18 18 0 0;"},{"lineNumber":251,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: dropshadow(gaussian, #0B2B37, 10, 0, 3, 3);"},{"lineNumber":252,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":253,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":254,"author":{"gitId":"Hzxin"},"content":".vbox-with-border .label-header {"},{"lineNumber":255,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 25pt;"},{"lineNumber":256,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: Candara;"},{"lineNumber":257,"author":{"gitId":"Hzxin"},"content":"    -fx-font-style: italic;"},{"lineNumber":258,"author":{"gitId":"Hzxin"},"content":"    -fx-font-weight: 700;"},{"lineNumber":259,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":260,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 5 5 5 5;"},{"lineNumber":261,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":262,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":263,"author":{"gitId":"Hzxin"},"content":".empty-container {"},{"lineNumber":264,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#5D6475, 20%);"},{"lineNumber":265,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":266,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":267,"author":{"gitId":"Hzxin"},"content":".vbox-data {"},{"lineNumber":268,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 18 18 18 18;"},{"lineNumber":269,"author":{"gitId":"Hzxin"},"content":"    -fx-spacing: 5;"},{"lineNumber":270,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 10 5 10 5;"},{"lineNumber":271,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":272,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":273,"author":{"gitId":"Hzxin"},"content":".result-display {"},{"lineNumber":274,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent;"},{"lineNumber":275,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":276,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":277,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":278,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":279,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":280,"author":{"gitId":"Hzxin"},"content":".result-display .label {"},{"lineNumber":281,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":282,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":283,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":284,"author":{"gitId":"Hzxin"},"content":".status-bar {"},{"lineNumber":285,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 30%);"},{"lineNumber":286,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":287,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":288,"author":{"gitId":"Hzxin"},"content":".status-bar .label {"},{"lineNumber":289,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":290,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":291,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 4px;"},{"lineNumber":292,"author":{"gitId":"Hzxin"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":293,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":294,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":295,"author":{"gitId":"Hzxin"},"content":".status-bar-with-border {"},{"lineNumber":296,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 30%);"},{"lineNumber":297,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: derive(#858b97, 25%);"},{"lineNumber":298,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 1px;"},{"lineNumber":299,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":300,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":301,"author":{"gitId":"Hzxin"},"content":".status-bar-with-border .label {"},{"lineNumber":302,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":303,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":304,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":305,"author":{"gitId":"Hzxin"},"content":".grid-pane {"},{"lineNumber":306,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#2A9D8F, 30%);"},{"lineNumber":307,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: derive(#2A9D8F, 30%);"},{"lineNumber":308,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 1px;"},{"lineNumber":309,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":310,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":311,"author":{"gitId":"Hzxin"},"content":".grid-pane .stack-pane {"},{"lineNumber":312,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#2A9D8F, 30%);"},{"lineNumber":313,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":314,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":315,"author":{"gitId":"Hzxin"},"content":".context-menu {"},{"lineNumber":316,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 50%);"},{"lineNumber":317,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":318,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":319,"author":{"gitId":"Hzxin"},"content":".context-menu .label {"},{"lineNumber":320,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":321,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":322,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":323,"author":{"gitId":"Hzxin"},"content":".menu-bar {"},{"lineNumber":324,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 20%);"},{"lineNumber":325,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":326,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":327,"author":{"gitId":"Hzxin"},"content":".menu-bar .label {"},{"lineNumber":328,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":329,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":330,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":331,"author":{"gitId":"Hzxin"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":332,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":333,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":334,"author":{"gitId":"Hzxin"},"content":".menu .left-container {"},{"lineNumber":335,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: black;"},{"lineNumber":336,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":337,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":338,"author":{"gitId":"Hzxin"},"content":"/*"},{"lineNumber":339,"author":{"gitId":"Hzxin"},"content":" * Metro style Push Button"},{"lineNumber":340,"author":{"gitId":"Hzxin"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":341,"author":{"gitId":"Hzxin"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":342,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":343,"author":{"gitId":"Hzxin"},"content":".button {"},{"lineNumber":344,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":345,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":346,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 2;"},{"lineNumber":347,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 0;"},{"lineNumber":348,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: #2A9D8F;"},{"lineNumber":349,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":350,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":351,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":352,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":353,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":354,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":355,"author":{"gitId":"Hzxin"},"content":".button:hover {"},{"lineNumber":356,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":357,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":358,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":359,"author":{"gitId":"Hzxin"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":360,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: white;"},{"lineNumber":361,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: #2A9D8F;"},{"lineNumber":362,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":363,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":364,"author":{"gitId":"Hzxin"},"content":".button:focused {"},{"lineNumber":365,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: white, white;"},{"lineNumber":366,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":367,"author":{"gitId":"Hzxin"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":368,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":369,"author":{"gitId":"Hzxin"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":370,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":371,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":372,"author":{"gitId":"Hzxin"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":373,"author":{"gitId":"Hzxin"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":374,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: #2A9D8F;"},{"lineNumber":375,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":376,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":377,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":378,"author":{"gitId":"Hzxin"},"content":".button:default {"},{"lineNumber":379,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":380,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":381,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":382,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":383,"author":{"gitId":"Hzxin"},"content":".button:default:hover {"},{"lineNumber":384,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":385,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":386,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":387,"author":{"gitId":"Hzxin"},"content":".dialog-pane {"},{"lineNumber":388,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: #2A9D8F;"},{"lineNumber":389,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":390,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":391,"author":{"gitId":"Hzxin"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":392,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: #2A9D8F;"},{"lineNumber":393,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":394,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":395,"author":{"gitId":"Hzxin"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":396,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 14px;"},{"lineNumber":397,"author":{"gitId":"Hzxin"},"content":"    -fx-font-weight: bold;"},{"lineNumber":398,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":399,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":400,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":401,"author":{"gitId":"Hzxin"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":402,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#2A9D8F, 25%);"},{"lineNumber":403,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":404,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":405,"author":{"gitId":"Hzxin"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":406,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 18px;"},{"lineNumber":407,"author":{"gitId":"Hzxin"},"content":"    -fx-font-style: italic;"},{"lineNumber":408,"author":{"gitId":"Hzxin"},"content":"    -fx-fill: white;"},{"lineNumber":409,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":410,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":411,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":412,"author":{"gitId":"Hzxin"},"content":".scroll-bar {"},{"lineNumber":413,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 20%);"},{"lineNumber":414,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":415,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":416,"author":{"gitId":"Hzxin"},"content":".scroll-bar .thumb {"},{"lineNumber":417,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: derive(#858b97, 50%);"},{"lineNumber":418,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 3;"},{"lineNumber":419,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":420,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":421,"author":{"gitId":"Hzxin"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":422,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent;"},{"lineNumber":423,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":424,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":425,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":426,"author":{"gitId":"Hzxin"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":427,"author":{"gitId":"Hzxin"},"content":"    -fx-shape: \" \";"},{"lineNumber":428,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":429,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":430,"author":{"gitId":"Hzxin"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":431,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":432,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":433,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":434,"author":{"gitId":"Hzxin"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":435,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":436,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":437,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":438,"author":{"gitId":"Hzxin"},"content":"#cardPane {"},{"lineNumber":439,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent;"},{"lineNumber":440,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: dropshadow(gaussian, #0B2B37, 10, 0, 1, 1);"},{"lineNumber":441,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 0;"},{"lineNumber":442,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":443,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":444,"author":{"gitId":"Hzxin"},"content":"#commandTypeLabel {"},{"lineNumber":445,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 11px;"},{"lineNumber":446,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":447,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":448,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":449,"author":{"gitId":"Hzxin"},"content":"#commandTextField {"},{"lineNumber":450,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":451,"author":{"gitId":"Hzxin"},"content":"    -fx-background-insets: 0;"},{"lineNumber":452,"author":{"gitId":"Hzxin"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":453,"author":{"gitId":"Hzxin"},"content":"    -fx-border-insets: 0;"},{"lineNumber":454,"author":{"gitId":"Hzxin"},"content":"    -fx-border-width: 1;"},{"lineNumber":455,"author":{"gitId":"Hzxin"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":456,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":457,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":458,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":459,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":460,"author":{"gitId":"Hzxin"},"content":"#filterField, #taskListPanel, #taskWebpage {"},{"lineNumber":461,"author":{"gitId":"Hzxin"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":462,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":463,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":464,"author":{"gitId":"Hzxin"},"content":"#resultDisplay .content {"},{"lineNumber":465,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: transparent, #858b97, transparent, #858b97;"},{"lineNumber":466,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 0;"},{"lineNumber":467,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":468,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":469,"author":{"gitId":"Hzxin"},"content":"#tags {"},{"lineNumber":470,"author":{"gitId":"Hzxin"},"content":"    -fx-hgap: 7;"},{"lineNumber":471,"author":{"gitId":"Hzxin"},"content":"    -fx-vgap: 3;"},{"lineNumber":472,"author":{"gitId":"Hzxin"},"content":"}"},{"lineNumber":473,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":474,"author":{"gitId":"Hzxin"},"content":"#tags .label {"},{"lineNumber":475,"author":{"gitId":"Hzxin"},"content":"    -fx-text-fill: white;"},{"lineNumber":476,"author":{"gitId":"Hzxin"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":477,"author":{"gitId":"Hzxin"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":478,"author":{"gitId":"Hzxin"},"content":"    -fx-border-radius: 2;"},{"lineNumber":479,"author":{"gitId":"Hzxin"},"content":"    -fx-background-radius: 2;"},{"lineNumber":480,"author":{"gitId":"Hzxin"},"content":"    -fx-font-size: 11;"},{"lineNumber":481,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":481}},{"path":"src/main/resources/view/turquoise/TurqExtenstions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":".error {"},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":".list-cell:empty {"},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"    /* Empty cells will not have alternating colours */"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"    -fx-background: #66CDAA;"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":".tag-selector {"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 1;"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: white;"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"    -fx-border-radius: 3;"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"    -fx-background-radius: 3;"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":".tooltip-text {"},{"lineNumber":19,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: white;"},{"lineNumber":20,"author":{"gitId":"banchiang"},"content":"}"}],"authorContributionMap":{"banchiang":20}},{"path":"src/main/resources/view/turquoise/TurquoiseTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 20%);"},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"    background-color: #7FFFD4; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":".label {"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":".label-bright {"},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":"    -fx-opacity: 1;"},{"lineNumber":19,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":20,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":21,"author":{"gitId":"banchiang"},"content":".label-header {"},{"lineNumber":22,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":23,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":24,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":25,"author":{"gitId":"banchiang"},"content":"    -fx-opacity: 1;"},{"lineNumber":26,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":27,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":28,"author":{"gitId":"banchiang"},"content":".text-field {"},{"lineNumber":29,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":30,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":31,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":32,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":33,"author":{"gitId":"banchiang"},"content":".tab-pane {"},{"lineNumber":34,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":35,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":36,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":37,"author":{"gitId":"banchiang"},"content":".tab-pane .tab-header-area {"},{"lineNumber":38,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":39,"author":{"gitId":"banchiang"},"content":"    -fx-min-height: 0;"},{"lineNumber":40,"author":{"gitId":"banchiang"},"content":"    -fx-max-height: 0;"},{"lineNumber":41,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":42,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":43,"author":{"gitId":"banchiang"},"content":".table-view {"},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"    -fx-base: #7FFFD4;"},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"    -fx-control-inner-background: #7FFFD4;"},{"lineNumber":46,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #7FFFD4;"},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"    -fx-table-cell-border-color: #66CDAA;"},{"lineNumber":48,"author":{"gitId":"banchiang"},"content":"    -fx-table-cell-border-radius: 20px"},{"lineNumber":49,"author":{"gitId":"banchiang"},"content":"    -fx-table-header-border-color: #66CDAA;"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 5;"},{"lineNumber":51,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":52,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":53,"author":{"gitId":"banchiang"},"content":".table-view .column-header-background {"},{"lineNumber":54,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #66CDAA;"},{"lineNumber":55,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":56,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":57,"author":{"gitId":"banchiang"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":58,"author":{"gitId":"banchiang"},"content":"    -fx-size: 35;"},{"lineNumber":59,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":60,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #66CDAA;"},{"lineNumber":61,"author":{"gitId":"banchiang"},"content":"    -fx-border-color:"},{"lineNumber":62,"author":{"gitId":"banchiang"},"content":"        transparent"},{"lineNumber":63,"author":{"gitId":"banchiang"},"content":"        transparent"},{"lineNumber":64,"author":{"gitId":"banchiang"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":65,"author":{"gitId":"banchiang"},"content":"        transparent;"},{"lineNumber":66,"author":{"gitId":"banchiang"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":67,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":68,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":69,"author":{"gitId":"banchiang"},"content":".table-view .column-header .label {"},{"lineNumber":70,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":71,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":72,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":73,"author":{"gitId":"banchiang"},"content":"    -fx-alignment: center-left;"},{"lineNumber":74,"author":{"gitId":"banchiang"},"content":"    -fx-opacity: 1;"},{"lineNumber":75,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":76,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":77,"author":{"gitId":"banchiang"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":78,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":79,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":80,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":81,"author":{"gitId":"banchiang"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":82,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 20%);"},{"lineNumber":83,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: transparent transparent transparent #66CDAA;"},{"lineNumber":84,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":85,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":86,"author":{"gitId":"banchiang"},"content":".split-pane {"},{"lineNumber":87,"author":{"gitId":"banchiang"},"content":"    -fx-border-radius: 1;"},{"lineNumber":88,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 1;"},{"lineNumber":89,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 20%);"},{"lineNumber":90,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":91,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":92,"author":{"gitId":"banchiang"},"content":".list-view {"},{"lineNumber":93,"author":{"gitId":"banchiang"},"content":"    -fx-background-insets: 0;"},{"lineNumber":94,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 0;"},{"lineNumber":95,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 20%);"},{"lineNumber":96,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":97,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":98,"author":{"gitId":"banchiang"},"content":".list-cell {"},{"lineNumber":99,"author":{"gitId":"banchiang"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"banchiang"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":101,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":102,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":103,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":104,"author":{"gitId":"banchiang"},"content":".list-cell:filled:even {"},{"lineNumber":105,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #66CDAA;"},{"lineNumber":106,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":107,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":108,"author":{"gitId":"banchiang"},"content":".list-cell:filled:odd {"},{"lineNumber":109,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #66CDAA;"},{"lineNumber":110,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":111,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":112,"author":{"gitId":"banchiang"},"content":".list-cell:filled:selected {"},{"lineNumber":113,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":114,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":115,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":116,"author":{"gitId":"banchiang"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":117,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":118,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 1;"},{"lineNumber":119,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":120,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":121,"author":{"gitId":"banchiang"},"content":".list-cell .label {"},{"lineNumber":122,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":123,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":124,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":125,"author":{"gitId":"banchiang"},"content":".cell_big_label {"},{"lineNumber":126,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":127,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 16px;"},{"lineNumber":128,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":129,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":130,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":131,"author":{"gitId":"banchiang"},"content":".cell_small_label {"},{"lineNumber":132,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":133,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 13px;"},{"lineNumber":134,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":135,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":136,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":137,"author":{"gitId":"banchiang"},"content":".stack-pane {"},{"lineNumber":138,"author":{"gitId":"banchiang"},"content":"     -fx-background-color: derive(#7FFFD4, 20%);"},{"lineNumber":139,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":140,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":141,"author":{"gitId":"banchiang"},"content":".pane-with-border {"},{"lineNumber":142,"author":{"gitId":"banchiang"},"content":"     -fx-background-color: derive(#7FFFD4, 20%);"},{"lineNumber":143,"author":{"gitId":"banchiang"},"content":"     -fx-border-radius: 20px"},{"lineNumber":144,"author":{"gitId":"banchiang"},"content":"     -fx-border-color: derive(#7FFFD4, 10%);"},{"lineNumber":145,"author":{"gitId":"banchiang"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":146,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":147,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":148,"author":{"gitId":"banchiang"},"content":".status-bar {"},{"lineNumber":149,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#66CDAA, 30%);"},{"lineNumber":150,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":151,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":152,"author":{"gitId":"banchiang"},"content":".result-display {"},{"lineNumber":153,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #66CDAA;"},{"lineNumber":154,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":155,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":156,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":157,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":158,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":159,"author":{"gitId":"banchiang"},"content":".result-display .label {"},{"lineNumber":160,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":161,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":162,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":163,"author":{"gitId":"banchiang"},"content":".status-bar .label {"},{"lineNumber":164,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":165,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":166,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 4px;"},{"lineNumber":167,"author":{"gitId":"banchiang"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":168,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":169,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":170,"author":{"gitId":"banchiang"},"content":".status-bar-with-border {"},{"lineNumber":171,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":172,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":173,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 1px;"},{"lineNumber":174,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":175,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":176,"author":{"gitId":"banchiang"},"content":".status-bar-with-border .label {"},{"lineNumber":177,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: white;"},{"lineNumber":178,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":179,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":180,"author":{"gitId":"banchiang"},"content":".grid-pane {"},{"lineNumber":181,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 30%);"},{"lineNumber":182,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: derive(#7FFFD4, 30%);"},{"lineNumber":183,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 1px;"},{"lineNumber":184,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":185,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":186,"author":{"gitId":"banchiang"},"content":".grid-pane .stack-pane {"},{"lineNumber":187,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 30%);"},{"lineNumber":188,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":189,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":190,"author":{"gitId":"banchiang"},"content":".context-menu {"},{"lineNumber":191,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 50%);"},{"lineNumber":192,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":193,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":194,"author":{"gitId":"banchiang"},"content":".context-menu .label {"},{"lineNumber":195,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":196,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":197,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":198,"author":{"gitId":"banchiang"},"content":".menu-bar {"},{"lineNumber":199,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 20%);"},{"lineNumber":200,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":201,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":202,"author":{"gitId":"banchiang"},"content":".menu-bar .label {"},{"lineNumber":203,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":204,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":205,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":206,"author":{"gitId":"banchiang"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":207,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":208,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":209,"author":{"gitId":"banchiang"},"content":".menu .left-container {"},{"lineNumber":210,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #20B2AA;"},{"lineNumber":211,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":212,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":213,"author":{"gitId":"banchiang"},"content":"/*"},{"lineNumber":214,"author":{"gitId":"banchiang"},"content":" * Metro style Push Button"},{"lineNumber":215,"author":{"gitId":"banchiang"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":216,"author":{"gitId":"banchiang"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":217,"author":{"gitId":"banchiang"},"content":" */"},{"lineNumber":218,"author":{"gitId":"banchiang"},"content":".button {"},{"lineNumber":219,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":220,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":221,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 2;"},{"lineNumber":222,"author":{"gitId":"banchiang"},"content":"    -fx-background-radius: 0;"},{"lineNumber":223,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #7FFFD4;"},{"lineNumber":224,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":225,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":226,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":227,"author":{"gitId":"banchiang"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":228,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":229,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":230,"author":{"gitId":"banchiang"},"content":".button:hover {"},{"lineNumber":231,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":232,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":233,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":234,"author":{"gitId":"banchiang"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":235,"author":{"gitId":"banchiang"},"content":"  -fx-background-color: white;"},{"lineNumber":236,"author":{"gitId":"banchiang"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":237,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":238,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":239,"author":{"gitId":"banchiang"},"content":".button:focused {"},{"lineNumber":240,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: white, white;"},{"lineNumber":241,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":242,"author":{"gitId":"banchiang"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":243,"author":{"gitId":"banchiang"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":244,"author":{"gitId":"banchiang"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":245,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":246,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":247,"author":{"gitId":"banchiang"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":248,"author":{"gitId":"banchiang"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":249,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":250,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: white;"},{"lineNumber":251,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":252,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":253,"author":{"gitId":"banchiang"},"content":".button:default {"},{"lineNumber":254,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":255,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":256,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":257,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":258,"author":{"gitId":"banchiang"},"content":".button:default:hover {"},{"lineNumber":259,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":260,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":261,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":262,"author":{"gitId":"banchiang"},"content":".dialog-pane {"},{"lineNumber":263,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #7FFFD4;"},{"lineNumber":264,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":265,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":266,"author":{"gitId":"banchiang"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":267,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #7FFFD4;"},{"lineNumber":268,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":269,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":270,"author":{"gitId":"banchiang"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":271,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 14px;"},{"lineNumber":272,"author":{"gitId":"banchiang"},"content":"    -fx-font-weight: bold;"},{"lineNumber":273,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":274,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":275,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":276,"author":{"gitId":"banchiang"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":277,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 25%);"},{"lineNumber":278,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":279,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":280,"author":{"gitId":"banchiang"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":281,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 18px;"},{"lineNumber":282,"author":{"gitId":"banchiang"},"content":"    -fx-font-style: italic;"},{"lineNumber":283,"author":{"gitId":"banchiang"},"content":"    -fx-fill: black;"},{"lineNumber":284,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":285,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":286,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":287,"author":{"gitId":"banchiang"},"content":".scroll-bar {"},{"lineNumber":288,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 20%);"},{"lineNumber":289,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":290,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":291,"author":{"gitId":"banchiang"},"content":".scroll-bar .thumb {"},{"lineNumber":292,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#7FFFD4, 50%);"},{"lineNumber":293,"author":{"gitId":"banchiang"},"content":"    -fx-background-insets: 3;"},{"lineNumber":294,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":295,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":296,"author":{"gitId":"banchiang"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":297,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #66CDAA;"},{"lineNumber":298,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":299,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":300,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":301,"author":{"gitId":"banchiang"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":302,"author":{"gitId":"banchiang"},"content":"    -fx-shape: \" \";"},{"lineNumber":303,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":304,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":305,"author":{"gitId":"banchiang"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":306,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":307,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":308,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":309,"author":{"gitId":"banchiang"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":310,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":311,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":312,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":313,"author":{"gitId":"banchiang"},"content":"#cardPane {"},{"lineNumber":314,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #66CDAA;"},{"lineNumber":315,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 0;"},{"lineNumber":316,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":317,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":318,"author":{"gitId":"banchiang"},"content":"#commandTypeLabel {"},{"lineNumber":319,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 11px;"},{"lineNumber":320,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":321,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":322,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":323,"author":{"gitId":"banchiang"},"content":"#commandTextField {"},{"lineNumber":324,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: transparent #66CDAA transparent #66CDAA;"},{"lineNumber":325,"author":{"gitId":"banchiang"},"content":"    -fx-background-insets: 0;"},{"lineNumber":326,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: #66CDAA #66CDAA #66CDAA #66CDAA;"},{"lineNumber":327,"author":{"gitId":"banchiang"},"content":"    -fx-border-insets: 0;"},{"lineNumber":328,"author":{"gitId":"banchiang"},"content":"    -fx-border-width: 1;"},{"lineNumber":329,"author":{"gitId":"banchiang"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":330,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":331,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":332,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":333,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":334,"author":{"gitId":"banchiang"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":335,"author":{"gitId":"banchiang"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":336,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":337,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":338,"author":{"gitId":"banchiang"},"content":"#resultDisplay .content {"},{"lineNumber":339,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: transparent, #66CDAA, transparent, #66CDAA;"},{"lineNumber":340,"author":{"gitId":"banchiang"},"content":"    -fx-background-radius: 0;"},{"lineNumber":341,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":342,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":343,"author":{"gitId":"banchiang"},"content":"#tags {"},{"lineNumber":344,"author":{"gitId":"banchiang"},"content":"    -fx-hgap: 7;"},{"lineNumber":345,"author":{"gitId":"banchiang"},"content":"    -fx-vgap: 3;"},{"lineNumber":346,"author":{"gitId":"banchiang"},"content":"}"},{"lineNumber":347,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":348,"author":{"gitId":"banchiang"},"content":"#tags .label {"},{"lineNumber":349,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":350,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":351,"author":{"gitId":"banchiang"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":352,"author":{"gitId":"banchiang"},"content":"    -fx-border-radius: 2;"},{"lineNumber":353,"author":{"gitId":"banchiang"},"content":"    -fx-background-radius: 2;"},{"lineNumber":354,"author":{"gitId":"banchiang"},"content":"    -fx-font-size: 11;"},{"lineNumber":355,"author":{"gitId":"banchiang"},"content":"}"}],"authorContributionMap":{"banchiang":355}},{"path":"src/main/resources/view/yellow/YellowExtensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":""},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */"},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"    -fx-background: #FFF380;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":1,"-":19}},{"path":"src/main/resources/view/yellow/YellowTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 20%);"},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":"    background-color: #FFF380; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"banchiang"},"content":"    -fx-base: #FDFD96;"},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"    -fx-control-inner-background: #FDFD96;"},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FDFD96;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"banchiang"},"content":"        -fx-base"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"banchiang"},"content":"     -fx-background-color: derive(#FDFD96, 20%);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"banchiang"},"content":"     -fx-background-color: derive(#FDFD96, 20%);"},{"lineNumber":141,"author":{"gitId":"banchiang"},"content":"     -fx-border-color: derive(#FDFD96, 10%);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":146,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FFF380, 30%);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":153,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":162,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":168,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 30%);"},{"lineNumber":169,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: derive(#FDFD96, 25%);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":174,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":178,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 30%);"},{"lineNumber":179,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: derive(#FDFD96, 30%);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":184,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 30%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":188,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 50%);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":192,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":196,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 20%);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":202,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":207,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FFF380;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":217,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: #FDFD96;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":220,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FDFD96;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":232,"author":{"gitId":"banchiang"},"content":"  -fx-background-color: #FFF380;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":237,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: #FFF380;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":246,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FDFD96;"},{"lineNumber":247,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":251,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FFF380;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":256,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(-fx-focus-color, 20%);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":260,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FDFD96;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":264,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FDFD96;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":270,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":274,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 25%);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":281,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":285,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 20%);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":289,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: derive(#FDFD96, 50%);"},{"lineNumber":290,"author":{"gitId":"banchiang"},"content":"    -fx-background-insets: 3;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":295,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FDFD96;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":297,"author":{"gitId":"-"},"content":"}"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":309,"author":{"gitId":"-"},"content":"}"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":312,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: #FFF380;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":322,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: transparent #FFF380 transparent #FFF380;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":324,"author":{"gitId":"banchiang"},"content":"    -fx-border-color: #FFF380;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":329,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":330,"author":{"gitId":"-"},"content":"}"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":337,"author":{"gitId":"banchiang"},"content":"    -fx-background-color: transparent, #FFF380, transparent, #FFF380;"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":339,"author":{"gitId":"-"},"content":"}"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":344,"author":{"gitId":"-"},"content":"}"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":347,"author":{"gitId":"banchiang"},"content":"    -fx-text-fill: black;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":54,"-":299}},{"path":"src/test/data/JsonRemindMeStorageTest/invalidAndValidPersonRemindMe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Valid Person\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Person With Inv@lid Phone Field\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"-":5}},{"path":"src/test/data/JsonRemindMeStorageTest/invalidPersonRemindMe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"-":4}},{"path":"src/test/data/JsonSerializableRemindMeTest/duplicatePersonRemindMe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":3,"-":7}},{"path":"src/test/data/JsonSerializableRemindMeTest/invalidPersonRemindMe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Hans Must@r\","},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\""},{"lineNumber":5,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"-":4}},{"path":"src/test/data/JsonSerializableRemindMeTest/typicalPersonsRemindMe.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"  \"modules\" : [ {"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"    \"title\" : \"MOD 1\","},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"    \"assignmentList\" : [ ],"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"    \"examList\" : [ ]"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"  } ],"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\","},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"    \"birthday\" : \"1998-12-20\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":8,"Hzxin":4,"-":24}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"        assertNotNull(AppUtil.getImage(\"/images/logo.png\"));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":1,"-":35}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddPersonCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"import seedu.address.storage.JsonRemindMeStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonRemindMeStorage.class);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        JsonRemindMeStorage remindMeStorage \u003d"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"            new JsonRemindMeStorage(temporaryFolder.resolve(\"remindMe.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"        StorageManager storage \u003d new StorageManager(remindMeStorage, userPrefsStorage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"        JsonRemindMeStorage remindMeStorage \u003d"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"            new JsonRemindMeIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionRemindMe.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"        StorageManager storage \u003d new StorageManager(remindMeStorage, userPrefsStorage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"        String addPersonCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + BIRTHDAY_DESC_AMY;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"        assertCommandFailure(addPersonCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":136,"author":{"gitId":"Hzxin"},"content":"        Model expectedModel \u003d new ModelManager(model.getRemindMe(), new UserPrefs());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":167,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"Hzxin"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":169,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"Hzxin"},"content":"    private static class JsonRemindMeIoExceptionThrowingStub extends JsonRemindMeStorage {"},{"lineNumber":171,"author":{"gitId":"Hzxin"},"content":"        private JsonRemindMeIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":172,"author":{"gitId":"Hzxin"},"content":"            super(filePath);"},{"lineNumber":173,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":175,"author":{"gitId":"Hzxin"},"content":"        @Override"},{"lineNumber":176,"author":{"gitId":"Hzxin"},"content":"        public void saveRemindMe(ReadOnlyModulePlanner readOnlyModulePlanner, Path filePath) throws IOException {"},{"lineNumber":177,"author":{"gitId":"Hzxin"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":178,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":4,"Hzxin":30,"-":146}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddPersonCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"        model \u003d new ModelManager(getTypicalRemindMe(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"        Model expectedModel \u003d new ModelManager(model.getRemindMe(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        assertCommandSuccess(new AddPersonCommand(validPerson), model,"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"        Person personInList \u003d model.getRemindMe().getPersonList().get(0);"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":5,"Hzxin":4,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddPersonCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Assignment;"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.TitleContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"public class AddPersonCommandTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"                AddPersonCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addPersonCommand.execute(modelStub));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":62,"author":{"gitId":"maikongeh"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").withBirthday(\"1999-12-12\").build();"},{"lineNumber":63,"author":{"gitId":"maikongeh"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").withBirthday(\"1999-12-12\").build();"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"        public Path getRemindMeFilePath() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitId":"Hzxin"},"content":"        public void setRemindMeFilePath(Path remindMeFilePath) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"markuz5116"},"content":"        public boolean hasModule(Module module) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"jellymias"},"content":"        public boolean hasModule(int index) {"},{"lineNumber":156,"author":{"gitId":"jellymias"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":159,"author":{"gitId":"markuz5116"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"markuz5116"},"content":"        public void addModule(Module module) {"},{"lineNumber":161,"author":{"gitId":"markuz5116"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":164,"author":{"gitId":"maikongeh"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"maikongeh"},"content":"        public void deleteModule(Module module) {"},{"lineNumber":166,"author":{"gitId":"maikongeh"},"content":"            throw new AssertionError(\"This method should not be called\");"},{"lineNumber":167,"author":{"gitId":"maikongeh"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":169,"author":{"gitId":"jellymias"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"jellymias"},"content":"        public boolean hasAssignment(Module module, Assignment assignment) {"},{"lineNumber":171,"author":{"gitId":"jellymias"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":174,"author":{"gitId":"jellymias"},"content":"        @Override"},{"lineNumber":175,"author":{"gitId":"jellymias"},"content":"        public void addAssignment(Module module, Assignment assignment) {"},{"lineNumber":176,"author":{"gitId":"jellymias"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":179,"author":{"gitId":"markuz5116"},"content":"        @Override"},{"lineNumber":180,"author":{"gitId":"jellymias"},"content":"        public boolean hasExam(Module module, Exam exam) {"},{"lineNumber":181,"author":{"gitId":"markuz5116"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":184,"author":{"gitId":"markuz5116"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"jellymias"},"content":"        public void addExam(Module module, Exam exam) {"},{"lineNumber":186,"author":{"gitId":"markuz5116"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":189,"author":{"gitId":"markuz5116"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"Hzxin"},"content":"        public void setRemindMe(ModulePlanner modulePlanner) {"},{"lineNumber":191,"author":{"gitId":"Hzxin"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":194,"author":{"gitId":"Hzxin"},"content":"        @Override"},{"lineNumber":195,"author":{"gitId":"jellymias"},"content":"        public void editModule(int index, Title title) {"},{"lineNumber":196,"author":{"gitId":"markuz5116"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":199,"author":{"gitId":"markuz5116"},"content":"        @Override"},{"lineNumber":200,"author":{"gitId":"Hzxin"},"content":"        public ReadOnlyModulePlanner getRemindMe() {"},{"lineNumber":201,"author":{"gitId":"markuz5116"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":204,"author":{"gitId":"markuz5116"},"content":"        @Override"},{"lineNumber":205,"author":{"gitId":"markuz5116"},"content":"        public void updateFilteredModuleList(TitleContainsKeywordsPredicate predicate) {"},{"lineNumber":206,"author":{"gitId":"markuz5116"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":207,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":209,"author":{"gitId":"markuz5116"},"content":"        @Override"},{"lineNumber":210,"author":{"gitId":"markuz5116"},"content":"        public ObservableList\u003cModule\u003e getFilteredModuleList() {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":45,"Hzxin":9,"jellymias":18,"maikongeh":7,"-":174}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        Model model \u003d new ModelManager(getTypicalRemindMe(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalRemindMe(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"        expectedModel.setRemindMe(new ModulePlanner());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":5,"-":27}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Exam;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    public static final LocalDateTime VALID_DATE \u003d LocalDateTime.of(2021, 03, 15, 23, 59);"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    public static final String VALID_TITLE_CS2103 \u003d \"CS2103\";"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    public static final String VALID_TITLE_CS2101 \u003d \"CS2101\";"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    public static final Exam VALID_EXAM \u003d new Exam(VALID_DATE, new Tag(VALID_TITLE_CS2101));"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    public static final String VALID_EXAM_DATETIME_1 \u003d \"03/05/2021 1300\";"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    public static final String VALID_EXAM_DATETIME_2 \u003d \"06/06/2021 0500\";"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"    public static final String VALID_ASSIGNMENT_DESCRIPTION_1 \u003d \"Assignment 1\";"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    public static final String VALID_ASSIGNMENT_DESCRIPTION_2 \u003d \"Assignment 2\";"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"    public static final ArrayList\u003cExam\u003e VALID_EXAMS_CS2103 \u003d new ArrayList\u003cExam\u003e();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"1999-12-12\";"},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"1999-12-12\";"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":48,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":54,"author":{"gitId":"maikongeh"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"},{"lineNumber":56,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":57,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":69,"author":{"gitId":"maikongeh"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"        VALID_EXAMS_CS2103.add(VALID_EXAM);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner expectedModulePlanner \u003d new ModulePlanner(actualModel.getRemindMe());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":115,"author":{"gitId":"Hzxin"},"content":"        assertEquals(expectedModulePlanner, actualModel.getRemindMe());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":14,"jellymias":1,"Hzxin":5,"maikongeh":11,"-":101}},{"path":"src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeletePersonCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"public class DeletePersonCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    private Model model \u003d new ModelManager(getTypicalRemindMe(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"        Person personToDelete \u003d model.getFilteredPersonList()"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"                .get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"        DeletePersonCommand deleteCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getRemindMe(), new UserPrefs());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"        DeletePersonCommand deleteCommand \u003d new DeletePersonCommand(outOfBoundIndex);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":57,"author":{"gitId":"maikongeh"},"content":"        DeletePersonCommand deleteCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"maikongeh"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"        Model expectedModel \u003d new ModelManager(model.getRemindMe(), new UserPrefs());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRemindMe().getPersonList().size());"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"maikongeh"},"content":"        DeletePersonCommand deleteCommand \u003d new DeletePersonCommand(outOfBoundIndex);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":83,"author":{"gitId":"maikongeh"},"content":"        DeletePersonCommand deleteFirstCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":84,"author":{"gitId":"maikongeh"},"content":"        DeletePersonCommand deleteSecondCommand \u003d new DeletePersonCommand(INDEX_SECOND_PERSON);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":90,"author":{"gitId":"maikongeh"},"content":"        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":5,"banchiang":1,"maikongeh":12,"-":93}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand;"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPersonCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"public class EditPersonCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    private Model model \u003d new ModelManager(getTypicalRemindMe(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"                                new ModulePlanner(model.getRemindMe()), new UserPrefs());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexLastPerson, descriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"                                new ModulePlanner(model.getRemindMe()), new UserPrefs());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"                                new ModulePlanner(model.getRemindMe()), new UserPrefs());"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"jellymias"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"                                new ModulePlanner(model.getRemindMe()), new UserPrefs());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"markuz5116"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":109,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"markuz5116"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":"        Person personInList \u003d model.getRemindMe().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":120,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"markuz5116"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":130,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex, descriptor);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"markuz5116"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":144,"author":{"gitId":"Hzxin"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRemindMe().getPersonList().size());"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex,"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"markuz5116"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":154,"author":{"gitId":"markuz5116"},"content":"        final EditPersonCommand standardCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":171,"author":{"gitId":"markuz5116"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":174,"author":{"gitId":"markuz5116"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":28,"Hzxin":9,"jellymias":6,"-":134}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jellymias":1,"-":42}},{"path":"src/test/java/seedu/address/logic/commands/FindPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.CARL;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.ELLE;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.FIONA;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.findcommand.FindPersonCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"public class FindPersonCommandTest {"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    private Model model \u003d new ModelManager(getTypicalRemindMe(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalRemindMe(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":8,"Hzxin":6,"-":70}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        model \u003d new ModelManager(getTypicalRemindMe(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"        expectedModel \u003d new ModelManager(model.getRemindMe(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":3,"-":36}},{"path":"src/test/java/seedu/address/logic/parser/AddPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.AMY;"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddPersonCommand;"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.addcommandparser.AddPersonCommandParser;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"public class AddPersonCommandParserTest {"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withBirthday(\"1999-12-12\").withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":44,"author":{"gitId":"maikongeh"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + BIRTHDAY_DESC_AMY"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":48,"author":{"gitId":"maikongeh"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withBirthday(\"1999-12-12\")"},{"lineNumber":49,"author":{"gitId":"maikongeh"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddPersonCommand(expectedPersonMultipleTags));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":58,"author":{"gitId":"maikongeh"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + BIRTHDAY_DESC_AMY,"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"                new AddPersonCommand(expectedPerson));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":67,"author":{"gitId":"maikongeh"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + BIRTHDAY_DESC_BOB,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":71,"author":{"gitId":"maikongeh"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_BIRTHDAY_BOB,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":78,"author":{"gitId":"maikongeh"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + BIRTHDAY_DESC_BOB"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":82,"author":{"gitId":"maikongeh"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"        // invalid value reported"},{"lineNumber":86,"author":{"gitId":"maikongeh"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + BIRTHDAY_DESC_BOB,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":90,"author":{"gitId":"maikongeh"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + BIRTHDAY_DESC_BOB"},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":10,"Hzxin":3,"jellymias":2,"maikongeh":16,"-":63}},{"path":"src/test/java/seedu/address/logic/parser/DeletePersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeletePersonCommand;"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"import seedu.address.logic.parser.deletecommandparser.DeletePersonCommandParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":"public class DeletePersonCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":"    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"        assertParseSuccess(parser, \"1\", new DeletePersonCommand(INDEX_FIRST_PERSON));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"                DeletePersonCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"banchiang":1,"maikongeh":6,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/EditPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand;"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.parser.editcommandparser.EditPersonCommandParser;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"public class EditPersonCommandParserTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"                + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":100,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitId":"markuz5116"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"        String userInput \u003d targetIndex.getOneBased()"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_FRIEND"},{"lineNumber":115,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"markuz5116"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":118,"author":{"gitId":"markuz5116"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":120,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":131,"author":{"gitId":"markuz5116"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":15,"jellymias":5,"-":115}},{"path":"src/test/java/seedu/address/logic/parser/FindPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.findcommand.FindPersonCommand;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.parser.findcommandparser.FindPersonCommandParser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"public class FindPersonCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"                FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    public void parse_validArgs_returnsFindPersonCommand() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        FindPersonCommand expectedFindPersonCommand \u003d"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"        assertParseSuccess(parser, \" n/Alice Bob\", expectedFindPersonCommand);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"        assertParseSuccess(parser, \" n/\\n Alice \\n \\t Bob  \\t\", expectedFindPersonCommand);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":11,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/RemindMeParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.CalendarCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddPersonCommand;"},{"lineNumber":22,"author":{"gitId":"banchiang"},"content":"import seedu.address.logic.commands.deletecommand.DeletePersonCommand;"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.findcommand.FindPersonCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"banchiang"},"content":"public class RemindMeParserTest {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"banchiang"},"content":"    private final RemindMeParser remindMeParser \u003d new RemindMeParser();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":37,"author":{"gitId":"banchiang"},"content":"        AddPersonCommand command \u003d (AddPersonCommand)"},{"lineNumber":38,"author":{"gitId":"banchiang"},"content":"                remindMeParser.parseCommand(PersonUtil.getaddPersonCommand(person));"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        assertEquals(new AddPersonCommand(person), command);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":45,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":"        DeletePersonCommand command \u003d (DeletePersonCommand) remindMeParser.parseCommand("},{"lineNumber":51,"author":{"gitId":"maikongeh"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":52,"author":{"gitId":"maikongeh"},"content":"        assertEquals(new DeletePersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":59,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":60,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":61,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(ExitCommand.COMMAND_CHAR) instanceof ExitCommand);"},{"lineNumber":62,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(ExitCommand.COMMAND_CHAR + \" 3\") instanceof ExitCommand);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":68,"author":{"gitId":"banchiang"},"content":"        FindPersonCommand command \u003d (FindPersonCommand) remindMeParser.parseCommand("},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"                FindPersonCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        assertEquals(new FindPersonCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":75,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":76,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":77,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(HelpCommand.COMMAND_CHAR) instanceof HelpCommand);"},{"lineNumber":78,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(HelpCommand.COMMAND_CHAR + \" 3\") instanceof HelpCommand);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":83,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":84,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"banchiang"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"banchiang"},"content":"    public void parseCommand_calender() throws Exception {"},{"lineNumber":89,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(CalendarCommand.COMMAND_WORD) instanceof CalendarCommand);"},{"lineNumber":90,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(CalendarCommand.COMMAND_WORD + \" 3\") instanceof CalendarCommand);"},{"lineNumber":91,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(CalendarCommand.COMMAND_CHAR) instanceof CalendarCommand);"},{"lineNumber":92,"author":{"gitId":"banchiang"},"content":"        assertTrue(remindMeParser.parseCommand(CalendarCommand.COMMAND_CHAR + \" 3\") instanceof CalendarCommand);"},{"lineNumber":93,"author":{"gitId":"banchiang"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":98,"author":{"gitId":"banchiang"},"content":"            -\u003e remindMeParser.parseCommand(\"\"));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":103,"author":{"gitId":"banchiang"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"},{"lineNumber":104,"author":{"gitId":"banchiang"},"content":"            -\u003e remindMeParser.parseCommand(\"unknownCommand\"));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":5,"banchiang":30,"maikongeh":4,"-":67}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.ALICE;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    private final ModulePlanner remindMe \u003d new ModulePlanner();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"        assertEquals(Collections.emptyList(), remindMe.getPersonList());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e remindMe.resetData(null));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    public void resetData_withValidReadOnlyRemindMe_replacesData() {"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner newData \u003d getTypicalRemindMe();"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"        remindMe.resetData(newData);"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"        assertEquals(newData, remindMe);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"        RemindMeStub newData \u003d new RemindMeStub(newPersons, new ArrayList\u003c\u003e());"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e remindMe.resetData(newData));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e remindMe.hasPerson(null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        assertFalse(remindMe.hasPerson(ALICE));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"        remindMe.addPerson(ALICE);"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"        assertTrue(remindMe.hasPerson(ALICE));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"        remindMe.addPerson(ALICE);"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"        assertTrue(remindMe.hasPerson(editedAlice));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e remindMe.getPersonList().remove(0));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"Hzxin"},"content":"     * A stub ReadOnlyModulePlanner whose persons list can violate interface constraints."},{"lineNumber":106,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Hzxin"},"content":"    private static class RemindMeStub implements ReadOnlyModulePlanner {"},{"lineNumber":108,"author":{"gitId":"Hzxin"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":"        RemindMeStub(Collection\u003cPerson\u003e persons, Collection\u003cModule\u003e modules) {"},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":"            this.persons.setAll(persons);"},{"lineNumber":112,"author":{"gitId":"Hzxin"},"content":"            this.modules.setAll(modules);"},{"lineNumber":113,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":115,"author":{"gitId":"Hzxin"},"content":"        @Override"},{"lineNumber":116,"author":{"gitId":"Hzxin"},"content":"        public ObservableList\u003cModule\u003e getModuleList() {"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":"            return modules;"},{"lineNumber":118,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":120,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":121,"author":{"gitId":"Hzxin"},"content":"        @Override"},{"lineNumber":122,"author":{"gitId":"Hzxin"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":"            return persons;"},{"lineNumber":124,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"Hzxin":44,"-":80}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.ALICE;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"import seedu.address.testutil.RemindMeBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        assertEquals(new ModulePlanner(), new ModulePlanner(modelManager.getRemindMe()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"    public void setRemindMeFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setRemindMeFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"    public void setRemindMeFilePath_validPath_setsRemindMeFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"        modelManager.setRemindMeFilePath(path);"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"        assertEquals(path, modelManager.getRemindMeFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner modulePlanner \u003d new RemindMeBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner differentModulePlanner \u003d new ModulePlanner();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"Hzxin"},"content":"        modelManager \u003d new ModelManager(modulePlanner, userPrefs);"},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(modulePlanner, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentModulePlanner, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"Hzxin"},"content":"        assertFalse(modelManager.equals(new ModelManager(modulePlanner, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"Hzxin"},"content":"        assertFalse(modelManager.equals(new ModelManager(modulePlanner, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":16,"-":116}},{"path":"src/test/java/seedu/address/model/module/AssignmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"public class AssignmentListTest {"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    private Description description1 \u003d new Description(\"test 1\");"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    private Description description2 \u003d new Description(\"test 2\");"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"    private LocalDateTime date1 \u003d LocalDateTime.parse(\"11/12/2021 1900\","},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"    private LocalDateTime date2 \u003d LocalDateTime.parse(\"12/12/2021 1900\","},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    private Tag tag \u003d new Tag(\"CS2103\");"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    private Assignment assignment1 \u003d new Assignment(description1, date1, tag);"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    private Assignment assignment2 \u003d new Assignment(description2, date2, tag);"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    private List\u003cAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    public void add() {"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        AssignmentList list \u003d new AssignmentList();"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"        list.add(assignment1);"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        list.add(assignment2);"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"        // size of list is 2"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"        assertTrue(list.size() \u003d\u003d 2);"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        // assignment at index 0 is assignment1"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        assertTrue(list.get(0).equals(assignment1));"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        assertFalse(list.get(0).equals(assignment2));"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        // assignment at index 1 is assignment2"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        assertTrue(list.get(1).equals(assignment2));"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"        assertFalse(list.get(1).equals(assignment1));"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        // AssignmentList created using different constructors, same attributes -\u003e return true"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"        assignments.add(assignment1);"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"        assignments.add(assignment2);"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.equals(new AssignmentList(assignments)));"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    public void equals() {"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"        AssignmentList list \u003d new AssignmentList();"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment1);"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment2);"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        // same instance -\u003e return true"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.equals(list));"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.equals(null));"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"        // different instance -\u003e return false"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.equals(2));"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"        // different list size -\u003e return false"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"        AssignmentList list2 \u003d new AssignmentList();"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"        list2.add(assignment2);"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.equals(list2));"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"        // different sequence -\u003e return false"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"        list2.add(assignment1);"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.equals(list2));"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        // different assignments -\u003e return false"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"        Assignment assignment3 \u003d new Assignment(description2, date1, tag);"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"        list2.delete(0);"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"        list2.add(assignment3);"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.equals(list2));"},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"        // same attributes -\u003e return true"},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"        list2.delete(1);"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"        list2.add(assignment2);"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.equals(list2));"},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":88,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"jellymias"},"content":"    public void delete() {"},{"lineNumber":90,"author":{"gitId":"jellymias"},"content":"        AssignmentList list \u003d new AssignmentList();"},{"lineNumber":91,"author":{"gitId":"jellymias"},"content":"        list.add(assignment1);"},{"lineNumber":92,"author":{"gitId":"jellymias"},"content":"        list.add(assignment2);"},{"lineNumber":93,"author":{"gitId":"jellymias"},"content":"        Assignment deleted \u003d list.delete(1);"},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":95,"author":{"gitId":"jellymias"},"content":"        // size of list is 1"},{"lineNumber":96,"author":{"gitId":"jellymias"},"content":"        assertTrue(list.size() \u003d\u003d 1);"},{"lineNumber":97,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":98,"author":{"gitId":"jellymias"},"content":"        // deleted assignment is assignment2"},{"lineNumber":99,"author":{"gitId":"jellymias"},"content":"        assertTrue(deleted.equals(assignment2));"},{"lineNumber":100,"author":{"gitId":"jellymias"},"content":"        assertFalse(deleted.equals(assignment1));"},{"lineNumber":101,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":102,"author":{"gitId":"jellymias"},"content":"        // assignment in list is assignment1"},{"lineNumber":103,"author":{"gitId":"jellymias"},"content":"        assertTrue(list.get(0).equals(assignment1));"},{"lineNumber":104,"author":{"gitId":"jellymias"},"content":"        assertFalse(list.get(0).equals(assignment2));"},{"lineNumber":105,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":106,"author":{"gitId":"jellymias"},"content":"        // no other assignment in list"},{"lineNumber":107,"author":{"gitId":"jellymias"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e list.get(1));"},{"lineNumber":108,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":109,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment2);"},{"lineNumber":110,"author":{"gitId":"markuz5116"},"content":"        deleted \u003d list.delete(assignment1);"},{"lineNumber":111,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":112,"author":{"gitId":"markuz5116"},"content":"        // deleted assignment is assignment 2 -\u003e returns true"},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"        assertTrue(assignment1.equals(deleted));"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":115,"author":{"gitId":"markuz5116"},"content":"        // size of list is 1 -\u003e return true"},{"lineNumber":116,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.size() \u003d\u003d 1);"},{"lineNumber":117,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":118,"author":{"gitId":"markuz5116"},"content":"        // remaining assignment in list is assignment 1 -\u003e returns true"},{"lineNumber":119,"author":{"gitId":"markuz5116"},"content":"        assertTrue(assignment2.equals(list.get(0)));"},{"lineNumber":120,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":122,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"markuz5116"},"content":"    public void getIndex() {"},{"lineNumber":124,"author":{"gitId":"markuz5116"},"content":"        AssignmentList list \u003d new AssignmentList();"},{"lineNumber":125,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":126,"author":{"gitId":"markuz5116"},"content":"        // empty list -\u003e returns -1"},{"lineNumber":127,"author":{"gitId":"markuz5116"},"content":"        assertEquals(-1, list.getIndex(assignment1));"},{"lineNumber":128,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":129,"author":{"gitId":"markuz5116"},"content":"        // list containing assignment at index 0 with list size 1-\u003e returns 0"},{"lineNumber":130,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment1);"},{"lineNumber":131,"author":{"gitId":"markuz5116"},"content":"        assertEquals(list.getIndex(assignment1), 0);"},{"lineNumber":132,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.getIndex(assignment1) !\u003d 0);"},{"lineNumber":133,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":134,"author":{"gitId":"markuz5116"},"content":"        // list does not contain assignment -\u003e returns -1"},{"lineNumber":135,"author":{"gitId":"markuz5116"},"content":"        assertEquals(-1, list.getIndex(assignment2));"},{"lineNumber":136,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":137,"author":{"gitId":"markuz5116"},"content":"        // list contains assignment at index 1 -\u003e returns 1"},{"lineNumber":138,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment2);"},{"lineNumber":139,"author":{"gitId":"markuz5116"},"content":"        assertEquals(1, list.getIndex(assignment2));"},{"lineNumber":140,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":141,"author":{"gitId":"markuz5116"},"content":"        // list contains assignment at index 0 -\u003e returns 0"},{"lineNumber":142,"author":{"gitId":"markuz5116"},"content":"        assertEquals(0, list.getIndex(assignment1));"},{"lineNumber":143,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":144,"author":{"gitId":"markuz5116"},"content":"        // list updated such that assignment is at index 0 -\u003e returns 0"},{"lineNumber":145,"author":{"gitId":"markuz5116"},"content":"        list.delete(0);"},{"lineNumber":146,"author":{"gitId":"markuz5116"},"content":"        assertEquals(0, list.getIndex(assignment2));"},{"lineNumber":147,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":149,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"markuz5116"},"content":"    public void contains() {"},{"lineNumber":151,"author":{"gitId":"markuz5116"},"content":"        AssignmentList list \u003d new AssignmentList();"},{"lineNumber":152,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":153,"author":{"gitId":"markuz5116"},"content":"        // list is empty -\u003e return false"},{"lineNumber":154,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.contains(assignment1));"},{"lineNumber":155,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":156,"author":{"gitId":"markuz5116"},"content":"        // list contains assignment -\u003e returns true"},{"lineNumber":157,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment1);"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.contains(assignment1));"},{"lineNumber":159,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":160,"author":{"gitId":"markuz5116"},"content":"        // list doesn\u0027t contain assignment -\u003e return false"},{"lineNumber":161,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.contains(assignment2));"},{"lineNumber":162,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":163,"author":{"gitId":"markuz5116"},"content":"        // list with multiple assignments"},{"lineNumber":164,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment2);"},{"lineNumber":165,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":166,"author":{"gitId":"markuz5116"},"content":"        // list contains assignment -\u003e return true"},{"lineNumber":167,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.contains(assignment1));"},{"lineNumber":168,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.contains(assignment2));"},{"lineNumber":169,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":170,"author":{"gitId":"markuz5116"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.contains(null));"},{"lineNumber":172,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":174,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"markuz5116"},"content":"    public void getAssignment() {"},{"lineNumber":176,"author":{"gitId":"markuz5116"},"content":"        AssignmentList list \u003d new AssignmentList();"},{"lineNumber":177,"author":{"gitId":"markuz5116"},"content":"        List\u003cAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":178,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":179,"author":{"gitId":"markuz5116"},"content":"        // empty list -\u003e returns true"},{"lineNumber":180,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.getAssignments().equals(assignments));"},{"lineNumber":181,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":182,"author":{"gitId":"markuz5116"},"content":"        // null -\u003e returns false"},{"lineNumber":183,"author":{"gitId":"markuz5116"},"content":"        assertFalse(list.getAssignments().equals(null));"},{"lineNumber":184,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":185,"author":{"gitId":"markuz5116"},"content":"        // list return is instance of List class -\u003e return true"},{"lineNumber":186,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.getAssignments() instanceof List);"},{"lineNumber":187,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":188,"author":{"gitId":"markuz5116"},"content":"        // list returned is the same -\u003e returns true"},{"lineNumber":189,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment1);"},{"lineNumber":190,"author":{"gitId":"markuz5116"},"content":"        list.add(assignment2);"},{"lineNumber":191,"author":{"gitId":"markuz5116"},"content":"        assignments.add(assignment1);"},{"lineNumber":192,"author":{"gitId":"markuz5116"},"content":"        assignments.add(assignment2);"},{"lineNumber":193,"author":{"gitId":"markuz5116"},"content":"        assertTrue(list.getAssignments().equals(assignments));"},{"lineNumber":194,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"markuz5116":133,"jellymias":57,"Hzxin":5}},{"path":"src/test/java/seedu/address/model/module/AssignmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"public class AssignmentTest {"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    private Description description1 \u003d new Description(\"test 1\");"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    private Description description2 \u003d new Description(\"test 2\");"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"    private LocalDateTime date1 \u003d LocalDateTime.parse(\"11/12/2021 1900\","},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"                                                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    private LocalDateTime date2 \u003d LocalDateTime.parse(\"12/12/2021 1900\","},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"                                                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    private Tag tag \u003d new Tag(\"CS2103\");"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    private Assignment assignment \u003d new Assignment(description1, date1, tag);"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    private Assignment editedAssignmentDiffDate \u003d new Assignment(description1, date2, tag);"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    private Assignment editedAssignmentDiffDescription \u003d new Assignment(description2, date1, tag);"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    private Assignment diffAssignment \u003d new Assignment(description2, date2, tag);"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Assignment(null, date1, tag)); // null description"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Assignment(description1, null, tag)); // null date"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Assignment(null, null, tag)); // both null"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"    public void isSameAssignment() {"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"        // same object -\u003e returns true"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"        assertTrue(assignment.isSameAssignment(assignment));"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        assertFalse(assignment.isSameAssignment(null));"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        // same description different date -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        assertFalse(assignment.isSameAssignment(editedAssignmentDiffDate));"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        // same date different description -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"        assertFalse(assignment.isSameAssignment(editedAssignmentDiffDescription));"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"        // different assignment -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"        assertFalse(assignment.isSameAssignment(diffAssignment));"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"    public void equals() {"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"        Assignment assignmentCopy \u003d new Assignment(description1, date1, tag);"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"        assertTrue(assignment.equals(assignmentCopy));"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"        assertTrue(assignment.equals(assignment));"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.equals(null));"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"        // different type -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.equals(5));"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"        // different assignment -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.equals(diffAssignment));"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        // different description -\u003e return false"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.equals(editedAssignmentDiffDescription));"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"        // different date -\u003e return false"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.equals(editedAssignmentDiffDate));"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"    public void testToString() {"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"        // same object -\u003e returns true"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"        assertTrue(assignment.toString().equals(assignment.toString()));"},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.toString().equals(null));"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"        // different assignments -\u003e return false"},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.toString().equals(diffAssignment));"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"        // different description -\u003e return false"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.toString().equals(editedAssignmentDiffDescription.toString()));"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"        // different date -\u003e return false"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"        assertFalse(assignment.toString().equals(editedAssignmentDiffDate.toString()));"},{"lineNumber":93,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"markuz5116":34,"jellymias":54,"Hzxin":6}},{"path":"src/test/java/seedu/address/model/module/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"public class DescriptionTest {"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    public void constructor_invalidDescription_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"        String invalidDescription \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"    public void isValidDescription() {"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        // null description"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        // invalid description"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty string"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        // valid description"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        assertTrue(Description.isValidDescription(\"tp submission\")); // alphabets only"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"        assertTrue(Description.isValidDescription(\"2103\")); // numbers only"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        assertTrue(Description.isValidDescription(\"CS2103T\")); // alphanumeric characters"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"        assertTrue(Description.isValidDescription(\"Software Engineering\")); // with capital letters"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"        assertTrue(Description.isValidDescription(\"tp v1.2\")); // non-alphanumeric characters"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"        assertTrue(Description.isValidDescription("},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"                \"CS2103T Software Engineering submission tp v1.2!!!\")); // long description"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":39}},{"path":"src/test/java/seedu/address/model/module/ModuleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_DESCRIPTION_1;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_DESCRIPTION_2;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_DATETIME_1;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_DATETIME_2;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS2101;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS2103;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.testutil.TypicalRemindMe.MOD_1;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.testutil.TypicalRemindMe.MOD_2;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"import seedu.address.testutil.typicalmodules.ModuleBuilder;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"public class ModuleTest {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    public void isSameModule() {"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"        // same instance -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        assertTrue(MOD_1.isSameModule(MOD_1));"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"        // null -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.isSameModule(null));"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        // same title, all other attributes are different -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"        Module moduleCompared \u003d new ModuleBuilder(MOD_1)"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"                .withAssignments(VALID_ASSIGNMENT_DESCRIPTION_1, VALID_ASSIGNMENT_DESCRIPTION_2)"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"                .withExams(VALID_EXAM_DATETIME_1, VALID_EXAM_DATETIME_2).build();"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        assertTrue(MOD_1.isSameModule(moduleCompared));"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        // different title, but all other attributes are similar -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        moduleCompared \u003d new ModuleBuilder(MOD_1).withTitle(VALID_TITLE_CS2101).build();"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.isSameModule(moduleCompared));"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        // title is lowered case, all other attributes are the same -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        moduleCompared \u003d new ModuleBuilder(MOD_1)"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"                .withTitle(VALID_TITLE_CS2103.toLowerCase()).build();"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.isSameModule(moduleCompared));"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"        // title has whitespaces trailing, all other attributes are the same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        String titleWithTrailingSpaces \u003d VALID_TITLE_CS2103 + \"    \";"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"        moduleCompared \u003d new ModuleBuilder(MOD_1).withTitle(titleWithTrailingSpaces).build();"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.isSameModule(moduleCompared));"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"    public void equals() {"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"        // same instance -\u003e returns true"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"        assertTrue(MOD_1.equals(MOD_1));"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"        // same attributes -\u003e returns true"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"        Module moduleCompared \u003d new ModuleBuilder(MOD_1).build();"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"        assertTrue(MOD_1.equals(moduleCompared));"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.equals(null));"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"        // different class -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.equals(\"HI\"));"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"        // different module -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.equals(MOD_2));"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"        // different title -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"        moduleCompared \u003d new ModuleBuilder(MOD_1).withTitle(VALID_TITLE_CS2101).build();"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.equals(moduleCompared));"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        // different assignments -\u003e return false"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"        moduleCompared \u003d new ModuleBuilder(MOD_1)"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"                .withAssignments(VALID_ASSIGNMENT_DESCRIPTION_1).build();"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.equals(moduleCompared));"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        // different exams -\u003e return false"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"        moduleCompared \u003d new ModuleBuilder(MOD_1)"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"                .withExams(VALID_EXAM_DATETIME_1).build();"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"        assertFalse(MOD_1.equals(moduleCompared));"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":81}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"public class BirthdayTest {"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"    public void constructor_invalidBirthday_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"        String invalidBirthday \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e new Birthday(invalidBirthday));"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":"    public void isValidBirthday() {"},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"        // null birthday"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":"        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthday(null));"},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"        // blank email"},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\"\")); // empty string"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"        // missing parts"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\"1999-12\")); // missing local part"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\"1999\")); // missing local part"},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\"-12-15\")); // missing local part"},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":38,"author":{"gitId":"maikongeh"},"content":"        // invalid parts"},{"lineNumber":39,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\"abcde\")); // invalid input. Should be all int"},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\"@@@@\")); //invalid input. Should not have special characters"},{"lineNumber":41,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\"12-12-1998\")); // invalid ordering. Should be YYYY-MM-DD"},{"lineNumber":42,"author":{"gitId":"maikongeh"},"content":"        assertFalse(Birthday.isValidBirthday(\"1999/12/12\")); // invalid formatting. use - instead of /"},{"lineNumber":43,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        // valid birthdays"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"        assertTrue(Birthday.isValidBirthday(\"1999-12-12\"));"},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":"        assertTrue(Birthday.isValidBirthday(\"2000-10-10\")); // minimal"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"        assertTrue(Birthday.isValidBirthday(\"1985-12-15\")); // alphabets only"},{"lineNumber":48,"author":{"gitId":"maikongeh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"maikongeh"},"content":"}"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":""}],"authorContributionMap":{"markuz5116":7,"maikongeh":43}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        // Keywords does not match name"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\"));"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\")"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"                .build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":4,"-":71}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":41,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"maikongeh":2,"-":40}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.ALICE;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"Hzxin":2,"-":72}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.ALICE;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"Hzxin":2,"-":165}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"1999-16-16\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_BIRTHDAY, VALID_TAGS);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_BIRTHDAY, VALID_TAGS);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDAY, invalidTags);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":1,"maikongeh":6,"-":52}},{"path":"src/test/java/seedu/address/storage/JsonRemindMeStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.ALICE;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.HOON;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.IDA;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"public class JsonRemindMeStorageTest {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRemindMeStorageTest\");"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    public void readRemindMe_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e readRemindMe(null));"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    private java.util.Optional\u003cReadOnlyModulePlanner\u003e readRemindMe(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"        return new JsonRemindMeStorage(Paths.get(filePath)).readRemindMe(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"        assertFalse(readRemindMe(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"        assertThrows(DataConversionException.class, () -\u003e readRemindMe(\"notJsonFormatRemindMe.json\"));"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"    public void readRemindMe_invalidPersonRemindMe_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"        assertThrows(DataConversionException.class, () -\u003e readRemindMe(\"invalidPersonRemindMe.json\"));"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"    public void readRemindMe_invalidAndValidPersonRemindMe_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"        assertThrows(DataConversionException.class, () -\u003e readRemindMe(\"invalidAndValidPersonRemindMe.json\"));"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"    public void readAndSaveRemindMe_allInOrder_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner original \u003d getTypicalRemindMe();"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"        JsonRemindMeStorage jsonRemindMeStorage \u003d new JsonRemindMeStorage(filePath);"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"        // Save in new file and read back"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"        jsonRemindMeStorage.saveRemindMe(original, filePath);"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"        ReadOnlyModulePlanner readBack \u003d jsonRemindMeStorage.readRemindMe(filePath).get();"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"        assertEquals(original, new ModulePlanner(readBack));"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"        original.addPerson(HOON);"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"        original.removePerson(ALICE);"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"        jsonRemindMeStorage.saveRemindMe(original, filePath);"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"        readBack \u003d jsonRemindMeStorage.readRemindMe(filePath).get();"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"        assertEquals(original, new ModulePlanner(readBack));"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"        // Save and read without specifying file path"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"        original.addPerson(IDA);"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"        jsonRemindMeStorage.saveRemindMe(original); // file path not specified"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"        readBack \u003d jsonRemindMeStorage.readRemindMe().get(); // file path not specified"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"        assertEquals(original, new ModulePlanner(readBack));"},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"    public void saveRemindMe_nullRemindMe_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveRemindMe(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":"    private void saveRemindMe(ReadOnlyModulePlanner modulePlanner, String filePath) {"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"            new JsonRemindMeStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":"                    .saveRemindMe(modulePlanner, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"Hzxin"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"Hzxin"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":106,"author":{"gitId":"Hzxin"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"Hzxin"},"content":"    public void saveRemindMe_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"Hzxin"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveRemindMe(new ModulePlanner(), null));"},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":110}},{"path":"src/test/java/seedu/address/storage/JsonSerializableRemindMeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.testutil.TypicalRemindMe;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"public class JsonSerializableRemindMeTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRemindMeTest\");"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsRemindMe.json\");"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonRemindMe.json\");"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonRemindMe.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        JsonSerializableRemindMe dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"            JsonSerializableRemindMe.class).get();"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner remindMeFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner typicalPersonsRemindMe \u003d TypicalRemindMe.getTypicalRemindMe();"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        assertEquals(remindMeFromFile, typicalPersonsRemindMe);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":12,"-":35}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import static seedu.address.testutil.TypicalRemindMe.getTypicalRemindMe;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ReadOnlyModulePlanner;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"        JsonRemindMeStorage remindMeStorage \u003d new JsonRemindMeStorage(getTempFilePath(\"rm\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        storageManager \u003d new StorageManager(remindMeStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"    public void remindMeReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner original \u003d getTypicalRemindMe();"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"        storageManager.saveRemindMe(original);"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"        ReadOnlyModulePlanner retrieved \u003d storageManager.readRemindMe().get();"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"        assertEquals(original, new ModulePlanner(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"        assertNotNull(storageManager.getRemindMeFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":11,"-":57}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"        descriptor.setBirthday(person.getBirthday());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"maikongeh"},"content":"     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"maikongeh"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {"},{"lineNumber":50,"author":{"gitId":"maikongeh"},"content":"        descriptor.setBirthday(new Birthday(birthday));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jellymias":1,"maikongeh":5,"-":61}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"1999-12-12\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"    private Birthday birthday;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":38,"author":{"gitId":"maikongeh"},"content":"        birthday \u003d personToCopy.getBirthday();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"maikongeh"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"maikongeh"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":54,"author":{"gitId":"maikongeh"},"content":"        this.birthday \u003d new Birthday(birthday);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":67,"author":{"gitId":"maikongeh"},"content":"        return new Person(name, birthday, tags);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"maikongeh":9,"-":61}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.addcommand.AddPersonCommand;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"import seedu.address.logic.commands.editcommand.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    public static String getaddPersonCommand(Person person) {"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"        sb.append(PREFIX_BIRTHDAY + person.getBirthday().toString() + \" \");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":34,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":45,"author":{"gitId":"maikongeh"},"content":"        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY)"},{"lineNumber":46,"author":{"gitId":"maikongeh"},"content":"                .append(birthday.toString()).append(\" \"));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"maikongeh"},"content":"        System.out.println(\"HELLO LOOK AT ME\" + sb.toString());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":3,"jellymias":1,"maikongeh":5,"-":49}},{"path":"src/test/java/seedu/address/testutil/RemindMeBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"public class RemindMeBuilder {"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"    private ModulePlanner modulePlanner;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    public RemindMeBuilder() {"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"        modulePlanner \u003d new ModulePlanner();"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    public RemindMeBuilder(ModulePlanner modulePlanner) {"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"        this.modulePlanner \u003d modulePlanner;"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    public RemindMeBuilder withPerson(Person person) {"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"        modulePlanner.addPerson(person);"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        return this;"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"     * Adds a new {@code Module} to the {@code RemindMe} that we are building."},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    public RemindMeBuilder withModule(Module module) {"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        modulePlanner.addModule(module);"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        return this;"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    public ModulePlanner build() {"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"        return modulePlanner;"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":43}},{"path":"src/test/java/seedu/address/testutil/TypicalRemindMe.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_DESCRIPTION_1;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_DESCRIPTION_2;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_DATETIME_1;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_DATETIME_2;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.ModulePlanner;"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"import seedu.address.testutil.typicalmodules.ModuleBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"public class TypicalRemindMe {"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    public static final Module MOD_1 \u003d new ModuleBuilder().withTitle(\"MOD 1\").build();"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    public static final Module MOD_2 \u003d new ModuleBuilder().withTitle(\"MOD 2\").emptyBuild();"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    public static final Module MOD_1_WITH_ASSIGNMENTS \u003d"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"            new ModuleBuilder()"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"                    .withTitle(\"MOD 1\")"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"                    .withAssignments(VALID_ASSIGNMENT_DESCRIPTION_1, VALID_ASSIGNMENT_DESCRIPTION_2)"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"                    .build();"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    public static final Module MOD_1_WITH_EXAMS \u003d"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"            new ModuleBuilder()"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"                    .withTitle(\"MOD 1\")"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"                    .withExams(VALID_EXAM_DATETIME_1, VALID_EXAM_DATETIME_2)"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"                    .build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"            .build();"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"            .build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"    private TypicalRemindMe() {} // prevents instantiation"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"    public static ModulePlanner getTypicalRemindMe() {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"        ModulePlanner mp \u003d new ModulePlanner();"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"        mp.addModule(MOD_1);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"            mp.addPerson(person);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"        return mp;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":28,"Hzxin":19,"-":41}},{"path":"src/test/java/seedu/address/testutil/typicalmodules/ModuleBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.testutil.typicalmodules;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.AssignmentList;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.ExamList;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.module.Title;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":" * Helps with building Module Objects."},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"public class ModuleBuilder {"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    public static final String DEFAULT_TITLE \u003d \"CS2103\";"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    private Title title;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    private AssignmentList assignments;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    private ExamList exams;"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"     * Creates a {@code ModuleBuilder} with the default details."},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    public ModuleBuilder() {"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        title \u003d new Title(DEFAULT_TITLE);"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"        assignments \u003d new AssignmentList();"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"        exams \u003d new ExamList();"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"     * Creates a ModuleBuilder wit the data of {@code modToCopy}."},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    public ModuleBuilder(Module modToCopy) {"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        title \u003d modToCopy.getTitle();"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"        assignments \u003d new AssignmentList(modToCopy.getAssignments().getAssignments());"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        exams \u003d new ExamList(modToCopy.getExams().getExams());"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"     * Sets the {@code Title} of the {@code Module} that is being built."},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    public ModuleBuilder withTitle(String title) {"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        this.title \u003d new Title(title);"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"        return this;"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"     * Creates an {@code AssignmentList} and sets it to the {@code Module} that is being built."},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"    public ModuleBuilder withAssignments(String ... assignments) {"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"        this.assignments \u003d new AssignmentList(SampleDataUtil.getAssignments(assignments));"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        return this;"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"     * Creates an {@code ExamList} and sets ot tp the {@code Module} that is being built."},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"    public ModuleBuilder withExams(String... exams) {"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"        this.exams \u003d new ExamList(SampleDataUtil.getExams(exams));"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        return this;"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"     * Builds the {@code Module} with the {@code Title}, {@code AssignmentList}, and {@code"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"     * ExamList}."},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"    public Module build() {"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"        return new Module(title, assignments, exams);"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"    public Module emptyBuild() {"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        return new Module(title);"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":72}},{"path":"src/test/java/seedu/address/testutil/typicalmodules/TypicalModules.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.testutil.typicalmodules;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"public class TypicalModules {"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"    /*public static final Module CS2101 \u003d new ModuleBuilder().withTitle(\"CS2101\")"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"            .withAssignments().build();*/"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":7}}]
