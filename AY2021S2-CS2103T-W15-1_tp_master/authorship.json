[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W15-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W15-1/tp/actions)"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W15-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W15-1/tp)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"RemindMe is a desktop app for keeping track of student\u0027s assignments, events and exams,"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"optimized for use via Command Line Interface(CLI) while still having the benefits of a Graphic User Interface(GUI)."},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"* Objectives of RemindMe is to allow students to be aware of deadlines of events, assignments and exams and enables students to have a calendar view of their school curriculums/schedules. "},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":" "},{"lineNumber":11,"author":{"gitId":"-"},"content":"  Example usages:"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"  * as a reminder for student"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"  * as a schedule manager  "},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"* For the detailed documentation of this project, see the **[RemindMe Product Website](https://nus-cs2103-ay2021s2.github.io/tp/)"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"### Site Map"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"[User Guide](docs/UserGuide.md)"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"[Developers Guide](docs/DeveloperGuide.md)"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"[About Us](docs/AboutUs.md)"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"### Acknowledgement"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"Hzxin":22,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":"### Michael Ong"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":"\u003cimg src\u003d\"images/maikongeh.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":"[[github](https://github.com/maikongeh)]"},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":"[[portfolio](team/maikongeh.md)]"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":"* Role: Developer"},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"* Responsibility: Testing"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"### Huang Zhenxin"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\u003cimg src\u003d\"images/hzxin.png\" width\u003d\"200px\"\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"[[github](http://github.com/Hzxin)]"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"[[portfolio](team/hzxin.md)]"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"* Role: Integration"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* Responsibilities: UI"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"### Jeremias Shae"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"\u003cimg src\u003d\"images/jellymias.png\" width\u003d\"200px\"\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"[[github](http://github.com/jellymias)]"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"[[portfolio](team/jellymias.md)]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"* Responsibilities: Documentation, Testing"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"banchiang"},"content":"### Chiang Kee Woon Jonathan"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"banchiang"},"content":"\u003cimg src\u003d\"images/banchiang.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"banchiang"},"content":"[[github](http://github.com/banchiang)]"},{"lineNumber":47,"author":{"gitId":"banchiang"},"content":"[[portfolio](team/banchiang.md)]"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":50,"author":{"gitId":"banchiang"},"content":"* Responsibilities: Code Quality checking"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"### Marcus Ong"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"\u003cimg src\u003d\"images/markuz5116.png\" width\u003d\"200px\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"[[github](http://github.com/markuz5116)]"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"[[portfolio](team/markuz5116.md)]"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"* Role: Team Lead"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"* Responsibilities: Deliverables and Deadlines"}],"authorContributionMap":{"markuz5116":6,"Hzxin":5,"jellymias":5,"banchiang":5,"maikongeh":6,"-":33}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"Hzxin"},"content":"* has a need to manage exams or events deadlines"},{"lineNumber":240,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":241,"author":{"gitId":"Hzxin"},"content":"* tend to forget upcoming events/exams"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"Hzxin"},"content":"**Value proposition**: manage deadlines and events faster than a typical mouse/GUI driven app"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":253,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":254,"author":{"gitId":"Hzxin"},"content":"| `* * *`  | new user                                   | see instructions help page     | refer to help page when I forget how to use the App                 |"},{"lineNumber":255,"author":{"gitId":"Hzxin"},"content":"| `* * *`  | student taking numerous modules            | add events/exams/assignments deadlines              |                                                                        |"},{"lineNumber":256,"author":{"gitId":"Hzxin"},"content":"| `* * *`  | user                                       | delete a deadline               | view the ones that matter                                  |"},{"lineNumber":257,"author":{"gitId":"Hzxin"},"content":"| `* * *`  | user                                       | edit a deadline          | can adjust schedule when there is a change of plan |"},{"lineNumber":258,"author":{"gitId":"Hzxin"},"content":"| `* *`    | user                                       | view events in a calendar view   | to have a better sense of the upcoming events                |"},{"lineNumber":259,"author":{"gitId":"Hzxin"},"content":"| `* *`      | forgetful student | get reminded about the most urgent events/assignments/exams          | finish the deadlines on time   "},{"lineNumber":260,"author":{"gitId":"Hzxin"},"content":"| `* `    | student                                    | distinguish among modules,exams and assignments | |"},{"lineNumber":261,"author":{"gitId":"Hzxin"},"content":"| `* `    | student                                     | view which friend of mine is enrolled in the same module/event | seek help from them |"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"Hzxin"},"content":"(For all use cases below, the **System** is the `RemindMe` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC01` - add assignment"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"banchiang"},"content":"1. User enters the details of assignment."},{"lineNumber":275,"author":{"gitId":"banchiang"},"content":"2. System adds assignment and displays assignments info."},{"lineNumber":276,"author":{"gitId":"banchiang"},"content":"\u003cbr\u003e Use case ends."},{"lineNumber":277,"author":{"gitId":"banchiang"},"content":"   "},{"lineNumber":278,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in format in entered data."},{"lineNumber":281,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":282,"author":{"gitId":"banchiang"},"content":"    \u003cbr\u003e Use case ends."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC02` - delete assignment"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"banchiang"},"content":"1. User enters number to delete a assignment."},{"lineNumber":289,"author":{"gitId":"banchiang"},"content":"2. System deletes assignment and displays assignments info."},{"lineNumber":290,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in number in entered data (out of range)."},{"lineNumber":295,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":296,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC03` - view assignments"},{"lineNumber":299,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":300,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":301,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":302,"author":{"gitId":"banchiang"},"content":"1. User enters the command to view assignments."},{"lineNumber":303,"author":{"gitId":"banchiang"},"content":"2. System shows list of assignments."},{"lineNumber":304,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":305,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":306,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":307,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":308,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":309,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":310,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":311,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":312,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC04` - view events"},{"lineNumber":313,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":314,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":315,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":316,"author":{"gitId":"banchiang"},"content":"1. User enters the command to view events."},{"lineNumber":317,"author":{"gitId":"banchiang"},"content":"2. System shows list of events."},{"lineNumber":318,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":319,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":320,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":321,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":322,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":323,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":324,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":325,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":326,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC05` - toggle reminder"},{"lineNumber":327,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":328,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":329,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":330,"author":{"gitId":"banchiang"},"content":"1. User wants to turn on reminder for system."},{"lineNumber":331,"author":{"gitId":"banchiang"},"content":"2. User enters command to turn on reminder."},{"lineNumber":332,"author":{"gitId":"banchiang"},"content":"3. System display message that reminder is on."},{"lineNumber":333,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Step 1 - 3 are the same for off."},{"lineNumber":334,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends at step 3."},{"lineNumber":335,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":336,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":337,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":338,"author":{"gitId":"banchiang"},"content":"* 2a. System detects an error in formatting of command."},{"lineNumber":339,"author":{"gitId":"banchiang"},"content":"    * 2a1. System display error message."},{"lineNumber":340,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":341,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":342,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC06` - view help"},{"lineNumber":343,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":344,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":345,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":346,"author":{"gitId":"banchiang"},"content":"1. User enters the command to view help."},{"lineNumber":347,"author":{"gitId":"banchiang"},"content":"2. System shows help and url for more in depth help."},{"lineNumber":348,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":349,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":350,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":351,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":352,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":353,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":354,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":355,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":356,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC07` - view calendar"},{"lineNumber":357,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":358,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":359,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":360,"author":{"gitId":"banchiang"},"content":"1. User enters the command to view calendar."},{"lineNumber":361,"author":{"gitId":"banchiang"},"content":"2. System shows calendar."},{"lineNumber":362,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":363,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":364,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":365,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":366,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":367,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":368,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":369,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":370,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC08` - save data"},{"lineNumber":371,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":372,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":373,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":374,"author":{"gitId":"banchiang"},"content":"1. User enters the command to sava data."},{"lineNumber":375,"author":{"gitId":"banchiang"},"content":"2. System saves data and show saved message."},{"lineNumber":376,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":377,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":378,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":379,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":380,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":381,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":382,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":383,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":384,"author":{"gitId":"banchiang"},"content":"### Use Case: `UC09` - edit data"},{"lineNumber":385,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":386,"author":{"gitId":"banchiang"},"content":"**MSS:**"},{"lineNumber":387,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":388,"author":{"gitId":"banchiang"},"content":"1. User enters the command to edit data."},{"lineNumber":389,"author":{"gitId":"banchiang"},"content":"2. System edit data and show edited message."},{"lineNumber":390,"author":{"gitId":"banchiang"},"content":"   \u003cbr\u003e Use case ends."},{"lineNumber":391,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":392,"author":{"gitId":"banchiang"},"content":"**Extensions:**"},{"lineNumber":393,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":394,"author":{"gitId":"banchiang"},"content":"* 1a. System detects an error in formatting of command."},{"lineNumber":395,"author":{"gitId":"banchiang"},"content":"    * 1a1. System display error message."},{"lineNumber":396,"author":{"gitId":"banchiang"},"content":"      \u003cbr\u003e Use case ends."},{"lineNumber":397,"author":{"gitId":"banchiang"},"content":"      "},{"lineNumber":398,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":403,"author":{"gitId":"markuz5116"},"content":"2.  Should be able to hold up to 1000 persons and tasks without a noticeable sluggishness in performance for typical usage."},{"lineNumber":404,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":405,"author":{"gitId":"markuz5116"},"content":"4.  RemindMe should be able to respond within one seconds."},{"lineNumber":406,"author":{"gitId":"markuz5116"},"content":"5.  RemindMe should be usable by novice who has no prior experience with coding."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":413,"author":{"gitId":"Hzxin"},"content":"* **Module**: A school module consists of module ID and module name. "},{"lineNumber":414,"author":{"gitId":"Hzxin"},"content":"* **Examination**: Consists of a start time, end time and date which it occurs on and the relevant module."},{"lineNumber":415,"author":{"gitId":"Hzxin"},"content":"* **Event**: Consists of a start time, end time, and the date which it occurs on."},{"lineNumber":416,"author":{"gitId":"Hzxin"},"content":"* **Assignment**: Consists of a deadlines and the relevant module."},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":425,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":442,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"markuz5116":3,"Hzxin":16,"banchiang":119,"-":316}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"RemindMe User Guide v1.1"},{"lineNumber":7,"author":{"gitId":"-"},"content":"---"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"This user guide provide [start-up](#start--up) instructions as well as detailed descriptions and usage of"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"all the [features](#features) in the RemindMe app. You can also access the product website via this [link.](https://ay2021s2-cs2103t-w15-1.github.io/tp/)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"## Table of Contents"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"* **[Introduction](#introduction)**"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"* **[Start-up](#start-up)**"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"* **[Features](#features)**"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    * **[1. Show Help Page : `help`](#show-help-page--help)**"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    * **[2. Turn On/Off Reminder: `remind`](#turn-onoff-reminder-remind)**"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    * **[3. Add a Module: `add m/MODULE`](#add-a-module-add)**"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"      * [3.1 Add an Assignment](#add-an-assignment)"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"      * [3.2 Add an Exam](#add-an-exam)"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    * **[4. Add an Event: `event`](#add-an-event-event)**  "},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    * **[5. Add a Person as friend: `add`](#add-a-person-as-friend-add)**  "},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    * **[6. Delete a Module: `delete`](#delete-a-module-delete)**"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"      * [6.1 Delete an Assignment/Exam/Event](#delete-an-assignmentexamevent)"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    * **[7. List Entries: `list`](#list-entries--list)**"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"      * [7.1 List Modules: `list module`](#list-modules-list-modules)"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"      * [7.2 List Assignments: `list assignments`](#list-assignments--list-assignments)"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"      * [7.3 List Events: `list events`](#list-events--list-events)"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"      * [7.4 List Exams: `list exams`](#list-exams--list-exams)"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    * **[8. Edit an Entry: `edit`](#edit-an-entry--edit)**"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    * **[9. Locate Entries: `find`](#locate-entries-find)**"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    * **[10. Calendar View: `calendar`](#calendar-view--calendar)**"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    * **[11. Clear Entries: `clear`](#clear-entries--clear)**"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    * **[12. Save the data](#save-the-data)**"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    * **[13. Edit the data file](#edit-an-entry--edit)**"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    * **[14. Exit the program: `exit`](#exit-the-program--exit)**"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"   "},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"* **[Glossary](#glossary)**"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"* **[Command summary](#command-summary-(RemindMe))**"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"## Introduction"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"RemindMe is a desktop app for keeping track of user events and deadlines,"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"optimized for use via Command Line Interface(CLI) while still having the benefits of a Graphic User Interface(GUI)."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"Objectives of RemindMe:"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"1. Allow students to be aware of deadlines of school events and exams."},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"2. Allow students to have a calendar view of their school curriculums/schedules. "},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"## Start-up"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"1. Ensure you have Java 11 or above installed on your computer. You can download Java 11 via this [link.](https://www.oracle.com/sg/java/technologies/javase-jdk11-downloads.html)"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"   * If you are a Windows user, [here](https://java.tutorials24x7.com/blog/how-to-install-java-11-on-windows) is a tutorial on how to set up Java 11:"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"2. Download the latest RemindMe.jar from our GitHub release page."},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"Copy the file to the folder you want to use as the home folder for your RemindMe."},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"Double click the file to start the app. "},{"lineNumber":69,"author":{"gitId":"-"},"content":"   "},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"3. Alternatively, you can run the command line java -jar RemindMe.jar in your terminal to start the application."},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"Type the command in the command box and press Enter to execute it."},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"   ![Ui](images/Ui.png)   "},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"4. Refer to the Features below for details of each command."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"   * **`deadline`** `description by DD/MM/YYYY TIME`: Adds a task with a deadline."},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"     "},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"   * **`ordered list`**: Displays an order list of items."},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"     "},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"   * **`calendar`**: Dsiplays the calendar with the tasks\u0027 deadlines and friends\u0027 birthdays."},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"     "},{"lineNumber":84,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":"**Notes about the command format:**\u003cbr\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"  e.g. in `exam m/MODULE`, `MODULE` is a parameter which can be used as `add m/CS2103`."},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":"  e.g `m/MODULE [t/TAG]` can be used as `m/CS21O3 t/final` or as `m/CS2103`."},{"lineNumber":101,"author":{"gitId":"-"},"content":"  "},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"### Show Help Page : `help`"},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":"Shows a help page"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":"### Turn On/Off Reminder: `remind`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"banchiang"},"content":"Turns on and off the reminder system. If remind is on,"},{"lineNumber":120,"author":{"gitId":"banchiang"},"content":"a reminder would pop out when starting the app RemindMe regarding"},{"lineNumber":121,"author":{"gitId":"banchiang"},"content":"the upcoming tasks."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":"![Reminder](images/Reminder.png)"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"banchiang"},"content":"Format: `remind`"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"banchiang"},"content":"Outcome:"},{"lineNumber":128,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":129,"author":{"gitId":"banchiang"},"content":"* `reminder is turned on!`"},{"lineNumber":130,"author":{"gitId":"banchiang"},"content":"* `reminder is turned off!`"},{"lineNumber":131,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":132,"author":{"gitId":"Hzxin"},"content":"### Add a Module: `add`"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"Hzxin"},"content":"Adds a module to the calendar."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"jellymias"},"content":"Format: "},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"Hzxin"},"content":"* `add m/MODULE`"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":141,"author":{"gitId":"Hzxin"},"content":"* `add m/cs2103`"},{"lineNumber":142,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":143,"author":{"gitId":"Hzxin"},"content":"### Add an Assignment"},{"lineNumber":144,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":145,"author":{"gitId":"Hzxin"},"content":"Adds an assignment under a module to a calendar with a date or/and with an optional tag/time."},{"lineNumber":146,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":147,"author":{"gitId":"Hzxin"},"content":"Format:"},{"lineNumber":148,"author":{"gitId":"Hzxin"},"content":"* `add m/MODULE a/assignment d/DATE [t/TAG/TIME] `"},{"lineNumber":149,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":150,"author":{"gitId":"Hzxin"},"content":"Examples:"},{"lineNumber":151,"author":{"gitId":"Hzxin"},"content":"* `add m/cs2103 a/tut2 d/2021-01-12 t/23:59`"},{"lineNumber":152,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":153,"author":{"gitId":"Hzxin"},"content":"### Add an Exam"},{"lineNumber":154,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":155,"author":{"gitId":"Hzxin"},"content":"Add an exam under a module to a calendar with a date or/and with an optional tag/time."},{"lineNumber":156,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":157,"author":{"gitId":"Hzxin"},"content":"Format:"},{"lineNumber":158,"author":{"gitId":"Hzxin"},"content":"* `add m/MODULE e/exam d/DATE [t/TAG/TIME]`"},{"lineNumber":159,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":160,"author":{"gitId":"Hzxin"},"content":"Examples:"},{"lineNumber":161,"author":{"gitId":"Hzxin"},"content":"* `add m/cs2103 e/final d/2021-01-12 t/23:59`"},{"lineNumber":162,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":163,"author":{"gitId":"Hzxin"},"content":"### Add an Event: `event`"},{"lineNumber":164,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":165,"author":{"gitId":"Hzxin"},"content":"Add an event with content and date specified."},{"lineNumber":166,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":167,"author":{"gitId":"Hzxin"},"content":"Format:"},{"lineNumber":168,"author":{"gitId":"Hzxin"},"content":"* `event c/CONTENT d/DATE [t/TAG]`"},{"lineNumber":169,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":170,"author":{"gitId":"jellymias"},"content":"Examples:"},{"lineNumber":171,"author":{"gitId":"Hzxin"},"content":"* `event c/floor party d/2021-4-30`"},{"lineNumber":172,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":173,"author":{"gitId":"Hzxin"},"content":"### Add a Person as friend: `add`"},{"lineNumber":174,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":175,"author":{"gitId":"Hzxin"},"content":"Add a person as friend with its birthday in RemindMe"},{"lineNumber":176,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":177,"author":{"gitId":"jellymias"},"content":"Format:"},{"lineNumber":178,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":179,"author":{"gitId":"Hzxin"},"content":"* `add n/Name b/BIRTHDAY`"},{"lineNumber":180,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":181,"author":{"gitId":"Hzxin"},"content":"Example:"},{"lineNumber":182,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":183,"author":{"gitId":"Hzxin"},"content":"* `add n/Marcus b/2000-01-01`"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"Hzxin"},"content":"### Delete a Module: `delete`"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"Hzxin"},"content":"Deletes a module from RemindMe. Removing the module will remove all the relevant "},{"lineNumber":188,"author":{"gitId":"Hzxin"},"content":"exams and assignments."},{"lineNumber":189,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":190,"author":{"gitId":"Hzxin"},"content":"Format: "},{"lineNumber":191,"author":{"gitId":"Hzxin"},"content":"* `delete m/MODULE`"},{"lineNumber":192,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":195,"author":{"gitId":"Hzxin"},"content":"* `delete m/cs2103T`"},{"lineNumber":196,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":197,"author":{"gitId":"Hzxin"},"content":"### Delete an Assignment/Exam/Event"},{"lineNumber":198,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":199,"author":{"gitId":"Hzxin"},"content":"Deletes an assignment/exam/event from the calendar."},{"lineNumber":200,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":201,"author":{"gitId":"Hzxin"},"content":"Format:"},{"lineNumber":202,"author":{"gitId":"Hzxin"},"content":"* `delete i/index d/date`"},{"lineNumber":203,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":204,"author":{"gitId":"Hzxin"},"content":"Examples:"},{"lineNumber":205,"author":{"gitId":"Hzxin"},"content":"* `delete i/1 d/2020-11-22`"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"Hzxin"},"content":"### List Entries : `list`"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"Hzxin"},"content":"Shows a list of all assignments/events/exam deadlines sorted by date."},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"Hzxin"},"content":"### List Modules: `list modules`"},{"lineNumber":214,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":215,"author":{"gitId":"Hzxin"},"content":"Show a list of modules currently registered in RemindMe."},{"lineNumber":216,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":217,"author":{"gitId":"Hzxin"},"content":"Format: `list modules`"},{"lineNumber":218,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":219,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":220,"author":{"gitId":"Hzxin"},"content":"### List Assignments : `list assignments`"},{"lineNumber":221,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":222,"author":{"gitId":"Hzxin"},"content":"Shows a list of all assignments sorted by date."},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"Hzxin"},"content":"Format: `list assignments`"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"Hzxin"},"content":"### List Events : `list events`"},{"lineNumber":227,"author":{"gitId":"Hzxin"},"content":"Shows a list of all events sorted by date."},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"Hzxin"},"content":"Format: `list events`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"Hzxin"},"content":"### List Exams : `list exams`"},{"lineNumber":232,"author":{"gitId":"Hzxin"},"content":"Shows a list of all exams sorted by date."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"Hzxin"},"content":"Format: `list exams`"},{"lineNumber":235,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":236,"author":{"gitId":"Hzxin"},"content":"### Edit an Entry : `edit`"},{"lineNumber":237,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":238,"author":{"gitId":"Hzxin"},"content":"Edits an existing exam/event/assignment\u0027s date/module/tag in the RemindMe."},{"lineNumber":239,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":240,"author":{"gitId":"Hzxin"},"content":"Format: `edit INDEX [m/MODULE] [d/DATE] [dd/deadline] [from/TIME to/TIME] [t/TAG]…​`"},{"lineNumber":241,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":242,"author":{"gitId":"Hzxin"},"content":"* Edits the exam/event/assignment\u0027s deadline at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":244,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":245,"author":{"gitId":"Hzxin"},"content":"* When editing tags, the existing tags of the exam/event/assignment will be removed i.e adding of tags is not cumulative."},{"lineNumber":246,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":250,"author":{"gitId":"Hzxin"},"content":"*  `edit 1 p/exam d/2021-01-22` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":251,"author":{"gitId":"Hzxin"},"content":"*  `edit 2 p/assignment t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"Hzxin"},"content":"### Locate Entries: `find`"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"Hzxin"},"content":"Finds entries whose contents contain any of the given keywords."},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"Hzxin"},"content":"* The search is case-insensitive. e.g `math` will match `MATH`"},{"lineNumber":260,"author":{"gitId":"Hzxin"},"content":"* Only full words will be matched e.g. `math` will not match `maths`"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":264,"author":{"gitId":"Hzxin"},"content":"* `find math` returns `math exams` and `math assignment`"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"Hzxin"},"content":"### Calendar View : `calendar`"},{"lineNumber":269,"author":{"gitId":"markuz5116"},"content":"Shows an image of the calendar with your reminders (e.g. tasks, assignments datelines, and friends’ birthday) for each specific dates.  "},{"lineNumber":270,"author":{"gitId":"markuz5116"},"content":"![result for \u0027calendar\u0027](images/calendarResult.png)  "},{"lineNumber":271,"author":{"gitId":"markuz5116"},"content":"Format: `calendar`"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"Hzxin"},"content":"### Clear Entries : `clear`"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"Clears all entries from the address book."},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"markuz5116"},"content":"Format: `clear``"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"Hzxin"},"content":"### Save the data"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"markuz5116"},"content":"RemindMe save your data in the hard disk automatically after every command that changes the data. There is no need for you to save manually."},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"Hzxin"},"content":"### Edit the data file"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"Hzxin"},"content":"RemindME data are saved as a JSON file `[JAR file location]/data/remindme.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":288,"author":{"gitId":"markuz5116"},"content":"If your changes to the data file makes its format invalid, RemindMe will discard all data and start with an empty data file at the next run."},{"lineNumber":289,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"Hzxin"},"content":"### Exit the program : `exit`"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"markuz5116"},"content":"Exits the program."},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"markuz5116"},"content":"Format: `exit"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"Hzxin"},"content":"## Glossary"},{"lineNumber":298,"author":{"gitId":"Hzxin"},"content":"* Module: Consists of a module ID and name."},{"lineNumber":299,"author":{"gitId":"Hzxin"},"content":"* Assignment: Consists of the name of the assignment and deadline with an optional tag."},{"lineNumber":300,"author":{"gitId":"Hzxin"},"content":"* Exam: Consists of the name, date and start-time with an optional tag."},{"lineNumber":301,"author":{"gitId":"Hzxin"},"content":"* Event: Consists of the event content and date with an optional tag."},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"Hzxin"},"content":"## Command Summary (RemindMe) "},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":307,"author":{"gitId":"banchiang"},"content":"--------|----------------"},{"lineNumber":308,"author":{"gitId":"banchiang"},"content":"Add assignment | `(assignment type) (assignment description) (assignment details)`"},{"lineNumber":309,"author":{"gitId":"banchiang"},"content":"Delete assignment | `delete (assignment description)`"},{"lineNumber":310,"author":{"gitId":"banchiang"},"content":"View assignments | `view A`"},{"lineNumber":311,"author":{"gitId":"banchiang"},"content":"View events | `view E`"},{"lineNumber":312,"author":{"gitId":"banchiang"},"content":"Turn on/off reminder | `remind`"},{"lineNumber":313,"author":{"gitId":"banchiang"},"content":"See commands available | `help`"},{"lineNumber":314,"author":{"gitId":"banchiang"},"content":"View calendar | `calendar`"},{"lineNumber":315,"author":{"gitId":"banchiang"},"content":"Save data | `save`"},{"lineNumber":316,"author":{"gitId":"banchiang"},"content":"Edit data | `edit`"},{"lineNumber":317,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":318,"author":{"gitId":"banchiang"},"content":""}],"authorContributionMap":{"markuz5116":16,"Hzxin":163,"banchiang":21,"jellymias":8,"maikongeh":1,"-":109}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"title: RemindMe"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W15-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W15-1/tp/actions)"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W15-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W15-1/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"**RemindMe is a desktop app for keeping track of student\u0027s assignments, events and exams.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"* If you are interested in using RemindMe, head over to the [_Start-up_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"Hzxin":5,"-":14}},{"path":"docs/team/banchiang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"banchiang"},"content":"---"},{"lineNumber":2,"author":{"gitId":"banchiang"},"content":"#Chiang Kee Woon Jonathan\u0027s Project Portfolio Page \u003cbr\u003e"},{"lineNumber":3,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":4,"author":{"gitId":"banchiang"},"content":"---"},{"lineNumber":5,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":6,"author":{"gitId":"banchiang"},"content":"## Introduction"},{"lineNumber":7,"author":{"gitId":"banchiang"},"content":"This page serves to document my contributions "},{"lineNumber":8,"author":{"gitId":"banchiang"},"content":"to the project RemindMe under NUS module CS2103T in AY20/21 semester 2."},{"lineNumber":9,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":10,"author":{"gitId":"banchiang"},"content":"## Project: RemindMe"},{"lineNumber":11,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":12,"author":{"gitId":"banchiang"},"content":"RemindMe is a desktop app for keeping track of user events and deadlines,"},{"lineNumber":13,"author":{"gitId":"banchiang"},"content":"optimized for use via Command Line Interface(CLI) while still having the benefits of a"},{"lineNumber":14,"author":{"gitId":"banchiang"},"content":"Graphic User e user interacts with it using a CLI, and it has a GUI created with JavaFX."},{"lineNumber":15,"author":{"gitId":"banchiang"},"content":"It is written in Java."},{"lineNumber":16,"author":{"gitId":"banchiang"},"content":"\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"banchiang"},"content":""},{"lineNumber":18,"author":{"gitId":"banchiang"},"content":"### Code contributed: \u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"banchiang"},"content":"[RepoSense Link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003dbanchiang\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-02-19\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dbanchiang\u0026tabRepo\u003dAY2021S2-CS2103T-W15-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d)"}],"authorContributionMap":{"banchiang":19}},{"path":"docs/team/hzxin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"title: Huang Zhenxin\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"## Introduction"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"This page serves to document my contributions to the project RemindMe under NUS module CS2103T in AY20/21 semester 2."},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"## Project: RemindMe"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"RemindMe is a desktop app for keeping track of user events and deadlines,"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"optimized for use via Command Line Interface(CLI) while still having the benefits of a"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"Graphic User e user interacts with it using a CLI, and it has a GUI created with JavaFX. "},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"It is written in Java."},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"Given below are my contributions to the project."},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"* **New Feature**: To be updated"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    * What it does: "},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    * Justification: "},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    * Highlights:"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    * Credits: "},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"* **Project management**:"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    * to be updated"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"* **Enhancements to existing features**:"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    * Come out with Ui-mockup(Pull requests [\\#23](https://github.com/AY2021S2-CS2103T-W15-1/tp/pull/23))"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"* **Documentation**:"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    * User Guide:"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"        * Added documentations for the introduction and Quick Start [\\#25](https://github.com/AY2021S2-CS2103T-W15-1/tp/pull/25)"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    * Developer Guide:"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        * Added documentations for Target user profile, value proposition, and user stories."},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"* **Community**:"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#]()"}],"authorContributionMap":{"Hzxin":40}},{"path":"docs/team/jellymias.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"---"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"title: Jeremias Shae\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"---"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"## Introduction"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"This page serves to document my contributions to the RemindMe project."},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"## Project: RemindMe"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"RemindMe is a desktop application to help users track their deadlines and important events. "},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"It is optimised for Command Line Interface (CLI) while still having the benefits of a "},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"Graphic User e user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java. "},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"Given below are my contributions to the project:"}],"authorContributionMap":{"jellymias":13}},{"path":"docs/team/maikongeh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"maikongeh"},"content":"---"},{"lineNumber":2,"author":{"gitId":"maikongeh"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"maikongeh"},"content":"title: Michael\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"maikongeh"},"content":"---"},{"lineNumber":5,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":6,"author":{"gitId":"maikongeh"},"content":"## Project: RemindMe"},{"lineNumber":7,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":8,"author":{"gitId":"maikongeh"},"content":"RemindMe is a desktop application for keeping track of user events and deadlines, optimised for use via Command Line "},{"lineNumber":9,"author":{"gitId":"maikongeh"},"content":"Interface(CLI) while still having the benefits of a Graphic User Interface(GUI)."},{"lineNumber":10,"author":{"gitId":"maikongeh"},"content":"RemindMe allows students to always be aware of exams and events deadline as there will be reminder pop-ups and calendar"},{"lineNumber":11,"author":{"gitId":"maikongeh"},"content":"for students to see!"},{"lineNumber":12,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":13,"author":{"gitId":"maikongeh"},"content":"Given below are my contributions to the project."},{"lineNumber":14,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":15,"author":{"gitId":"maikongeh"},"content":"* **New Feature**: Upcoming"},{"lineNumber":16,"author":{"gitId":"maikongeh"},"content":"  * What it does: NIL"},{"lineNumber":17,"author":{"gitId":"maikongeh"},"content":" "},{"lineNumber":18,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":19,"author":{"gitId":"maikongeh"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":21,"author":{"gitId":"maikongeh"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":23,"author":{"gitId":"maikongeh"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"maikongeh"},"content":"  * Managed releases `v1.3` - `v1.5rc` [EXAMPLE-"},{"lineNumber":25,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":26,"author":{"gitId":"maikongeh"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"maikongeh"},"content":"  "},{"lineNumber":28,"author":{"gitId":"maikongeh"},"content":"* **Documentation**:"},{"lineNumber":29,"author":{"gitId":"maikongeh"},"content":"  * User Guide:"},{"lineNumber":30,"author":{"gitId":"maikongeh"},"content":"    * Added documentation for the features `list assignments` and `list evetns` [\\#72]()"},{"lineNumber":31,"author":{"gitId":"maikongeh"},"content":"  * Developer Guide:"},{"lineNumber":32,"author":{"gitId":"maikongeh"},"content":"    * NIL"},{"lineNumber":33,"author":{"gitId":"maikongeh"},"content":"    "},{"lineNumber":34,"author":{"gitId":"maikongeh"},"content":"* **Community**:"},{"lineNumber":35,"author":{"gitId":"maikongeh"},"content":""},{"lineNumber":36,"author":{"gitId":"maikongeh"},"content":"* **Tools**:"},{"lineNumber":37,"author":{"gitId":"maikongeh"},"content":""}],"authorContributionMap":{"maikongeh":37}},{"path":"docs/team/markuz5116.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"---"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"title: Marcus Ong\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"---"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"## Project: RemindMe"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"RemindMe is a desktop application for keeping track of user events and deadlines, optimised for use via Command Line "},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"Interface(CLI) while still having the benefits of a Graphic User Interface(GUI)."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"RemindMe allows students to always be aware of exams and events deadline as there will be reminder pop-ups and calendar"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"for students to see!"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"Given below are my contributions to the project.\\"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"[to be added]"}],"authorContributionMap":{"markuz5116":14}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":66,"author":{"gitId":"-"},"content":"..."},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"..."},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":75,"author":{"gitId":"-"},"content":"..."},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"..."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"},{"lineNumber":98,"author":{"gitId":"-"},"content":"```"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field."}],"authorContributionMap":{"markuz5116":1,"-":99}},{"path":"src/main/java/seedu/address/logic/commands/AddPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"public class AddPersonCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    public AddPersonCommand(Person person) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":5,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/CalendarCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"public class CalendarCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    public static final String SHOWING_CALENDAR \u003d \"Opened Calendar window.\";"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"        return new CommandResult(SHOWING_CALENDAR, false,"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"                true, false);"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":22}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    /** Calendar window should be shown to the user. */"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    private final boolean showCalendar;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** The application should exit. */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        this.showCalendar \u003d false;"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        this.exit \u003d exit;"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean showCalendar,"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"                         boolean exit) {"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"        this.showCalendar \u003d showCalendar;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"    public boolean isShowCalendar() {"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"        return showCalendar;"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":19,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"        return new Person(updatedName, updatedTags);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":121,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":122,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":130,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":132,"author":{"gitId":"markuz5116"},"content":"            return CollectionUtil.isAnyNonNull(name, tags);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":146,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":154,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":155,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":3,"-":176}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":" * Parses input arguments and creates a new AddPersonCommand object"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"public class AddCommandParser implements Parser\u003cAddPersonCommand\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     * and returns an AddPersonCommand object for execution."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    public AddPersonCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG, PREFIX_EXAM);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        Person person \u003d new Person(name, tagList);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        return new AddPersonCommand(person);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":12,"-":40}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.logic.commands.CalendarCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"        case AddPersonCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"        case CalendarCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"            return new CalendarCommand();"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"Hzxin":4,"-":74}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"    public static final Prefix PREFIX_EXAM \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"-":69}},{"path":"src/main/java/seedu/address/model/module/Exam.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"public class Exam {"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"    // todo change message constraints"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Exam names should be numerical and not \""},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"            + \"empty. It should follow a YYYY-MM-DD-HH-MM\";"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[0-9]{4}-[01-12]{2}-[00-31]{2}T[00-23]{2}:[00-59]{2}$\";"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    private static final DateTimeFormatter EXAM_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd\""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"            + \"-MM-yyyy HH:mm\");"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    public final LocalDateTime examDate;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"     * Constructs an {@code Exam} with {@code examDate} as input representing the date of the Exam."},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    public Exam(LocalDateTime examDate) {"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"        checkArgument(isValidExam(examDate.toString()), MESSAGE_CONSTRAINTS);"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"        this.examDate \u003d examDate;"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"     * Returns true if a given string is a valid assignment."},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    //todo I cant get the regex to work. Do we need this? Since localdatetime catches issues with"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    // wrong dates and time format."},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    public static boolean isValidExam(String test) {"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"     * Returns a string representation of {@code Exam} with date of format YYYY-MM-DD HH:TT."},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        return \"Exam is on: \" + EXAM_DATE_FORMATTER.format(examDate);"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"     * Returns true if {@code other} is the same instance or is instance of Exam and has the same"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"     * date."},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"                || (other instanceof Exam // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"                \u0026\u0026 examDate.equals(((Exam) other).examDate)); // state check"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"     * Returns the hashcode representation of {@code Exam}."},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        return examDate.hashCode();"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":60}},{"path":"src/main/java/seedu/address/model/module/ExamTest.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":" * Test class for Exam."},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"public class ExamTest {"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"     * Checks that {@code Exam} instance can be initialised."},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"        LocalDateTime localDateTime \u003d LocalDateTime.of(2020, 12, 11, 23, 30);"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"        Exam exam \u003d new Exam(localDateTime);"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"        System.out.println(exam);"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":17}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    public Person(Name name, Set\u003cTag\u003e tags) {"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        requireAllNonNull(name, tags);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"        return Objects.hash(name, tags);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"        builder.append(getName());"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":4,"-":91}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"            new Person(new Name(\"Alex Yeoh\"),"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"            new Person(new Name(\"Bernice Yu\"),"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"),"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"            new Person(new Name(\"David Li\"),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"            new Person(new Name(\"Irfan Ibrahim\"),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"            new Person(new Name(\"Roy Balakrishnan\"),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":6,"-":45}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"        return new Person(modelName, modelTags);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"-":70}},{"path":"src/main/java/seedu/address/ui/CalendarBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"public class CalendarBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    private static final String FXML \u003d \"CalendarBox.fxml\";"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CalendarBox.class);"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    private LocalDate dateTime;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    private VBox dateHolder;"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    private Label date;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    private Label assignment;"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    private Label exam;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    private Label event;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"     * Create a CalendarBox object to display the entries on that day."},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"     * @param dateTime the date time of the day cell in the calendar view"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    public CalendarBox(LocalDate dateTime) {"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"        initializeCalenderBoxInfo(dateTime);"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    private void initializeCalenderBoxInfo(LocalDate dateTime) {"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        date.setText(dateTime.getMonth().toString().substring(0, 3) + \" \" + dateTime.getDayOfMonth());"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"        assignment.setText(\"0  assignment\");"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"        exam.setText(\"0 Events\");"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"        event.setText(\"0 event\");"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":43}},{"path":"src/main/java/seedu/address/ui/CalendarWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"public class CalendarWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CalendarWindow.class);"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"    private static final String FXML \u003d \"CalendarWindow.fxml\";"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    private Label currentMonth;"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    private GridPane calendar;"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"     * Creates a new CalendarWindow."},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    public CalendarWindow(Stage root) {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"        super(FXML, root);"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"     * Creates a new CalendarWindow."},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    public CalendarWindow() {"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        loadCalendar();"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    private CalendarBox loadInfo(LocalDate startDateTime) {"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"        return new CalendarBox(startDateTime);"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"    private void loadCalendar() {"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"        LocalDate today \u003d LocalDate.now();"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"        LocalDate currentDate \u003d LocalDate.of(today.getYear(), today.getMonth(), 1);"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"        for (int i \u003d 2; i \u003c 7; i++) {"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"            for (int j \u003d 0; j \u003c 7; j++) {"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"                CalendarBox calendarBox \u003d loadInfo(currentDate);"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"                calendar.add(calendarBox.getRoot(), j, i);"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"                if (currentDate.getMonthValue() !\u003d LocalDate.now().getMonthValue()) {"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"                    calendarBox.getRoot().setDisable(true);"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"                    calendarBox.getRoot().setStyle(\"-fx-background-color: grey\");"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"                currentDate \u003d currentDate.plusDays(1);"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"     * Shows the calendar window."},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"     * @throws IllegalStateException"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"     * \u003cul\u003e"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"     *     \u003cli\u003e"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"     *     \u003c/li\u003e"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"     *     \u003cli\u003e"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"     *     \u003c/li\u003e"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"     *     \u003cli\u003e"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"     *     \u003c/li\u003e"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"     *     \u003cli\u003e"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"     *     \u003c/li\u003e"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"     * \u003c/ul\u003e"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"    public void show() {"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"        logger.fine(\"Showing calendar page about the application.\");"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"        getRoot().show();"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":"     * Returns true if the calendar window is currently being shown."},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"    public boolean isShowing() {"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"        return getRoot().isShowing();"},{"lineNumber":92,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"     * Hides the calendar window."},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":"    public void hide() {"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"        getRoot().hide();"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":101,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Hzxin"},"content":"     * Focuses on the calendar window."},{"lineNumber":103,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"    public void focus() {"},{"lineNumber":105,"author":{"gitId":"Hzxin"},"content":"        getRoot().requestFocus();"},{"lineNumber":106,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":108,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":109}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w15-1.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"    private CalendarWindow calendarWindow;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    private MenuItem calendarMenuItem;"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"        calendarWindow \u003d new CalendarWindow();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"        setAccelerator(calendarMenuItem, KeyCombination.keyCombination(\"F1\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":102,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":106,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"Hzxin"},"content":"     * Opens the calendar window or focuses on it if it\u0027s already opened."},{"lineNumber":146,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"Hzxin"},"content":"    @FXML"},{"lineNumber":148,"author":{"gitId":"Hzxin"},"content":"    public void handleCalendar() {"},{"lineNumber":149,"author":{"gitId":"Hzxin"},"content":"        if (!calendarWindow.isShowing()) {"},{"lineNumber":150,"author":{"gitId":"Hzxin"},"content":"            calendarWindow.show();"},{"lineNumber":151,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":152,"author":{"gitId":"Hzxin"},"content":"            calendarWindow.focus();"},{"lineNumber":153,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":190,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"Hzxin"},"content":"            if (commandResult.isShowCalendar()) {"},{"lineNumber":204,"author":{"gitId":"Hzxin"},"content":"                handleCalendar();"},{"lineNumber":205,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":206,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":22,"-":196}},{"path":"src/main/resources/view/CalendarBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\u003cVBox fx:id\u003d\"dateHolder\" alignment\u003d\"CENTER\" prefHeight\u003d\"58.0\" prefWidth\u003d\"44.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"    \u003cchildren\u003e"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"label-bright\" text\u003d\"Label\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"      \u003cLabel fx:id\u003d\"assignment\" text\u003d\"Label\" /\u003e"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"      \u003cLabel fx:id\u003d\"exam\" text\u003d\"Label\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"      \u003cLabel fx:id\u003d\"event\" text\u003d\"Label\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"Hzxin":13}},{"path":"src/main/resources/view/CalendarWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\u003cStage xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"   \u003cscene\u003e"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"      \u003cScene\u003e"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"         \u003croot\u003e"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"            \u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"650.0\" prefWidth\u003d\"1050.0\" style\u003d\"-fx-background-color: grey;\"\u003e"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"               \u003cchildren\u003e"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"                  \u003cVBox prefHeight\u003d\"650.0\" prefWidth\u003d\"269.0\" style\u003d\"-fx-background-color: grey;\"\u003e"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"                     \u003cchildren\u003e"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"                        \u003cImageView fitHeight\u003d\"181.0\" fitWidth\u003d\"191.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" translateX\u003d\"40.0\" translateY\u003d\"40.0\"\u003e"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"                           \u003cimage\u003e"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"                              \u003cImage url\u003d\"@../images/logo.png\" /\u003e"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"                           \u003c/image\u003e"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"                        \u003c/ImageView\u003e"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"                        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Welcome\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" translateX\u003d\"65.0\" translateY\u003d\"50.0\"\u003e"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"                           \u003cfont\u003e"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"                              \u003cFont name\u003d\"Chandas\" size\u003d\"30.0\" /\u003e"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"                           \u003c/font\u003e"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"                        \u003c/Label\u003e"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"                     \u003c/children\u003e"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"                  \u003c/VBox\u003e"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"                  \u003cAnchorPane prefHeight\u003d\"650.0\" prefWidth\u003d\"783.0\" style\u003d\"-fx-background-color: white;\"\u003e"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"                     \u003cchildren\u003e"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"                        \u003cLabel fx:id\u003d\"CurrentMonth\" layoutX\u003d\"26.0\" layoutY\u003d\"14.0\" text\u003d\"\"\u003e"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"                           \u003cfont\u003e"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"                              \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"26.0\" /\u003e"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"                           \u003c/font\u003e"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"                        \u003c/Label\u003e"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"                        \u003cButton layoutX\u003d\"573.0\" layoutY\u003d\"25.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"26.0\" prefWidth\u003d\"21.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"\u0026gt;\"\u003e"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"                           \u003cfont\u003e"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"                              \u003cFont name\u003d\"DejaVu Serif Bold\" size\u003d\"13.0\" /\u003e"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"                           \u003c/font\u003e"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"                        \u003c/Button\u003e"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"                        \u003cLabel layoutX\u003d\"537.0\" layoutY\u003d\"28.0\" text\u003d\"Today\"\u003e"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"                           \u003cfont\u003e"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"                              \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"13.0\" /\u003e"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"                           \u003c/font\u003e"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"                        \u003c/Label\u003e"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"                        \u003cButton layoutX\u003d\"508.0\" layoutY\u003d\"25.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"26.0\" prefWidth\u003d\"29.0\" style\u003d\"-fx-background-color: white;\" text\u003d\"\u0026lt;\"\u003e"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"                           \u003cfont\u003e"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"                              \u003cFont name\u003d\"DejaVu Serif Bold\" size\u003d\"13.0\" /\u003e"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"                           \u003c/font\u003e"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"                        \u003c/Button\u003e"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"                        \u003cGridPane fx:id\u003d\"calendar\" alignment\u003d\"CENTER\" gridLinesVisible\u003d\"true\" layoutX\u003d\"-6.0\" layoutY\u003d\"56.0\" prefHeight\u003d\"589.0\" prefWidth\u003d\"815.0\"\u003e"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"                          \u003ccolumnConstraints\u003e"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"                              \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"                            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"                            \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"                          \u003c/columnConstraints\u003e"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"                          \u003crowConstraints\u003e"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"                              \u003cRowConstraints fillHeight\u003d\"false\" minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" valignment\u003d\"CENTER\" vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"                              \u003cRowConstraints fillHeight\u003d\"false\" minHeight\u003d\"0.0\" prefHeight\u003d\"0.0\" valignment\u003d\"CENTER\" vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"                            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"                            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"                            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"                              \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"                              \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"                          \u003c/rowConstraints\u003e"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"                           \u003cpadding\u003e"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"                           \u003c/padding\u003e"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"                           \u003cchildren\u003e"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"                              \u003cLabel text\u003d\"Mon\"\u003e"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"                                 \u003cfont\u003e"},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":"                                    \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"16.0\" /\u003e"},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"                                 \u003c/font\u003e"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":"                              \u003c/Label\u003e"},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":"                              \u003cLabel layoutX\u003d\"55.0\" layoutY\u003d\"22.0\" text\u003d\"Tue\" GridPane.columnIndex\u003d\"1\"\u003e"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"                                 \u003cfont\u003e"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"                                    \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"16.0\" /\u003e"},{"lineNumber":92,"author":{"gitId":"Hzxin"},"content":"                                 \u003c/font\u003e"},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":"                              \u003c/Label\u003e"},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":"                              \u003cLabel layoutX\u003d\"55.0\" layoutY\u003d\"22.0\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"2\"\u003e"},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"                                 \u003cfont\u003e"},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"                                    \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"16.0\" /\u003e"},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":"                                 \u003c/font\u003e"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"                              \u003c/Label\u003e"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"                              \u003cLabel layoutX\u003d\"55.0\" layoutY\u003d\"22.0\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"3\"\u003e"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":"                                 \u003cfont\u003e"},{"lineNumber":101,"author":{"gitId":"Hzxin"},"content":"                                    \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"16.0\" /\u003e"},{"lineNumber":102,"author":{"gitId":"Hzxin"},"content":"                                 \u003c/font\u003e"},{"lineNumber":103,"author":{"gitId":"Hzxin"},"content":"                              \u003c/Label\u003e"},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"                              \u003cLabel layoutX\u003d\"55.0\" layoutY\u003d\"22.0\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"4\"\u003e"},{"lineNumber":105,"author":{"gitId":"Hzxin"},"content":"                                 \u003cfont\u003e"},{"lineNumber":106,"author":{"gitId":"Hzxin"},"content":"                                    \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"16.0\" /\u003e"},{"lineNumber":107,"author":{"gitId":"Hzxin"},"content":"                                 \u003c/font\u003e"},{"lineNumber":108,"author":{"gitId":"Hzxin"},"content":"                              \u003c/Label\u003e"},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"                              \u003cLabel layoutX\u003d\"55.0\" layoutY\u003d\"22.0\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"5\"\u003e"},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":"                                 \u003cfont\u003e"},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":"                                    \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"16.0\" /\u003e"},{"lineNumber":112,"author":{"gitId":"Hzxin"},"content":"                                 \u003c/font\u003e"},{"lineNumber":113,"author":{"gitId":"Hzxin"},"content":"                              \u003c/Label\u003e"},{"lineNumber":114,"author":{"gitId":"Hzxin"},"content":"                              \u003cLabel layoutX\u003d\"55.0\" layoutY\u003d\"22.0\" text\u003d\"Sun\" GridPane.columnIndex\u003d\"6\"\u003e"},{"lineNumber":115,"author":{"gitId":"Hzxin"},"content":"                                 \u003cfont\u003e"},{"lineNumber":116,"author":{"gitId":"Hzxin"},"content":"                                    \u003cFont name\u003d\"Abyssinica SIL\" size\u003d\"16.0\" /\u003e"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":"                                 \u003c/font\u003e"},{"lineNumber":118,"author":{"gitId":"Hzxin"},"content":"                              \u003c/Label\u003e"},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":"                           \u003c/children\u003e"},{"lineNumber":120,"author":{"gitId":"Hzxin"},"content":"                        \u003c/GridPane\u003e"},{"lineNumber":121,"author":{"gitId":"Hzxin"},"content":"                     \u003c/children\u003e"},{"lineNumber":122,"author":{"gitId":"Hzxin"},"content":"                  \u003c/AnchorPane\u003e"},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":"               \u003c/children\u003e"},{"lineNumber":124,"author":{"gitId":"Hzxin"},"content":"            \u003c/HBox\u003e"},{"lineNumber":125,"author":{"gitId":"Hzxin"},"content":"         \u003c/root\u003e"},{"lineNumber":126,"author":{"gitId":"Hzxin"},"content":"      \u003c/Scene\u003e"},{"lineNumber":127,"author":{"gitId":"Hzxin"},"content":"   \u003c/scene\u003e"},{"lineNumber":128,"author":{"gitId":"Hzxin"},"content":"\u003c/Stage\u003e"}],"authorContributionMap":{"Hzxin":128}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Calendar\"\u003e"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"            \u003cMenuItem fx:id\u003d\"calendarMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCalendar\" text\u003d\"Calendar\" /\u003e"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"          \u003c/Menu\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"        \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Hzxin":11,"-":50}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Valid Person\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Person With Inv@lid Phone Field\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"-":5}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"-":4}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Alice Pauline\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"    \"name\": \"Hans Must@r\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"-":4}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"        String addPersonCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"        assertCommandFailure(addPersonCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":3,"-":155}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        assertCommandSuccess(new AddPersonCommand(validPerson), model,"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":4,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"public class AddPersonCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"                AddPersonCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addPersonCommand.execute(modelStub));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":10,"-":185}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"-":170}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddPersonCommand(expectedPersonMultipleTags));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY,"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"                new AddPersonCommand(expectedPerson));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, VALID_NAME_BOB,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, VALID_NAME_BOB,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, NAME_DESC_BOB"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"        // invalid value reported"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":19,"-":71}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getaddPersonCommand(person));"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"        assertEquals(new AddPersonCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":3,"-":98}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"                + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":112,"author":{"gitId":"markuz5116"},"content":"        String userInput \u003d targetIndex.getOneBased()"},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_FRIEND"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"markuz5116"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":117,"author":{"gitId":"markuz5116"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":8,"-":126}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"-":99}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        // Keywords does not match name"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\"));"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\")"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"                .build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":4,"-":71}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"-":74}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":2,"-":167}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_TAGS);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_TAGS);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"                new JsonAdaptedPerson(VALID_NAME, invalidTags);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":3,"-":53}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"        return new Person(name, tags);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":1,"-":56}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    public static String getaddPersonCommand(Person person) {"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":32,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":3,"-":50}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"            .build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":18,"-":48}}]
